stage: Image
task: 
data: Training

prompt:
Generate a Python method `forward` for the `RCF` class that performs the forward pass of the model. The method should take as input a tensor `x` with shape `(B, C, H, W)` and return a tensor of size `(B, self.num_features)`. The method should apply two convolution operations using `self.weights` and `self.biases`, followed by ReLU activation. The outputs should be pooled using adaptive average pooling, concatenated, and returned as a single tensor. If a single input is passed, the concatenation should occur along the channel dimension; if a batch is passed, it should occur along the feature dimension.

Class structure:

```python
class RCF:
    def __init__(self, in_channels: int = 4, features: int = 16, kernel_size: int = 3, bias: float = -1.0, seed: int | None = None, mode: str = 'gaussian', dataset: NonGeoDataset | None = None):
        self.weights = ...
        self.biases = ...
        pass

    def forward(self, x: Tensor) -> Tensor:
        # Implement the function as described in the prompt
```

 ground Truth:torchgeo/models/rcf.py

 repo:torchgeo

 function:forward
 
 class:RCF
 
 test_cases:tests/models/test_rcf.py
