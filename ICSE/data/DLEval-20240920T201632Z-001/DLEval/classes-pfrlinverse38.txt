stage: 
task: 
data: Training

prompt:
Generate a Python method `inverse` for the `EmpiricalNormalization` class that denormalizes the input `y` using the stored mean and variance. The method should multiply `y` by the standard deviation (calculated from `_var` and `eps`) and then add the mean (`_mean`). The method should return the denormalized output.

Class structure:

```python
class EmpiricalNormalization(nn.Module):
    def __init__(
        self,
        shape,
        batch_axis=0,
        eps=1e-2,
        dtype=np.float32,
        until=None,
        clip_threshold=None,
    ):
        self.batch_axis = batch_axis
        self.eps = dtype.type(eps)
        self.until = until
        self.clip_threshold = clip_threshold
        self.register_buffer(
            "_mean",
            torch.tensor(np.expand_dims(np.zeros(shape, dtype=dtype), batch_axis)),
        )
        self.register_buffer(
            "_var",
            torch.tensor(np.expand_dims(np.ones(shape, dtype=dtype), batch_axis)),
        )
        self.register_buffer("count", torch.tensor(0))



        def inverse(self, y):
            # Implement the function as described in the prompt


 ground Truth:pfrl/nn/empirical_normalization.py

 repo:pfrl

 function:inverse
 
 class:EmpiricalNormalization
 
 test_cases:tests/nn_tests/test_empirical_normalization.py
