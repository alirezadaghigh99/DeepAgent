stage: Tabular
task: 
data: Training

prompt:
Generate a Python method forward for the EmpiricalNormalization class that normalizes input values based on empirical values of the mean and variance. The method should take as input a tensor x and an optional update flag, which indicates whether the running statistics (mean and variance) should be updated based on the input value.                                                                                   class EmpiricalNormalization(nn.Module):
    def __init__(
        self,
        shape,
        batch_axis=0,
        eps=1e-2,
        dtype=np.float32,
        until=None,
        clip_threshold=None,
    ):
        self.batch_axis = batch_axis
        self.eps = dtype.type(eps)
        self.until = until
        self.clip_threshold = clip_threshold
        self.register_buffer(
            "_mean",
            torch.tensor(np.expand_dims(np.zeros(shape, dtype=dtype), batch_axis)),
        )
        self.register_buffer(
            "_var",
            torch.tensor(np.expand_dims(np.ones(shape, dtype=dtype), batch_axis)),
        )
        self.register_buffer("count", torch.tensor(0))

        # cache
        self._cached_std_inverse = None

    def experience(self, x):
        """Update running mean and variance based on input `x`.

        Args:
            x (torch.Tensor): Input values of shape `(batch_size, ...)`.
                The method updates the internal `_mean` and `_var` buffers
                to reflect the mean and variance of the data observed so far.

        """
        pass

    # Implement the forward function as described in the prompt


 ground Truth:pfrl/nn/empirical_normalization.py

 repo:pfrl

 function:forward
 
 class:EmpiricalNormalization
 
test_cases:tests/nn_tests/test_empirical_normalization.py
