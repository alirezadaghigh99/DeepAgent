stage: 
task: 
data: pre-post process

prompt:
Generate a Python function called `_get_matrix_inverse` that returns the inverse of the `_matrix` attribute of the `Rotate` class. The `_matrix` attribute is a tensor representing a batch of 3D rotation matrices.

```python
class Rotate(Transform3d):
    def __init__(
        self,
        R: torch.Tensor,
        dtype: torch.dtype = torch.float32,
        device: Optional[Device] = None,
        orthogonal_tol: float = 1e-5,
    ) -> None:
        device_ = get_device(R, device)
        super().__init__(device=device_, dtype=dtype)
        if R.dim() == 2:
            R = R[None]
        if R.shape[-2:] != (3, 3):
            msg = "R must have shape (3, 3) or (N, 3, 3); got %s"
            raise ValueError(msg % repr(R.shape))
        R = R.to(device=device_, dtype=dtype)
        if os.environ.get("PYTORCH3D_CHECK_ROTATION_MATRICES", "0") == "1":
            _check_valid_rotation_matrix(R, tol=orthogonal_tol)
        N = R.shape[0]
        mat = torch.eye(4, dtype=dtype, device=device_)
        mat = mat.view(1, 4, 4).repeat(N, 1, 1)
        mat[:, :3, :3] = R
        self._matrix = mat

    def _get_matrix_inverse(self) -> torch.Tensor:
```

 ground Truth:pytorch3d/transforms/transform3d.py

 repo:pytorch3d
 
 function:_get_matrix_inverse
 
 class:Rotate
 
 test_cases:tests/test_transforms.py::TestTransform

