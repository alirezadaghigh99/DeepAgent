stage: Image
task: 
data: pre-post process

prompt:
Generate a Python function called `apply_transform` that applies a Gaussian blur transformation to an input tensor using the provided parameters and flags. Ensure the function uses the internal `_gaussian_blur2d_fn` and properly handles the `sigma` parameter. The input is a tensor of shape `(C, H, W)` or `(B, C, H, W)` and the output is a tensor of shape `(B, C, H, W)`.

```python
class RandomGaussianBlur(IntensityAugmentationBase2D):
    def __init__(
        self,
        kernel_size: Union[Tuple[int, int], int],
        sigma: Union[Tuple[float, float], Tensor],
        border_type: str = "reflect",
        separable: bool = True,
        same_on_batch: bool = False,
        p: float = 0.5,
        keepdim: bool = False,
    ) -> None:
        super().__init__(p=p, same_on_batch=same_on_batch, p_batch=1.0, keepdim=keepdim)

        self.flags = {
            "kernel_size": kernel_size,
            "separable": separable,
            "border_type": BorderType.get(border_type),
        }
        self._param_generator = rg.RandomGaussianBlurGenerator(sigma)

        self._gaussian_blur2d_fn = gaussian_blur2d

    def apply_transform(
```

 ground Truth:kornia/augmentation/_2d/intensity/gaussian_blur.py

 repo:kornia

 function:apply_transfrom
 
 test_cases:tests/augmentation/test_augmentation.py::TestRandomGaussianBlur
 
 class:RandomGaussianBlur
