stage: 
task: Recommendation
data: Training

prompt:
Generate a Python function `gibbs_sampling` for the class `RBM` that performs Gibbs sampling to estimate the model configuration by iteratively sampling hidden and visible units. The function should return the sampled values of the hidden units (`h_k`) and visible units (`v_k`) after `k` sampling steps. The process starts by initializing the visible units (`self.v_k`) with the original data (`self.v`). The function involves alternating between sampling hidden units using `sample_hidden_units` and visible units using `sample_visible_units`, ensuring that unseen data (where `self.v` is zero) remains unchanged. the code should implement in tf

Class structure:

```python
class RBM:
    def __init__(self, possible_ratings, visible_units, hidden_units=500, keep_prob=0.7, init_stdv=0.1, learning_rate=0.004, minibatch_size=100, training_epoch=20, display_epoch=10, sampling_protocol=[50, 70, 80, 90, 100], debug=False, with_metrics=False, seed=42):
        self.v = None  # original input vector
        self.v_k = None  # visible units at step k
        self.k = None  # number of sampling steps
        pass

    def sample_hidden_units(self, vv):
        # Outputs activation probability of the hidden units and the sampled hidden units
        pass

    def sample_visible_units(self, h):
        # Outputs activation probability of the visible units and the sampled visible units
        pass

    def gibbs_sampling(self):
        # Implement the function as described in the prompt
```

 ground Truth:recommenders/models/rbm/rbm.py

 repo:recommenders

 function:gibs_sampling
 
 class:RBM
 
  test_cases:tests/unit/recommenders/models/test_rbm.py
