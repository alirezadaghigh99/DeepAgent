stage: 
task: Recommendation
data: Training

prompt:
Generate a Python function `losses` for the class `RBM` that calculates the contrastive divergence, which is the difference between the free energy clamped on the data (`vv`) and the model's free energy after Gibbs sampling (`self.v_k`). The function should return the contrastive divergence as a tensor. 
```python
class RBM:
    def __init__(self, possible_ratings, visible_units, hidden_units=500, keep_prob=0.7, init_stdv=0.1, learning_rate=0.004, minibatch_size=100, training_epoch=20, display_epoch=10, sampling_protocol=[50, 70, 80, 90, 100], debug=False, with_metrics=False, seed=42):
        self.v_k = None  # visible units at step k after Gibbs sampling
        pass

    def free_energy(self, x):
        # Outputs the free energy of the visible units given the hidden units
        pass

    def losses(self, vv):
        # Implement the function as described in the prompt
```

 ground Truth:recommenders/models/rbm/rbm.py

 repo:recommenders

 function:losses
 
 class:RBM
 
  test_cases:tests/unit/recommenders/models/test_rbm.py
