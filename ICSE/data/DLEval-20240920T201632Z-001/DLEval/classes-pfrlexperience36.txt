stage: 
task: 
data: Training

prompt:
Generate a Python method `experience` for the `EmpiricalNormalization` class that updates the running mean and variance of input values based on empirical data. The method should increment the count of observed samples, compute the mean and variance of the current batch of inputs, and update the running mean and variance using a weighted average. The method should only update the values if the total observed count is less than a specified threshold (`self.until`). The method should also handle edge cases where the batch size is zero.

Class structure:

```python
class EmpiricalNormalization(nn.Module):
    def __init__(
        self,
        shape,
        batch_axis=0,
        eps=1e-2,
        dtype=np.float32,
        until=None,
        clip_threshold=None,
    ):
        self.batch_axis = batch_axis
        self.eps = dtype.type(eps)
        self.until = until
        self.clip_threshold = clip_threshold
        self.register_buffer(
            "_mean",
            torch.tensor(np.expand_dims(np.zeros(shape, dtype=dtype), batch_axis)),
        )
        self.register_buffer(
            "_var",
            torch.tensor(np.expand_dims(np.ones(shape, dtype=dtype), batch_axis)),
        )
        self.register_buffer("count", torch.tensor(0))

        # cache
        self._cached_std_inverse = None

    def experience(self, x):
        # Implement the function as described in the prompt
```

 ground Truth:pfrl/nn/empirical_normalization.py

 repo:pfrl

 function:experience
 
 class:EmpiricalNormalization
 
 test_cases:tests/nn_tests/test_empirical_normalization.py
