stage: Image
task: 
data: pre-post process

prompt:
Generate a Python function `apply_transform` for the `RandomBrightness` class that applies a random brightness transformation to an input tensor image.The input types are `input` (a tensor), `params` (a dictionary containing the transformation parameters), `flags` (a dictionary for additional flags), and an optional `transform` tensor. The output is the transformed tensor.

```python
class RandomBrightness(IntensityAugmentationBase2D):
    def __init__(
        self,
        brightness: Tuple[float, float] = (1.0, 1.0),
        clip_output: bool = True,
        same_on_batch: bool = False,
        p: float = 1.0,
        keepdim: bool = False,
    ) -> None:
        super().__init__(p=p, same_on_batch=same_on_batch, keepdim=keepdim)
        self.brightness: Tensor = _range_bound(brightness, "brightness", center=1.0, bounds=(0.0, 2.0))
        self._param_generator = rg.PlainUniformGenerator((self.brightness, "brightness_factor", None, None))
        self.clip_output = clip_output
```

 ground Truth:kornia/augmentation/_2d/intensity/brightness.py

 repo:kornia

 function:apply_transform
 
 test_cases: tests/augmentation/test_augmentation.py::TestRandomBrightness
 
 class:RandomBrightness
