stage: 
task: Recommendation
data: Training

prompt:
Generate a Python function `batch_training` for the class `RBM` that performs training over a specified number of minibatches. The function should return the average training error per epoch if `self.with_metrics` is `True`; otherwise, it should return `0`. The function involves running the training operation (`self.opt`) using a TensorFlow session (`self.sess`). If `self.with_metrics` is enabled, it should also compute the root mean square error (`self.rmse`) and accumulate the training error over all minibatches, averaging it at the end.

Class structure:

```python
class RBM:
    def __init__(self, possible_ratings, visible_units, hidden_units=500, keep_prob=0.7, init_stdv=0.1, learning_rate=0.004, minibatch_size=100, training_epoch=20, display_epoch=10, sampling_protocol=[50, 70, 80, 90, 100], debug=False, with_metrics=False, seed=42):
        self.sess = None  # TensorFlow session
        self.opt = None  # optimizer operation for training
        self.rmse = None  # root mean square error operation for evaluation
        self.with_metrics = with_metrics  # flag to determine if metrics should be evaluated
        pass

    def batch_training(self, num_minibatches):
        # Implement the function as described in the prompt
```

 ground Truth:recommenders/models/rbm/rbm.py

 repo:recommenders

 function:batch_training
 
  test_cases:tests/unit/recommenders/models/test_rbm.py
  
  class:RBM
