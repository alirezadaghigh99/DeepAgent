stage: Pre-Post processing
task: 
data: Image

prompt:
Create a Python function `tensor_to_image` that converts a PyTorch tensor image to a NumPy array image. The function should:

- Accept a tensor as input, which can have one of the following shapes: `(H, W)`, `(C, H, W)`, or `(B, C, H, W)`.
- Convert the tensor to a NumPy array, handling cases where the tensor is in GPU memory by copying it back to CPU.
- Optionally, squeeze the dimensions if `keepdim` is `False`.
- Ensure the tensor is contiguous if `force_contiguous` is `True`.
- Return the converted image with the appropriate shape: `(H, W)`, `(H, W, C)`, or `(B, H, W, C)`.

Input types:
- `tensor`: A PyTorch tensor of shape `(H, W)`, `(C, H, W)`, or `(B, C, H, W)`.
- `keepdim`: A boolean indicating whether to retain the batch dimension.
- `force_contiguous`: A boolean indicating whether to make the tensor contiguous.

Output:
- Returns a NumPy array representing the image with the shape `(H, W)`, `(H, W, C)`, or `(B, H, W, C)`.

Errors:
- Raise a `TypeError` if the input is not a Tensor.
- Raise a `ValueError` if the input tensor's dimensions are not 2, 3, or 4.

 ground Truth:kornia/utils/image.py

 repo:kornia

 function:tensor_to_image
 
 test_cases:tests/utils/test_image_utils.py::test_tensor_to_image
