stage: 
task: Recommendation
data: Inference

prompt:
prompt = '''
""Generate a Python function `sample_visible_units` for the class `RBM` that samples the visible units given the hidden units (`h`). This function should return two tensors: the activation probability of the visible units (`pvh`) and the sampled visible units (`v_`). The function involves calculating a linear combination of the hidden units with the transpose of the weights (`self.w`) and the biases of the visible units (`self.bv`), followed by using `multinomial_distribution` to determine the conditional probability `pvh`. The visible units are then sampled using `multinomial_sampling`. A mask is applied to enforce zero values in the reconstructed vector for the inactive units as indicated by the original input (`self.v`). The code should implement in tensorflow

Class structure:

```python
class RBM:
    def __init__(self, possible_ratings, visible_units, hidden_units=500, keep_prob=0.7, init_stdv=0.1, learning_rate=0.004, minibatch_size=100, training_epoch=20, display_epoch=10, sampling_protocol=[50, 70, 80, 90, 100], debug=False, with_metrics=False, seed=42):
        self.w = None  # weights between visible and hidden units
        self.bv = None  # biases of the visible units
        self.v = None  # original input vector
        pass

    def multinomial_distribution(self, phi):
        # Outputs a tensor representing the probability distribution over the visible units
        pass

    def multinomial_sampling(self, pr):
        # Outputs a tensor representing sampled values of the visible units
        pass

    def sample_visible_units(self, h):
        # Implement the function as described in the prompt
```"
```"
'''
code = get_completion(prompt)

 ground Truth:recommenders/models/rbm/rbm.py

 repo:recommenders

 function:sample_visible_unit
 
 class:RBM
  
 test_cases:tests/unit/recommenders/models/test_rbm.py
