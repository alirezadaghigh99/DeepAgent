stage: Image
task: Segmentation
data: Inference

prompt:
Generate a Python function called `forward` that performs the forward pass of a simple 5-layer fully convolutional network (FCN) with leaky ReLUs and 'same' padding. The input is a tensor of shape `[N, C, H, W]`, and the output is a tensor of shape `[N, classes, H, W]`.

```python
class FCN(Module):
    def __init__(self, in_channels: int, classes: int, num_filters: int = 64) -> None:
        super().__init__()

        conv1 = nn.modules.Conv2d(
            in_channels, num_filters, kernel_size=3, stride=1, padding=1
        )
        conv2 = nn.modules.Conv2d(
            num_filters, num_filters, kernel_size=3, stride=1, padding=1
        )
        conv3 = nn.modules.Conv2d(
            num_filters, num_filters, kernel_size=3, stride=1, padding=1
        )
        conv4 = nn.modules.Conv2d(
            num_filters, num_filters, kernel_size=3, stride=1, padding=1
        )
        conv5 = nn.modules.Conv2d(
            num_filters, num_filters, kernel_size=3, stride=1, padding=1
        )

        self.backbone = nn.modules.Sequential(
            conv1,
            nn.modules.LeakyReLU(inplace=True),
            conv2,
            nn.modules.LeakyReLU(inplace=True),
            conv3,
            nn.modules.LeakyReLU(inplace=True),
            conv4,
            nn.modules.LeakyReLU(inplace=True),
            conv5,
            nn.modules.LeakyReLU(inplace=True),
        )

        self.last = nn.modules.Conv2d(
            num_filters, classes, kernel_size=1, stride=1, padding=0
        )

    def forward(self, x: Tensor) -> Tensor:
```

 ground Truth:torchgeo/models/fcn.py

 repo:torchgeo

 function:forward
 
 class:FCN
 
 test_cases:tests/models/test_fcn.py
