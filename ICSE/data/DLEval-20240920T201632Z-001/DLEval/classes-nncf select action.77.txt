stage: 
task: 
data: Inference

prompt:
Generate a Python function `select_action` for the class `DDPG` that selects an action based on the current state `s_t` and the current episode number. The function should use the actor network to predict the action, and if `decay_epsilon` is `True`, it should apply noise to the action by sampling from a truncated normal distribution with a decaying standard deviation (`self.delta`). The function should then clip the action to be within the bounds defined by `LBOUND` and `RBOUND`.

Class structure:

```python
class DDPG:
    LBOUND = 0.0
    RBOUND = 1.0

    def __init__(self, nb_states, nb_actions, iter_number: int = None, hparam_override: dict = None):
        self.actor = None  # actor network
        self.init_delta = 0.5  # initial delta for noise
        self.delta_decay = 0.995  # decay rate for delta
        self.warmup_iter_number = 20  # number of warmup iterations
        self.nb_actions = nb_actions  # number of actions
        pass

    def select_action(self, s_t, episode, decay_epsilon=True):
        # Implement the function as described in the prompt
```

This function should output a clipped action that is within the defined bounds, applying noise to encourage exploration during training.

 ground Truth:nncf/torch/automl/agent/ddpg/ddpg.py

 repo:nncf

 function: select_action
 
 test_cases:tests/torch/automl/test_ddpg.py::test_select_action
 
 class:DDPG
