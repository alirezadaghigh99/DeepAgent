output file:
processed_pytorch3dconvert_pointclouds_to_tensor214.json
function:
convert_pointclouds_to_tensor
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_points_alignment.py::TestICP::test_init_transformation', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_points_alignment.py::TestICP::test_compare_with_trimesh FAILED', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_points_alignment.py::TestICP::test_compare_with_trimesh', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_points_alignment.py::TestICP::test_init_transformation FAILED'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 3 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_points_alignment.py::TestICP::test_compare_with_trimesh FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_points_alignment.py::TestICP::test_heterogeneous_inputs FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_points_alignment.py::TestICP::test_init_transformation FAILED

=================================== FAILURES ===================================
______________________ TestICP.test_compare_with_trimesh _______________________

self = <tests.test_points_alignment.TestICP testMethod=test_compare_with_trimesh>

    def test_compare_with_trimesh(self):
        """
        Compares the outputs of `iterative_closest_point` with the results
        of `trimesh.registration.icp` from the `trimesh` python package:
        https://github.com/mikedh/trimesh
    
        We have run `trimesh.registration.icp` on several random problems
        with different point cloud sizes. The results of trimesh, together with
        the randomly generated input clouds are loaded in the constructor of
        this class and this test compares the loaded results to our runs.
        """
        for n_points_X in (10, 20, 50, 100):
            for n_points_Y in (10, 20, 50, 100):
>               self._compare_with_trimesh(n_points_X=n_points_X, n_points_Y=n_points_Y)

/local/data0/moved_data/pytorch3d/tests/test_points_alignment.py:257: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/tests/test_points_alignment.py:283: in _compare_with_trimesh
    ) = points_alignment.iterative_closest_point(
/local/data0/moved_data/pytorch3d/pytorch3d/ops/points_alignment.py:165: in iterative_closest_point
    Xt_nn_points = knn_points(
/local/data0/moved_data/pytorch3d/pytorch3d/ops/knn.py:189: in knn_points
    p1_dists, p1_idx = _knn_points.apply(
/local/data0/moved_data/pytorch3d/venv/lib/python3.8/site-packages/torch/autograd/function.py:574: in apply
    return super().apply(*args, **kwargs)  # type: ignore[misc]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ctx = <torch.autograd.function._knn_pointsBackward object at 0x7bc28c768040>
p1 = tensor([[[-7.6644e-02,  3.5988e-01, -7.8202e-01],
         [ 7.1528e-02,  6.6484e-01, -2.8678e-01],
         [ 1.6206e...
         [-7.8433e-02, -2.6398e-02, -5.0173e-02],
         [ 5.4569e-01,  1.0037e+00, -6.6791e-01]]], device='cuda:0')
p2 = tensor([[[-0.7658, -1.5857, -0.1757],
         [ 1.0614, -0.0049,  1.1813],
         [ 0.7498,  1.4699,  1.4263],
    ...4348,  0.9885,  0.3908],
         [ 1.1048, -0.2426, -0.1243],
         [-0.6120, -1.2204,  1.6596]]], device='cuda:0')
lengths1 = tensor([10, 10, 10, 10]), lengths2 = tensor([10, 10, 10, 10]), K = 1
version = -1, norm = 2, return_sorted = True

    @staticmethod
    # pyre-fixme[14]: `forward` overrides method defined in `Function` inconsistently.
    def forward(
        ctx,
        p1,
        p2,
        lengths1,
        lengths2,
        K,
        version,
        norm: int = 2,
        return_sorted: bool = True,
    ):
        """
        K-Nearest neighbors on point clouds.
    
        Args:
            p1: Tensor of shape (N, P1, D) giving a batch of N point clouds, each
                containing up to P1 points of dimension D.
            p2: Tensor of shape (N, P2, D) giving a batch of N point clouds, each
                containing up to P2 points of dimension D.
            lengths1: LongTensor of shape (N,) of values in the range [0, P1], giving the
                length of each pointcloud in p1. Or None to indicate that every cloud has
                length P1.
            lengths2: LongTensor of shape (N,) of values in the range [0, P2], giving the
                length of each pointcloud in p2. Or None to indicate that every cloud has
                length P2.
            K: Integer giving the number of nearest neighbors to return.
            version: Which KNN implementation to use in the backend. If version=-1,
                the correct implementation is selected based on the shapes of the inputs.
            norm: (int) indicating the norm. Only supports 1 (for L1) and 2 (for L2).
            return_sorted: (bool) whether to return the nearest neighbors sorted in
                ascending order of distance.
    
        Returns:
            p1_dists: Tensor of shape (N, P1, K) giving the squared distances to
                the nearest neighbors. This is padded with zeros both where a cloud in p2
                has fewer than K points and where a cloud in p1 has fewer than P1 points.
    
            p1_idx: LongTensor of shape (N, P1, K) giving the indices of the
                K nearest neighbors from points in p1 to points in p2.
                Concretely, if `p1_idx[n, i, k] = j` then `p2[n, j]` is the k-th nearest
                neighbors to `p1[n, i]` in `p2[n]`. This is padded with zeros both where a cloud
                in p2 has fewer than K points and where a cloud in p1 has fewer than P1 points.
        """
        if not ((norm == 1) or (norm == 2)):
            raise ValueError("Support for 1 or 2 norm.")
    
>       idx, dists = _C.knn_points_idx(p1, p2, lengths1, lengths2, norm, K, version)
E       RuntimeError: Tensor for argument #3 'lengths1' is on CPU, but expected it to be on GPU (while checking arguments for KNearestNeighborIdxCuda)

/local/data0/moved_data/pytorch3d/pytorch3d/ops/knn.py:74: RuntimeError
______________________ TestICP.test_heterogeneous_inputs _______________________

self = <tests.test_points_alignment.TestICP testMethod=test_heterogeneous_inputs>
batch_size = 7

    def test_heterogeneous_inputs(self, batch_size=7):
        """
        Tests whether we get the same result when running ICP on
        a set of randomly-sized Pointclouds and on their padded versions.
        """
    
        torch.manual_seed(4)
        device = torch.device("cuda:0")
    
        for estimate_scale in (True, False):
            for max_n_points in (10, 30, 100):
                # initialize ground truth point clouds
                X_pcl, Y_pcl = [
                    TestCorrespondingPointsAlignment.init_point_cloud(
                        batch_size=batch_size,
                        n_points=max_n_points,
                        dim=3,
                        device=device,
                        use_pointclouds=True,
                        random_pcl_size=True,
                    )
                    for _ in range(2)
                ]
    
                # get the padded versions and their num of points
                X_padded = X_pcl.points_padded()
                Y_padded = Y_pcl.points_padded()
                n_points_X = X_pcl.num_points_per_cloud()
                n_points_Y = Y_pcl.num_points_per_cloud()
    
                # run icp with Pointlouds inputs
                (
                    _,
                    _,
                    Xt_pcl,
                    (R_pcl, T_pcl, s_pcl),
                    _,
>               ) = points_alignment.iterative_closest_point(
                    X_pcl,
                    Y_pcl,
                    estimate_scale=estimate_scale,
                    allow_reflection=False,
                    verbose=False,
                    max_iterations=100,
                )

/local/data0/moved_data/pytorch3d/tests/test_points_alignment.py:200: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/ops/points_alignment.py:103: in iterative_closest_point
    Xt, num_points_X = oputil.convert_pointclouds_to_tensor(X)
/local/data0/moved_data/pytorch3d/pytorch3d/ops/utils.py:84: in convert_pointclouds_to_tensor
    return convert_pointclouds_to_tensor(pcl)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

pcl = <pytorch3d.structures.pointclouds.Pointclouds object at 0x7bc272abfa90>

    def convert_pointclouds_to_tensor(pcl: Union[torch.Tensor, 'Pointclouds']) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert a Pointclouds object or a torch.Tensor to a padded tensor representation.
    
        Args:
            pcl (Union[torch.Tensor, Pointclouds]): The input point cloud data.
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]: A tuple containing the padded tensor representation
                                               and the number of points per batch.
    
        Raises:
            ValueError: If the input is neither a Pointclouds object nor a torch.Tensor.
        """
        if isinstance(pcl, torch.Tensor):
            num_points = pcl.size(1)
            return (pcl, torch.tensor([num_points] * pcl.size(0), dtype=torch.int64))
        elif isinstance(pcl, Pointclouds):
>           padded_tensor = pcl.padded_to_tensor()
E           AttributeError: 'Pointclouds' object has no attribute 'padded_to_tensor'

/local/data0/moved_data/pytorch3d/pytorch3d/ops/temp.py:26: AttributeError
_______________________ TestICP.test_init_transformation _______________________

self = <tests.test_points_alignment.TestICP testMethod=test_init_transformation>
batch_size = 10

    def test_init_transformation(self, batch_size=10):
        """
        First runs a full ICP on a random problem. Then takes a given point
        in the history of ICP iteration transformations, initializes
        a second run of ICP with this transformation and checks whether
        both runs ended with the same solution.
        """
    
        device = torch.device("cuda:0")
    
        for dim in (2, 3, 11):
            for n_points_X in (30, 100):
                for n_points_Y in (30, 100):
                    # initialize ground truth point clouds
                    X, Y = [
                        TestCorrespondingPointsAlignment.init_point_cloud(
                            batch_size=batch_size,
                            n_points=n_points,
                            dim=dim,
                            device=device,
                            use_pointclouds=False,
                            random_pcl_size=True,
                        )
                        for n_points in (n_points_X, n_points_Y)
                    ]
    
                    # run full icp
                    (
                        converged,
                        _,
                        Xt,
                        (R, T, s),
                        t_hist,
>                   ) = points_alignment.iterative_closest_point(
                        X,
                        Y,
                        estimate_scale=False,
                        allow_reflection=False,
                        verbose=False,
                        max_iterations=100,
                    )

/local/data0/moved_data/pytorch3d/tests/test_points_alignment.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/ops/points_alignment.py:165: in iterative_closest_point
    Xt_nn_points = knn_points(
/local/data0/moved_data/pytorch3d/pytorch3d/ops/knn.py:189: in knn_points
    p1_dists, p1_idx = _knn_points.apply(
/local/data0/moved_data/pytorch3d/venv/lib/python3.8/site-packages/torch/autograd/function.py:574: in apply
    return super().apply(*args, **kwargs)  # type: ignore[misc]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ctx = <torch.autograd.function._knn_pointsBackward object at 0x7bc28c768ae0>
p1 = tensor([[[ 1.9402e-01,  2.1614e+00],
         [-1.7205e-01,  8.4906e-01],
         [-1.9244e+00,  6.5299e-01],
       ...-3.6217e-01, -5.8366e-01],
         [-1.7007e+00,  3.6993e-01],
         [ 7.4330e-01, -1.1991e-01]]], device='cuda:0')
p2 = tensor([[[ 1.3914e-01, -1.0822e-01],
         [-7.1742e-01,  7.5665e-01],
         [ 3.7149e-01, -1.0049e+00],
       ...-1.3905e+00, -1.1239e+00],
         [-1.7510e-02,  4.8009e-01],
         [-1.6156e-01, -1.1643e+00]]], device='cuda:0')
lengths1 = tensor([30, 30, 30, 30, 30, 30, 30, 30, 30, 30])
lengths2 = tensor([30, 30, 30, 30, 30, 30, 30, 30, 30, 30]), K = 1, version = -1
norm = 2, return_sorted = True

    @staticmethod
    # pyre-fixme[14]: `forward` overrides method defined in `Function` inconsistently.
    def forward(
        ctx,
        p1,
        p2,
        lengths1,
        lengths2,
        K,
        version,
        norm: int = 2,
        return_sorted: bool = True,
    ):
        """
        K-Nearest neighbors on point clouds.
    
        Args:
            p1: Tensor of shape (N, P1, D) giving a batch of N point clouds, each
                containing up to P1 points of dimension D.
            p2: Tensor of shape (N, P2, D) giving a batch of N point clouds, each
                containing up to P2 points of dimension D.
            lengths1: LongTensor of shape (N,) of values in the range [0, P1], giving the
                length of each pointcloud in p1. Or None to indicate that every cloud has
                length P1.
            lengths2: LongTensor of shape (N,) of values in the range [0, P2], giving the
                length of each pointcloud in p2. Or None to indicate that every cloud has
                length P2.
            K: Integer giving the number of nearest neighbors to return.
            version: Which KNN implementation to use in the backend. If version=-1,
                the correct implementation is selected based on the shapes of the inputs.
            norm: (int) indicating the norm. Only supports 1 (for L1) and 2 (for L2).
            return_sorted: (bool) whether to return the nearest neighbors sorted in
                ascending order of distance.
    
        Returns:
            p1_dists: Tensor of shape (N, P1, K) giving the squared distances to
                the nearest neighbors. This is padded with zeros both where a cloud in p2
                has fewer than K points and where a cloud in p1 has fewer than P1 points.
    
            p1_idx: LongTensor of shape (N, P1, K) giving the indices of the
                K nearest neighbors from points in p1 to points in p2.
                Concretely, if `p1_idx[n, i, k] = j` then `p2[n, j]` is the k-th nearest
                neighbors to `p1[n, i]` in `p2[n]`. This is padded with zeros both where a cloud
                in p2 has fewer than K points and where a cloud in p1 has fewer than P1 points.
        """
        if not ((norm == 1) or (norm == 2)):
            raise ValueError("Support for 1 or 2 norm.")
    
>       idx, dists = _C.knn_points_idx(p1, p2, lengths1, lengths2, norm, K, version)
E       RuntimeError: Tensor for argument #3 'lengths1' is on CPU, but expected it to be on GPU (while checking arguments for KNearestNeighborIdxCuda)

/local/data0/moved_data/pytorch3d/pytorch3d/ops/knn.py:74: RuntimeError
=============================== warnings summary ===============================
tests/test_points_alignment.py::TestICP::test_compare_with_trimesh
tests/test_points_alignment.py::TestICP::test_heterogeneous_inputs
tests/test_points_alignment.py::TestICP::test_init_transformation
  /local/data0/moved_data/pytorch3d/tests/test_points_alignment.py:48: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
    self.trimesh_results = torch.load(trimesh_results_path)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_points_alignment.py::TestICP::test_compare_with_trimesh
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_points_alignment.py::TestICP::test_heterogeneous_inputs
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_points_alignment.py::TestICP::test_init_transformation
======================== 3 failed, 3 warnings in 1.36s =========================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 3 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_points_alignment.py::TestICP::test_compare_with_trimesh PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_points_alignment.py::TestICP::test_heterogeneous_inputs FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_points_alignment.py::TestICP::test_init_transformation PASSED

=================================== FAILURES ===================================
______________________ TestICP.test_heterogeneous_inputs _______________________

self = <tests.test_points_alignment.TestICP testMethod=test_heterogeneous_inputs>
batch_size = 7

    def test_heterogeneous_inputs(self, batch_size=7):
        """
        Tests whether we get the same result when running ICP on
        a set of randomly-sized Pointclouds and on their padded versions.
        """
    
        torch.manual_seed(4)
        device = torch.device("cuda:0")
    
        for estimate_scale in (True, False):
            for max_n_points in (10, 30, 100):
                # initialize ground truth point clouds
                X_pcl, Y_pcl = [
                    TestCorrespondingPointsAlignment.init_point_cloud(
                        batch_size=batch_size,
                        n_points=max_n_points,
                        dim=3,
                        device=device,
                        use_pointclouds=True,
                        random_pcl_size=True,
                    )
                    for _ in range(2)
                ]
    
                # get the padded versions and their num of points
                X_padded = X_pcl.points_padded()
                Y_padded = Y_pcl.points_padded()
                n_points_X = X_pcl.num_points_per_cloud()
                n_points_Y = Y_pcl.num_points_per_cloud()
    
                # run icp with Pointlouds inputs
                (
                    _,
                    _,
                    Xt_pcl,
                    (R_pcl, T_pcl, s_pcl),
                    _,
                ) = points_alignment.iterative_closest_point(
                    X_pcl,
                    Y_pcl,
                    estimate_scale=estimate_scale,
                    allow_reflection=False,
                    verbose=False,
                    max_iterations=100,
                )
                Xt_pcl = Xt_pcl.points_padded()
    
                # run icp with tensor inputs on each element
                # of the batch separately
                icp_results = [
                    points_alignment.iterative_closest_point(
                        X_[None, :n_X, :],
                        Y_[None, :n_Y, :],
                        estimate_scale=estimate_scale,
                        allow_reflection=False,
                        verbose=False,
                        max_iterations=100,
                    )
                    for X_, Y_, n_X, n_Y in zip(
                        X_padded, Y_padded, n_points_X, n_points_Y
                    )
                ]
    
                # parse out the transformation results
                R, T, s = [
                    torch.cat([x.RTs[i] for x in icp_results], dim=0) for i in range(3)
                ]
    
                # check that both sets of transforms are the same
                atol = 1e-5
>               self.assertClose(R_pcl, R, atol=atol)

/local/data0/moved_data/pytorch3d/tests/test_points_alignment.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/tests/common_testing.py:209: in assertClose
    self.fail(err)
E   AssertionError: Not close. Max diff 1.4095808267593384. Max relative diff 9.08298397064209 Shape (7, 3, 3). At (4, 0, 0).
=============================== warnings summary ===============================
tests/test_points_alignment.py::TestICP::test_compare_with_trimesh
tests/test_points_alignment.py::TestICP::test_heterogeneous_inputs
tests/test_points_alignment.py::TestICP::test_init_transformation
  /local/data0/moved_data/pytorch3d/tests/test_points_alignment.py:48: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
    self.trimesh_results = torch.load(trimesh_results_path)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_points_alignment.py::TestICP::test_heterogeneous_inputs
=================== 1 failed, 2 passed, 3 warnings in 1.92s ====================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 3 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_points_alignment.py::TestICP::test_compare_with_trimesh PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_points_alignment.py::TestICP::test_heterogeneous_inputs FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_points_alignment.py::TestICP::test_init_transformation PASSED

=================================== FAILURES ===================================
______________________ TestICP.test_heterogeneous_inputs _______________________

self = <tests.test_points_alignment.TestICP testMethod=test_heterogeneous_inputs>
batch_size = 7

    def test_heterogeneous_inputs(self, batch_size=7):
        """
        Tests whether we get the same result when running ICP on
        a set of randomly-sized Pointclouds and on their padded versions.
        """
    
        torch.manual_seed(4)
        device = torch.device("cuda:0")
    
        for estimate_scale in (True, False):
            for max_n_points in (10, 30, 100):
                # initialize ground truth point clouds
                X_pcl, Y_pcl = [
                    TestCorrespondingPointsAlignment.init_point_cloud(
                        batch_size=batch_size,
                        n_points=max_n_points,
                        dim=3,
                        device=device,
                        use_pointclouds=True,
                        random_pcl_size=True,
                    )
                    for _ in range(2)
                ]
    
                # get the padded versions and their num of points
                X_padded = X_pcl.points_padded()
                Y_padded = Y_pcl.points_padded()
                n_points_X = X_pcl.num_points_per_cloud()
                n_points_Y = Y_pcl.num_points_per_cloud()
    
                # run icp with Pointlouds inputs
                (
                    _,
                    _,
                    Xt_pcl,
                    (R_pcl, T_pcl, s_pcl),
                    _,
                ) = points_alignment.iterative_closest_point(
                    X_pcl,
                    Y_pcl,
                    estimate_scale=estimate_scale,
                    allow_reflection=False,
                    verbose=False,
                    max_iterations=100,
                )
                Xt_pcl = Xt_pcl.points_padded()
    
                # run icp with tensor inputs on each element
                # of the batch separately
                icp_results = [
                    points_alignment.iterative_closest_point(
                        X_[None, :n_X, :],
                        Y_[None, :n_Y, :],
                        estimate_scale=estimate_scale,
                        allow_reflection=False,
                        verbose=False,
                        max_iterations=100,
                    )
                    for X_, Y_, n_X, n_Y in zip(
                        X_padded, Y_padded, n_points_X, n_points_Y
                    )
                ]
    
                # parse out the transformation results
                R, T, s = [
                    torch.cat([x.RTs[i] for x in icp_results], dim=0) for i in range(3)
                ]
    
                # check that both sets of transforms are the same
                atol = 1e-5
>               self.assertClose(R_pcl, R, atol=atol)

/local/data0/moved_data/pytorch3d/tests/test_points_alignment.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/tests/common_testing.py:209: in assertClose
    self.fail(err)
E   AssertionError: Not close. Max diff 1.4095808267593384. Max relative diff 9.08298397064209 Shape (7, 3, 3). At (4, 0, 0).
=============================== warnings summary ===============================
tests/test_points_alignment.py::TestICP::test_compare_with_trimesh
tests/test_points_alignment.py::TestICP::test_heterogeneous_inputs
tests/test_points_alignment.py::TestICP::test_init_transformation
  /local/data0/moved_data/pytorch3d/tests/test_points_alignment.py:48: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
    self.trimesh_results = torch.load(trimesh_results_path)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_points_alignment.py::TestICP::test_heterogeneous_inputs
=================== 1 failed, 2 passed, 3 warnings in 1.90s ====================
