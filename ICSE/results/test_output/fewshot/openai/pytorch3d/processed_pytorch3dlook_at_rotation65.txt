output file:
processed_pytorch3dlook_at_rotation65.json
function:
look_at_rotation
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_tensor_grad FAILED', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_get_full_transform', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_python_list FAILED', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_tensor_broadcast', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_from_eye_point_tuple FAILED', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_view_transform', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_list_broadcast', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_view_transform_class_method FAILED', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_view_transform FAILED', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_default_values FAILED', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_python_list', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_list_broadcast FAILED', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_get_full_transform FAILED', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_view_transform_class_method', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_default_values', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_tensor_grad', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_from_eye_point_tuple', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_non_default_at_position FAILED', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_tensor_broadcast FAILED', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_non_default_at_position'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 65 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_mixed_scalars PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_python_scalar PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_python_scalar_radians PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_torch_scalar_grads PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_torch_scalars PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_vectors PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_vectors_bad_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_vectors_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_vectors_mixed_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_vectors_mixed_broadcast_grads PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_input_fail FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_list_broadcast FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_python_list FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_tensor_broadcast FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_tensor_grad FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_corner_case FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_default_values FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_from_eye_point_tuple FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_non_default_at_position FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_view_transform FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_K PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_clone PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_equiv_project_points PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_get_camera_center PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_iterable PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_join_batch_orthographic PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_join_batch_perspective PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_join_cameras_as_batch_errors PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_project_points_screen PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_unproject_points PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_view_transform_class_method FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_camera_class_init PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_get_full_transform FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_getitem PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_perspective PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_perspective_kwargs PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_perspective_mixed_inputs_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_perspective_mixed_inputs_grad PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_perspective_type PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_transform_points PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_getitem PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_orthographic PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_orthographic_kwargs PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_orthographic_mixed_inputs_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_orthographic_mixed_inputs_grad PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_orthographic_scaled PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_perspective_type PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestOrthographicProjection::test_getitem PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestOrthographicProjection::test_orthographic PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestOrthographicProjection::test_orthographic_kwargs PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestOrthographicProjection::test_orthographic_scaled PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestOrthographicProjection::test_perspective_type PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestPerspectiveProjection::test_clone_picklable PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestPerspectiveProjection::test_getitem PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestPerspectiveProjection::test_perspective PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestPerspectiveProjection::test_perspective_kwargs PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestPerspectiveProjection::test_perspective_scaled PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestPerspectiveProjection::test_perspective_type PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_cuda PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_distortion_params_set_to_zeors PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_fisheye_against_perspective_cameras PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_getitem PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_project_shape_broadcasts PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_unhandled_shape PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_unproject_shape_broadcasts PASSED

=================================== FAILURES ===================================
______________ TestCameraHelpers.test_look_at_rotation_input_fail ______________

self = <tests.test_cameras.TestCameraHelpers testMethod=test_look_at_rotation_input_fail>

    def test_look_at_rotation_input_fail(self):
        camera_position = [-1.0]  # expected to have xyz positions
        with self.assertRaises(ValueError):
>           look_at_rotation(camera_position)

/local/data0/moved_data/pytorch3d/tests/test_cameras.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1121: in look_at_rotation
    return look_at_rotation(camera_position, at, up, device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def look_at_rotation(camera_position, at, up, device='cpu'):
        """
        Generate a batched rotation matrix representing the transformation from world coordinates to view coordinates.
    
        Args:
            camera_position: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            at: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            up: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            device: The device type ('cpu' or 'cuda').
    
        Returns:
            R: Batched rotation matrix of shape (N, 3, 3).
        """
        if not isinstance(camera_position, torch.Tensor):
            camera_position = torch.tensor(camera_position, dtype=torch.float32, device=device)
        if not isinstance(at, torch.Tensor):
            at = torch.tensor(at, dtype=torch.float32, device=device)
        if not isinstance(up, torch.Tensor):
            up = torch.tensor(up, dtype=torch.float32, device=device)
        if camera_position.dim() == 1:
            camera_position = camera_position.unsqueeze(0)
        if at.dim() == 1:
            at = at.unsqueeze(0)
        if up.dim() == 1:
            up = up.unsqueeze(0)
        z_axis = at - camera_position
        z_axis = z_axis / torch.norm(z_axis, dim=1, keepdim=True)
        x_axis = torch.cross(up, z_axis)
        x_axis_norm = torch.norm(x_axis, dim=1, keepdim=True)
>       x_axis[x_axis_norm < 1e-06] = torch.tensor([1.0, 0.0, 0.0], device=device)
E       IndexError: The shape of the mask [1, 1] at index 1 does not match the shape of the indexed tensor [1, 3] at index 1

/local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:42: IndexError
____________ TestCameraHelpers.test_look_at_rotation_list_broadcast ____________

self = <tests.test_cameras.TestCameraHelpers testMethod=test_look_at_rotation_list_broadcast>

    def test_look_at_rotation_list_broadcast(self):
        # fmt: off
        camera_positions = [[0.0, 0.0, -1.0], [0.0, 0.0, 1.0]]
        rot_mats_expected = torch.tensor(
            [
                [
                    [1.0, 0.0, 0.0],
                    [0.0, 1.0, 0.0],
                    [0.0, 0.0, 1.0]
                ],
                [
                    [-1.0, 0.0,  0.0],  # noqa: E241, E201
                    [ 0.0, 1.0,  0.0],  # noqa: E241, E201
                    [ 0.0, 0.0, -1.0]   # noqa: E241, E201
                ],
            ],
            dtype=torch.float32
        )
        # fmt: on
>       rot_mats = look_at_rotation(camera_positions)

/local/data0/moved_data/pytorch3d/tests/test_cameras.py:365: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1121: in look_at_rotation
    return look_at_rotation(camera_position, at, up, device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

camera_position = tensor([[ 0.,  0., -1.],
        [ 0.,  0.,  1.]])
at = tensor([[0., 0., 0.]]), up = tensor([[0., 1., 0.]]), device = 'cpu'

    def look_at_rotation(camera_position, at, up, device='cpu'):
        """
        Generate a batched rotation matrix representing the transformation from world coordinates to view coordinates.
    
        Args:
            camera_position: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            at: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            up: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            device: The device type ('cpu' or 'cuda').
    
        Returns:
            R: Batched rotation matrix of shape (N, 3, 3).
        """
        if not isinstance(camera_position, torch.Tensor):
            camera_position = torch.tensor(camera_position, dtype=torch.float32, device=device)
        if not isinstance(at, torch.Tensor):
            at = torch.tensor(at, dtype=torch.float32, device=device)
        if not isinstance(up, torch.Tensor):
            up = torch.tensor(up, dtype=torch.float32, device=device)
        if camera_position.dim() == 1:
            camera_position = camera_position.unsqueeze(0)
        if at.dim() == 1:
            at = at.unsqueeze(0)
        if up.dim() == 1:
            up = up.unsqueeze(0)
        z_axis = at - camera_position
        z_axis = z_axis / torch.norm(z_axis, dim=1, keepdim=True)
        x_axis = torch.cross(up, z_axis)
        x_axis_norm = torch.norm(x_axis, dim=1, keepdim=True)
>       x_axis[x_axis_norm < 1e-06] = torch.tensor([1.0, 0.0, 0.0], device=device)
E       IndexError: The shape of the mask [2, 1] at index 1 does not match the shape of the indexed tensor [2, 3] at index 1

/local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:42: IndexError
_____________ TestCameraHelpers.test_look_at_rotation_python_list ______________

self = <tests.test_cameras.TestCameraHelpers testMethod=test_look_at_rotation_python_list>

    def test_look_at_rotation_python_list(self):
        camera_position = [[0.0, 0.0, -1.0]]  # camera pointing along negative z
>       rot_mat = look_at_rotation(camera_position)

/local/data0/moved_data/pytorch3d/tests/test_cameras.py:338: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1121: in look_at_rotation
    return look_at_rotation(camera_position, at, up, device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

camera_position = tensor([[ 0.,  0., -1.]]), at = tensor([[0., 0., 0.]])
up = tensor([[0., 1., 0.]]), device = 'cpu'

    def look_at_rotation(camera_position, at, up, device='cpu'):
        """
        Generate a batched rotation matrix representing the transformation from world coordinates to view coordinates.
    
        Args:
            camera_position: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            at: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            up: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            device: The device type ('cpu' or 'cuda').
    
        Returns:
            R: Batched rotation matrix of shape (N, 3, 3).
        """
        if not isinstance(camera_position, torch.Tensor):
            camera_position = torch.tensor(camera_position, dtype=torch.float32, device=device)
        if not isinstance(at, torch.Tensor):
            at = torch.tensor(at, dtype=torch.float32, device=device)
        if not isinstance(up, torch.Tensor):
            up = torch.tensor(up, dtype=torch.float32, device=device)
        if camera_position.dim() == 1:
            camera_position = camera_position.unsqueeze(0)
        if at.dim() == 1:
            at = at.unsqueeze(0)
        if up.dim() == 1:
            up = up.unsqueeze(0)
        z_axis = at - camera_position
        z_axis = z_axis / torch.norm(z_axis, dim=1, keepdim=True)
        x_axis = torch.cross(up, z_axis)
        x_axis_norm = torch.norm(x_axis, dim=1, keepdim=True)
>       x_axis[x_axis_norm < 1e-06] = torch.tensor([1.0, 0.0, 0.0], device=device)
E       IndexError: The shape of the mask [1, 1] at index 1 does not match the shape of the indexed tensor [1, 3] at index 1

/local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:42: IndexError
___________ TestCameraHelpers.test_look_at_rotation_tensor_broadcast ___________

self = <tests.test_cameras.TestCameraHelpers testMethod=test_look_at_rotation_tensor_broadcast>

    def test_look_at_rotation_tensor_broadcast(self):
        # fmt: off
        camera_positions = torch.tensor([
            [0.0, 0.0, -1.0],
            [0.0, 0.0,  1.0]   # noqa: E241, E201
        ], dtype=torch.float32)
        rot_mats_expected = torch.tensor(
            [
                [
                    [1.0, 0.0, 0.0],
                    [0.0, 1.0, 0.0],
                    [0.0, 0.0, 1.0]
                ],
                [
                    [-1.0, 0.0,  0.0],  # noqa: E241, E201
                    [ 0.0, 1.0,  0.0],  # noqa: E241, E201
                    [ 0.0, 0.0, -1.0]   # noqa: E241, E201
                ],
            ],
            dtype=torch.float32
        )
        # fmt: on
>       rot_mats = look_at_rotation(camera_positions)

/local/data0/moved_data/pytorch3d/tests/test_cameras.py:390: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1121: in look_at_rotation
    return look_at_rotation(camera_position, at, up, device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

camera_position = tensor([[ 0.,  0., -1.],
        [ 0.,  0.,  1.]])
at = tensor([[0., 0., 0.]]), up = tensor([[0., 1., 0.]]), device = 'cpu'

    def look_at_rotation(camera_position, at, up, device='cpu'):
        """
        Generate a batched rotation matrix representing the transformation from world coordinates to view coordinates.
    
        Args:
            camera_position: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            at: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            up: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            device: The device type ('cpu' or 'cuda').
    
        Returns:
            R: Batched rotation matrix of shape (N, 3, 3).
        """
        if not isinstance(camera_position, torch.Tensor):
            camera_position = torch.tensor(camera_position, dtype=torch.float32, device=device)
        if not isinstance(at, torch.Tensor):
            at = torch.tensor(at, dtype=torch.float32, device=device)
        if not isinstance(up, torch.Tensor):
            up = torch.tensor(up, dtype=torch.float32, device=device)
        if camera_position.dim() == 1:
            camera_position = camera_position.unsqueeze(0)
        if at.dim() == 1:
            at = at.unsqueeze(0)
        if up.dim() == 1:
            up = up.unsqueeze(0)
        z_axis = at - camera_position
        z_axis = z_axis / torch.norm(z_axis, dim=1, keepdim=True)
        x_axis = torch.cross(up, z_axis)
        x_axis_norm = torch.norm(x_axis, dim=1, keepdim=True)
>       x_axis[x_axis_norm < 1e-06] = torch.tensor([1.0, 0.0, 0.0], device=device)
E       IndexError: The shape of the mask [2, 1] at index 1 does not match the shape of the indexed tensor [2, 3] at index 1

/local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:42: IndexError
_____________ TestCameraHelpers.test_look_at_rotation_tensor_grad ______________

self = <tests.test_cameras.TestCameraHelpers testMethod=test_look_at_rotation_tensor_grad>

    def test_look_at_rotation_tensor_grad(self):
        camera_position = torch.tensor([[0.0, 0.0, -1.0]], requires_grad=True)
>       rot_mat = look_at_rotation(camera_position)

/local/data0/moved_data/pytorch3d/tests/test_cameras.py:395: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1121: in look_at_rotation
    return look_at_rotation(camera_position, at, up, device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

camera_position = tensor([[ 0.,  0., -1.]], requires_grad=True)
at = tensor([[0., 0., 0.]]), up = tensor([[0., 1., 0.]]), device = 'cpu'

    def look_at_rotation(camera_position, at, up, device='cpu'):
        """
        Generate a batched rotation matrix representing the transformation from world coordinates to view coordinates.
    
        Args:
            camera_position: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            at: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            up: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            device: The device type ('cpu' or 'cuda').
    
        Returns:
            R: Batched rotation matrix of shape (N, 3, 3).
        """
        if not isinstance(camera_position, torch.Tensor):
            camera_position = torch.tensor(camera_position, dtype=torch.float32, device=device)
        if not isinstance(at, torch.Tensor):
            at = torch.tensor(at, dtype=torch.float32, device=device)
        if not isinstance(up, torch.Tensor):
            up = torch.tensor(up, dtype=torch.float32, device=device)
        if camera_position.dim() == 1:
            camera_position = camera_position.unsqueeze(0)
        if at.dim() == 1:
            at = at.unsqueeze(0)
        if up.dim() == 1:
            up = up.unsqueeze(0)
        z_axis = at - camera_position
        z_axis = z_axis / torch.norm(z_axis, dim=1, keepdim=True)
        x_axis = torch.cross(up, z_axis)
        x_axis_norm = torch.norm(x_axis, dim=1, keepdim=True)
>       x_axis[x_axis_norm < 1e-06] = torch.tensor([1.0, 0.0, 0.0], device=device)
E       IndexError: The shape of the mask [1, 1] at index 1 does not match the shape of the indexed tensor [1, 3] at index 1

/local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:42: IndexError
__________ TestCameraHelpers.test_look_at_view_transform_corner_case ___________

self = <tests.test_cameras.TestCameraHelpers testMethod=test_look_at_view_transform_corner_case>

    def test_look_at_view_transform_corner_case(self):
        dist = 2.7
        elev = 90
        azim = 90
        expected_position = torch.tensor([0.0, 2.7, 0.0], dtype=torch.float32).view(
            1, 3
        )
        position = camera_position_from_spherical_angles(dist, elev, azim)
        self.assertClose(position, expected_position, atol=2e-7)
>       R, _ = look_at_view_transform(eye=position)

/local/data0/moved_data/pytorch3d/tests/test_cameras.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1204: in look_at_view_transform
    R = look_at_rotation(C, at, up, device=device)
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1121: in look_at_rotation
    return look_at_rotation(camera_position, at, up, device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

camera_position = tensor([[-1.1802e-07,  2.7000e+00,  5.1589e-15]])
at = tensor([[0., 0., 0.]]), up = tensor([[0., 1., 0.]]), device = 'cpu'

    def look_at_rotation(camera_position, at, up, device='cpu'):
        """
        Generate a batched rotation matrix representing the transformation from world coordinates to view coordinates.
    
        Args:
            camera_position: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            at: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            up: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            device: The device type ('cpu' or 'cuda').
    
        Returns:
            R: Batched rotation matrix of shape (N, 3, 3).
        """
        if not isinstance(camera_position, torch.Tensor):
            camera_position = torch.tensor(camera_position, dtype=torch.float32, device=device)
        if not isinstance(at, torch.Tensor):
            at = torch.tensor(at, dtype=torch.float32, device=device)
        if not isinstance(up, torch.Tensor):
            up = torch.tensor(up, dtype=torch.float32, device=device)
        if camera_position.dim() == 1:
            camera_position = camera_position.unsqueeze(0)
        if at.dim() == 1:
            at = at.unsqueeze(0)
        if up.dim() == 1:
            up = up.unsqueeze(0)
        z_axis = at - camera_position
        z_axis = z_axis / torch.norm(z_axis, dim=1, keepdim=True)
        x_axis = torch.cross(up, z_axis)
        x_axis_norm = torch.norm(x_axis, dim=1, keepdim=True)
>       x_axis[x_axis_norm < 1e-06] = torch.tensor([1.0, 0.0, 0.0], device=device)
E       IndexError: The shape of the mask [1, 1] at index 1 does not match the shape of the indexed tensor [1, 3] at index 1

/local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:42: IndexError
_________ TestCameraHelpers.test_look_at_view_transform_default_values _________

self = <tests.test_cameras.TestCameraHelpers testMethod=test_look_at_view_transform_default_values>

    def test_look_at_view_transform_default_values(self):
        dist = 1.0
        elev = 0.0
        azim = 0.0
        # Using passed values for dist, elev, azim
>       R, t = look_at_view_transform(dist, elev, azim)

/local/data0/moved_data/pytorch3d/tests/test_cameras.py:182: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1204: in look_at_view_transform
    R = look_at_rotation(C, at, up, device=device)
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1121: in look_at_rotation
    return look_at_rotation(camera_position, at, up, device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

camera_position = tensor([[0., 0., 1.]]), at = tensor([[0., 0., 0.]])
up = tensor([[0., 1., 0.]]), device = 'cpu'

    def look_at_rotation(camera_position, at, up, device='cpu'):
        """
        Generate a batched rotation matrix representing the transformation from world coordinates to view coordinates.
    
        Args:
            camera_position: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            at: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            up: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            device: The device type ('cpu' or 'cuda').
    
        Returns:
            R: Batched rotation matrix of shape (N, 3, 3).
        """
        if not isinstance(camera_position, torch.Tensor):
            camera_position = torch.tensor(camera_position, dtype=torch.float32, device=device)
        if not isinstance(at, torch.Tensor):
            at = torch.tensor(at, dtype=torch.float32, device=device)
        if not isinstance(up, torch.Tensor):
            up = torch.tensor(up, dtype=torch.float32, device=device)
        if camera_position.dim() == 1:
            camera_position = camera_position.unsqueeze(0)
        if at.dim() == 1:
            at = at.unsqueeze(0)
        if up.dim() == 1:
            up = up.unsqueeze(0)
        z_axis = at - camera_position
        z_axis = z_axis / torch.norm(z_axis, dim=1, keepdim=True)
        x_axis = torch.cross(up, z_axis)
        x_axis_norm = torch.norm(x_axis, dim=1, keepdim=True)
>       x_axis[x_axis_norm < 1e-06] = torch.tensor([1.0, 0.0, 0.0], device=device)
E       IndexError: The shape of the mask [1, 1] at index 1 does not match the shape of the indexed tensor [1, 3] at index 1

/local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:42: IndexError
______ TestCameraHelpers.test_look_at_view_transform_from_eye_point_tuple ______

self = <tests.test_cameras.TestCameraHelpers testMethod=test_look_at_view_transform_from_eye_point_tuple>

    def test_look_at_view_transform_from_eye_point_tuple(self):
        dist = math.sqrt(2)
        elev = math.pi / 4
        azim = 0.0
        eye = ((0.0, 1.0, 1.0),)
        # using passed values for dist, elev, azim
>       R, t = look_at_view_transform(dist, elev, azim, degrees=False)

/local/data0/moved_data/pytorch3d/tests/test_cameras.py:166: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1204: in look_at_view_transform
    R = look_at_rotation(C, at, up, device=device)
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1121: in look_at_rotation
    return look_at_rotation(camera_position, at, up, device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

camera_position = tensor([[0.0000, 1.0000, 1.0000]])
at = tensor([[0., 0., 0.]]), up = tensor([[0., 1., 0.]]), device = 'cpu'

    def look_at_rotation(camera_position, at, up, device='cpu'):
        """
        Generate a batched rotation matrix representing the transformation from world coordinates to view coordinates.
    
        Args:
            camera_position: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            at: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            up: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            device: The device type ('cpu' or 'cuda').
    
        Returns:
            R: Batched rotation matrix of shape (N, 3, 3).
        """
        if not isinstance(camera_position, torch.Tensor):
            camera_position = torch.tensor(camera_position, dtype=torch.float32, device=device)
        if not isinstance(at, torch.Tensor):
            at = torch.tensor(at, dtype=torch.float32, device=device)
        if not isinstance(up, torch.Tensor):
            up = torch.tensor(up, dtype=torch.float32, device=device)
        if camera_position.dim() == 1:
            camera_position = camera_position.unsqueeze(0)
        if at.dim() == 1:
            at = at.unsqueeze(0)
        if up.dim() == 1:
            up = up.unsqueeze(0)
        z_axis = at - camera_position
        z_axis = z_axis / torch.norm(z_axis, dim=1, keepdim=True)
        x_axis = torch.cross(up, z_axis)
        x_axis_norm = torch.norm(x_axis, dim=1, keepdim=True)
>       x_axis[x_axis_norm < 1e-06] = torch.tensor([1.0, 0.0, 0.0], device=device)
E       IndexError: The shape of the mask [1, 1] at index 1 does not match the shape of the indexed tensor [1, 3] at index 1

/local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:42: IndexError
____ TestCameraHelpers.test_look_at_view_transform_non_default_at_position _____

self = <tests.test_cameras.TestCameraHelpers testMethod=test_look_at_view_transform_non_default_at_position>

    def test_look_at_view_transform_non_default_at_position(self):
        dist = 1.0
        elev = 0.0
        azim = 0.0
        at = ((1, 1, 1),)
        # Using passed values for dist, elev, azim, at
>       R, t = look_at_view_transform(dist, elev, azim, at=at)

/local/data0/moved_data/pytorch3d/tests/test_cameras.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1204: in look_at_view_transform
    R = look_at_rotation(C, at, up, device=device)
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1121: in look_at_rotation
    return look_at_rotation(camera_position, at, up, device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

camera_position = tensor([[1., 1., 2.]]), at = tensor([[1., 1., 1.]])
up = tensor([[0., 1., 0.]]), device = 'cpu'

    def look_at_rotation(camera_position, at, up, device='cpu'):
        """
        Generate a batched rotation matrix representing the transformation from world coordinates to view coordinates.
    
        Args:
            camera_position: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            at: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            up: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            device: The device type ('cpu' or 'cuda').
    
        Returns:
            R: Batched rotation matrix of shape (N, 3, 3).
        """
        if not isinstance(camera_position, torch.Tensor):
            camera_position = torch.tensor(camera_position, dtype=torch.float32, device=device)
        if not isinstance(at, torch.Tensor):
            at = torch.tensor(at, dtype=torch.float32, device=device)
        if not isinstance(up, torch.Tensor):
            up = torch.tensor(up, dtype=torch.float32, device=device)
        if camera_position.dim() == 1:
            camera_position = camera_position.unsqueeze(0)
        if at.dim() == 1:
            at = at.unsqueeze(0)
        if up.dim() == 1:
            up = up.unsqueeze(0)
        z_axis = at - camera_position
        z_axis = z_axis / torch.norm(z_axis, dim=1, keepdim=True)
        x_axis = torch.cross(up, z_axis)
        x_axis_norm = torch.norm(x_axis, dim=1, keepdim=True)
>       x_axis[x_axis_norm < 1e-06] = torch.tensor([1.0, 0.0, 0.0], device=device)
E       IndexError: The shape of the mask [1, 1] at index 1 does not match the shape of the indexed tensor [1, 3] at index 1

/local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:42: IndexError
____________________ TestCameraHelpers.test_view_transform _____________________

self = <tests.test_cameras.TestCameraHelpers testMethod=test_view_transform>

    def test_view_transform(self):
        T = torch.tensor([0.0, 0.0, -1.0], requires_grad=True).view(1, -1)
>       R = look_at_rotation(T)

/local/data0/moved_data/pytorch3d/tests/test_cameras.py:404: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1121: in look_at_rotation
    return look_at_rotation(camera_position, at, up, device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

camera_position = tensor([[ 0.,  0., -1.]], grad_fn=<ViewBackward0>)
at = tensor([[0., 0., 0.]]), up = tensor([[0., 1., 0.]]), device = 'cpu'

    def look_at_rotation(camera_position, at, up, device='cpu'):
        """
        Generate a batched rotation matrix representing the transformation from world coordinates to view coordinates.
    
        Args:
            camera_position: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            at: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            up: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            device: The device type ('cpu' or 'cuda').
    
        Returns:
            R: Batched rotation matrix of shape (N, 3, 3).
        """
        if not isinstance(camera_position, torch.Tensor):
            camera_position = torch.tensor(camera_position, dtype=torch.float32, device=device)
        if not isinstance(at, torch.Tensor):
            at = torch.tensor(at, dtype=torch.float32, device=device)
        if not isinstance(up, torch.Tensor):
            up = torch.tensor(up, dtype=torch.float32, device=device)
        if camera_position.dim() == 1:
            camera_position = camera_position.unsqueeze(0)
        if at.dim() == 1:
            at = at.unsqueeze(0)
        if up.dim() == 1:
            up = up.unsqueeze(0)
        z_axis = at - camera_position
        z_axis = z_axis / torch.norm(z_axis, dim=1, keepdim=True)
        x_axis = torch.cross(up, z_axis)
        x_axis_norm = torch.norm(x_axis, dim=1, keepdim=True)
>       x_axis[x_axis_norm < 1e-06] = torch.tensor([1.0, 0.0, 0.0], device=device)
E       IndexError: The shape of the mask [1, 1] at index 1 does not match the shape of the indexed tensor [1, 3] at index 1

/local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:42: IndexError
______________ TestCamerasCommon.test_view_transform_class_method ______________

self = <tests.test_cameras.TestCamerasCommon testMethod=test_view_transform_class_method>

    def test_view_transform_class_method(self):
        T = torch.tensor([0.0, 0.0, -1.0], requires_grad=True).view(1, -1)
>       R = look_at_rotation(T)

/local/data0/moved_data/pytorch3d/tests/test_cameras.py:440: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1121: in look_at_rotation
    return look_at_rotation(camera_position, at, up, device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

camera_position = tensor([[ 0.,  0., -1.]], grad_fn=<ViewBackward0>)
at = tensor([[0., 0., 0.]]), up = tensor([[0., 1., 0.]]), device = 'cpu'

    def look_at_rotation(camera_position, at, up, device='cpu'):
        """
        Generate a batched rotation matrix representing the transformation from world coordinates to view coordinates.
    
        Args:
            camera_position: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            at: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            up: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            device: The device type ('cpu' or 'cuda').
    
        Returns:
            R: Batched rotation matrix of shape (N, 3, 3).
        """
        if not isinstance(camera_position, torch.Tensor):
            camera_position = torch.tensor(camera_position, dtype=torch.float32, device=device)
        if not isinstance(at, torch.Tensor):
            at = torch.tensor(at, dtype=torch.float32, device=device)
        if not isinstance(up, torch.Tensor):
            up = torch.tensor(up, dtype=torch.float32, device=device)
        if camera_position.dim() == 1:
            camera_position = camera_position.unsqueeze(0)
        if at.dim() == 1:
            at = at.unsqueeze(0)
        if up.dim() == 1:
            up = up.unsqueeze(0)
        z_axis = at - camera_position
        z_axis = z_axis / torch.norm(z_axis, dim=1, keepdim=True)
        x_axis = torch.cross(up, z_axis)
        x_axis_norm = torch.norm(x_axis, dim=1, keepdim=True)
>       x_axis[x_axis_norm < 1e-06] = torch.tensor([1.0, 0.0, 0.0], device=device)
E       IndexError: The shape of the mask [1, 1] at index 1 does not match the shape of the indexed tensor [1, 3] at index 1

/local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:42: IndexError
_____________ TestFoVPerspectiveProjection.test_get_full_transform _____________

self = <tests.test_cameras.TestFoVPerspectiveProjection testMethod=test_get_full_transform>

    def test_get_full_transform(self):
        cam = FoVPerspectiveCameras()
        T = torch.tensor([0.0, 0.0, 1.0]).view(1, -1)
>       R = look_at_rotation(T)

/local/data0/moved_data/pytorch3d/tests/test_cameras.py:984: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1121: in look_at_rotation
    return look_at_rotation(camera_position, at, up, device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

camera_position = tensor([[0., 0., 1.]]), at = tensor([[0., 0., 0.]])
up = tensor([[0., 1., 0.]]), device = 'cpu'

    def look_at_rotation(camera_position, at, up, device='cpu'):
        """
        Generate a batched rotation matrix representing the transformation from world coordinates to view coordinates.
    
        Args:
            camera_position: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            at: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            up: 3-element tuple/list or torch tensor of shape (1, 3) or (N, 3).
            device: The device type ('cpu' or 'cuda').
    
        Returns:
            R: Batched rotation matrix of shape (N, 3, 3).
        """
        if not isinstance(camera_position, torch.Tensor):
            camera_position = torch.tensor(camera_position, dtype=torch.float32, device=device)
        if not isinstance(at, torch.Tensor):
            at = torch.tensor(at, dtype=torch.float32, device=device)
        if not isinstance(up, torch.Tensor):
            up = torch.tensor(up, dtype=torch.float32, device=device)
        if camera_position.dim() == 1:
            camera_position = camera_position.unsqueeze(0)
        if at.dim() == 1:
            at = at.unsqueeze(0)
        if up.dim() == 1:
            up = up.unsqueeze(0)
        z_axis = at - camera_position
        z_axis = z_axis / torch.norm(z_axis, dim=1, keepdim=True)
        x_axis = torch.cross(up, z_axis)
        x_axis_norm = torch.norm(x_axis, dim=1, keepdim=True)
>       x_axis[x_axis_norm < 1e-06] = torch.tensor([1.0, 0.0, 0.0], device=device)
E       IndexError: The shape of the mask [1, 1] at index 1 does not match the shape of the indexed tensor [1, 3] at index 1

/local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:42: IndexError
=============================== warnings summary ===============================
tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_input_fail
  /local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:40: UserWarning: Using torch.cross without specifying the dim arg is deprecated.
  Please either pass the dim explicitly or simply use torch.linalg.cross.
  The default value of dim will change to agree with that of linalg.cross in a future release. (Triggered internally at ../aten/src/ATen/native/Cross.cpp:62.)
    x_axis = torch.cross(up, z_axis)

tests/test_cameras.py::TestCamerasCommon::test_clone
tests/test_cameras.py::TestCamerasCommon::test_get_camera_center
tests/test_cameras.py::TestCamerasCommon::test_project_points_screen
tests/test_cameras.py::TestCamerasCommon::test_unproject_points
  /local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:848: PendingDeprecationWarning: SfMOrthographicCameras is deprecated,
          Use OrthographicCameras instead.
          SfMOrthographicCameras will be removed in future releases.
    warnings.warn('SfMOrthographicCameras is deprecated,\n        Use OrthographicCameras instead.\n        SfMOrthographicCameras will be removed in future releases.', PendingDeprecationWarning)

tests/test_cameras.py::TestCamerasCommon::test_clone
  /local/data0/moved_data/pytorch3d/tests/common_testing.py:85: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
    self.assertNotEqual(tensor1.storage().data_ptr(), tensor2.storage().data_ptr())

tests/test_cameras.py::TestCamerasCommon::test_clone
tests/test_cameras.py::TestCamerasCommon::test_get_camera_center
tests/test_cameras.py::TestCamerasCommon::test_project_points_screen
tests/test_cameras.py::TestCamerasCommon::test_unproject_points
  /local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:384: PendingDeprecationWarning: OpenGLPerspectiveCameras is deprecated,
          Use FoVPerspectiveCameras instead.
          OpenGLPerspectiveCameras will be removed in future releases.
    warnings.warn('OpenGLPerspectiveCameras is deprecated,\n        Use FoVPerspectiveCameras instead.\n        OpenGLPerspectiveCameras will be removed in future releases.', PendingDeprecationWarning)

tests/test_cameras.py::TestCamerasCommon::test_clone
tests/test_cameras.py::TestCamerasCommon::test_get_camera_center
tests/test_cameras.py::TestCamerasCommon::test_project_points_screen
tests/test_cameras.py::TestCamerasCommon::test_unproject_points
  /local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:561: PendingDeprecationWarning: OpenGLOrthographicCameras is deprecated,
          Use FoVOrthographicCameras instead.
          OpenGLOrthographicCameras will be removed in future releases.
    warnings.warn('OpenGLOrthographicCameras is deprecated,\n        Use FoVOrthographicCameras instead.\n        OpenGLOrthographicCameras will be removed in future releases.', PendingDeprecationWarning)

tests/test_cameras.py::TestCamerasCommon::test_clone
tests/test_cameras.py::TestCamerasCommon::test_get_camera_center
tests/test_cameras.py::TestCamerasCommon::test_project_points_screen
tests/test_cameras.py::TestCamerasCommon::test_unproject_points
  /local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:697: PendingDeprecationWarning: SfMPerspectiveCameras is deprecated,
          Use PerspectiveCameras instead.
          SfMPerspectiveCameras will be removed in future releases.
    warnings.warn('SfMPerspectiveCameras is deprecated,\n        Use PerspectiveCameras instead.\n        SfMPerspectiveCameras will be removed in future releases.', PendingDeprecationWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_input_fail
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_list_broadcast
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_python_list
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_tensor_broadcast
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_tensor_grad
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_corner_case
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_default_values
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_from_eye_point_tuple
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_non_default_at_position
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_view_transform
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_view_transform_class_method
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_get_full_transform
================== 12 failed, 53 passed, 18 warnings in 2.40s ==================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 65 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_mixed_scalars PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_python_scalar PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_python_scalar_radians PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_torch_scalar_grads PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_torch_scalars PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_vectors PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_vectors_bad_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_vectors_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_vectors_mixed_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_vectors_mixed_broadcast_grads PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_input_fail PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_list_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_python_list PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_tensor_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_tensor_grad PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_corner_case PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_default_values PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_from_eye_point_tuple PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_non_default_at_position PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_view_transform PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_K PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_clone PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_equiv_project_points PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_get_camera_center PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_iterable PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_join_batch_orthographic PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_join_batch_perspective PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_join_cameras_as_batch_errors PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_project_points_screen PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_unproject_points PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_view_transform_class_method PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_camera_class_init PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_get_full_transform PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_getitem PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_perspective PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_perspective_kwargs PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_perspective_mixed_inputs_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_perspective_mixed_inputs_grad PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_perspective_type PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_transform_points PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_getitem PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_orthographic PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_orthographic_kwargs PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_orthographic_mixed_inputs_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_orthographic_mixed_inputs_grad PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_orthographic_scaled PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_perspective_type PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestOrthographicProjection::test_getitem PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestOrthographicProjection::test_orthographic PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestOrthographicProjection::test_orthographic_kwargs PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestOrthographicProjection::test_orthographic_scaled PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestOrthographicProjection::test_perspective_type PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestPerspectiveProjection::test_clone_picklable PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestPerspectiveProjection::test_getitem PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestPerspectiveProjection::test_perspective PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestPerspectiveProjection::test_perspective_kwargs PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestPerspectiveProjection::test_perspective_scaled PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestPerspectiveProjection::test_perspective_type PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_cuda PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_distortion_params_set_to_zeors PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_fisheye_against_perspective_cameras PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_getitem PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_project_shape_broadcasts PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_unhandled_shape PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_unproject_shape_broadcasts PASSED

=============================== warnings summary ===============================
tests/test_cameras.py::TestCamerasCommon::test_clone
tests/test_cameras.py::TestCamerasCommon::test_get_camera_center
tests/test_cameras.py::TestCamerasCommon::test_project_points_screen
tests/test_cameras.py::TestCamerasCommon::test_unproject_points
tests/test_cameras.py::TestCamerasCommon::test_view_transform_class_method
  /local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1248: PendingDeprecationWarning: SfMOrthographicCameras is deprecated,
          Use OrthographicCameras instead.
          SfMOrthographicCameras will be removed in future releases.
    warnings.warn(

tests/test_cameras.py::TestCamerasCommon::test_clone
  /local/data0/moved_data/pytorch3d/tests/common_testing.py:85: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
    self.assertNotEqual(tensor1.storage().data_ptr(), tensor2.storage().data_ptr())

tests/test_cameras.py::TestCamerasCommon::test_clone
tests/test_cameras.py::TestCamerasCommon::test_get_camera_center
tests/test_cameras.py::TestCamerasCommon::test_project_points_screen
tests/test_cameras.py::TestCamerasCommon::test_unproject_points
tests/test_cameras.py::TestCamerasCommon::test_view_transform_class_method
  /local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:482: PendingDeprecationWarning: OpenGLPerspectiveCameras is deprecated,
          Use FoVPerspectiveCameras instead.
          OpenGLPerspectiveCameras will be removed in future releases.
    warnings.warn(

tests/test_cameras.py::TestCamerasCommon::test_clone
tests/test_cameras.py::TestCamerasCommon::test_get_camera_center
tests/test_cameras.py::TestCamerasCommon::test_project_points_screen
tests/test_cameras.py::TestCamerasCommon::test_unproject_points
tests/test_cameras.py::TestCamerasCommon::test_view_transform_class_method
  /local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:768: PendingDeprecationWarning: OpenGLOrthographicCameras is deprecated,
          Use FoVOrthographicCameras instead.
          OpenGLOrthographicCameras will be removed in future releases.
    warnings.warn(

tests/test_cameras.py::TestCamerasCommon::test_clone
tests/test_cameras.py::TestCamerasCommon::test_get_camera_center
tests/test_cameras.py::TestCamerasCommon::test_project_points_screen
tests/test_cameras.py::TestCamerasCommon::test_unproject_points
tests/test_cameras.py::TestCamerasCommon::test_view_transform_class_method
  /local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1010: PendingDeprecationWarning: SfMPerspectiveCameras is deprecated,
          Use PerspectiveCameras instead.
          SfMPerspectiveCameras will be removed in future releases.
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================= 65 passed, 21 warnings in 1.90s ========================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 65 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_mixed_scalars PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_python_scalar PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_python_scalar_radians PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_torch_scalar_grads PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_torch_scalars PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_vectors PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_vectors_bad_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_vectors_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_vectors_mixed_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_camera_position_from_angles_vectors_mixed_broadcast_grads PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_input_fail PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_list_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_python_list PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_tensor_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_rotation_tensor_grad PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_corner_case PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_default_values PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_from_eye_point_tuple PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_look_at_view_transform_non_default_at_position PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCameraHelpers::test_view_transform PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_K PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_clone PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_equiv_project_points PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_get_camera_center PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_iterable PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_join_batch_orthographic PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_join_batch_perspective PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_join_cameras_as_batch_errors PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_project_points_screen PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_unproject_points PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestCamerasCommon::test_view_transform_class_method PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_camera_class_init PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_get_full_transform PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_getitem PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_perspective PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_perspective_kwargs PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_perspective_mixed_inputs_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_perspective_mixed_inputs_grad PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_perspective_type PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVPerspectiveProjection::test_transform_points PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_getitem PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_orthographic PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_orthographic_kwargs PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_orthographic_mixed_inputs_broadcast PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_orthographic_mixed_inputs_grad PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_orthographic_scaled PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFoVOrthographicProjection::test_perspective_type PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestOrthographicProjection::test_getitem PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestOrthographicProjection::test_orthographic PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestOrthographicProjection::test_orthographic_kwargs PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestOrthographicProjection::test_orthographic_scaled PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestOrthographicProjection::test_perspective_type PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestPerspectiveProjection::test_clone_picklable PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestPerspectiveProjection::test_getitem PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestPerspectiveProjection::test_perspective PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestPerspectiveProjection::test_perspective_kwargs PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestPerspectiveProjection::test_perspective_scaled PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestPerspectiveProjection::test_perspective_type PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_cuda PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_distortion_params_set_to_zeors PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_fisheye_against_perspective_cameras PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_getitem PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_project_shape_broadcasts PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_unhandled_shape PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_cameras.py::TestFishEyeProjection::test_unproject_shape_broadcasts PASSED

=============================== warnings summary ===============================
tests/test_cameras.py::TestCamerasCommon::test_clone
tests/test_cameras.py::TestCamerasCommon::test_get_camera_center
tests/test_cameras.py::TestCamerasCommon::test_project_points_screen
tests/test_cameras.py::TestCamerasCommon::test_unproject_points
tests/test_cameras.py::TestCamerasCommon::test_view_transform_class_method
  /local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1248: PendingDeprecationWarning: SfMOrthographicCameras is deprecated,
          Use OrthographicCameras instead.
          SfMOrthographicCameras will be removed in future releases.
    warnings.warn(

tests/test_cameras.py::TestCamerasCommon::test_clone
  /local/data0/moved_data/pytorch3d/tests/common_testing.py:85: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
    self.assertNotEqual(tensor1.storage().data_ptr(), tensor2.storage().data_ptr())

tests/test_cameras.py::TestCamerasCommon::test_clone
tests/test_cameras.py::TestCamerasCommon::test_get_camera_center
tests/test_cameras.py::TestCamerasCommon::test_project_points_screen
tests/test_cameras.py::TestCamerasCommon::test_unproject_points
tests/test_cameras.py::TestCamerasCommon::test_view_transform_class_method
  /local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:482: PendingDeprecationWarning: OpenGLPerspectiveCameras is deprecated,
          Use FoVPerspectiveCameras instead.
          OpenGLPerspectiveCameras will be removed in future releases.
    warnings.warn(

tests/test_cameras.py::TestCamerasCommon::test_clone
tests/test_cameras.py::TestCamerasCommon::test_get_camera_center
tests/test_cameras.py::TestCamerasCommon::test_project_points_screen
tests/test_cameras.py::TestCamerasCommon::test_unproject_points
tests/test_cameras.py::TestCamerasCommon::test_view_transform_class_method
  /local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:768: PendingDeprecationWarning: OpenGLOrthographicCameras is deprecated,
          Use FoVOrthographicCameras instead.
          OpenGLOrthographicCameras will be removed in future releases.
    warnings.warn(

tests/test_cameras.py::TestCamerasCommon::test_clone
tests/test_cameras.py::TestCamerasCommon::test_get_camera_center
tests/test_cameras.py::TestCamerasCommon::test_project_points_screen
tests/test_cameras.py::TestCamerasCommon::test_unproject_points
tests/test_cameras.py::TestCamerasCommon::test_view_transform_class_method
  /local/data0/moved_data/pytorch3d/pytorch3d/renderer/cameras.py:1010: PendingDeprecationWarning: SfMPerspectiveCameras is deprecated,
          Use PerspectiveCameras instead.
          SfMPerspectiveCameras will be removed in future releases.
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================= 65 passed, 21 warnings in 1.89s ========================
