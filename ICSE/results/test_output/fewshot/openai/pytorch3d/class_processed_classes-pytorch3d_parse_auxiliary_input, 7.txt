output file:
processed_classes-pytorch3d_parse_auxiliary_input, 7.json
function:
_parse_auxiliary_input
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_list_someempty FAILED [ 57%]', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_init_error', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_allempty FAILED [  7%]', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_all_constructions', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_init_error FAILED [ 46%]', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_all_constructions FAILED [  3%]', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_list_someempty', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_allempty'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 26 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_all_constructions FAILED [  3%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_allempty FAILED [  7%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_clone_list PASSED [ 11%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_clone_tensor PASSED [ 15%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_detach PASSED [ 19%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_empty PASSED [ 23%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_estimate_normals PASSED [ 26%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_extend_list PASSED [ 30%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_get_bounding_boxes PASSED [ 34%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_get_cloud PASSED [ 38%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_getitem PASSED [ 42%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_init_error FAILED [ 46%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_inside_box PASSED [ 50%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_join_pointclouds_as_batch PASSED [ 53%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_list_someempty FAILED [ 57%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_offset PASSED [ 61%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_padded_to_packed_idx PASSED [ 65%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_scale PASSED [ 69%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_simple PASSED [ 73%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_simple_random_clouds PASSED [ 76%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_split PASSED [ 80%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_subsample PASSED [ 84%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to PASSED [ 88%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_list FAILED [ 92%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_tensor FAILED [ 96%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_update_padded PASSED [100%]

=================================== FAILURES ===================================
____________________ TestPointclouds.test_all_constructions ____________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_all_constructions>

    def test_all_constructions(self):
        public_getters = [
            "points_list",
            "points_packed",
            "packed_to_cloud_idx",
            "cloud_to_packed_first_idx",
            "num_points_per_cloud",
            "points_padded",
            "padded_to_packed_idx",
        ]
        public_normals_getters = ["normals_list", "normals_packed", "normals_padded"]
        public_features_getters = [
            "features_list",
            "features_packed",
            "features_padded",
        ]
    
        lengths = [3, 4, 2]
        max_len = max(lengths)
        C = 4
    
        points_data = [torch.zeros((max_len, 3)).uniform_() for i in lengths]
        normals_data = [torch.zeros((max_len, 3)).uniform_() for i in lengths]
        features_data = [torch.zeros((max_len, C)).uniform_() for i in lengths]
        for length, p, n, f in zip(lengths, points_data, normals_data, features_data):
            p[length:] = 0.0
            n[length:] = 0.0
            f[length:] = 0.0
        points_list = [d[:length] for length, d in zip(lengths, points_data)]
        normals_list = [d[:length] for length, d in zip(lengths, normals_data)]
        features_list = [d[:length] for length, d in zip(lengths, features_data)]
        points_packed = torch.cat(points_data)
        normals_packed = torch.cat(normals_data)
        features_packed = torch.cat(features_data)
        test_cases_inputs = [
            ("list_0_0", points_list, None, None),
            ("list_1_0", points_list, normals_list, None),
            ("list_0_1", points_list, None, features_list),
            ("list_1_1", points_list, normals_list, features_list),
            ("padded_0_0", points_data, None, None),
            ("padded_1_0", points_data, normals_data, None),
            ("padded_0_1", points_data, None, features_data),
            ("padded_1_1", points_data, normals_data, features_data),
            ("emptylist_emptylist_emptylist", [], [], []),
        ]
        false_cases_inputs = [
            ("list_packed", points_list, normals_packed, features_packed, ValueError),
            ("packed_0", points_packed, None, None, ValueError),
        ]
    
        for name, points, normals, features in test_cases_inputs:
            with self.subTest(name=name):
                p = Pointclouds(points, normals, features)
                for method in public_getters:
                    self.assertIsNotNone(getattr(p, method)())
                for method in public_normals_getters:
                    if normals is None or p.isempty():
>                       self.assertIsNone(getattr(p, method)())
E                       AssertionError: [] is not None

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:231: AssertionError
________________________ TestPointclouds.test_allempty _________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_allempty>

    def test_allempty(self):
        clouds = Pointclouds([], [])
        self.assertEqual(len(clouds), 0)
>       self.assertIsNone(clouds.normals_list())
E       AssertionError: [] is not None

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:320: AssertionError
_______________________ TestPointclouds.test_init_error ________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_init_error>

    def test_init_error(self):
        # Check if correct errors are raised when verts/faces are on
        # different devices
    
        clouds = self.init_cloud(10, 100, 5)
        points_list = clouds.points_list()  # all tensors on cuda:0
        points_list = [
            p.to("cpu") if random.uniform(0, 1) > 0.5 else p for p in points_list
        ]
        features_list = clouds.features_list()
        normals_list = clouds.normals_list()
    
        with self.assertRaisesRegex(ValueError, "same device"):
            Pointclouds(
                points=points_list, features=features_list, normals=normals_list
            )
    
        points_list = clouds.points_list()
        features_list = [
            f.to("cpu") if random.uniform(0, 1) > 0.2 else f for f in features_list
        ]
        with self.assertRaisesRegex(ValueError, "same device"):
>           Pointclouds(
                points=points_list, features=features_list, normals=normals_list
            )
E           AssertionError: ValueError not raised

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:161: AssertionError
_____________________ TestPointclouds.test_list_someempty ______________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_list_someempty>

    def test_list_someempty(self):
        # We want
        #     point_cloud = Pointclouds(
        #         [pcl.points_packed() for pcl in point_clouds],
        #         features=[pcl.features_packed() for pcl in point_clouds],
        #     )
        # to work if point_clouds is a list of pointclouds with some empty and some not.
        points_list = [torch.rand(30, 3), torch.zeros(0, 3)]
        features_list = [torch.rand(30, 3), None]
        pcls = Pointclouds(points=points_list, features=features_list)
        self.assertEqual(len(pcls), 2)
        self.assertClose(
>           pcls.points_padded(),
            torch.stack([points_list[0], torch.zeros_like(points_list[0])]),
        )

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:400: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:420: in points_padded
    self._compute_padded()
/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:487: in _compute_padded
    self._features_padded = struct_utils.list_to_padded(features_list, (self._P, self._C), pad_value=0.0, equisized=self.equisized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = [tensor([[0.6057, 0.3725, 0.7980],
        [0.8399, 0.1374, 0.2331],
        [0.9578, 0.3313, 0.3227],
        [0.0162... 0.2469],
        [0.4761, 0.7792, 0.3722],
        [0.2147, 0.3288, 0.1265],
        [0.6783, 0.8870, 0.0293]]), None]
pad_size = (30, 3), pad_value = 0.0, equisized = False

    def list_to_padded(
        x: Union[List[torch.Tensor], Tuple[torch.Tensor]],
        pad_size: Union[Sequence[int], None] = None,
        pad_value: float = 0.0,
        equisized: bool = False,
    ) -> torch.Tensor:
        r"""
        Transforms a list of N tensors each of shape (Si_0, Si_1, ... Si_D)
        into:
        - a single tensor of shape (N, pad_size(0), pad_size(1), ..., pad_size(D))
          if pad_size is provided
        - or a tensor of shape (N, max(Si_0), max(Si_1), ..., max(Si_D)) if pad_size is None.
    
        Args:
          x: list of Tensors
          pad_size: list(int) specifying the size of the padded tensor.
            If `None` (default), the largest size of each dimension
            is set as the `pad_size`.
          pad_value: float value to be used to fill the padded tensor
          equisized: bool indicating whether the items in x are of equal size
            (sometimes this is known and if provided saves computation)
    
        Returns:
          x_padded: tensor consisting of padded input tensors stored
            over the newly allocated memory.
        """
        if equisized:
            return torch.stack(x, 0)
    
        if not all(torch.is_tensor(y) for y in x):
>           raise ValueError("All items have to be instances of a torch.Tensor.")
E           ValueError: All items have to be instances of a torch.Tensor.

/local/data0/moved_data/pytorch3d/pytorch3d/structures/utils.py:49: ValueError
_________________________ TestPointclouds.test_to_list _________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_to_list>

    def test_to_list(self):
        cloud = self.init_cloud(5, 100, 10)
        device = torch.device("cuda:1")
    
>       new_cloud = cloud.to(device)

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:611: in to
    other._points_list = [v.to(device_) for v in other.points_list()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f72ee976f10>

>   other._points_list = [v.to(device_) for v in other.points_list()]
E   RuntimeError: CUDA error: invalid device ordinal
E   CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E   For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E   Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:611: RuntimeError
________________________ TestPointclouds.test_to_tensor ________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_to_tensor>

    def test_to_tensor(self):
        cloud = self.init_cloud(5, 100, 10, lists_to_tensors=True)
        device = torch.device("cuda:1")
    
>       new_cloud = cloud.to(device)

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:747: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:611: in to
    other._points_list = [v.to(device_) for v in other.points_list()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f72ee846520>

>   other._points_list = [v.to(device_) for v in other.points_list()]
E   RuntimeError: CUDA error: invalid device ordinal
E   CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E   For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E   Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:611: RuntimeError
=============================== warnings summary ===============================
tests/test_pointclouds.py::TestPointclouds::test_clone_list
  /local/data0/moved_data/pytorch3d/tests/common_testing.py:85: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
    self.assertNotEqual(tensor1.storage().data_ptr(), tensor2.storage().data_ptr())

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_all_constructions
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_allempty
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_init_error
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_list_someempty
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_list
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_tensor
=================== 6 failed, 20 passed, 1 warning in 1.83s ====================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 26 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_all_constructions PASSED [  3%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_allempty PASSED [  7%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_clone_list PASSED [ 11%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_clone_tensor PASSED [ 15%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_detach PASSED [ 19%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_empty PASSED [ 23%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_estimate_normals PASSED [ 26%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_extend_list PASSED [ 30%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_get_bounding_boxes PASSED [ 34%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_get_cloud PASSED [ 38%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_getitem PASSED [ 42%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_init_error PASSED [ 46%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_inside_box PASSED [ 50%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_join_pointclouds_as_batch PASSED [ 53%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_list_someempty PASSED [ 57%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_offset PASSED [ 61%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_padded_to_packed_idx PASSED [ 65%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_scale PASSED [ 69%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_simple PASSED [ 73%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_simple_random_clouds PASSED [ 76%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_split PASSED [ 80%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_subsample PASSED [ 84%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to PASSED [ 88%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_list FAILED [ 92%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_tensor FAILED [ 96%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_update_padded PASSED [100%]

=================================== FAILURES ===================================
_________________________ TestPointclouds.test_to_list _________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_to_list>

    def test_to_list(self):
        cloud = self.init_cloud(5, 100, 10)
        device = torch.device("cuda:1")
    
>       new_cloud = cloud.to(device)

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:801: in to
    other._points_list = [v.to(device_) for v in other.points_list()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7aee8d65ed30>

>   other._points_list = [v.to(device_) for v in other.points_list()]
E   RuntimeError: CUDA error: invalid device ordinal
E   CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E   For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E   Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:801: RuntimeError
________________________ TestPointclouds.test_to_tensor ________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_to_tensor>

    def test_to_tensor(self):
        cloud = self.init_cloud(5, 100, 10, lists_to_tensors=True)
        device = torch.device("cuda:1")
    
>       new_cloud = cloud.to(device)

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:747: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:801: in to
    other._points_list = [v.to(device_) for v in other.points_list()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7aeeb90654c0>

>   other._points_list = [v.to(device_) for v in other.points_list()]
E   RuntimeError: CUDA error: invalid device ordinal
E   CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E   For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E   Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:801: RuntimeError
=============================== warnings summary ===============================
tests/test_pointclouds.py::TestPointclouds::test_clone_list
  /local/data0/moved_data/pytorch3d/tests/common_testing.py:85: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
    self.assertNotEqual(tensor1.storage().data_ptr(), tensor2.storage().data_ptr())

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_list
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_tensor
=================== 2 failed, 24 passed, 1 warning in 1.78s ====================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 26 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_all_constructions PASSED [  3%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_allempty PASSED [  7%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_clone_list PASSED [ 11%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_clone_tensor PASSED [ 15%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_detach PASSED [ 19%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_empty PASSED [ 23%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_estimate_normals PASSED [ 26%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_extend_list PASSED [ 30%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_get_bounding_boxes PASSED [ 34%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_get_cloud PASSED [ 38%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_getitem PASSED [ 42%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_init_error PASSED [ 46%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_inside_box PASSED [ 50%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_join_pointclouds_as_batch PASSED [ 53%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_list_someempty PASSED [ 57%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_offset PASSED [ 61%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_padded_to_packed_idx PASSED [ 65%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_scale PASSED [ 69%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_simple PASSED [ 73%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_simple_random_clouds PASSED [ 76%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_split PASSED [ 80%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_subsample PASSED [ 84%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to PASSED [ 88%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_list FAILED [ 92%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_tensor FAILED [ 96%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_update_padded PASSED [100%]

=================================== FAILURES ===================================
_________________________ TestPointclouds.test_to_list _________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_to_list>

    def test_to_list(self):
        cloud = self.init_cloud(5, 100, 10)
        device = torch.device("cuda:1")
    
>       new_cloud = cloud.to(device)

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:801: in to
    other._points_list = [v.to(device_) for v in other.points_list()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x711d4145e640>

>   other._points_list = [v.to(device_) for v in other.points_list()]
E   RuntimeError: CUDA error: invalid device ordinal
E   CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E   For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E   Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:801: RuntimeError
________________________ TestPointclouds.test_to_tensor ________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_to_tensor>

    def test_to_tensor(self):
        cloud = self.init_cloud(5, 100, 10, lists_to_tensors=True)
        device = torch.device("cuda:1")
    
>       new_cloud = cloud.to(device)

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:747: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:801: in to
    other._points_list = [v.to(device_) for v in other.points_list()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x711cf25a66d0>

>   other._points_list = [v.to(device_) for v in other.points_list()]
E   RuntimeError: CUDA error: invalid device ordinal
E   CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E   For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E   Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:801: RuntimeError
=============================== warnings summary ===============================
tests/test_pointclouds.py::TestPointclouds::test_clone_list
  /local/data0/moved_data/pytorch3d/tests/common_testing.py:85: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
    self.assertNotEqual(tensor1.storage().data_ptr(), tensor2.storage().data_ptr())

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_list
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_tensor
=================== 2 failed, 24 passed, 1 warning in 1.83s ====================
