output file:
processed_korniadepth_to_3d178.json
function:
depth_to_3d
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'tvm', 'jit', 'openxla', 'inductor', 'cudagraphs', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 4 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5] FAILED

=================================== FAILURES ===================================
______________ TestDepthTo3d.test_shapes_broadcast[cpu-float32-2] ______________

self = <tests.geometry.test_depth.TestDepthTo3d object at 0x76c8d073e8c0>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 4, 5])
    def test_shapes_broadcast(self, batch_size, device, dtype):
        depth = torch.rand(batch_size, 1, 3, 4, device=device, dtype=dtype)
        camera_matrix = torch.rand(1, 3, 3, device=device, dtype=dtype)
    
>       points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/helpers.py:109: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/depth.py:73: in depth_to_3d
    return depth_to_3d(depth, camera_matrix, normalize_points)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

depth = tensor([[[[0.1591, 0.7919, 0.6525, 0.7058],
          [0.4717, 0.4297, 0.5111, 0.5048],
          [0.0601, 0.1713, 0.2...33, 0.9430, 0.2515, 0.3760],
          [0.7671, 0.4612, 0.7041, 0.5839],
          [0.9521, 0.4562, 0.2500, 0.9680]]]])
camera_matrix = tensor([[[0.6558, 0.8465, 0.9822],
         [0.0384, 0.7567, 0.7022],
         [0.8819, 0.4237, 0.8595]]])
normalize = False

    def depth_to_3d(depth: torch.Tensor, camera_matrix: torch.Tensor, normalize: bool=False) -> torch.Tensor:
        """
        Converts depth values to 3D points using camera intrinsics.
    
        Args:
            depth (torch.Tensor): Depth tensor of shape (B, 1, H, W).
            camera_matrix (torch.Tensor): Camera intrinsics tensor of shape (B, 3, 3).
            normalize (bool): Whether to normalize the 3D points.
    
        Returns:
            torch.Tensor: 3D points tensor of shape (B, 3, H, W).
        """
        if depth.ndim != 4 or depth.shape[1] != 1:
            raise ValueError('Depth tensor must have shape (B, 1, H, W).')
        if camera_matrix.ndim != 3 or camera_matrix.shape[1:] != (3, 3):
            raise ValueError('Camera matrix must have shape (B, 3, 3).')
        if depth.shape[0] != camera_matrix.shape[0]:
>           raise ValueError('Batch size of depth and camera matrix must match.')
E           ValueError: Batch size of depth and camera matrix must match.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/temp.py:32: ValueError
______________ TestDepthTo3d.test_shapes_broadcast[cpu-float32-4] ______________

self = <tests.geometry.test_depth.TestDepthTo3d object at 0x76c8d073ec50>
batch_size = 4, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 4, 5])
    def test_shapes_broadcast(self, batch_size, device, dtype):
        depth = torch.rand(batch_size, 1, 3, 4, device=device, dtype=dtype)
        camera_matrix = torch.rand(1, 3, 3, device=device, dtype=dtype)
    
>       points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/helpers.py:109: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/depth.py:73: in depth_to_3d
    return depth_to_3d(depth, camera_matrix, normalize_points)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

depth = tensor([[[[0.6549, 0.3937, 0.8880, 0.8566],
          [0.2345, 0.7094, 0.7519, 0.8736],
          [0.3090, 0.5270, 0.6...81, 0.5618, 0.6739, 0.2028],
          [0.9426, 0.7896, 0.6039, 0.4003],
          [0.5291, 0.5612, 0.6503, 0.9658]]]])
camera_matrix = tensor([[[0.2918, 0.3233, 0.8684],
         [0.8357, 0.9632, 0.1585],
         [0.5014, 0.2587, 0.8018]]])
normalize = False

    def depth_to_3d(depth: torch.Tensor, camera_matrix: torch.Tensor, normalize: bool=False) -> torch.Tensor:
        """
        Converts depth values to 3D points using camera intrinsics.
    
        Args:
            depth (torch.Tensor): Depth tensor of shape (B, 1, H, W).
            camera_matrix (torch.Tensor): Camera intrinsics tensor of shape (B, 3, 3).
            normalize (bool): Whether to normalize the 3D points.
    
        Returns:
            torch.Tensor: 3D points tensor of shape (B, 3, H, W).
        """
        if depth.ndim != 4 or depth.shape[1] != 1:
            raise ValueError('Depth tensor must have shape (B, 1, H, W).')
        if camera_matrix.ndim != 3 or camera_matrix.shape[1:] != (3, 3):
            raise ValueError('Camera matrix must have shape (B, 3, 3).')
        if depth.shape[0] != camera_matrix.shape[0]:
>           raise ValueError('Batch size of depth and camera matrix must match.')
E           ValueError: Batch size of depth and camera matrix must match.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/temp.py:32: ValueError
______________ TestDepthTo3d.test_shapes_broadcast[cpu-float32-5] ______________

self = <tests.geometry.test_depth.TestDepthTo3d object at 0x76c8d073ed10>
batch_size = 5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 4, 5])
    def test_shapes_broadcast(self, batch_size, device, dtype):
        depth = torch.rand(batch_size, 1, 3, 4, device=device, dtype=dtype)
        camera_matrix = torch.rand(1, 3, 3, device=device, dtype=dtype)
    
>       points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/helpers.py:109: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/depth.py:73: in depth_to_3d
    return depth_to_3d(depth, camera_matrix, normalize_points)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

depth = tensor([[[[0.3590, 0.7161, 0.8662, 0.0384],
          [0.1126, 0.9573, 0.6166, 0.4503],
          [0.9577, 0.1033, 0.9...07, 0.4478, 0.0515, 0.3415],
          [0.7136, 0.4095, 0.6837, 0.6145],
          [0.8656, 0.9776, 0.5795, 0.4547]]]])
camera_matrix = tensor([[[0.1692, 0.0789, 0.5149],
         [0.6050, 0.1766, 0.5713],
         [0.7043, 0.9234, 0.8597]]])
normalize = False

    def depth_to_3d(depth: torch.Tensor, camera_matrix: torch.Tensor, normalize: bool=False) -> torch.Tensor:
        """
        Converts depth values to 3D points using camera intrinsics.
    
        Args:
            depth (torch.Tensor): Depth tensor of shape (B, 1, H, W).
            camera_matrix (torch.Tensor): Camera intrinsics tensor of shape (B, 3, 3).
            normalize (bool): Whether to normalize the 3D points.
    
        Returns:
            torch.Tensor: 3D points tensor of shape (B, 3, H, W).
        """
        if depth.ndim != 4 or depth.shape[1] != 1:
            raise ValueError('Depth tensor must have shape (B, 1, H, W).')
        if camera_matrix.ndim != 3 or camera_matrix.shape[1:] != (3, 3):
            raise ValueError('Camera matrix must have shape (B, 3, 3).')
        if depth.shape[0] != camera_matrix.shape[0]:
>           raise ValueError('Batch size of depth and camera matrix must match.')
E           ValueError: Batch size of depth and camera matrix must match.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/temp.py:32: ValueError
=============================== warnings summary ===============================
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:30: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1]
  /local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/functional.py:534: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3595.)
    return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5]
=================== 3 failed, 1 passed, 5 warnings in 0.34s ====================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'cudagraphs', 'tvm', 'jit', 'onnxrt', 'inductor', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 4 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5] PASSED

=============================== warnings summary ===============================
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:30: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 4 passed, 4 warnings in 0.17s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'cudagraphs', 'openxla', 'tvm', 'jit', 'onnxrt', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 4 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5] PASSED

=============================== warnings summary ===============================
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:30: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 4 passed, 4 warnings in 0.19s =========================
