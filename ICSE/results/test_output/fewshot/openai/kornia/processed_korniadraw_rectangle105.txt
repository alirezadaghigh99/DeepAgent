output file:
processed_korniadraw_rectangle105.json
function:
draw_rectangle
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'jit', 'cudagraphs', 'openxla', 'tvm', None, 'inductor'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 52 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] FAILED

=================================== FAILURES ===================================
__________________ TestDrawRectangle.test_smoke[cpu-color0-4] __________________

self = <test_draw.TestDrawRectangle object at 0x79b52e91db40>
device = device(type='cpu'), batch = 4, color = tensor([1.])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
        draw_rectangle(black_image, points, color=color)
    
        target = torch.zeros(batch, 1, 3, 3, device=device)
        target[:, :, 1, 1] = color
    
>       assert torch.all(black_image == target)
E       AssertionError: assert tensor(False)
E        +  where tensor(False) = <built-in method all of type object at 0x79b6136bf1c0>(tensor([[[[0....., 0., 0.]]]]) == tensor([[[[0....., 0., 0.]]]])
E        +    where <built-in method all of type object at 0x79b6136bf1c0> = torch.all
E           
E           Full diff:
E             tensor([[[[0., 0., 0.],
E           -           [0., 1., 0.],
E           ?                ^
E           +           [0., 0., 0.],
E           ?                ^...
E           
E           ...Full output truncated (25 lines hidden), use '-vv' to show)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:301: AssertionError
_________________ TestDrawRectangle.test_smoke[cpu-color0-17] __________________

self = <test_draw.TestDrawRectangle object at 0x79b52e91d9f0>
device = device(type='cpu'), batch = 17, color = tensor([1.])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
        draw_rectangle(black_image, points, color=color)
    
        target = torch.zeros(batch, 1, 3, 3, device=device)
        target[:, :, 1, 1] = color
    
>       assert torch.all(black_image == target)
E       AssertionError: assert tensor(False)
E        +  where tensor(False) = <built-in method all of type object at 0x79b6136bf1c0>(tensor([[[[0....., 0., 0.]]]]) == tensor([[[[0....., 0., 0.]]]])
E        +    where <built-in method all of type object at 0x79b6136bf1c0> = torch.all
E           
E           Full diff:
E             tensor([[[[0., 0., 0.],
E           -           [0., 1., 0.],
E           ?                ^
E           +           [0., 0., 0.],
E           ?                ^...
E           
E           ...Full output truncated (129 lines hidden), use '-vv' to show)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:301: AssertionError
__________________ TestDrawRectangle.test_smoke[cpu-color1-4] __________________

self = <test_draw.TestDrawRectangle object at 0x79b52e91dd20>
device = device(type='cpu'), batch = 4, color = tensor([0.5000])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
        draw_rectangle(black_image, points, color=color)
    
        target = torch.zeros(batch, 1, 3, 3, device=device)
        target[:, :, 1, 1] = color
    
>       assert torch.all(black_image == target)
E       AssertionError: assert tensor(False)
E        +  where tensor(False) = <built-in method all of type object at 0x79b6136bf1c0>(tensor([[[[0....., 0., 0.]]]]) == tensor([[[[0....0, 0.0000]]]])
E        +    where <built-in method all of type object at 0x79b6136bf1c0> = torch.all
E           
E           Full diff:
E           - tensor([[[[0.0000, 0.0000, 0.0000],
E           ?              ----    ----    ----
E           + tensor([[[[0., 0., 0.],
E           -           [0.0000, 0.5000, 0.0000],
E           ?              ----    ----    ----...
E           
E           ...Full output truncated (37 lines hidden), use '-vv' to show)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:301: AssertionError
_________________ TestDrawRectangle.test_smoke[cpu-color1-17] __________________

self = <test_draw.TestDrawRectangle object at 0x79b52e91dde0>
device = device(type='cpu'), batch = 17, color = tensor([0.5000])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
        draw_rectangle(black_image, points, color=color)
    
        target = torch.zeros(batch, 1, 3, 3, device=device)
        target[:, :, 1, 1] = color
    
>       assert torch.all(black_image == target)
E       AssertionError: assert tensor(False)
E        +  where tensor(False) = <built-in method all of type object at 0x79b6136bf1c0>(tensor([[[[0....., 0., 0.]]]]) == tensor([[[[0....0, 0.0000]]]])
E        +    where <built-in method all of type object at 0x79b6136bf1c0> = torch.all
E           
E           Full diff:
E           - tensor([[[[0.0000, 0.0000, 0.0000],
E           ?              ----    ----    ----
E           + tensor([[[[0., 0., 0.],
E           -           [0.0000, 0.5000, 0.0000],
E           ?              ----    ----    ----...
E           
E           ...Full output truncated (180 lines hidden), use '-vv' to show)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:301: AssertionError
____________ TestDrawRectangle.test_fill_and_edges[cpu-7-12-True-8] ____________

self = <test_draw.TestDrawRectangle object at 0x79b52e91eb30>
device = device(type='cpu'), batch = 8, fill = True, height = 12, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-12-True-11] ____________

self = <test_draw.TestDrawRectangle object at 0x79b52e91e050>
device = device(type='cpu'), batch = 11, fill = True, height = 12, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

  ...],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-106-True-8] ____________

self = <test_draw.TestDrawRectangle object at 0x79b52e91e770>
device = device(type='cpu'), batch = 8, fill = True, height = 106, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,...0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-106-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x79b52e91e830>
device = device(type='cpu'), batch = 11, fill = True, height = 106, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,...0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-298-True-8] ____________

self = <test_draw.TestDrawRectangle object at 0x79b52e91ea70>
device = device(type='cpu'), batch = 8, fill = True, height = 298, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,...0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-298-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x79b52e91e2c0>
device = device(type='cpu'), batch = 11, fill = True, height = 298, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,...0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-123-12-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x79b52e91f7c0>
device = device(type='cpu'), batch = 8, fill = True, height = 12, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0,...0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-12-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x79b52e91f880>
device = device(type='cpu'), batch = 11, fill = True, height = 12, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0,...0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-106-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x79b52e91fac0>
device = device(type='cpu'), batch = 8, fill = True, height = 106, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0,...0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-106-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x79b52e91fb80>
device = device(type='cpu'), batch = 11, fill = True, height = 106, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0,...0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-298-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x79b52e91fdc0>
device = device(type='cpu'), batch = 8, fill = True, height = 298, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0,...0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-298-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x79b52e91fe80>
device = device(type='cpu'), batch = 11, fill = True, height = 298, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0,...0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-537-12-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x79b52e958100>
device = device(type='cpu'), batch = 8, fill = True, height = 12, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0,...0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-12-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x79b52e9581c0>
device = device(type='cpu'), batch = 11, fill = True, height = 12, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0,...0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-106-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x79b52e958400>
device = device(type='cpu'), batch = 8, fill = True, height = 106, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0,...0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-106-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x79b52e9584c0>
device = device(type='cpu'), batch = 11, fill = True, height = 106, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0,...0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-298-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x79b52e958700>
device = device(type='cpu'), batch = 8, fill = True, height = 298, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0,...0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-298-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x79b52e9587c0>
device = device(type='cpu'), batch = 11, fill = True, height = 298, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0,...0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-5-4] _______________

self = <test_draw.TestDrawRectangle object at 0x79b52e958eb0>
device = device(type='cpu'), batch = 4, N = 5, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
        draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)
    
        for b in range(batch):
            for n in range(N):
                if fill:
>                   assert (
                        random_w_rectangle[
                            b,
                            :,
                            points_list[b][n][1] : points_list[b][n][3] + 1,
                            points_list[b][n][0] : points_list[b][n][2] + 1,
                        ].sum()
                        == (points_list[b][n][3] - points_list[b][n][1] + 1)
                        * (points_list[b][n][2] - points_list[b][n][0] + 1)
                        * 3
                    )
E                   assert tensor(101.3038) == ((((8 - 5) + 1) * ((18 - 10) + 1)) * 3)
E                    +  where tensor(101.3038) = <built-in method sum of Tensor object at 0x79b52e9aacf0>()
E                    +    where <built-in method sum of Tensor object at 0x79b52e9aacf0> = tensor([[[1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000],\n         [0.2756, 0.1699, 0.6599, 1.0000, 1.0000, 0.1709, 1.0000, 1.0000,\n          1.0000]],\n\n        [[1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000],\n         [0.2931, 0.2698, 0.3548, 1.0000, 1.0000, 0.1804, 1.0000, 1.0000,\n          1.0000]],\n\n        [[1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000],\n         [0.8952, 0.8135, 0.9498, 1.0000, 1.0000, 0.2708, 1.0000, 1.0000,\n          1.0000]]]).sum

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:346: AssertionError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-5-6] _______________

self = <test_draw.TestDrawRectangle object at 0x79b52e958df0>
device = device(type='cpu'), batch = 6, N = 5, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
        draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)
    
        for b in range(batch):
            for n in range(N):
                if fill:
>                   assert (
                        random_w_rectangle[
                            b,
                            :,
                            points_list[b][n][1] : points_list[b][n][3] + 1,
                            points_list[b][n][0] : points_list[b][n][2] + 1,
                        ].sum()
                        == (points_list[b][n][3] - points_list[b][n][1] + 1)
                        * (points_list[b][n][2] - points_list[b][n][0] + 1)
                        * 3
                    )
E                   assert tensor(19.4106) == ((((19 - 17) + 1) * ((14 - 12) + 1)) * 3)
E                    +  where tensor(19.4106) = <built-in method sum of Tensor object at 0x79b52e9aa9d0>()
E                    +    where <built-in method sum of Tensor object at 0x79b52e9aa9d0> = tensor([[[1.0000, 1.0000, 0.8173],\n         [1.0000, 1.0000, 0.7554],\n         [0.2960, 0.2651, 0.3713]],\n\n        [[1.0000, 1.0000, 0.1619],\n         [1.0000, 1.0000, 0.3358],\n         [0.0320, 0.8447, 0.9078]],\n\n        [[1.0000, 1.0000, 0.2124],\n         [1.0000, 1.0000, 0.1464],\n         [0.5875, 0.8779, 0.7991]]]).sum

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:346: AssertionError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-12-4] ______________

self = <test_draw.TestDrawRectangle object at 0x79b52e958cd0>
device = device(type='cpu'), batch = 4, N = 12, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
        draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)
    
        for b in range(batch):
            for n in range(N):
                if fill:
>                   assert (
                        random_w_rectangle[
                            b,
                            :,
                            points_list[b][n][1] : points_list[b][n][3] + 1,
                            points_list[b][n][0] : points_list[b][n][2] + 1,
                        ].sum()
                        == (points_list[b][n][3] - points_list[b][n][1] + 1)
                        * (points_list[b][n][2] - points_list[b][n][0] + 1)
                        * 3
                    )
E                   assert tensor(11.8896) == ((((18 - 16) + 1) * ((19 - 18) + 1)) * 3)
E                    +  where tensor(11.8896) = <built-in method sum of Tensor object at 0x79b52e931080>()
E                    +    where <built-in method sum of Tensor object at 0x79b52e931080> = tensor([[[1.0000, 0.9191],\n         [1.0000, 0.7920],\n         [0.2415, 0.4628]],\n\n        [[1.0000, 0.7660],\n         [1.0000, 0.3473],\n         [0.1972, 0.7361]],\n\n        [[1.0000, 0.2920],\n         [1.0000, 0.6409],\n         [0.3374, 0.1572]]]).sum

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:346: AssertionError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-12-6] ______________

self = <test_draw.TestDrawRectangle object at 0x79b52e9591e0>
device = device(type='cpu'), batch = 6, N = 12, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
        draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)
    
        for b in range(batch):
            for n in range(N):
                if fill:
>                   assert (
                        random_w_rectangle[
                            b,
                            :,
                            points_list[b][n][1] : points_list[b][n][3] + 1,
                            points_list[b][n][0] : points_list[b][n][2] + 1,
                        ].sum()
                        == (points_list[b][n][3] - points_list[b][n][1] + 1)
                        * (points_list[b][n][2] - points_list[b][n][0] + 1)
                        * 3
                    )
E                   assert tensor(199.6850) == ((((19 - 10) + 1) * ((17 - 11) + 1)) * 3)
E                    +  where tensor(199.6850) = <built-in method sum of Tensor object at 0x79b52e3cfd30>()
E                    +    where <built-in method sum of Tensor object at 0x79b52e3cfd30> = tensor([[[1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [0.8062, 0.4364, 0.1966, 0.7760, 0.7359, 0.8045, 0.3253]],\n\n        [[1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [0.2976, 0.9716, 0.4120, 0.3287, 0.4942, 0.1501, 0.7976]],\n\n        [[1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n         [0.3450, 0.3169, 0.8694, 0.1805, 0.4122, 0.2926, 0.7357]]]).sum

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:346: AssertionError
______________ TestDrawRectangle.test_n_rectangles[cpu-False-5-4] ______________

self = <test_draw.TestDrawRectangle object at 0x79b52e9592a0>
device = device(type='cpu'), batch = 4, N = 5, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.9912, 0.6116, 0.6313,  ..., 0.5426, 0.8796, 0.1801],
          [0.7345, 0.6892, 0.7896,  ..., 0.7414, 0.4...76, 0.9457, 0.1613,  ..., 0.1004, 0.5359, 0.6902],
          [0.0477, 0.9524, 0.4522,  ..., 0.7074, 0.7799, 0.4667]]]])
rectangle = tensor([[[10, 10, 13, 12],
         [ 4,  7,  8, 16],
         [10,  1, 11,  6],
         [ 4,  5,  6, 16],
         [... 13, 19],
         [14,  4, 19, 14],
         [13, 16, 17, 19],
         [ 1, 16, 12, 17],
         [ 7,  3, 18, 19]]])
color = tensor([[[1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.]],

 ...,

        [[1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.]]])
fill = False

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
                    image[b, :, y1, x1:x2] = rect_color
                    image[b, :, y2 - 1, x1:x2] = rect_color
>                   image[b, :, y1:y2, x1] = rect_color
E                   RuntimeError: The expanded size of the tensor (2) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 2].  Tensor sizes: [3]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:45: RuntimeError
______________ TestDrawRectangle.test_n_rectangles[cpu-False-5-6] ______________

self = <test_draw.TestDrawRectangle object at 0x79b52e959360>
device = device(type='cpu'), batch = 6, N = 5, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[4.4632e-01, 4.2863e-01, 4.4193e-01,  ..., 2.5829e-01,
           3.7912e-01, 6.4931e-01],
          [4.1126...1, 7.2738e-01],
          [5.1672e-01, 9.3514e-04, 8.9926e-02,  ..., 7.4248e-01,
           9.7716e-01, 8.6876e-01]]]])
rectangle = tensor([[[ 0,  9,  6, 11],
         [ 1, 17, 17, 18],
         [ 7, 10,  8, 14],
         [ 3, 12, 17, 13],
         [... 18, 13],
         [ 0, 10, 13, 13],
         [18, 12, 19, 16],
         [11,  4, 14, 16],
         [13,  7, 17,  9]]])
color = tensor([[[1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.]],

 ...,

        [[1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.]]])
fill = False

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = rect_color
E                   RuntimeError: The expanded size of the tensor (6) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 6].  Tensor sizes: [3]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:43: RuntimeError
_____________ TestDrawRectangle.test_n_rectangles[cpu-False-12-4] ______________

self = <test_draw.TestDrawRectangle object at 0x79b52e959420>
device = device(type='cpu'), batch = 4, N = 12, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.6620, 0.1862, 0.3246,  ..., 0.7760, 0.7901, 0.7800],
          [0.9705, 0.8809, 0.0756,  ..., 0.3031, 0.0...29, 0.3497, 0.7271,  ..., 0.6461, 0.3804, 0.6632],
          [0.1120, 0.1143, 0.1687,  ..., 0.9543, 0.2793, 0.6491]]]])
rectangle = tensor([[[16, 12, 19, 19],
         [ 5,  1, 11,  9],
         [ 1,  9,  6, 16],
         [ 8,  3, 12,  8],
         [...  8, 17],
         [ 1,  0,  8,  5],
         [16,  0, 17, 16],
         [14,  0, 18,  4],
         [ 7, 12, 16, 19]]])
color = tensor([[[1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
   ...],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.]]])
fill = False

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
                    image[b, :, y1, x1:x2] = rect_color
                    image[b, :, y2 - 1, x1:x2] = rect_color
>                   image[b, :, y1:y2, x1] = rect_color
E                   RuntimeError: The expanded size of the tensor (7) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 7].  Tensor sizes: [3]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:45: RuntimeError
_____________ TestDrawRectangle.test_n_rectangles[cpu-False-12-6] ______________

self = <test_draw.TestDrawRectangle object at 0x79b52e9594e0>
device = device(type='cpu'), batch = 6, N = 12, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.7664, 0.1927, 0.9212,  ..., 0.9496, 0.3995, 0.1256],
          [0.8538, 0.6992, 0.9641,  ..., 0.1392, 0.5...15, 0.2479, 0.4588,  ..., 0.2676, 0.7987, 0.6838],
          [0.2865, 0.5273, 0.4937,  ..., 0.9223, 0.8436, 0.2348]]]])
rectangle = tensor([[[15,  1, 19,  3],
         [ 3,  2, 14, 10],
         [ 4,  8, 16, 13],
         [ 5,  3, 13, 16],
         [... 17, 19],
         [ 5,  4,  7, 19],
         [ 3, 17, 13, 19],
         [10,  1, 14,  5],
         [13,  5, 14, 10]]])
color = tensor([[[1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
   ...],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.]]])
fill = False

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = rect_color
E                   RuntimeError: The expanded size of the tensor (4) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 4].  Tensor sizes: [3]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:43: RuntimeError
_____________ TestDrawRectangle.test_color_background[cpu-color0] ______________

self = <test_draw.TestDrawRectangle object at 0x79b52e9597e0>
device = device(type='cpu'), color = tensor([0.5000, 0.3000, 0.1500])

    @pytest.mark.parametrize("color", (torch.tensor([0.5, 0.3, 0.15]), torch.tensor([0.23, 0.33, 0.8])))
    def test_color_background(self, device, color):
        image = torch.zeros(1, 3, 40, 40, device=device)
        image[:, 0, :, :] = color[0]
        image[:, 1, :, :] = color[1]
        image[:, 2, :, :] = color[2]
        image_w_rectangle = image.clone()
        p1 = (1, 5)
        p2 = (30, 39)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
        draw_rectangle(image_w_rectangle, points, color=torch.tensor([1.0]))
>       assert (
            torch.abs(
                (image_w_rectangle - image).sum()
                - (1 - color[0]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1] + 1) - 4)
                - (1 - color[1]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1] + 1) - 4)
                - (1 - color[2]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1] + 1) - 4)
            )
            <= 0.0001
        )
E       assert tensor(8.2000) <= 0.0001
E        +  where tensor(8.2000) = <built-in method abs of type object at 0x79b6136bf1c0>((((tensor(250.1000) - ((1 - tensor(0.5000)) * (((2 * ((30 - 1) + 1)) + (2 * ((39 - 5) + 1))) - 4))) - ((1 - tensor(0.3000)) * (((2 * ((30 - 1) + 1)) + (2 * ((39 - 5) + 1))) - 4))) - ((1 - tensor(0.1500)) * (((2 * ((30 - 1) + 1)) + (2 * ((39 - 5) + 1))) - 4))))
E        +    where <built-in method abs of type object at 0x79b6136bf1c0> = torch.abs
E        +    and   tensor(250.1000) = <built-in method sum of Tensor object at 0x79b52e9a97b0>()
E        +      where <built-in method sum of Tensor object at 0x79b52e9a97b0> = (tensor([[[[0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 1.0000, 1.0000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 1.0000, 0.5000],\n          ...,\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000]],\n\n         [[0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 1.0000, 1.0000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 1.0000, 0.3000],\n          ...,\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000]],\n\n         [[0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 1.0000, 1.0000, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 1.0000, 0.1500],\n          ...,\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500]]]]) - tensor([[[[0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          ...,\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000]],\n\n         [[0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          ...,\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000]],\n\n         [[0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          ...,\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500]]]])).sum

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:395: AssertionError
_____________ TestDrawRectangle.test_color_background[cpu-color1] ______________

self = <test_draw.TestDrawRectangle object at 0x79b52e959750>
device = device(type='cpu'), color = tensor([0.2300, 0.3300, 0.8000])

    @pytest.mark.parametrize("color", (torch.tensor([0.5, 0.3, 0.15]), torch.tensor([0.23, 0.33, 0.8])))
    def test_color_background(self, device, color):
        image = torch.zeros(1, 3, 40, 40, device=device)
        image[:, 0, :, :] = color[0]
        image[:, 1, :, :] = color[1]
        image[:, 2, :, :] = color[2]
        image_w_rectangle = image.clone()
        p1 = (1, 5)
        p2 = (30, 39)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
        draw_rectangle(image_w_rectangle, points, color=torch.tensor([1.0]))
>       assert (
            torch.abs(
                (image_w_rectangle - image).sum()
                - (1 - color[0]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1] + 1) - 4)
                - (1 - color[1]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1] + 1) - 4)
                - (1 - color[2]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1] + 1) - 4)
            )
            <= 0.0001
        )
E       assert tensor(6.5600) <= 0.0001
E        +  where tensor(6.5600) = <built-in method abs of type object at 0x79b6136bf1c0>((((tensor(200.0800) - ((1 - tensor(0.2300)) * (((2 * ((30 - 1) + 1)) + (2 * ((39 - 5) + 1))) - 4))) - ((1 - tensor(0.3300)) * (((2 * ((30 - 1) + 1)) + (2 * ((39 - 5) + 1))) - 4))) - ((1 - tensor(0.8000)) * (((2 * ((30 - 1) + 1)) + (2 * ((39 - 5) + 1))) - 4))))
E        +    where <built-in method abs of type object at 0x79b6136bf1c0> = torch.abs
E        +    and   tensor(200.0800) = <built-in method sum of Tensor object at 0x79b52d905d50>()
E        +      where <built-in method sum of Tensor object at 0x79b52d905d50> = (tensor([[[[0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 1.0000, 1.0000, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 1.0000, 0.2300],\n          ...,\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300]],\n\n         [[0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 1.0000, 1.0000, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 1.0000, 0.3300],\n          ...,\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300]],\n\n         [[0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 1.0000, 1.0000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 1.0000, 0.8000],\n          ...,\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000]]]]) - tensor([[[[0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          ...,\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300]],\n\n         [[0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          ...,\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300]],\n\n         [[0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          ...,\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000]]]])).sum

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:395: AssertionError
_____________ TestDrawRectangle.test_color_foreground[cpu-color0] ______________

self = <test_draw.TestDrawRectangle object at 0x79b52e959c00>
device = device(type='cpu'), color = tensor([0.3400, 0.6300, 0.1600])

    @pytest.mark.parametrize("color", (torch.tensor([0.34, 0.63, 0.16]), torch.tensor([0.29, 0.13, 0.48])))
    def test_color_foreground(self, device, color):
        image = torch.zeros(1, 3, 50, 40, device=device)
        image_w_rectangle = image.clone()
        p1 = (10, 4)
        p2 = (11, 40)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
>       draw_rectangle(image_w_rectangle, points, color=color)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 4, 10, 40, 11]]])
color = tensor([[[0.3400, 0.6300, 0.1600]]]), fill = None

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = rect_color
E                   RuntimeError: The expanded size of the tensor (36) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 36].  Tensor sizes: [3]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:43: RuntimeError
_____________ TestDrawRectangle.test_color_foreground[cpu-color1] ______________

self = <test_draw.TestDrawRectangle object at 0x79b52e959b70>
device = device(type='cpu'), color = tensor([0.2900, 0.1300, 0.4800])

    @pytest.mark.parametrize("color", (torch.tensor([0.34, 0.63, 0.16]), torch.tensor([0.29, 0.13, 0.48])))
    def test_color_foreground(self, device, color):
        image = torch.zeros(1, 3, 50, 40, device=device)
        image_w_rectangle = image.clone()
        p1 = (10, 4)
        p2 = (11, 40)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
>       draw_rectangle(image_w_rectangle, points, color=color)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 4, 10, 40, 11]]])
color = tensor([[[0.2900, 0.1300, 0.4800]]]), fill = None

    def draw_rectangle(image: torch.Tensor, rectangle: torch.Tensor, color: Optional[torch.Tensor]=None, fill: bool=False) -> torch.Tensor:
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (Tensor): A tensor of shape (B, C, H, W).
            rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).
            color (Tensor, optional): A tensor specifying the color of the rectangles.
                                      Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).
            fill (bool, optional): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            Tensor: The modified image tensor with rectangles drawn.
        """
        assert image.dim() == 4, 'Image tensor must be of shape (B, C, H, W)'
        assert rectangle.dim() == 3 and rectangle.size(2) == 4, 'Rectangle tensor must be of shape (B, N, 4)'
        assert image.size(0) == rectangle.size(0), 'Batch size of image and rectangle tensors must match'
        B, C, H, W = image.shape
        _, N, _ = rectangle.shape
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        else:
            raise ValueError('Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)')
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = rect_color
E                   RuntimeError: The expanded size of the tensor (36) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 36].  Tensor sizes: [3]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:43: RuntimeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1]
======================== 34 failed, 18 passed in 1.05s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', None, 'cudagraphs', 'jit', 'onnxrt', 'tvm', 'inductor'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 52 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] PASSED

============================== 52 passed in 0.28s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'jit', 'openxla', 'tvm', 'inductor', 'onnxrt', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 52 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] PASSED

============================== 52 passed in 0.31s ==============================
