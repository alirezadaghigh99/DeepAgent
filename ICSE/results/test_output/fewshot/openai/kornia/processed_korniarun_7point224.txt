output file:
processed_korniarun_7point224.json
function:
run_7point
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'inductor', 'cudagraphs', 'tvm', 'openxla', None, 'jit'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 16 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XFAIL
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] PASSED

=================================== FAILURES ===================================
_____________ TestFindFundamental.test_shape_7point[cpu-float32-1] _____________

self = <test_fundamental.TestFindFundamental object at 0x7845cc127bb0>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:171: in find_fundamental
    result = run_7point(points1, points2)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:62: in run_7point
    return run_7point(points1, points2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.4685, 0.2365],
         [0.8424, 0.1201],
         [0.8351, 0.8361],
         [0.9107, 0.9031],
         [0.8144, 0.1039],
         [0.5434, 0.8907],
         [0.2692, 0.8783]]])
points2 = tensor([[[4.5459e-01, 6.9559e-05],
         [8.3865e-01, 3.2586e-01],
         [4.3668e-01, 2.8719e-01],
         [4.9...3.8759e-01],
         [1.8795e-01, 4.3852e-01],
         [9.6177e-01, 4.1277e-02],
         [7.9853e-01, 3.5168e-01]]])

    def run_7point(points1: torch.Tensor, points2: torch.Tensor) -> torch.Tensor:
        """
        Compute the fundamental matrix using the 7-point algorithm.
    
        Args:
            points1 (torch.Tensor): Tensor of shape (B, 7, 2) representing the first set of points.
            points2 (torch.Tensor): Tensor of shape (B, 7, 2) representing the second set of points.
    
        Returns:
            torch.Tensor: Tensor of shape (B, 3*m, 3) containing the computed fundamental matrices.
        """
        assert points1.shape == points2.shape, 'Input tensors must have the same shape.'
        assert points1.shape[1] == 7 and points1.shape[2] == 2, 'Each batch must contain exactly 7 points of dimension 2.'
        B = points1.shape[0]
        fundamental_matrices = []
        for b in range(B):
    
            def normalize_points(pts):
                mean = pts.mean(dim=0)
                std = pts.std(dim=0)
                T = torch.tensor([[1 / std[0], 0, -mean[0] / std[0]], [0, 1 / std[1], -mean[1] / std[1]], [0, 0, 1]], dtype=pts.dtype, device=pts.device)
                pts_h = torch.cat([pts, torch.ones((pts.shape[0], 1), dtype=pts.dtype, device=pts.device)], dim=1)
                pts_normalized = (T @ pts_h.T).T
                return (pts_normalized, T)
            pts1, T1 = normalize_points(points1[b])
            pts2, T2 = normalize_points(points2[b])
            A = torch.zeros((7, 9), dtype=points1.dtype, device=points1.device)
            for i in range(7):
>               x1, y1 = pts1[i]
E               ValueError: too many values to unpack (expected 2)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:40: ValueError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-2] _____________

self = <test_fundamental.TestFindFundamental object at 0x7845cc127af0>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:171: in find_fundamental
    result = run_7point(points1, points2)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:62: in run_7point
    return run_7point(points1, points2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.5638, 0.1682],
         [0.6753, 0.2607],
         [0.8873, 0.1149],
         [0.4077, 0.2718],
         [... 0.2070],
         [0.8234, 0.9202],
         [0.5332, 0.9623],
         [0.3984, 0.8369],
         [0.4645, 0.4705]]])
points2 = tensor([[[0.8112, 0.1420],
         [0.6608, 0.2513],
         [0.4131, 0.9746],
         [0.6493, 0.0014],
         [... 0.5475],
         [0.0329, 0.9716],
         [0.5278, 0.4325],
         [0.4616, 0.1950],
         [0.2772, 0.3436]]])

    def run_7point(points1: torch.Tensor, points2: torch.Tensor) -> torch.Tensor:
        """
        Compute the fundamental matrix using the 7-point algorithm.
    
        Args:
            points1 (torch.Tensor): Tensor of shape (B, 7, 2) representing the first set of points.
            points2 (torch.Tensor): Tensor of shape (B, 7, 2) representing the second set of points.
    
        Returns:
            torch.Tensor: Tensor of shape (B, 3*m, 3) containing the computed fundamental matrices.
        """
        assert points1.shape == points2.shape, 'Input tensors must have the same shape.'
        assert points1.shape[1] == 7 and points1.shape[2] == 2, 'Each batch must contain exactly 7 points of dimension 2.'
        B = points1.shape[0]
        fundamental_matrices = []
        for b in range(B):
    
            def normalize_points(pts):
                mean = pts.mean(dim=0)
                std = pts.std(dim=0)
                T = torch.tensor([[1 / std[0], 0, -mean[0] / std[0]], [0, 1 / std[1], -mean[1] / std[1]], [0, 0, 1]], dtype=pts.dtype, device=pts.device)
                pts_h = torch.cat([pts, torch.ones((pts.shape[0], 1), dtype=pts.dtype, device=pts.device)], dim=1)
                pts_normalized = (T @ pts_h.T).T
                return (pts_normalized, T)
            pts1, T1 = normalize_points(points1[b])
            pts2, T2 = normalize_points(points2[b])
            A = torch.zeros((7, 9), dtype=points1.dtype, device=points1.device)
            for i in range(7):
>               x1, y1 = pts1[i]
E               ValueError: too many values to unpack (expected 2)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:40: ValueError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-3] _____________

self = <test_fundamental.TestFindFundamental object at 0x7845cc127df0>
batch_size = 3, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:171: in find_fundamental
    result = run_7point(points1, points2)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:62: in run_7point
    return run_7point(points1, points2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.1901, 0.3921],
         [0.0754, 0.4180],
         [0.5946, 0.0546],
         [0.6336, 0.4788],
         [... 0.1380],
         [0.7549, 0.5680],
         [0.4727, 0.8339],
         [0.0488, 0.6222],
         [0.3615, 0.9578]]])
points2 = tensor([[[0.5209, 0.9701],
         [0.9638, 0.0266],
         [0.5426, 0.9311],
         [0.0029, 0.9432],
         [... 0.8335],
         [0.7020, 0.3581],
         [0.9261, 0.0316],
         [0.3314, 0.0377],
         [0.3858, 0.1999]]])

    def run_7point(points1: torch.Tensor, points2: torch.Tensor) -> torch.Tensor:
        """
        Compute the fundamental matrix using the 7-point algorithm.
    
        Args:
            points1 (torch.Tensor): Tensor of shape (B, 7, 2) representing the first set of points.
            points2 (torch.Tensor): Tensor of shape (B, 7, 2) representing the second set of points.
    
        Returns:
            torch.Tensor: Tensor of shape (B, 3*m, 3) containing the computed fundamental matrices.
        """
        assert points1.shape == points2.shape, 'Input tensors must have the same shape.'
        assert points1.shape[1] == 7 and points1.shape[2] == 2, 'Each batch must contain exactly 7 points of dimension 2.'
        B = points1.shape[0]
        fundamental_matrices = []
        for b in range(B):
    
            def normalize_points(pts):
                mean = pts.mean(dim=0)
                std = pts.std(dim=0)
                T = torch.tensor([[1 / std[0], 0, -mean[0] / std[0]], [0, 1 / std[1], -mean[1] / std[1]], [0, 0, 1]], dtype=pts.dtype, device=pts.device)
                pts_h = torch.cat([pts, torch.ones((pts.shape[0], 1), dtype=pts.dtype, device=pts.device)], dim=1)
                pts_normalized = (T @ pts_h.T).T
                return (pts_normalized, T)
            pts1, T1 = normalize_points(points1[b])
            pts2, T2 = normalize_points(points2[b])
            A = torch.zeros((7, 9), dtype=points1.dtype, device=points1.device)
            for i in range(7):
>               x1, y1 = pts1[i]
E               ValueError: too many values to unpack (expected 2)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:40: ValueError
_____________ TestFindFundamental.test_7point_opencv[cpu-float32] ______________

self = <test_fundamental.TestFindFundamental object at 0x7845cc158430>
device = device(type='cpu'), dtype = torch.float32

    def test_7point_opencv(self, device, dtype):
        points1 = torch.tensor(
            [
                [
                    [0.8569, 0.5982],
                    [0.0059, 0.9649],
                    [0.1968, 0.8846],
                    [0.6084, 0.3467],
                    [0.9633, 0.5274],
                    [0.8941, 0.8939],
                    [0.0863, 0.5133],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        points2 = torch.tensor(
            [
                [
                    [0.0928, 0.3013],
                    [0.0989, 0.9649],
                    [0.0341, 0.4827],
                    [0.8294, 0.4469],
                    [0.2230, 0.2998],
                    [0.1722, 0.8182],
                    [0.5264, 0.8869],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        # generated with OpenCV using above points
        # Fm_expected shape is 9x3
        # import cv2
        # Fm_expected, _ = cv2.findFundamentalMat(
        #   points1.detach().numpy().reshape(-1, 1, 2),
        #   points2.detach().numpy().reshape(-1, 1, 2), cv2.FM_7POINT)
    
        Fm_expected = torch.tensor(
            [
                [
                    [
                        [-2.87490907, 5.41934672, 0.73871396],
                        [0.34010174, 3.70371623, -4.65517276],
                        [-0.1809933, -0.56577107, 1.0],
                    ],
                    [
                        [0.14465888, 0.68711702, -0.65570944],
                        [0.53424758, 0.7988479, -0.75446946],
                        [-0.48201197, -1.05375511, 1.0],
                    ],
                    [
                        [-0.0901827, 1.05515785, -0.54726062],
                        [0.51914823, 1.02476892, -1.05783979],
                        [-0.45860077, -1.01580301, 1.0],
                    ],
                ]
            ],
            device=device,
            dtype=dtype,
        )
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:171: in find_fundamental
    result = run_7point(points1, points2)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:62: in run_7point
    return run_7point(points1, points2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.8569, 0.5982],
         [0.0059, 0.9649],
         [0.1968, 0.8846],
         [0.6084, 0.3467],
         [0.9633, 0.5274],
         [0.8941, 0.8939],
         [0.0863, 0.5133]]])
points2 = tensor([[[0.0928, 0.3013],
         [0.0989, 0.9649],
         [0.0341, 0.4827],
         [0.8294, 0.4469],
         [0.2230, 0.2998],
         [0.1722, 0.8182],
         [0.5264, 0.8869]]])

    def run_7point(points1: torch.Tensor, points2: torch.Tensor) -> torch.Tensor:
        """
        Compute the fundamental matrix using the 7-point algorithm.
    
        Args:
            points1 (torch.Tensor): Tensor of shape (B, 7, 2) representing the first set of points.
            points2 (torch.Tensor): Tensor of shape (B, 7, 2) representing the second set of points.
    
        Returns:
            torch.Tensor: Tensor of shape (B, 3*m, 3) containing the computed fundamental matrices.
        """
        assert points1.shape == points2.shape, 'Input tensors must have the same shape.'
        assert points1.shape[1] == 7 and points1.shape[2] == 2, 'Each batch must contain exactly 7 points of dimension 2.'
        B = points1.shape[0]
        fundamental_matrices = []
        for b in range(B):
    
            def normalize_points(pts):
                mean = pts.mean(dim=0)
                std = pts.std(dim=0)
                T = torch.tensor([[1 / std[0], 0, -mean[0] / std[0]], [0, 1 / std[1], -mean[1] / std[1]], [0, 0, 1]], dtype=pts.dtype, device=pts.device)
                pts_h = torch.cat([pts, torch.ones((pts.shape[0], 1), dtype=pts.dtype, device=pts.device)], dim=1)
                pts_normalized = (T @ pts_h.T).T
                return (pts_normalized, T)
            pts1, T1 = normalize_points(points1[b])
            pts2, T2 = normalize_points(points2[b])
            A = torch.zeros((7, 9), dtype=points1.dtype, device=points1.device)
            for i in range(7):
>               x1, y1 = pts1[i]
E               ValueError: too many values to unpack (expected 2)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:40: ValueError
________ TestFindFundamental.test_synthetic_sampson_7point[cpu-float32] ________

self = <test_fundamental.TestFindFundamental object at 0x7845cc158760>
device = device(type='cpu'), dtype = torch.float32

    def test_synthetic_sampson_7point(self, device, dtype):
        scene: Dict[str, torch.Tensor] = generate_two_view_random_scene(device, dtype)
        x1 = scene["x1"][:, :7, :]
        x2 = scene["x2"][:, :7, :]
>       F_est = epi.find_fundamental(x1, x2, None, "7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:171: in find_fundamental
    result = run_7point(points1, points2)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:62: in run_7point
    return run_7point(points1, points2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[73.3706, 91.7949],
         [70.7063, 90.1737],
         [66.7851, 91.8372],
         [67.7060, 90.9255],
         [64.1995, 92.2673],
         [65.9520, 89.1134],
         [48.4607, 90.3265]]])
points2 = tensor([[[61.3503, 92.7008],
         [68.1455, 92.2716],
         [61.8398, 94.6899],
         [69.4787, 94.3137],
         [56.2377, 95.1605],
         [53.7239, 89.8204],
         [40.8416, 93.0901]]])

    def run_7point(points1: torch.Tensor, points2: torch.Tensor) -> torch.Tensor:
        """
        Compute the fundamental matrix using the 7-point algorithm.
    
        Args:
            points1 (torch.Tensor): Tensor of shape (B, 7, 2) representing the first set of points.
            points2 (torch.Tensor): Tensor of shape (B, 7, 2) representing the second set of points.
    
        Returns:
            torch.Tensor: Tensor of shape (B, 3*m, 3) containing the computed fundamental matrices.
        """
        assert points1.shape == points2.shape, 'Input tensors must have the same shape.'
        assert points1.shape[1] == 7 and points1.shape[2] == 2, 'Each batch must contain exactly 7 points of dimension 2.'
        B = points1.shape[0]
        fundamental_matrices = []
        for b in range(B):
    
            def normalize_points(pts):
                mean = pts.mean(dim=0)
                std = pts.std(dim=0)
                T = torch.tensor([[1 / std[0], 0, -mean[0] / std[0]], [0, 1 / std[1], -mean[1] / std[1]], [0, 0, 1]], dtype=pts.dtype, device=pts.device)
                pts_h = torch.cat([pts, torch.ones((pts.shape[0], 1), dtype=pts.dtype, device=pts.device)], dim=1)
                pts_normalized = (T @ pts_h.T).T
                return (pts_normalized, T)
            pts1, T1 = normalize_points(points1[b])
            pts2, T2 = normalize_points(points2[b])
            A = torch.zeros((7, 9), dtype=points1.dtype, device=points1.device)
            for i in range(7):
>               x1, y1 = pts1[i]
E               ValueError: too many values to unpack (expected 2)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:40: ValueError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32]
=================== 5 failed, 10 passed, 1 xfailed in 0.40s ====================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'openxla', 'cudagraphs', 'onnxrt', 'inductor', 'tvm', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 16 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XPASS
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] PASSED

======================== 15 passed, 1 xpassed in 0.21s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'tvm', 'inductor', 'cudagraphs', 'onnxrt', None, 'openxla'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 16 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XPASS
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] PASSED

======================== 15 passed, 1 xpassed in 0.21s =========================
