output file:
processed_korniamotion_from_essential_choose_solution220.json
function:
motion_from_essential_choose_solution
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_gradcheck[cpu]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_two_view[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-20]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_two_view[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-3-2]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_masking[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_gradcheck[cpu] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-3-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-20] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_smoke[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_smoke[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_masking[cpu-float32]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'inductor', 'cudagraphs', 'onnxrt', 'tvm', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 11 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_smoke[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-1-3] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-3] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-3-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_masking[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-10] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-15] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-20] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_two_view[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_gradcheck[cpu] FAILED

=================================== FAILURES ===================================
________ TestMotionFromEssentialChooseSolution.test_smoke[cpu-float32] _________

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x70de9012edd0>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke(self, device, dtype):
        E_mat = torch.rand(1, 3, 3, device=device, dtype=dtype)
        K1 = torch.rand(1, 3, 3, device=device, dtype=dtype)
        K2 = torch.rand(1, 3, 3, device=device, dtype=dtype)
        x1 = torch.rand(1, 1, 2, device=device, dtype=dtype)
        x2 = torch.rand(1, 1, 2, device=device, dtype=dtype)
>       R, t, X = epi.motion_from_essential_choose_solution(E_mat, K1, K2, x1, x2)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/essential.py:260: in motion_from_essential_choose_solution
    return motion_from_essential_choose_solution(E_mat, K1, K2, x1, x2, mask)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

E_mat = tensor([[[0.5561, 0.3333, 0.9698],
         [0.0844, 0.7972, 0.2584],
         [0.8980, 0.4533, 0.8551]]])
K1 = tensor([[[0.6235, 0.4227, 0.9012],
         [0.1864, 0.8735, 0.9246],
         [0.5689, 0.8909, 0.2739]]])
K2 = tensor([[[0.4308, 0.9201, 0.7171],
         [0.2531, 0.0226, 0.9006],
         [0.2947, 0.7478, 0.5076]]])
x1 = tensor([[[0.6797, 0.2556]]]), x2 = tensor([[[0.3717, 0.5897]]])
mask = None

    def motion_from_essential_choose_solution(E_mat: torch.Tensor, K1: torch.Tensor, K2: torch.Tensor, x1: torch.Tensor, x2: torch.Tensor, mask: Optional[torch.Tensor]=None) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor]:
        """
        Recover the relative camera rotation and translation from an estimated essential matrix.
    
        Args:
            E_mat (Tensor): Essential matrix of shape (3, 3).
            K1 (Tensor): Camera matrix for the first image of shape (3, 3).
            K2 (Tensor): Camera matrix for the second image of shape (3, 3).
            x1 (Tensor): Points in the first image of shape (N, 2).
            x2 (Tensor): Corresponding points in the second image of shape (N, 2).
            mask (Tensor, optional): Mask to exclude certain points. Defaults to None.
    
        Returns:
            Tuple[Tensor, Tensor, Tensor]: Rotation matrix (3, 3), translation vector (3,), and 3D points (N, 3).
        """
        if E_mat.shape != (3, 3):
>           raise ValueError('E_mat must be of shape (3, 3)')
E           ValueError: E_mat must be of shape (3, 3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:30: ValueError
______ TestMotionFromEssentialChooseSolution.test_shape[cpu-float32-1-3] _______

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x70de9012f280>
batch_size = 1, num_points = 3, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 3), (2, 3), (2, 8), (3, 2)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        E_mat = torch.rand(B, 3, 3, device=device, dtype=dtype)
        K1 = torch.rand(B, 3, 3, device=device, dtype=dtype)
        K2 = torch.rand(1, 3, 3, device=device, dtype=dtype)  # check for broadcasting
        x1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        x2 = torch.rand(B, 1, 2, device=device, dtype=dtype)  # check for broadcasting
>       R, t, X = epi.motion_from_essential_choose_solution(E_mat, K1, K2, x1, x2)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:430: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/essential.py:260: in motion_from_essential_choose_solution
    return motion_from_essential_choose_solution(E_mat, K1, K2, x1, x2, mask)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

E_mat = tensor([[[0.4117, 0.4775, 0.0938],
         [0.5639, 0.1912, 0.1500],
         [0.7626, 0.7987, 0.8603]]])
K1 = tensor([[[0.0341, 0.8368, 0.5917],
         [0.9933, 0.0374, 0.6825],
         [0.1322, 0.5436, 0.4018]]])
K2 = tensor([[[0.6428, 0.6579, 0.2808],
         [0.5293, 0.0167, 0.3935],
         [0.6030, 0.5044, 0.5283]]])
x1 = tensor([[[0.6156, 0.9031],
         [0.3674, 0.3173],
         [0.2726, 0.0735]]])
x2 = tensor([[[0.1350, 0.4243]]]), mask = None

    def motion_from_essential_choose_solution(E_mat: torch.Tensor, K1: torch.Tensor, K2: torch.Tensor, x1: torch.Tensor, x2: torch.Tensor, mask: Optional[torch.Tensor]=None) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor]:
        """
        Recover the relative camera rotation and translation from an estimated essential matrix.
    
        Args:
            E_mat (Tensor): Essential matrix of shape (3, 3).
            K1 (Tensor): Camera matrix for the first image of shape (3, 3).
            K2 (Tensor): Camera matrix for the second image of shape (3, 3).
            x1 (Tensor): Points in the first image of shape (N, 2).
            x2 (Tensor): Corresponding points in the second image of shape (N, 2).
            mask (Tensor, optional): Mask to exclude certain points. Defaults to None.
    
        Returns:
            Tuple[Tensor, Tensor, Tensor]: Rotation matrix (3, 3), translation vector (3,), and 3D points (N, 3).
        """
        if E_mat.shape != (3, 3):
>           raise ValueError('E_mat must be of shape (3, 3)')
E           ValueError: E_mat must be of shape (3, 3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:30: ValueError
______ TestMotionFromEssentialChooseSolution.test_shape[cpu-float32-2-3] _______

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x70de9012f1c0>
batch_size = 2, num_points = 3, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 3), (2, 3), (2, 8), (3, 2)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        E_mat = torch.rand(B, 3, 3, device=device, dtype=dtype)
        K1 = torch.rand(B, 3, 3, device=device, dtype=dtype)
        K2 = torch.rand(1, 3, 3, device=device, dtype=dtype)  # check for broadcasting
        x1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        x2 = torch.rand(B, 1, 2, device=device, dtype=dtype)  # check for broadcasting
>       R, t, X = epi.motion_from_essential_choose_solution(E_mat, K1, K2, x1, x2)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:430: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/essential.py:260: in motion_from_essential_choose_solution
    return motion_from_essential_choose_solution(E_mat, K1, K2, x1, x2, mask)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

E_mat = tensor([[[0.7655, 0.5001, 0.8449],
         [0.2780, 0.0215, 0.3216],
         [0.5327, 0.9092, 0.1750]],

        [[0.7401, 0.0457, 0.4644],
         [0.2313, 0.4992, 0.5893],
         [0.4431, 0.6554, 0.5788]]])
K1 = tensor([[[0.8256, 0.7999, 0.5265],
         [0.2909, 0.7171, 0.5547],
         [0.6609, 0.3227, 0.4054]],

        [[0.8738, 0.2392, 0.9543],
         [0.9302, 0.6713, 0.7724],
         [0.6427, 0.7303, 0.0604]]])
K2 = tensor([[[0.5850, 0.4384, 0.3268],
         [0.0917, 0.8589, 0.7552],
         [0.6236, 0.5574, 0.8058]]])
x1 = tensor([[[0.4671, 0.1507],
         [0.5101, 0.1134],
         [0.4186, 0.2608]],

        [[0.3880, 0.5395],
         [0.3198, 0.5099],
         [0.5263, 0.8726]]])
x2 = tensor([[[0.5283, 0.1174]],

        [[0.0771, 0.3414]]]), mask = None

    def motion_from_essential_choose_solution(E_mat: torch.Tensor, K1: torch.Tensor, K2: torch.Tensor, x1: torch.Tensor, x2: torch.Tensor, mask: Optional[torch.Tensor]=None) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor]:
        """
        Recover the relative camera rotation and translation from an estimated essential matrix.
    
        Args:
            E_mat (Tensor): Essential matrix of shape (3, 3).
            K1 (Tensor): Camera matrix for the first image of shape (3, 3).
            K2 (Tensor): Camera matrix for the second image of shape (3, 3).
            x1 (Tensor): Points in the first image of shape (N, 2).
            x2 (Tensor): Corresponding points in the second image of shape (N, 2).
            mask (Tensor, optional): Mask to exclude certain points. Defaults to None.
    
        Returns:
            Tuple[Tensor, Tensor, Tensor]: Rotation matrix (3, 3), translation vector (3,), and 3D points (N, 3).
        """
        if E_mat.shape != (3, 3):
>           raise ValueError('E_mat must be of shape (3, 3)')
E           ValueError: E_mat must be of shape (3, 3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:30: ValueError
______ TestMotionFromEssentialChooseSolution.test_shape[cpu-float32-2-8] _______

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x70de9012f580>
batch_size = 2, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 3), (2, 3), (2, 8), (3, 2)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        E_mat = torch.rand(B, 3, 3, device=device, dtype=dtype)
        K1 = torch.rand(B, 3, 3, device=device, dtype=dtype)
        K2 = torch.rand(1, 3, 3, device=device, dtype=dtype)  # check for broadcasting
        x1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        x2 = torch.rand(B, 1, 2, device=device, dtype=dtype)  # check for broadcasting
>       R, t, X = epi.motion_from_essential_choose_solution(E_mat, K1, K2, x1, x2)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:430: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/essential.py:260: in motion_from_essential_choose_solution
    return motion_from_essential_choose_solution(E_mat, K1, K2, x1, x2, mask)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

E_mat = tensor([[[0.6484, 0.0018, 0.6716],
         [0.9414, 0.1829, 0.6941],
         [0.3252, 0.3707, 0.7053]],

        [[0.1151, 0.3554, 0.8213],
         [0.9700, 0.1102, 0.6069],
         [0.4064, 0.8294, 0.7899]]])
K1 = tensor([[[0.3908, 0.7982, 0.4287],
         [0.9610, 0.9992, 0.8820],
         [0.0529, 0.9384, 0.6339]],

        [[0.0512, 0.2327, 0.0105],
         [0.9570, 0.8500, 0.9809],
         [0.8297, 0.6514, 0.1651]]])
K2 = tensor([[[0.5634, 0.7241, 0.2087],
         [0.8646, 0.3596, 0.0196],
         [0.9170, 0.8961, 0.7648]]])
x1 = tensor([[[0.7424, 0.4257],
         [0.8649, 0.9326],
         [0.6001, 0.5474],
         [0.0204, 0.9888],
         [... 0.2044],
         [0.6773, 0.2364],
         [0.3123, 0.1902],
         [0.2501, 0.0485],
         [0.0083, 0.9036]]])
x2 = tensor([[[0.7598, 0.1403]],

        [[0.4779, 0.6907]]]), mask = None

    def motion_from_essential_choose_solution(E_mat: torch.Tensor, K1: torch.Tensor, K2: torch.Tensor, x1: torch.Tensor, x2: torch.Tensor, mask: Optional[torch.Tensor]=None) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor]:
        """
        Recover the relative camera rotation and translation from an estimated essential matrix.
    
        Args:
            E_mat (Tensor): Essential matrix of shape (3, 3).
            K1 (Tensor): Camera matrix for the first image of shape (3, 3).
            K2 (Tensor): Camera matrix for the second image of shape (3, 3).
            x1 (Tensor): Points in the first image of shape (N, 2).
            x2 (Tensor): Corresponding points in the second image of shape (N, 2).
            mask (Tensor, optional): Mask to exclude certain points. Defaults to None.
    
        Returns:
            Tuple[Tensor, Tensor, Tensor]: Rotation matrix (3, 3), translation vector (3,), and 3D points (N, 3).
        """
        if E_mat.shape != (3, 3):
>           raise ValueError('E_mat must be of shape (3, 3)')
E           ValueError: E_mat must be of shape (3, 3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:30: ValueError
______ TestMotionFromEssentialChooseSolution.test_shape[cpu-float32-3-2] _______

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x70de9012f640>
batch_size = 3, num_points = 2, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 3), (2, 3), (2, 8), (3, 2)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        E_mat = torch.rand(B, 3, 3, device=device, dtype=dtype)
        K1 = torch.rand(B, 3, 3, device=device, dtype=dtype)
        K2 = torch.rand(1, 3, 3, device=device, dtype=dtype)  # check for broadcasting
        x1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        x2 = torch.rand(B, 1, 2, device=device, dtype=dtype)  # check for broadcasting
>       R, t, X = epi.motion_from_essential_choose_solution(E_mat, K1, K2, x1, x2)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:430: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/essential.py:260: in motion_from_essential_choose_solution
    return motion_from_essential_choose_solution(E_mat, K1, K2, x1, x2, mask)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

E_mat = tensor([[[0.8530, 0.1195, 0.6884],
         [0.8752, 0.7217, 0.1624],
         [0.6858, 0.8661, 0.5003]],

        [[0..., 0.8305]],

        [[0.4530, 0.7442, 0.3934],
         [0.1986, 0.0031, 0.6342],
         [0.9730, 0.2881, 0.7826]]])
K1 = tensor([[[0.5695, 0.2425, 0.4466],
         [0.4280, 0.4987, 0.6850],
         [0.0932, 0.4758, 0.4419]],

        [[0..., 0.7012]],

        [[0.1097, 0.7276, 0.4201],
         [0.2774, 0.3047, 0.9743],
         [0.5820, 0.6880, 0.3530]]])
K2 = tensor([[[0.7718, 0.9728, 0.3863],
         [0.6052, 0.9337, 0.1023],
         [0.3778, 0.0482, 0.7777]]])
x1 = tensor([[[0.7121, 0.9918],
         [0.5387, 0.9905]],

        [[0.9018, 0.8064],
         [0.9110, 0.2398]],

        [[0.6613, 0.9703],
         [0.4577, 0.7053]]])
x2 = tensor([[[0.6840, 0.8568]],

        [[0.3479, 0.4920]],

        [[0.4119, 0.1300]]])
mask = None

    def motion_from_essential_choose_solution(E_mat: torch.Tensor, K1: torch.Tensor, K2: torch.Tensor, x1: torch.Tensor, x2: torch.Tensor, mask: Optional[torch.Tensor]=None) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor]:
        """
        Recover the relative camera rotation and translation from an estimated essential matrix.
    
        Args:
            E_mat (Tensor): Essential matrix of shape (3, 3).
            K1 (Tensor): Camera matrix for the first image of shape (3, 3).
            K2 (Tensor): Camera matrix for the second image of shape (3, 3).
            x1 (Tensor): Points in the first image of shape (N, 2).
            x2 (Tensor): Corresponding points in the second image of shape (N, 2).
            mask (Tensor, optional): Mask to exclude certain points. Defaults to None.
    
        Returns:
            Tuple[Tensor, Tensor, Tensor]: Rotation matrix (3, 3), translation vector (3,), and 3D points (N, 3).
        """
        if E_mat.shape != (3, 3):
>           raise ValueError('E_mat must be of shape (3, 3)')
E           ValueError: E_mat must be of shape (3, 3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:30: ValueError
_______ TestMotionFromEssentialChooseSolution.test_masking[cpu-float32] ________

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x70de9012f910>
device = device(type='cpu'), dtype = torch.float32

    def test_masking(self, device, dtype):
        E_mat = torch.rand(2, 3, 3, device=device, dtype=dtype)
        K1 = torch.rand(2, 3, 3, device=device, dtype=dtype)
        K2 = torch.rand(2, 3, 3, device=device, dtype=dtype)
        x1 = torch.rand(2, 10, 2, device=device, dtype=dtype)
        x2 = torch.rand(2, 10, 2, device=device, dtype=dtype)
    
>       R, t, X = epi.motion_from_essential_choose_solution(E_mat, K1, K2, x1[:, 1:-1, :], x2[:, 1:-1, :])

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:442: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/essential.py:260: in motion_from_essential_choose_solution
    return motion_from_essential_choose_solution(E_mat, K1, K2, x1, x2, mask)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

E_mat = tensor([[[0.0643, 0.6022, 0.9282],
         [0.9021, 0.7838, 0.8116],
         [0.1999, 0.0631, 0.2639]],

        [[0.3693, 0.3429, 0.8633],
         [0.3114, 0.0431, 0.3328],
         [0.7817, 0.8470, 0.4055]]])
K1 = tensor([[[0.3843, 0.9516, 0.3642],
         [0.2637, 0.7297, 0.5364],
         [0.9813, 0.2965, 0.3690]],

        [[0.9864, 0.5401, 0.3472],
         [0.8553, 0.1633, 0.3544],
         [0.7435, 0.5219, 0.3476]]])
K2 = tensor([[[0.1831, 0.3518, 0.1868],
         [0.8017, 0.2591, 0.4912],
         [0.0984, 0.8552, 0.7693]],

        [[0.1301, 0.6639, 0.8836],
         [0.2999, 0.2930, 0.9114],
         [0.2507, 0.4996, 0.9085]]])
x1 = tensor([[[0.2688, 0.5517],
         [0.0123, 0.4426],
         [0.7839, 0.4942],
         [0.8135, 0.3487],
         [... 0.8976],
         [0.4151, 0.4237],
         [0.9575, 0.5269],
         [0.0337, 0.9381],
         [0.8983, 0.2417]]])
x2 = tensor([[[0.0502, 0.4642],
         [0.8974, 0.2467],
         [0.8039, 0.2523],
         [0.7555, 0.8822],
         [... 0.5509],
         [0.4562, 0.1476],
         [0.7177, 0.1768],
         [0.6486, 0.9942],
         [0.2183, 0.0479]]])
mask = None

    def motion_from_essential_choose_solution(E_mat: torch.Tensor, K1: torch.Tensor, K2: torch.Tensor, x1: torch.Tensor, x2: torch.Tensor, mask: Optional[torch.Tensor]=None) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor]:
        """
        Recover the relative camera rotation and translation from an estimated essential matrix.
    
        Args:
            E_mat (Tensor): Essential matrix of shape (3, 3).
            K1 (Tensor): Camera matrix for the first image of shape (3, 3).
            K2 (Tensor): Camera matrix for the second image of shape (3, 3).
            x1 (Tensor): Points in the first image of shape (N, 2).
            x2 (Tensor): Corresponding points in the second image of shape (N, 2).
            mask (Tensor, optional): Mask to exclude certain points. Defaults to None.
    
        Returns:
            Tuple[Tensor, Tensor, Tensor]: Rotation matrix (3, 3), translation vector (3,), and 3D points (N, 3).
        """
        if E_mat.shape != (3, 3):
>           raise ValueError('E_mat must be of shape (3, 3)')
E           ValueError: E_mat must be of shape (3, 3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:30: ValueError
_____ TestMotionFromEssentialChooseSolution.test_unbatched[cpu-float32-10] _____

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x70de9012fd00>
num_points = 10, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("num_points", [10, 15, 20])
    def test_unbatched(self, num_points, device, dtype):
        N = num_points
        E_mat = torch.rand(3, 3, device=device, dtype=dtype)
        K1 = torch.rand(3, 3, device=device, dtype=dtype)
        K2 = torch.rand(3, 3, device=device, dtype=dtype)
        x1 = torch.rand(N, 2, device=device, dtype=dtype)
        x2 = torch.rand(N, 2, device=device, dtype=dtype)
    
        R, t, X = epi.motion_from_essential_choose_solution(E_mat, K1, K2, x1[1:-1, :], x2[1:-1, :])
        assert R.shape == (3, 3)
>       assert t.shape == (3, 1)
E       assert torch.Size([3]) == (3, 1)
E         
E         Right contains one more item: 1
E         
E         Full diff:
E         + torch.Size([3])
E         - (
E         -     3,
E         -     1,
E         - )

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:463: AssertionError
_____ TestMotionFromEssentialChooseSolution.test_unbatched[cpu-float32-15] _____

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x70de9012fc40>
num_points = 15, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("num_points", [10, 15, 20])
    def test_unbatched(self, num_points, device, dtype):
        N = num_points
        E_mat = torch.rand(3, 3, device=device, dtype=dtype)
        K1 = torch.rand(3, 3, device=device, dtype=dtype)
        K2 = torch.rand(3, 3, device=device, dtype=dtype)
        x1 = torch.rand(N, 2, device=device, dtype=dtype)
        x2 = torch.rand(N, 2, device=device, dtype=dtype)
    
        R, t, X = epi.motion_from_essential_choose_solution(E_mat, K1, K2, x1[1:-1, :], x2[1:-1, :])
        assert R.shape == (3, 3)
>       assert t.shape == (3, 1)
E       assert torch.Size([3]) == (3, 1)
E         
E         Right contains one more item: 1
E         
E         Full diff:
E         + torch.Size([3])
E         - (
E         -     3,
E         -     1,
E         - )

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:463: AssertionError
_____ TestMotionFromEssentialChooseSolution.test_unbatched[cpu-float32-20] _____

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x70de9012ff40>
num_points = 20, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("num_points", [10, 15, 20])
    def test_unbatched(self, num_points, device, dtype):
        N = num_points
        E_mat = torch.rand(3, 3, device=device, dtype=dtype)
        K1 = torch.rand(3, 3, device=device, dtype=dtype)
        K2 = torch.rand(3, 3, device=device, dtype=dtype)
        x1 = torch.rand(N, 2, device=device, dtype=dtype)
        x2 = torch.rand(N, 2, device=device, dtype=dtype)
    
        R, t, X = epi.motion_from_essential_choose_solution(E_mat, K1, K2, x1[1:-1, :], x2[1:-1, :])
        assert R.shape == (3, 3)
>       assert t.shape == (3, 1)
E       assert torch.Size([3]) == (3, 1)
E         
E         Right contains one more item: 1
E         
E         Full diff:
E         + torch.Size([3])
E         - (
E         -     3,
E         -     1,
E         - )

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:463: AssertionError
_______ TestMotionFromEssentialChooseSolution.test_two_view[cpu-float32] _______

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x70de90164250>
device = device(type='cpu'), dtype = torch.float32

    def test_two_view(self, device, dtype):
        scene = generate_two_view_random_scene(device, dtype)
    
        E_mat = epi.essential_from_Rt(scene["R1"], scene["t1"], scene["R2"], scene["t2"])
    
        R, t = epi.relative_camera_motion(scene["R1"], scene["t1"], scene["R2"], scene["t2"])
        t = torch.nn.functional.normalize(t, dim=1)
    
>       R_hat, t_hat, _ = epi.motion_from_essential_choose_solution(
            E_mat, scene["K1"], scene["K2"], scene["x1"], scene["x2"]
        )

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:482: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/essential.py:260: in motion_from_essential_choose_solution
    return motion_from_essential_choose_solution(E_mat, K1, K2, x1, x2, mask)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

E_mat = tensor([[[ 0.6706, -0.1837, -0.7542],
         [-0.3652, -0.2542,  0.3501],
         [-0.1278, -1.0773, -0.0464]]])
K1 = tensor([[[50.7561,  0.0000,  4.1520],
         [ 0.0000,  6.2499, 87.8466],
         [ 0.0000,  0.0000,  1.0000]]])
K2 = tensor([[[50.7561,  0.0000,  4.1520],
         [ 0.0000,  6.2499, 87.8466],
         [ 0.0000,  0.0000,  1.0000]]])
x1 = tensor([[[ 1.2408e+01,  8.8685e+01],
         [ 1.0603e+01,  8.9822e+01],
         [ 3.5331e+00,  8.7005e+01],
       ...e+01],
         [ 6.4414e+00,  8.6914e+01],
         [ 1.0224e+01,  8.9202e+01],
         [ 1.9390e+00,  8.7173e+01]]])
x2 = tensor([[[ 9.4347, 94.7013],
         [-7.9791, 94.2654],
         [26.8543, 91.5387],
         [26.5544, 95.0814],
  ...,
         [16.4259, 91.7932],
         [30.1660, 92.0251],
         [ 1.0139, 94.0937],
         [22.5142, 91.0391]]])
mask = None

    def motion_from_essential_choose_solution(E_mat: torch.Tensor, K1: torch.Tensor, K2: torch.Tensor, x1: torch.Tensor, x2: torch.Tensor, mask: Optional[torch.Tensor]=None) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor]:
        """
        Recover the relative camera rotation and translation from an estimated essential matrix.
    
        Args:
            E_mat (Tensor): Essential matrix of shape (3, 3).
            K1 (Tensor): Camera matrix for the first image of shape (3, 3).
            K2 (Tensor): Camera matrix for the second image of shape (3, 3).
            x1 (Tensor): Points in the first image of shape (N, 2).
            x2 (Tensor): Corresponding points in the second image of shape (N, 2).
            mask (Tensor, optional): Mask to exclude certain points. Defaults to None.
    
        Returns:
            Tuple[Tensor, Tensor, Tensor]: Rotation matrix (3, 3), translation vector (3,), and 3D points (N, 3).
        """
        if E_mat.shape != (3, 3):
>           raise ValueError('E_mat must be of shape (3, 3)')
E           ValueError: E_mat must be of shape (3, 3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:30: ValueError
__________ TestMotionFromEssentialChooseSolution.test_gradcheck[cpu] ___________

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x70de90164520>
device = device(type='cpu')

    def test_gradcheck(self, device):
        E_mat = torch.rand(1, 3, 3, device=device, dtype=torch.float64, requires_grad=True)
        K1 = torch.rand(1, 3, 3, device=device, dtype=torch.float64)
        K2 = torch.rand(1, 3, 3, device=device, dtype=torch.float64)
        x1 = torch.rand(1, 2, 2, device=device, dtype=torch.float64)
        x2 = torch.rand(1, 2, 2, device=device, dtype=torch.float64)
    
>       self.gradcheck(
            epi.motion_from_essential_choose_solution,
            (E_mat, K1, K2, x1, x2),
            requires_grad=(True, False, False, False, False),
        )

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:496: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/essential.py:260: in motion_from_essential_choose_solution
    return motion_from_essential_choose_solution(E_mat, K1, K2, x1, x2, mask)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

E_mat = tensor([[[0.1513, 0.2954, 0.6520],
         [0.4704, 0.0539, 0.0359],
         [0.9106, 0.9803, 0.1687]]], dtype=torch.float64, requires_grad=True)
K1 = tensor([[[0.6559, 0.5115, 0.3609],
         [0.7204, 0.1525, 0.8190],
         [0.3441, 0.1964, 0.4863]]], dtype=torch.float64)
K2 = tensor([[[0.3118, 0.8433, 0.8938],
         [0.1097, 0.6930, 0.8268],
         [0.5013, 0.8043, 0.8470]]], dtype=torch.float64)
x1 = tensor([[[0.3932, 0.1558],
         [0.2128, 0.2966]]], dtype=torch.float64)
x2 = tensor([[[0.5261, 0.3025],
         [0.4771, 0.3646]]], dtype=torch.float64)
mask = None

    def motion_from_essential_choose_solution(E_mat: torch.Tensor, K1: torch.Tensor, K2: torch.Tensor, x1: torch.Tensor, x2: torch.Tensor, mask: Optional[torch.Tensor]=None) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor]:
        """
        Recover the relative camera rotation and translation from an estimated essential matrix.
    
        Args:
            E_mat (Tensor): Essential matrix of shape (3, 3).
            K1 (Tensor): Camera matrix for the first image of shape (3, 3).
            K2 (Tensor): Camera matrix for the second image of shape (3, 3).
            x1 (Tensor): Points in the first image of shape (N, 2).
            x2 (Tensor): Corresponding points in the second image of shape (N, 2).
            mask (Tensor, optional): Mask to exclude certain points. Defaults to None.
    
        Returns:
            Tuple[Tensor, Tensor, Tensor]: Rotation matrix (3, 3), translation vector (3,), and 3D points (N, 3).
        """
        if E_mat.shape != (3, 3):
>           raise ValueError('E_mat must be of shape (3, 3)')
E           ValueError: E_mat must be of shape (3, 3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:30: ValueError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_smoke[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-1-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-3-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_masking[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-15]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-20]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_two_view[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_gradcheck[cpu]
============================== 11 failed in 0.60s ==============================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'inductor', 'tvm', 'openxla', 'jit', 'cudagraphs', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 11 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-1-3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_masking[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-15] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-20] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_two_view[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_gradcheck[cpu] PASSED

============================== 11 passed in 0.23s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'inductor', 'openxla', None, 'tvm', 'onnxrt', 'cudagraphs'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 11 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-1-3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_masking[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-15] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-20] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_two_view[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_gradcheck[cpu] PASSED

============================== 11 passed in 0.21s ==============================
