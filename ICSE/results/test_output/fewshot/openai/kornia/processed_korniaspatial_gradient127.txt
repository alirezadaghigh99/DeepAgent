output file:
processed_korniaspatial_gradient127.json
function:
spatial_gradient
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-sobel]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-diff]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-2]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep_norm[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-sobel]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-2]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-diff] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-sobel]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_module[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-1]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-diff] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-sobel]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-1]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep_norm[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_noncontiguous[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-sobel] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-sobel] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-diff] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-1]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_noncontiguous[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-1]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-sobel] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-diff]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-2]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-1]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-diff] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-diff]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-sobel] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-diff]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_module[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-2]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'jit', 'openxla', 'onnxrt', 'cudagraphs', 'inductor', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 34 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_exception FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_norm[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep_norm[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_noncontiguous[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_module[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-sobel] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-diff] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-sobel] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-diff] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-sobel] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-diff] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-sobel] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-diff] FAILED

=================================== FAILURES ===================================
__________ TestSpatialGradient.test_smoke[cpu-float32-True-1-sobel-1] __________

self = <test_sobel.TestSpatialGradient object at 0x769322b3e4d0>, batch_size = 1
mode = 'sobel', order = 1, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
>           grad_x = F.conv2d(image, sobel_x, padding=1, groups=C)
E           RuntimeError: Given groups=3, expected weight to be at least 3 at dimension 0, but got weight of size [1, 1, 3, 3] instead

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:33: RuntimeError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-1-sobel-2] __________

self = <test_sobel.TestSpatialGradient object at 0x769322b3e260>, batch_size = 2
mode = 'sobel', order = 1, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
>           grad_x = F.conv2d(image, sobel_x, padding=1, groups=C)
E           RuntimeError: Given groups=3, expected weight to be at least 3 at dimension 0, but got weight of size [1, 1, 3, 3] instead

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:33: RuntimeError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-1-diff-1] ___________

self = <test_sobel.TestSpatialGradient object at 0x769322b3e320>, batch_size = 1
mode = 'diff', order = 1, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(image, sobel_x, padding=1, groups=C)
            grad_y = F.conv2d(image, sobel_y, padding=1, groups=C)
        elif mode == 'diff':
            diff_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
            diff_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
>           grad_x = F.conv2d(image, diff_x, padding=(0, 1), groups=C)
E           RuntimeError: Given groups=3, expected weight to be at least 3 at dimension 0, but got weight of size [1, 1, 1, 3] instead

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:38: RuntimeError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-1-diff-2] ___________

self = <test_sobel.TestSpatialGradient object at 0x769322b3e3e0>, batch_size = 2
mode = 'diff', order = 1, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(image, sobel_x, padding=1, groups=C)
            grad_y = F.conv2d(image, sobel_y, padding=1, groups=C)
        elif mode == 'diff':
            diff_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
            diff_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
>           grad_x = F.conv2d(image, diff_x, padding=(0, 1), groups=C)
E           RuntimeError: Given groups=3, expected weight to be at least 3 at dimension 0, but got weight of size [1, 1, 1, 3] instead

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:38: RuntimeError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-2-sobel-1] __________

self = <test_sobel.TestSpatialGradient object at 0x769322b3e0e0>, batch_size = 1
mode = 'sobel', order = 2, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 2, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-2-sobel-2] __________

self = <test_sobel.TestSpatialGradient object at 0x769322b3ea10>, batch_size = 2
mode = 'sobel', order = 2, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 2, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-2-diff-1] ___________

self = <test_sobel.TestSpatialGradient object at 0x769322b3ead0>, batch_size = 1
mode = 'diff', order = 2, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 2, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-2-diff-2] ___________

self = <test_sobel.TestSpatialGradient object at 0x769322b3eb90>, batch_size = 2
mode = 'diff', order = 2, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 2, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
_________ TestSpatialGradient.test_smoke[cpu-float32-False-1-sobel-1] __________

self = <test_sobel.TestSpatialGradient object at 0x769322b3ec50>, batch_size = 1
mode = 'sobel', order = 1, normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 1, normalized = False

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
>           grad_x = F.conv2d(image, sobel_x, padding=1, groups=C)
E           RuntimeError: Given groups=3, expected weight to be at least 3 at dimension 0, but got weight of size [1, 1, 3, 3] instead

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:33: RuntimeError
_________ TestSpatialGradient.test_smoke[cpu-float32-False-1-sobel-2] __________

self = <test_sobel.TestSpatialGradient object at 0x769322b3ed10>, batch_size = 2
mode = 'sobel', order = 1, normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 1, normalized = False

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
>           grad_x = F.conv2d(image, sobel_x, padding=1, groups=C)
E           RuntimeError: Given groups=3, expected weight to be at least 3 at dimension 0, but got weight of size [1, 1, 3, 3] instead

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:33: RuntimeError
__________ TestSpatialGradient.test_smoke[cpu-float32-False-1-diff-1] __________

self = <test_sobel.TestSpatialGradient object at 0x769322b3edd0>, batch_size = 1
mode = 'diff', order = 1, normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 1, normalized = False

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(image, sobel_x, padding=1, groups=C)
            grad_y = F.conv2d(image, sobel_y, padding=1, groups=C)
        elif mode == 'diff':
            diff_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
            diff_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
>           grad_x = F.conv2d(image, diff_x, padding=(0, 1), groups=C)
E           RuntimeError: Given groups=3, expected weight to be at least 3 at dimension 0, but got weight of size [1, 1, 1, 3] instead

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:38: RuntimeError
__________ TestSpatialGradient.test_smoke[cpu-float32-False-1-diff-2] __________

self = <test_sobel.TestSpatialGradient object at 0x769322b3ee90>, batch_size = 2
mode = 'diff', order = 1, normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 1, normalized = False

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(image, sobel_x, padding=1, groups=C)
            grad_y = F.conv2d(image, sobel_y, padding=1, groups=C)
        elif mode == 'diff':
            diff_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
            diff_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
>           grad_x = F.conv2d(image, diff_x, padding=(0, 1), groups=C)
E           RuntimeError: Given groups=3, expected weight to be at least 3 at dimension 0, but got weight of size [1, 1, 1, 3] instead

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:38: RuntimeError
_________ TestSpatialGradient.test_smoke[cpu-float32-False-2-sobel-1] __________

self = <test_sobel.TestSpatialGradient object at 0x769322b3ef50>, batch_size = 1
mode = 'sobel', order = 2, normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 2, normalized = False

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
_________ TestSpatialGradient.test_smoke[cpu-float32-False-2-sobel-2] __________

self = <test_sobel.TestSpatialGradient object at 0x769322b3f010>, batch_size = 2
mode = 'sobel', order = 2, normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 2, normalized = False

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
__________ TestSpatialGradient.test_smoke[cpu-float32-False-2-diff-1] __________

self = <test_sobel.TestSpatialGradient object at 0x769322b3f0d0>, batch_size = 1
mode = 'diff', order = 2, normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 2, normalized = False

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
__________ TestSpatialGradient.test_smoke[cpu-float32-False-2-diff-2] __________

self = <test_sobel.TestSpatialGradient object at 0x769322b3f190>, batch_size = 2
mode = 'diff', order = 2, normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 2, normalized = False

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
_____________ TestSpatialGradient.test_cardinality[cpu-float32-1] ______________

self = <test_sobel.TestSpatialGradient object at 0x769322b3f520>, batch_size = 1
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    def test_cardinality(self, batch_size, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       assert SpatialGradient()(inp).shape == (batch_size, 3, 2, 4, 4)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
>           grad_x = F.conv2d(image, sobel_x, padding=1, groups=C)
E           RuntimeError: Given groups=3, expected weight to be at least 3 at dimension 0, but got weight of size [1, 1, 3, 3] instead

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:33: RuntimeError
_____________ TestSpatialGradient.test_cardinality[cpu-float32-2] ______________

self = <test_sobel.TestSpatialGradient object at 0x769322b3f460>, batch_size = 2
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    def test_cardinality(self, batch_size, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       assert SpatialGradient()(inp).shape == (batch_size, 3, 2, 4, 4)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
>           grad_x = F.conv2d(image, sobel_x, padding=1, groups=C)
E           RuntimeError: Given groups=3, expected weight to be at least 3 at dimension 0, but got weight of size [1, 1, 3, 3] instead

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:33: RuntimeError
______________________ TestSpatialGradient.test_exception ______________________

self = <test_sobel.TestSpatialGradient object at 0x769322b3f7f0>

    def test_exception(self):
        with pytest.raises(TypeError) as errinfo:
>           spatial_gradient(1)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = 1, mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
>       B, C, H, W = image.shape
E       AttributeError: 'int' object has no attribute 'shape'

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:29: AttributeError
_____________ TestSpatialGradient.test_edges_sep_norm[cpu-float32] _____________

self = <test_sobel.TestSpatialGradient object at 0x769322b6c4c0>
device = device(type='cpu'), dtype = torch.float32

    def test_edges_sep_norm(self, device, dtype):
        inp = torch.tensor(
            [
                [
                    [
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.0, 0.0, 1.0, 0.0, 0.0],
                        [0.0, 1.0, 1.0, 1.0, 0.0],
                        [0.0, 0.0, 1.0, 0.0, 0.0],
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected = (
            torch.tensor(
                [
                    [
                        [
                            [
                                [0.0, 0.0, 0.0, 0.0, 0.0],
                                [0.0, 1.0, 0.0, -1.0, 0.0],
                                [1.0, 1.0, 0.0, -1.0, -1.0],
                                [0.0, 1.0, 0.0, -1.0, 0.0],
                                [0.0, 0.0, 0.0, 0.0, 0.0],
                            ],
                            [
                                [0.0, 0.0, 1.0, 0.0, 0.0],
                                [0.0, 1.0, 1.0, 1.0, 0.0],
                                [0.0, 0.0, 0.0, 0.0, 0.0],
                                [0.0, -1.0, -1.0, -1.0, 0.0],
                                [0.0, 0.0, -1.0, 0.0, 0.0],
                            ],
                        ]
                    ]
                ],
                device=device,
                dtype=dtype,
            )
            / 2.0
        )
    
        edges = spatial_gradient(inp, "diff", normalized=True)
>       self.assert_close(edges, expected)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:218: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[[[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
           [ 0.0000,  0.1250,  0.0000, -0.1250,  0.0000],
  ...           [ 0.0000, -0.1250, -0.1250, -0.1250,  0.0000],
           [ 0.0000,  0.0000, -0.1250,  0.0000,  0.0000]]]]])
expected = tensor([[[[[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
           [ 0.0000,  0.5000,  0.0000, -0.5000,  0.0000],
  ...           [ 0.0000, -0.5000, -0.5000, -0.5000,  0.0000],
           [ 0.0000,  0.0000, -0.5000,  0.0000,  0.0000]]]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 16 / 50 (32.0%)
E       Greatest absolute difference: 0.375 at index (0, 0, 0, 1, 1) (up to 1e-05 allowed)
E       Greatest relative difference: 0.75 at index (0, 0, 0, 1, 1) (up to 0.0001 allowed)

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
_____________ TestSpatialGradient.test_noncontiguous[cpu-float32] ______________

self = <test_sobel.TestSpatialGradient object at 0x769322b6c7f0>
device = device(type='cpu'), dtype = torch.float32

    def test_noncontiguous(self, device, dtype):
        batch_size = 3
        inp = torch.rand(3, 5, 5, device=device, dtype=dtype).expand(batch_size, -1, -1, -1)
    
>       actual = spatial_gradient(inp)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:224: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.1151, 0.0487, 0.8242, 0.2185, 0.6547],
          [0.7904, 0.4115, 0.3546, 0.2340, 0.9960],
          [0.2...47, 0.1633],
          [0.6896, 0.6360, 0.8296, 0.9984, 0.3802],
          [0.7177, 0.5277, 0.1240, 0.6752, 0.2396]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
>           grad_x = F.conv2d(image, sobel_x, padding=1, groups=C)
E           RuntimeError: Given groups=3, expected weight to be at least 3 at dimension 0, but got weight of size [1, 1, 3, 3] instead

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:33: RuntimeError
_________________ TestSpatialGradient.test_module[cpu-float32] _________________

self = <test_sobel.TestSpatialGradient object at 0x769322b3fc10>
device = device(type='cpu'), dtype = torch.float32

    def test_module(self, device, dtype):
        img = torch.rand(2, 3, 4, 5, device=device, dtype=dtype)
        op = spatial_gradient
        op_module = SpatialGradient()
>       expected = op(img)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[5.3885e-02, 3.5759e-01, 7.9277e-01, 7.1772e-01, 5.2957e-02],
          [6.0748e-01, 8.2364e-01, 8.4870e-02,...20e-01, 8.9183e-01, 8.9249e-01, 7.6004e-01],
          [7.7566e-02, 6.9058e-01, 6.8869e-01, 8.2484e-01, 1.9665e-01]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
>           grad_x = F.conv2d(image, sobel_x, padding=1, groups=C)
E           RuntimeError: Given groups=3, expected weight to be at least 3 at dimension 0, but got weight of size [1, 1, 3, 3] instead

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:33: RuntimeError
_______ TestSpatialGradient.test_dynamo[cpu-float32-inductor-1-1-sobel] ________

self = <test_sobel.TestSpatialGradient object at 0x769322b6d030>, batch_size = 1
order = 1, mode = 'sobel', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7693fbf2b1c0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
>           grad_x = F.conv2d(image, sobel_x, padding=1, groups=C)
E           RuntimeError: Given groups=3, expected weight to be at least 3 at dimension 0, but got weight of size [1, 1, 3, 3] instead

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:33: RuntimeError
________ TestSpatialGradient.test_dynamo[cpu-float32-inductor-1-1-diff] ________

self = <test_sobel.TestSpatialGradient object at 0x769322b6cf70>, batch_size = 1
order = 1, mode = 'diff', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7693fbf2b1c0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'diff', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(image, sobel_x, padding=1, groups=C)
            grad_y = F.conv2d(image, sobel_y, padding=1, groups=C)
        elif mode == 'diff':
            diff_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
            diff_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
>           grad_x = F.conv2d(image, diff_x, padding=(0, 1), groups=C)
E           RuntimeError: Given groups=3, expected weight to be at least 3 at dimension 0, but got weight of size [1, 1, 1, 3] instead

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:38: RuntimeError
_______ TestSpatialGradient.test_dynamo[cpu-float32-inductor-1-2-sobel] ________

self = <test_sobel.TestSpatialGradient object at 0x769322b6ce50>, batch_size = 1
order = 2, mode = 'sobel', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7693fbf2b1c0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'sobel', order = 2, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
________ TestSpatialGradient.test_dynamo[cpu-float32-inductor-1-2-diff] ________

self = <test_sobel.TestSpatialGradient object at 0x769322b6d360>, batch_size = 1
order = 2, mode = 'diff', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7693fbf2b1c0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'diff', order = 2, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
_______ TestSpatialGradient.test_dynamo[cpu-float32-inductor-2-1-sobel] ________

self = <test_sobel.TestSpatialGradient object at 0x769322b6d420>, batch_size = 2
order = 1, mode = 'sobel', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7693fbf2b1c0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
>           grad_x = F.conv2d(image, sobel_x, padding=1, groups=C)
E           RuntimeError: Given groups=3, expected weight to be at least 3 at dimension 0, but got weight of size [1, 1, 3, 3] instead

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:33: RuntimeError
________ TestSpatialGradient.test_dynamo[cpu-float32-inductor-2-1-diff] ________

self = <test_sobel.TestSpatialGradient object at 0x769322b6d4e0>, batch_size = 2
order = 1, mode = 'diff', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7693fbf2b1c0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'diff', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(image, sobel_x, padding=1, groups=C)
            grad_y = F.conv2d(image, sobel_y, padding=1, groups=C)
        elif mode == 'diff':
            diff_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
            diff_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
>           grad_x = F.conv2d(image, diff_x, padding=(0, 1), groups=C)
E           RuntimeError: Given groups=3, expected weight to be at least 3 at dimension 0, but got weight of size [1, 1, 1, 3] instead

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:38: RuntimeError
_______ TestSpatialGradient.test_dynamo[cpu-float32-inductor-2-2-sobel] ________

self = <test_sobel.TestSpatialGradient object at 0x769322b6d5a0>, batch_size = 2
order = 2, mode = 'sobel', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7693fbf2b1c0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'sobel', order = 2, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
________ TestSpatialGradient.test_dynamo[cpu-float32-inductor-2-2-diff] ________

self = <test_sobel.TestSpatialGradient object at 0x769322b6d660>, batch_size = 2
order = 2, mode = 'diff', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7693fbf2b1c0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'diff', order = 2, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=True) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.
    
        Args:
            image (Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to True.
    
        Returns:
            Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_exception
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep_norm[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_noncontiguous[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_module[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-sobel]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-diff]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-sobel]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-diff]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-sobel]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-diff]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-sobel]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-diff]
========================= 30 failed, 4 passed in 1.58s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'jit', 'tvm', 'inductor', 'cudagraphs', 'openxla', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 34 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_exception PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_norm[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep_norm[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_noncontiguous[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_module[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-sobel] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-diff] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-sobel] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-diff] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-sobel] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-diff] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-sobel] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-diff] PASSED

============================== 34 passed in 2.57s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'inductor', 'cudagraphs', 'onnxrt', 'tvm', 'openxla', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 34 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_exception PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_norm[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep_norm[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_noncontiguous[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_module[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-sobel] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-diff] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-sobel] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-diff] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-sobel] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-diff] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-sobel] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-diff] PASSED

============================== 34 passed in 2.60s ==============================
