output file:
processed_korniadraw_line41.json
function:
draw_line
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size0-color0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_with_big_coordinates[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_lines_batched[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gt_0_lt_1[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_horizontal[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size1-color1]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_with_big_coordinates[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_horizontal[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p23]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_lines_batched[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p13] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p11-p21]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size0]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p10-p20] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lt_0_gte_neg1[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p22]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size0] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gte_1[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p20]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size1]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p12] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p13]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p11-p21] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size1] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lt_0_gte_neg1[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p21] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p12]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_vertical[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gt_0_lt_1[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p10-p20]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p22] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p23] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gte_1[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lte_neg1[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size0-color0]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_vertical[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p21]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size1-color1] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p20] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lte_neg1[cpu-float32] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'cudagraphs', 'inductor', 'openxla', 'tvm', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 87 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_rgb[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_grayscale_third_order[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_grayscale_second_order[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_with_mismatched_dims[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_with_mismatched_dtype[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_with_singleton_color_dims[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_vertical[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_horizontal[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_with_big_coordinates[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lte_neg1[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lt_0_gte_neg1[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gt_0_lt_1[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gte_1[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_lines_batched[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p10] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p12] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p13] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p20] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p21] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p22] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p23] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size0] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size0-color0] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size1-color1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p10-p20] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p11-p21] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_circle[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_ellipse[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_rectangle[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_batch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_batch_variable_size[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_batch_color_no_batch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_out_of_bounds_rectangle[cpu-float32] PASSED

=================================== FAILURES ===================================
______________ TestDrawLine.test_draw_line_vertical[cpu-float32] _______________

self = <test_draw.TestDrawLine object at 0x7b8d0f142c50>, dtype = torch.float32
device = device(type='cpu')

    def test_draw_line_vertical(self, dtype, device):
        """Test drawing a vertical line."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
>       img = draw_line(img, torch.tensor([6, 2]), torch.tensor([6, 0]), torch.tensor([255]))

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([6, 2]), p2 = tensor([6, 0]), color = tensor([255])

    def draw_line(image: torch.Tensor, p1: Union[torch.Tensor, torch.Tensor], p2: Union[torch.Tensor, torch.Tensor], color: torch.Tensor) -> torch.Tensor:
        """
        Draws a line on a given image from point p1 to point p2 with the specified color.
    
        Args:
            image (torch.Tensor): Input image tensor of shape (C, H, W).
            p1 (torch.Tensor): Start point of the line, shape (2,) or (B, 2).
            p2 (torch.Tensor): End point of the line, shape (2,) or (B, 2).
            color (torch.Tensor): Color of the line, shape (C).
    
        Returns:
            torch.Tensor: Image tensor with the line drawn.
        """
        if image.dim() != 3:
            raise ValueError('Image must have 3 dimensions (C, H, W).')
        if color.shape[0] != image.shape[0]:
            raise ValueError('Color must have the same number of channels as the image.')
        if p1.shape != p2.shape:
            raise ValueError('Start and end points must have the same shape.')
        if p1.shape[-1] != 2:
            raise ValueError('Points must be 2D with shape (2,) or (B, 2).')
        _, H, W = image.shape
>       p1 = p1.clamp(min=0, max=torch.tensor([W - 1, H - 1]))
E       TypeError: clamp() received an invalid combination of arguments - got (max=Tensor, min=int, ), but expected one of:
E        * (Tensor min = None, Tensor max = None)
E             didn't match because some of the keywords were incorrect: max, min
E        * (Number min = None, Number max = None)
E             didn't match because some of the keywords were incorrect: max, min

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:30: TypeError
_____________ TestDrawLine.test_draw_line_horizontal[cpu-float32] ______________

self = <test_draw.TestDrawLine object at 0x7b8d0f142f80>, dtype = torch.float32
device = device(type='cpu')

    def test_draw_line_horizontal(self, dtype, device):
        """Test drawing a horizontal line."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
>       img = draw_line(img, torch.tensor([6, 4]), torch.tensor([0, 4]), torch.tensor([255]))

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([6, 4]), p2 = tensor([0, 4]), color = tensor([255])

    def draw_line(image: torch.Tensor, p1: Union[torch.Tensor, torch.Tensor], p2: Union[torch.Tensor, torch.Tensor], color: torch.Tensor) -> torch.Tensor:
        """
        Draws a line on a given image from point p1 to point p2 with the specified color.
    
        Args:
            image (torch.Tensor): Input image tensor of shape (C, H, W).
            p1 (torch.Tensor): Start point of the line, shape (2,) or (B, 2).
            p2 (torch.Tensor): End point of the line, shape (2,) or (B, 2).
            color (torch.Tensor): Color of the line, shape (C).
    
        Returns:
            torch.Tensor: Image tensor with the line drawn.
        """
        if image.dim() != 3:
            raise ValueError('Image must have 3 dimensions (C, H, W).')
        if color.shape[0] != image.shape[0]:
            raise ValueError('Color must have the same number of channels as the image.')
        if p1.shape != p2.shape:
            raise ValueError('Start and end points must have the same shape.')
        if p1.shape[-1] != 2:
            raise ValueError('Points must be 2D with shape (2,) or (B, 2).')
        _, H, W = image.shape
>       p1 = p1.clamp(min=0, max=torch.tensor([W - 1, H - 1]))
E       TypeError: clamp() received an invalid combination of arguments - got (max=Tensor, min=int, ), but expected one of:
E        * (Tensor min = None, Tensor max = None)
E             didn't match because some of the keywords were incorrect: max, min
E        * (Number min = None, Number max = None)
E             didn't match because some of the keywords were incorrect: max, min

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:30: TypeError
________ TestDrawLine.test_draw_line_with_big_coordinates[cpu-float32] _________

self = <test_draw.TestDrawLine object at 0x7b8d0f1432b0>, dtype = torch.float32
device = device(type='cpu')

    def test_draw_line_with_big_coordinates(self, dtype, device):
        """Test drawing a line with big coordinates."""
        img = torch.zeros(1, 500, 500, dtype=dtype, device=device)
>       img = draw_line(img, torch.tensor([200, 200]), torch.tensor([400, 200]), torch.tensor([255]))

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., ...    [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.],
         [0., 0., 0.,  ..., 0., 0., 0.]]])
p1 = tensor([200, 200]), p2 = tensor([400, 200]), color = tensor([255])

    def draw_line(image: torch.Tensor, p1: Union[torch.Tensor, torch.Tensor], p2: Union[torch.Tensor, torch.Tensor], color: torch.Tensor) -> torch.Tensor:
        """
        Draws a line on a given image from point p1 to point p2 with the specified color.
    
        Args:
            image (torch.Tensor): Input image tensor of shape (C, H, W).
            p1 (torch.Tensor): Start point of the line, shape (2,) or (B, 2).
            p2 (torch.Tensor): End point of the line, shape (2,) or (B, 2).
            color (torch.Tensor): Color of the line, shape (C).
    
        Returns:
            torch.Tensor: Image tensor with the line drawn.
        """
        if image.dim() != 3:
            raise ValueError('Image must have 3 dimensions (C, H, W).')
        if color.shape[0] != image.shape[0]:
            raise ValueError('Color must have the same number of channels as the image.')
        if p1.shape != p2.shape:
            raise ValueError('Start and end points must have the same shape.')
        if p1.shape[-1] != 2:
            raise ValueError('Points must be 2D with shape (2,) or (B, 2).')
        _, H, W = image.shape
>       p1 = p1.clamp(min=0, max=torch.tensor([W - 1, H - 1]))
E       TypeError: clamp() received an invalid combination of arguments - got (max=Tensor, min=int, ), but expected one of:
E        * (Tensor min = None, Tensor max = None)
E             didn't match because some of the keywords were incorrect: max, min
E        * (Number min = None, Number max = None)
E             didn't match because some of the keywords were incorrect: max, min

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:30: TypeError
_____________ TestDrawLine.test_draw_line_m_lte_neg1[cpu-float32] ______________

self = <test_draw.TestDrawLine object at 0x7b8d0f1435e0>, dtype = torch.float32
device = device(type='cpu')

    def test_draw_line_m_lte_neg1(self, dtype, device):
        """Test drawing a line with m <= -1."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
>       img = draw_line(img, torch.tensor([0, 7]), torch.tensor([6, 0]), torch.tensor([255]))

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([0, 7]), p2 = tensor([6, 0]), color = tensor([255])

    def draw_line(image: torch.Tensor, p1: Union[torch.Tensor, torch.Tensor], p2: Union[torch.Tensor, torch.Tensor], color: torch.Tensor) -> torch.Tensor:
        """
        Draws a line on a given image from point p1 to point p2 with the specified color.
    
        Args:
            image (torch.Tensor): Input image tensor of shape (C, H, W).
            p1 (torch.Tensor): Start point of the line, shape (2,) or (B, 2).
            p2 (torch.Tensor): End point of the line, shape (2,) or (B, 2).
            color (torch.Tensor): Color of the line, shape (C).
    
        Returns:
            torch.Tensor: Image tensor with the line drawn.
        """
        if image.dim() != 3:
            raise ValueError('Image must have 3 dimensions (C, H, W).')
        if color.shape[0] != image.shape[0]:
            raise ValueError('Color must have the same number of channels as the image.')
        if p1.shape != p2.shape:
            raise ValueError('Start and end points must have the same shape.')
        if p1.shape[-1] != 2:
            raise ValueError('Points must be 2D with shape (2,) or (B, 2).')
        _, H, W = image.shape
>       p1 = p1.clamp(min=0, max=torch.tensor([W - 1, H - 1]))
E       TypeError: clamp() received an invalid combination of arguments - got (max=Tensor, min=int, ), but expected one of:
E        * (Tensor min = None, Tensor max = None)
E             didn't match because some of the keywords were incorrect: max, min
E        * (Number min = None, Number max = None)
E             didn't match because some of the keywords were incorrect: max, min

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:30: TypeError
___________ TestDrawLine.test_draw_line_m_lt_0_gte_neg1[cpu-float32] ___________

self = <test_draw.TestDrawLine object at 0x7b8d0f143910>, dtype = torch.float32
device = device(type='cpu')

    def test_draw_line_m_lt_0_gte_neg1(self, dtype, device):
        """Test drawing a line with -1 < m < 0."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
>       img = draw_line(img, torch.tensor([1, 5]), torch.tensor([7, 0]), torch.tensor([255]))

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([1, 5]), p2 = tensor([7, 0]), color = tensor([255])

    def draw_line(image: torch.Tensor, p1: Union[torch.Tensor, torch.Tensor], p2: Union[torch.Tensor, torch.Tensor], color: torch.Tensor) -> torch.Tensor:
        """
        Draws a line on a given image from point p1 to point p2 with the specified color.
    
        Args:
            image (torch.Tensor): Input image tensor of shape (C, H, W).
            p1 (torch.Tensor): Start point of the line, shape (2,) or (B, 2).
            p2 (torch.Tensor): End point of the line, shape (2,) or (B, 2).
            color (torch.Tensor): Color of the line, shape (C).
    
        Returns:
            torch.Tensor: Image tensor with the line drawn.
        """
        if image.dim() != 3:
            raise ValueError('Image must have 3 dimensions (C, H, W).')
        if color.shape[0] != image.shape[0]:
            raise ValueError('Color must have the same number of channels as the image.')
        if p1.shape != p2.shape:
            raise ValueError('Start and end points must have the same shape.')
        if p1.shape[-1] != 2:
            raise ValueError('Points must be 2D with shape (2,) or (B, 2).')
        _, H, W = image.shape
>       p1 = p1.clamp(min=0, max=torch.tensor([W - 1, H - 1]))
E       TypeError: clamp() received an invalid combination of arguments - got (max=Tensor, min=int, ), but expected one of:
E        * (Tensor min = None, Tensor max = None)
E             didn't match because some of the keywords were incorrect: max, min
E        * (Number min = None, Number max = None)
E             didn't match because some of the keywords were incorrect: max, min

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:30: TypeError
_____________ TestDrawLine.test_draw_line_m_gt_0_lt_1[cpu-float32] _____________

self = <test_draw.TestDrawLine object at 0x7b8d0f143c40>, dtype = torch.float32
device = device(type='cpu')

    def test_draw_line_m_gt_0_lt_1(self, dtype, device):
        """Test drawing a line with 0 < m < 1."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
>       img = draw_line(img, torch.tensor([0, 0]), torch.tensor([6, 2]), torch.tensor([255]))

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([0, 0]), p2 = tensor([6, 2]), color = tensor([255])

    def draw_line(image: torch.Tensor, p1: Union[torch.Tensor, torch.Tensor], p2: Union[torch.Tensor, torch.Tensor], color: torch.Tensor) -> torch.Tensor:
        """
        Draws a line on a given image from point p1 to point p2 with the specified color.
    
        Args:
            image (torch.Tensor): Input image tensor of shape (C, H, W).
            p1 (torch.Tensor): Start point of the line, shape (2,) or (B, 2).
            p2 (torch.Tensor): End point of the line, shape (2,) or (B, 2).
            color (torch.Tensor): Color of the line, shape (C).
    
        Returns:
            torch.Tensor: Image tensor with the line drawn.
        """
        if image.dim() != 3:
            raise ValueError('Image must have 3 dimensions (C, H, W).')
        if color.shape[0] != image.shape[0]:
            raise ValueError('Color must have the same number of channels as the image.')
        if p1.shape != p2.shape:
            raise ValueError('Start and end points must have the same shape.')
        if p1.shape[-1] != 2:
            raise ValueError('Points must be 2D with shape (2,) or (B, 2).')
        _, H, W = image.shape
>       p1 = p1.clamp(min=0, max=torch.tensor([W - 1, H - 1]))
E       TypeError: clamp() received an invalid combination of arguments - got (max=Tensor, min=int, ), but expected one of:
E        * (Tensor min = None, Tensor max = None)
E             didn't match because some of the keywords were incorrect: max, min
E        * (Number min = None, Number max = None)
E             didn't match because some of the keywords were incorrect: max, min

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:30: TypeError
_______________ TestDrawLine.test_draw_line_m_gte_1[cpu-float32] _______________

self = <test_draw.TestDrawLine object at 0x7b8d0f143f70>, dtype = torch.float32
device = device(type='cpu')

    def test_draw_line_m_gte_1(self, dtype, device):
        """Test drawing a line with m >= 1."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
>       img = draw_line(img, torch.tensor([3, 7]), torch.tensor([1, 4]), torch.tensor([255]))

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:197: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([3, 7]), p2 = tensor([1, 4]), color = tensor([255])

    def draw_line(image: torch.Tensor, p1: Union[torch.Tensor, torch.Tensor], p2: Union[torch.Tensor, torch.Tensor], color: torch.Tensor) -> torch.Tensor:
        """
        Draws a line on a given image from point p1 to point p2 with the specified color.
    
        Args:
            image (torch.Tensor): Input image tensor of shape (C, H, W).
            p1 (torch.Tensor): Start point of the line, shape (2,) or (B, 2).
            p2 (torch.Tensor): End point of the line, shape (2,) or (B, 2).
            color (torch.Tensor): Color of the line, shape (C).
    
        Returns:
            torch.Tensor: Image tensor with the line drawn.
        """
        if image.dim() != 3:
            raise ValueError('Image must have 3 dimensions (C, H, W).')
        if color.shape[0] != image.shape[0]:
            raise ValueError('Color must have the same number of channels as the image.')
        if p1.shape != p2.shape:
            raise ValueError('Start and end points must have the same shape.')
        if p1.shape[-1] != 2:
            raise ValueError('Points must be 2D with shape (2,) or (B, 2).')
        _, H, W = image.shape
>       p1 = p1.clamp(min=0, max=torch.tensor([W - 1, H - 1]))
E       TypeError: clamp() received an invalid combination of arguments - got (max=Tensor, min=int, ), but expected one of:
E        * (Tensor min = None, Tensor max = None)
E             didn't match because some of the keywords were incorrect: max, min
E        * (Number min = None, Number max = None)
E             didn't match because some of the keywords were incorrect: max, min

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:30: TypeError
______________ TestDrawLine.test_draw_lines_batched[cpu-float32] _______________

self = <test_draw.TestDrawLine object at 0x7b8d0f1702e0>, dtype = torch.float32
device = device(type='cpu')

    def test_draw_lines_batched(self, dtype, device):
        """Test drawing a line with m <= -1."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
>       img = draw_line(
            img, torch.tensor([[0, 7], [0, 7], [0, 2]]), torch.tensor([[6, 0], [0, 0], [7, 7]]), torch.tensor([255])
        )

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:219: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([[0, 7],
        [0, 7],
        [0, 2]])
p2 = tensor([[6, 0],
        [0, 0],
        [7, 7]]), color = tensor([255])

    def draw_line(image: torch.Tensor, p1: Union[torch.Tensor, torch.Tensor], p2: Union[torch.Tensor, torch.Tensor], color: torch.Tensor) -> torch.Tensor:
        """
        Draws a line on a given image from point p1 to point p2 with the specified color.
    
        Args:
            image (torch.Tensor): Input image tensor of shape (C, H, W).
            p1 (torch.Tensor): Start point of the line, shape (2,) or (B, 2).
            p2 (torch.Tensor): End point of the line, shape (2,) or (B, 2).
            color (torch.Tensor): Color of the line, shape (C).
    
        Returns:
            torch.Tensor: Image tensor with the line drawn.
        """
        if image.dim() != 3:
            raise ValueError('Image must have 3 dimensions (C, H, W).')
        if color.shape[0] != image.shape[0]:
            raise ValueError('Color must have the same number of channels as the image.')
        if p1.shape != p2.shape:
            raise ValueError('Start and end points must have the same shape.')
        if p1.shape[-1] != 2:
            raise ValueError('Points must be 2D with shape (2,) or (B, 2).')
        _, H, W = image.shape
>       p1 = p1.clamp(min=0, max=torch.tensor([W - 1, H - 1]))
E       TypeError: clamp() received an invalid combination of arguments - got (max=Tensor, min=int, ), but expected one of:
E        * (Tensor min = None, Tensor max = None)
E             didn't match because some of the keywords were incorrect: max, min
E        * (Number min = None, Number max = None)
E             didn't match because some of the keywords were incorrect: max, min

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:30: TypeError
_____________ TestDrawLine.test_p1_out_of_bounds[cpu-float32-p10] ______________

self = <test_draw.TestDrawLine object at 0x7b8d0f1706d0>, p1 = tensor([-1,  0])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize(
        "p1", [torch.tensor([-1, 0]), torch.tensor([0, -1]), torch.tensor([8, 0]), torch.tensor([0, 8])]
    )
    def test_p1_out_of_bounds(self, p1, dtype, device):
        """Tests that an exception is raised if p1 is out of bounds."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
>           draw_line(img, p1, torch.tensor([0, 0]), torch.tensor([255]))

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:247: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([-1,  0]), p2 = tensor([0, 0]), color = tensor([255])

    def draw_line(image: torch.Tensor, p1: Union[torch.Tensor, torch.Tensor], p2: Union[torch.Tensor, torch.Tensor], color: torch.Tensor) -> torch.Tensor:
        """
        Draws a line on a given image from point p1 to point p2 with the specified color.
    
        Args:
            image (torch.Tensor): Input image tensor of shape (C, H, W).
            p1 (torch.Tensor): Start point of the line, shape (2,) or (B, 2).
            p2 (torch.Tensor): End point of the line, shape (2,) or (B, 2).
            color (torch.Tensor): Color of the line, shape (C).
    
        Returns:
            torch.Tensor: Image tensor with the line drawn.
        """
        if image.dim() != 3:
            raise ValueError('Image must have 3 dimensions (C, H, W).')
        if color.shape[0] != image.shape[0]:
            raise ValueError('Color must have the same number of channels as the image.')
        if p1.shape != p2.shape:
            raise ValueError('Start and end points must have the same shape.')
        if p1.shape[-1] != 2:
            raise ValueError('Points must be 2D with shape (2,) or (B, 2).')
        _, H, W = image.shape
>       p1 = p1.clamp(min=0, max=torch.tensor([W - 1, H - 1]))
E       TypeError: clamp() received an invalid combination of arguments - got (max=Tensor, min=int, ), but expected one of:
E        * (Tensor min = None, Tensor max = None)
E             didn't match because some of the keywords were incorrect: max, min
E        * (Number min = None, Number max = None)
E             didn't match because some of the keywords were incorrect: max, min

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:30: TypeError
_____________ TestDrawLine.test_p1_out_of_bounds[cpu-float32-p11] ______________

self = <test_draw.TestDrawLine object at 0x7b8d0f170610>, p1 = tensor([ 0, -1])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize(
        "p1", [torch.tensor([-1, 0]), torch.tensor([0, -1]), torch.tensor([8, 0]), torch.tensor([0, 8])]
    )
    def test_p1_out_of_bounds(self, p1, dtype, device):
        """Tests that an exception is raised if p1 is out of bounds."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
>           draw_line(img, p1, torch.tensor([0, 0]), torch.tensor([255]))

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:247: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([ 0, -1]), p2 = tensor([0, 0]), color = tensor([255])

    def draw_line(image: torch.Tensor, p1: Union[torch.Tensor, torch.Tensor], p2: Union[torch.Tensor, torch.Tensor], color: torch.Tensor) -> torch.Tensor:
        """
        Draws a line on a given image from point p1 to point p2 with the specified color.
    
        Args:
            image (torch.Tensor): Input image tensor of shape (C, H, W).
            p1 (torch.Tensor): Start point of the line, shape (2,) or (B, 2).
            p2 (torch.Tensor): End point of the line, shape (2,) or (B, 2).
            color (torch.Tensor): Color of the line, shape (C).
    
        Returns:
            torch.Tensor: Image tensor with the line drawn.
        """
        if image.dim() != 3:
            raise ValueError('Image must have 3 dimensions (C, H, W).')
        if color.shape[0] != image.shape[0]:
            raise ValueError('Color must have the same number of channels as the image.')
        if p1.shape != p2.shape:
            raise ValueError('Start and end points must have the same shape.')
        if p1.shape[-1] != 2:
            raise ValueError('Points must be 2D with shape (2,) or (B, 2).')
        _, H, W = image.shape
>       p1 = p1.clamp(min=0, max=torch.tensor([W - 1, H - 1]))
E       TypeError: clamp() received an invalid combination of arguments - got (max=Tensor, min=int, ), but expected one of:
E        * (Tensor min = None, Tensor max = None)
E             didn't match because some of the keywords were incorrect: max, min
E        * (Number min = None, Number max = None)
E             didn't match because some of the keywords were incorrect: max, min

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:30: TypeError
_____________ TestDrawLine.test_p1_out_of_bounds[cpu-float32-p12] ______________

self = <test_draw.TestDrawLine object at 0x7b8d0f170a30>, p1 = tensor([8, 0])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize(
        "p1", [torch.tensor([-1, 0]), torch.tensor([0, -1]), torch.tensor([8, 0]), torch.tensor([0, 8])]
    )
    def test_p1_out_of_bounds(self, p1, dtype, device):
        """Tests that an exception is raised if p1 is out of bounds."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
>           draw_line(img, p1, torch.tensor([0, 0]), torch.tensor([255]))

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:247: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([8, 0]), p2 = tensor([0, 0]), color = tensor([255])

    def draw_line(image: torch.Tensor, p1: Union[torch.Tensor, torch.Tensor], p2: Union[torch.Tensor, torch.Tensor], color: torch.Tensor) -> torch.Tensor:
        """
        Draws a line on a given image from point p1 to point p2 with the specified color.
    
        Args:
            image (torch.Tensor): Input image tensor of shape (C, H, W).
            p1 (torch.Tensor): Start point of the line, shape (2,) or (B, 2).
            p2 (torch.Tensor): End point of the line, shape (2,) or (B, 2).
            color (torch.Tensor): Color of the line, shape (C).
    
        Returns:
            torch.Tensor: Image tensor with the line drawn.
        """
        if image.dim() != 3:
            raise ValueError('Image must have 3 dimensions (C, H, W).')
        if color.shape[0] != image.shape[0]:
            raise ValueError('Color must have the same number of channels as the image.')
        if p1.shape != p2.shape:
            raise ValueError('Start and end points must have the same shape.')
        if p1.shape[-1] != 2:
            raise ValueError('Points must be 2D with shape (2,) or (B, 2).')
        _, H, W = image.shape
>       p1 = p1.clamp(min=0, max=torch.tensor([W - 1, H - 1]))
E       TypeError: clamp() received an invalid combination of arguments - got (max=Tensor, min=int, ), but expected one of:
E        * (Tensor min = None, Tensor max = None)
E             didn't match because some of the keywords were incorrect: max, min
E        * (Number min = None, Number max = None)
E             didn't match because some of the keywords were incorrect: max, min

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:30: TypeError
_____________ TestDrawLine.test_p1_out_of_bounds[cpu-float32-p13] ______________

self = <test_draw.TestDrawLine object at 0x7b8d0f170af0>, p1 = tensor([0, 8])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize(
        "p1", [torch.tensor([-1, 0]), torch.tensor([0, -1]), torch.tensor([8, 0]), torch.tensor([0, 8])]
    )
    def test_p1_out_of_bounds(self, p1, dtype, device):
        """Tests that an exception is raised if p1 is out of bounds."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
>           draw_line(img, p1, torch.tensor([0, 0]), torch.tensor([255]))

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:247: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([0, 8]), p2 = tensor([0, 0]), color = tensor([255])

    def draw_line(image: torch.Tensor, p1: Union[torch.Tensor, torch.Tensor], p2: Union[torch.Tensor, torch.Tensor], color: torch.Tensor) -> torch.Tensor:
        """
        Draws a line on a given image from point p1 to point p2 with the specified color.
    
        Args:
            image (torch.Tensor): Input image tensor of shape (C, H, W).
            p1 (torch.Tensor): Start point of the line, shape (2,) or (B, 2).
            p2 (torch.Tensor): End point of the line, shape (2,) or (B, 2).
            color (torch.Tensor): Color of the line, shape (C).
    
        Returns:
            torch.Tensor: Image tensor with the line drawn.
        """
        if image.dim() != 3:
            raise ValueError('Image must have 3 dimensions (C, H, W).')
        if color.shape[0] != image.shape[0]:
            raise ValueError('Color must have the same number of channels as the image.')
        if p1.shape != p2.shape:
            raise ValueError('Start and end points must have the same shape.')
        if p1.shape[-1] != 2:
            raise ValueError('Points must be 2D with shape (2,) or (B, 2).')
        _, H, W = image.shape
>       p1 = p1.clamp(min=0, max=torch.tensor([W - 1, H - 1]))
E       TypeError: clamp() received an invalid combination of arguments - got (max=Tensor, min=int, ), but expected one of:
E        * (Tensor min = None, Tensor max = None)
E             didn't match because some of the keywords were incorrect: max, min
E        * (Number min = None, Number max = None)
E             didn't match because some of the keywords were incorrect: max, min

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:30: TypeError
_____________ TestDrawLine.test_p2_out_of_bounds[cpu-float32-p20] ______________

self = <test_draw.TestDrawLine object at 0x7b8d0f1430a0>, p2 = tensor([-1,  0])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize(
        "p2", [torch.tensor([-1, 0]), torch.tensor([0, -1]), torch.tensor([8, 0]), torch.tensor([0, 8])]
    )
    def test_p2_out_of_bounds(self, p2, dtype, device):
        """Tests that an exception is raised if p2 is out of bounds."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
>           draw_line(img, torch.tensor([0, 0]), p2, torch.tensor([255]))

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([0, 0]), p2 = tensor([-1,  0]), color = tensor([255])

    def draw_line(image: torch.Tensor, p1: Union[torch.Tensor, torch.Tensor], p2: Union[torch.Tensor, torch.Tensor], color: torch.Tensor) -> torch.Tensor:
        """
        Draws a line on a given image from point p1 to point p2 with the specified color.
    
        Args:
            image (torch.Tensor): Input image tensor of shape (C, H, W).
            p1 (torch.Tensor): Start point of the line, shape (2,) or (B, 2).
            p2 (torch.Tensor): End point of the line, shape (2,) or (B, 2).
            color (torch.Tensor): Color of the line, shape (C).
    
        Returns:
            torch.Tensor: Image tensor with the line drawn.
        """
        if image.dim() != 3:
            raise ValueError('Image must have 3 dimensions (C, H, W).')
        if color.shape[0] != image.shape[0]:
            raise ValueError('Color must have the same number of channels as the image.')
        if p1.shape != p2.shape:
            raise ValueError('Start and end points must have the same shape.')
        if p1.shape[-1] != 2:
            raise ValueError('Points must be 2D with shape (2,) or (B, 2).')
        _, H, W = image.shape
>       p1 = p1.clamp(min=0, max=torch.tensor([W - 1, H - 1]))
E       TypeError: clamp() received an invalid combination of arguments - got (max=Tensor, min=int, ), but expected one of:
E        * (Tensor min = None, Tensor max = None)
E             didn't match because some of the keywords were incorrect: max, min
E        * (Number min = None, Number max = None)
E             didn't match because some of the keywords were incorrect: max, min

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:30: TypeError
_____________ TestDrawLine.test_p2_out_of_bounds[cpu-float32-p21] ______________

self = <test_draw.TestDrawLine object at 0x7b8d0f143400>, p2 = tensor([ 0, -1])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize(
        "p2", [torch.tensor([-1, 0]), torch.tensor([0, -1]), torch.tensor([8, 0]), torch.tensor([0, 8])]
    )
    def test_p2_out_of_bounds(self, p2, dtype, device):
        """Tests that an exception is raised if p2 is out of bounds."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
>           draw_line(img, torch.tensor([0, 0]), p2, torch.tensor([255]))

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([0, 0]), p2 = tensor([ 0, -1]), color = tensor([255])

    def draw_line(image: torch.Tensor, p1: Union[torch.Tensor, torch.Tensor], p2: Union[torch.Tensor, torch.Tensor], color: torch.Tensor) -> torch.Tensor:
        """
        Draws a line on a given image from point p1 to point p2 with the specified color.
    
        Args:
            image (torch.Tensor): Input image tensor of shape (C, H, W).
            p1 (torch.Tensor): Start point of the line, shape (2,) or (B, 2).
            p2 (torch.Tensor): End point of the line, shape (2,) or (B, 2).
            color (torch.Tensor): Color of the line, shape (C).
    
        Returns:
            torch.Tensor: Image tensor with the line drawn.
        """
        if image.dim() != 3:
            raise ValueError('Image must have 3 dimensions (C, H, W).')
        if color.shape[0] != image.shape[0]:
            raise ValueError('Color must have the same number of channels as the image.')
        if p1.shape != p2.shape:
            raise ValueError('Start and end points must have the same shape.')
        if p1.shape[-1] != 2:
            raise ValueError('Points must be 2D with shape (2,) or (B, 2).')
        _, H, W = image.shape
>       p1 = p1.clamp(min=0, max=torch.tensor([W - 1, H - 1]))
E       TypeError: clamp() received an invalid combination of arguments - got (max=Tensor, min=int, ), but expected one of:
E        * (Tensor min = None, Tensor max = None)
E             didn't match because some of the keywords were incorrect: max, min
E        * (Number min = None, Number max = None)
E             didn't match because some of the keywords were incorrect: max, min

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:30: TypeError
_____________ TestDrawLine.test_p2_out_of_bounds[cpu-float32-p22] ______________

self = <test_draw.TestDrawLine object at 0x7b8d0f170400>, p2 = tensor([8, 0])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize(
        "p2", [torch.tensor([-1, 0]), torch.tensor([0, -1]), torch.tensor([8, 0]), torch.tensor([0, 8])]
    )
    def test_p2_out_of_bounds(self, p2, dtype, device):
        """Tests that an exception is raised if p2 is out of bounds."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
>           draw_line(img, torch.tensor([0, 0]), p2, torch.tensor([255]))

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([0, 0]), p2 = tensor([8, 0]), color = tensor([255])

    def draw_line(image: torch.Tensor, p1: Union[torch.Tensor, torch.Tensor], p2: Union[torch.Tensor, torch.Tensor], color: torch.Tensor) -> torch.Tensor:
        """
        Draws a line on a given image from point p1 to point p2 with the specified color.
    
        Args:
            image (torch.Tensor): Input image tensor of shape (C, H, W).
            p1 (torch.Tensor): Start point of the line, shape (2,) or (B, 2).
            p2 (torch.Tensor): End point of the line, shape (2,) or (B, 2).
            color (torch.Tensor): Color of the line, shape (C).
    
        Returns:
            torch.Tensor: Image tensor with the line drawn.
        """
        if image.dim() != 3:
            raise ValueError('Image must have 3 dimensions (C, H, W).')
        if color.shape[0] != image.shape[0]:
            raise ValueError('Color must have the same number of channels as the image.')
        if p1.shape != p2.shape:
            raise ValueError('Start and end points must have the same shape.')
        if p1.shape[-1] != 2:
            raise ValueError('Points must be 2D with shape (2,) or (B, 2).')
        _, H, W = image.shape
>       p1 = p1.clamp(min=0, max=torch.tensor([W - 1, H - 1]))
E       TypeError: clamp() received an invalid combination of arguments - got (max=Tensor, min=int, ), but expected one of:
E        * (Tensor min = None, Tensor max = None)
E             didn't match because some of the keywords were incorrect: max, min
E        * (Number min = None, Number max = None)
E             didn't match because some of the keywords were incorrect: max, min

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:30: TypeError
_____________ TestDrawLine.test_p2_out_of_bounds[cpu-float32-p23] ______________

self = <test_draw.TestDrawLine object at 0x7b8d0f170c40>, p2 = tensor([0, 8])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize(
        "p2", [torch.tensor([-1, 0]), torch.tensor([0, -1]), torch.tensor([8, 0]), torch.tensor([0, 8])]
    )
    def test_p2_out_of_bounds(self, p2, dtype, device):
        """Tests that an exception is raised if p2 is out of bounds."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
>           draw_line(img, torch.tensor([0, 0]), p2, torch.tensor([255]))

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([0, 0]), p2 = tensor([0, 8]), color = tensor([255])

    def draw_line(image: torch.Tensor, p1: Union[torch.Tensor, torch.Tensor], p2: Union[torch.Tensor, torch.Tensor], color: torch.Tensor) -> torch.Tensor:
        """
        Draws a line on a given image from point p1 to point p2 with the specified color.
    
        Args:
            image (torch.Tensor): Input image tensor of shape (C, H, W).
            p1 (torch.Tensor): Start point of the line, shape (2,) or (B, 2).
            p2 (torch.Tensor): End point of the line, shape (2,) or (B, 2).
            color (torch.Tensor): Color of the line, shape (C).
    
        Returns:
            torch.Tensor: Image tensor with the line drawn.
        """
        if image.dim() != 3:
            raise ValueError('Image must have 3 dimensions (C, H, W).')
        if color.shape[0] != image.shape[0]:
            raise ValueError('Color must have the same number of channels as the image.')
        if p1.shape != p2.shape:
            raise ValueError('Start and end points must have the same shape.')
        if p1.shape[-1] != 2:
            raise ValueError('Points must be 2D with shape (2,) or (B, 2).')
        _, H, W = image.shape
>       p1 = p1.clamp(min=0, max=torch.tensor([W - 1, H - 1]))
E       TypeError: clamp() received an invalid combination of arguments - got (max=Tensor, min=int, ), but expected one of:
E        * (Tensor min = None, Tensor max = None)
E             didn't match because some of the keywords were incorrect: max, min
E        * (Number min = None, Number max = None)
E             didn't match because some of the keywords were incorrect: max, min

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:30: TypeError
_____________ TestDrawLine.test_image_size[cpu-float32-img_size0] ______________

self = <test_draw.TestDrawLine object at 0x7b8d0f170fd0>, img_size = (200, 100)
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize("img_size", [(200, 100), (32, 3, 20, 20)])
    def test_image_size(self, img_size, dtype, device):
        img = torch.zeros(*img_size, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
            draw_line(img, torch.tensor([0, 0]), torch.tensor([1, 1]), torch.tensor([255]))
    
>       assert "image must have 3 dimensions (C,H,W)." == str(excinfo.value)
E       AssertionError: assert 'image must h...ions (C,H,W).' == 'Image must h...ns (C, H, W).'
E         
E         - Image must have 3 dimensions (C, H, W).
E         ? ^                               -  -
E         + image must have 3 dimensions (C,H,W).
E         ? ^

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:268: AssertionError
_____________ TestDrawLine.test_image_size[cpu-float32-img_size1] ______________

self = <test_draw.TestDrawLine object at 0x7b8d0f170f10>
img_size = (32, 3, 20, 20), dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize("img_size", [(200, 100), (32, 3, 20, 20)])
    def test_image_size(self, img_size, dtype, device):
        img = torch.zeros(*img_size, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
            draw_line(img, torch.tensor([0, 0]), torch.tensor([1, 1]), torch.tensor([255]))
    
>       assert "image must have 3 dimensions (C,H,W)." == str(excinfo.value)
E       AssertionError: assert 'image must h...ions (C,H,W).' == 'Image must h...ns (C, H, W).'
E         
E         - Image must have 3 dimensions (C, H, W).
E         ? ^                               -  -
E         + image must have 3 dimensions (C,H,W).
E         ? ^

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:268: AssertionError
___ TestDrawLine.test_color_image_channel_size[cpu-float32-img_size0-color0] ___

self = <test_draw.TestDrawLine object at 0x7b8d0f171480>, img_size = (1, 8, 8)
color = tensor([23, 53]), dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize("img_size,color", [((1, 8, 8), torch.tensor([23, 53])), ((3, 8, 8), torch.tensor([255]))])
    def test_color_image_channel_size(self, img_size, color, dtype, device):
        img = torch.zeros(*img_size, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
            draw_line(img, torch.tensor([0, 0]), torch.tensor([1, 1]), color)
    
>       assert "color must have the same number of channels as the image." == str(excinfo.value)
E       AssertionError: assert 'color must h...as the image.' == 'Color must h...as the image.'
E         
E         - Color must have the same number of channels as the image.
E         ? ^
E         + color must have the same number of channels as the image.
E         ? ^

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:276: AssertionError
___ TestDrawLine.test_color_image_channel_size[cpu-float32-img_size1-color1] ___

self = <test_draw.TestDrawLine object at 0x7b8d0f1713c0>, img_size = (3, 8, 8)
color = tensor([255]), dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize("img_size,color", [((1, 8, 8), torch.tensor([23, 53])), ((3, 8, 8), torch.tensor([255]))])
    def test_color_image_channel_size(self, img_size, color, dtype, device):
        img = torch.zeros(*img_size, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
            draw_line(img, torch.tensor([0, 0]), torch.tensor([1, 1]), color)
    
>       assert "color must have the same number of channels as the image." == str(excinfo.value)
E       AssertionError: assert 'color must h...as the image.' == 'Color must h...as the image.'
E         
E         - Color must have the same number of channels as the image.
E         ? ^
E         + color must have the same number of channels as the image.
E         ? ^

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:276: AssertionError
______________ TestDrawLine.test_point_size[cpu-float32-p10-p20] _______________

self = <test_draw.TestDrawLine object at 0x7b8d0f171990>
p1 = tensor([[0.5792, 0.4176],
        [0.5668, 0.0025],
        [0.8746, 0.1499],
        [0.6122, 0.3877],
        [0.621...0179, 0.7040],
        [0.6047, 0.7734],
        [0.0296, 0.7370],
        [0.3773, 0.9323],
        [0.2337, 0.5265]])
p2 = tensor([[0.9674, 0.7661],
        [0.9663, 0.0285],
        [0.0801, 0.7609],
        [0.1679, 0.9711],
        [0.274...9530, 0.3014],
        [0.7816, 0.7039],
        [0.8128, 0.0870],
        [0.3062, 0.7970],
        [0.5855, 0.7675]])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize("p1,p2", [(torch.rand([10, 2]), torch.rand([20, 2])), (torch.rand([2]), torch.rand([3]))])
    def test_point_size(self, p1, p2, dtype, device):
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
            draw_line(img, p1, p2, torch.tensor([255]))
    
>       assert "Input points must be 2D points with shape (2, ) or (B, 2) and must have the same batch sizes." == str(
            excinfo.value
        )
E       AssertionError: assert 'Input points... batch sizes.' == 'Start and en...e same shape.'
E         
E         - Start and end points must have the same shape.
E         + Input points must be 2D points with shape (2, ) or (B, 2) and must have the same batch sizes.

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:284: AssertionError
______________ TestDrawLine.test_point_size[cpu-float32-p11-p21] _______________

self = <test_draw.TestDrawLine object at 0x7b8d0f1718d0>
p1 = tensor([0.4421, 0.8851]), p2 = tensor([0.9301, 0.1344, 0.6271])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize("p1,p2", [(torch.rand([10, 2]), torch.rand([20, 2])), (torch.rand([2]), torch.rand([3]))])
    def test_point_size(self, p1, p2, dtype, device):
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
            draw_line(img, p1, p2, torch.tensor([255]))
    
>       assert "Input points must be 2D points with shape (2, ) or (B, 2) and must have the same batch sizes." == str(
            excinfo.value
        )
E       AssertionError: assert 'Input points... batch sizes.' == 'Start and en...e same shape.'
E         
E         - Start and end points must have the same shape.
E         + Input points must be 2D points with shape (2, ) or (B, 2) and must have the same batch sizes.

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:284: AssertionError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_vertical[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_horizontal[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_with_big_coordinates[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lte_neg1[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lt_0_gte_neg1[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gt_0_lt_1[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gte_1[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_lines_batched[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p10]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p12]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p13]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p20]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p21]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p22]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p23]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size0]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size0-color0]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size1-color1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p10-p20]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p11-p21]
======================== 22 failed, 65 passed in 0.85s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'openxla', None, 'onnxrt', 'inductor', 'tvm', 'jit'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 87 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_rgb[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_grayscale_third_order[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_grayscale_second_order[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_with_mismatched_dims[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_with_mismatched_dtype[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_with_singleton_color_dims[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_vertical[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_horizontal[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_with_big_coordinates[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lte_neg1[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lt_0_gte_neg1[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gt_0_lt_1[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gte_1[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_lines_batched[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p12] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p13] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p20] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p21] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p22] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p23] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size0-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size1-color1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p10-p20] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p11-p21] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_circle[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_ellipse[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_rectangle[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_batch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_batch_variable_size[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_batch_color_no_batch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_out_of_bounds_rectangle[cpu-float32] PASSED

============================== 87 passed in 0.38s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'onnxrt', 'openxla', 'jit', 'inductor', 'tvm', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 87 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_rgb[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_grayscale_third_order[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_grayscale_second_order[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_with_mismatched_dims[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_with_mismatched_dtype[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_with_singleton_color_dims[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_vertical[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_horizontal[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_with_big_coordinates[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lte_neg1[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lt_0_gte_neg1[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gt_0_lt_1[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gte_1[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_lines_batched[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p12] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p13] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p20] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p21] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p22] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p23] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size0-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size1-color1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p10-p20] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p11-p21] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_circle[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_ellipse[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_rectangle[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_batch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_batch_variable_size[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_batch_color_no_batch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_out_of_bounds_rectangle[cpu-float32] PASSED

============================== 87 passed in 0.40s ==============================
