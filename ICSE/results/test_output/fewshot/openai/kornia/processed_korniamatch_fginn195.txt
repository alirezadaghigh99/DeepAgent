output file:
processed_korniamatch_fginn195.json
function:
match_fginn
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'onnxrt', 'cudagraphs', 'inductor', 'jit', 'openxla', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 12 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_jit[cpu-float32] SKIPPED

=================================== FAILURES ===================================
_________________ TestMatchFGINN.test_shape_one_way[cpu-2-4-4] _________________

self = <test_matching.TestMatchFGINN object at 0x779882f3f520>, num_desc1 = 2
num_desc2 = 4, dim = 4, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_one_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.2182, 0.0374, 0.7495, 0.5899],
        [0.2690, 0.0993, 0.0351, 0.2723]])
desc2 = tensor([[0.3527, 0.7087, 0.9788, 0.8797],
        [0.2200, 0.7477, 0.3368, 0.2126],
        [0.6202, 0.5812, 0.9424, 0.2492],
        [0.5252, 0.3999, 0.8497, 0.2701]])
lafs1 = tensor([[[[0.1820, 0.3307, 0.7656],
          [0.7484, 0.2115, 0.9700]],

         [[0.8439, 0.5370, 0.9721],
          [0.3118, 0.6184, 0.8617]]]])
lafs2 = tensor([[[[0.3735, 0.7758, 0.8059],
          [0.7501, 0.9504, 0.3033]],

         [[0.4718, 0.6680, 0.7389],
        ...3009],
          [0.2454, 0.6492, 0.5227]],

         [[0.4249, 0.7041, 0.9095],
          [0.9590, 0.9829, 0.6652]]]])
th = 0.9, spatial_th = 1000, mutual = False
dm = tensor([[0.7779, 0.9040, 0.7814, 0.5813],
        [1.2797, 0.7193, 1.0860, 0.9053]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for descriptor matching.
            spatial_th (float): Spatial threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and matching indices.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th is not None:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
________________ TestMatchFGINN.test_shape_one_way[cpu-2-5-128] ________________

self = <test_matching.TestMatchFGINN object at 0x779882f3f460>, num_desc1 = 2
num_desc2 = 5, dim = 128, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_one_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.2837, 0.2126, 0.8930, 0.3816, 0.7867, 0.3453, 0.6187, 0.2560, 0.0403,
         0.5586, 0.3138, 0.2233, 0.62...93, 0.7905,
         0.5058, 0.8733, 0.8224, 0.5529, 0.2797, 0.7119, 0.8401, 0.0910, 0.7617,
         0.4894, 0.3565]])
desc2 = tensor([[5.0324e-01, 1.0211e-01, 2.9141e-01, 5.0275e-01, 8.5298e-01, 7.1695e-01,
         1.4206e-01, 1.9337e-01, 8.35...01,
         8.3085e-01, 2.2943e-01, 3.7129e-01, 4.3811e-01, 1.5673e-01, 9.5249e-01,
         2.8255e-01, 3.4800e-02]])
lafs1 = tensor([[[[0.8776, 0.9236, 0.8533],
          [0.2346, 0.1470, 0.4010]],

         [[0.8329, 0.8659, 0.4796],
          [0.1671, 0.3235, 0.3499]]]])
lafs2 = tensor([[[[0.8822, 0.2981, 0.6003],
          [0.9442, 0.6651, 0.4760]],

         [[0.2970, 0.8509, 0.0498],
        ...2648],
          [0.1634, 0.7195, 0.4509]],

         [[0.9315, 0.4401, 0.1959],
          [0.6409, 0.5940, 0.8813]]]])
th = 0.9, spatial_th = 1000, mutual = False
dm = tensor([[4.9559, 4.5205, 4.4525, 5.1639, 4.7841],
        [4.5663, 4.7620, 4.7822, 4.4002, 4.5651]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for descriptor matching.
            spatial_th (float): Spatial threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and matching indices.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th is not None:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
________________ TestMatchFGINN.test_shape_one_way[cpu-6-2-32] _________________

self = <test_matching.TestMatchFGINN object at 0x779882f3f7f0>, num_desc1 = 6
num_desc2 = 2, dim = 32, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_one_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.0853, 0.1622, 0.6917, 0.2255, 0.8825, 0.8266, 0.5634, 0.9121, 0.5992,
         0.7914, 0.4784, 0.4580, 0.86...100, 0.3322, 0.5808, 0.7934, 0.0236, 0.4051, 0.2834, 0.8214, 0.8981,
         0.8229, 0.7177, 0.6917, 0.2614, 0.5862]])
desc2 = tensor([[0.7073, 0.8368, 0.2447, 0.3874, 0.8785, 0.2022, 0.8333, 0.9644, 0.1106,
         0.8697, 0.0061, 0.1840, 0.18...050, 0.3371, 0.1517, 0.0537, 0.4194, 0.3024, 0.1415, 0.3740, 0.2008,
         0.0933, 0.1028, 0.6326, 0.2643, 0.9591]])
lafs1 = tensor([[[[0.4728, 0.4555, 0.9452],
          [0.7882, 0.6097, 0.7228]],

         [[0.3033, 0.4821, 0.3595],
        ...0652],
          [0.8826, 0.5587, 0.3057]],

         [[0.9072, 0.7961, 0.7569],
          [0.1572, 0.8510, 0.4062]]]])
lafs2 = tensor([[[[0.7355, 0.7337, 0.0396],
          [0.9636, 0.0405, 0.2347]],

         [[0.5414, 0.4763, 0.4992],
          [0.8405, 0.7141, 0.4707]]]])
th = 0.9, spatial_th = 1000, mutual = False
dm = tensor([[2.3954, 2.1221],
        [2.3892, 2.4080],
        [2.1313, 2.5093],
        [2.4199, 2.0935],
        [2.6617, 2.4535],
        [2.3588, 2.5795]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for descriptor matching.
            spatial_th (float): Spatial threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and matching indices.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th is not None:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
_________________ TestMatchFGINN.test_shape_two_way[cpu-2-4-4] _________________

self = <test_matching.TestMatchFGINN object at 0x779882f3faf0>, num_desc1 = 2
num_desc2 = 4, dim = 4, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_two_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000, mutual=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.1011, 0.7797, 0.6070, 0.1895],
        [0.0978, 0.0595, 0.6053, 0.6518]])
desc2 = tensor([[0.8191, 0.8478, 0.6132, 0.4610],
        [0.7449, 0.6021, 0.4233, 0.1002],
        [0.9042, 0.1720, 0.4951, 0.3637],
        [0.9201, 0.7680, 0.1617, 0.2916]])
lafs1 = tensor([[[[0.9857, 0.4767, 0.5583],
          [0.5933, 0.1180, 0.1198]],

         [[0.2955, 0.5766, 0.3378],
          [0.4524, 0.6603, 0.0776]]]])
lafs2 = tensor([[[[0.5787, 0.2572, 0.9929],
          [0.8003, 0.1281, 0.8640]],

         [[0.1105, 0.6547, 0.9496],
        ...8815],
          [0.8357, 0.7074, 0.4926]],

         [[0.2635, 0.2576, 0.3120],
          [0.6963, 0.0297, 0.8736]]]])
th = 0.9, spatial_th = 1000, mutual = True
dm = tensor([[0.7706, 0.6983, 1.0282, 0.9378],
        [1.0854, 1.0249, 0.8706, 1.2266]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for descriptor matching.
            spatial_th (float): Spatial threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and matching indices.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th is not None:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
________________ TestMatchFGINN.test_shape_two_way[cpu-2-5-128] ________________

self = <test_matching.TestMatchFGINN object at 0x779882f3fa60>, num_desc1 = 2
num_desc2 = 5, dim = 128, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_two_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000, mutual=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.5115, 0.5461, 0.9719, 0.2571, 0.6314, 0.0201, 0.1045, 0.8886, 0.8273,
         0.5996, 0.6065, 0.5738, 0.37...53, 0.0736,
         0.2717, 0.6114, 0.5525, 0.0329, 0.9692, 0.0421, 0.1002, 0.7243, 0.7503,
         0.1524, 0.8912]])
desc2 = tensor([[9.2957e-01, 4.9571e-02, 2.4798e-01, 9.5290e-01, 8.7663e-01, 2.1705e-01,
         6.8509e-01, 3.7116e-01, 5.13...01,
         6.5804e-01, 4.5780e-01, 8.9006e-01, 4.9163e-01, 5.4782e-01, 5.1807e-01,
         9.4165e-01, 1.5926e-01]])
lafs1 = tensor([[[[0.4191, 0.3521, 0.8365],
          [0.9100, 0.0374, 0.7311]],

         [[0.2947, 0.7393, 0.5169],
          [0.3948, 0.2232, 0.4059]]]])
lafs2 = tensor([[[[0.6764, 0.0563, 0.0352],
          [0.5928, 0.4392, 0.0452]],

         [[0.5661, 0.5828, 0.2601],
        ...9559],
          [0.6281, 0.5128, 0.5801]],

         [[0.3449, 0.1536, 0.1337],
          [0.3959, 0.2781, 0.1203]]]])
th = 0.9, spatial_th = 1000, mutual = True
dm = tensor([[4.8350, 4.8811, 4.9099, 4.6069, 4.8674],
        [4.7762, 4.7760, 4.6247, 4.7582, 5.0298]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for descriptor matching.
            spatial_th (float): Spatial threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and matching indices.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th is not None:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
________________ TestMatchFGINN.test_shape_two_way[cpu-6-2-32] _________________

self = <test_matching.TestMatchFGINN object at 0x779882f3fdf0>, num_desc1 = 6
num_desc2 = 2, dim = 32, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_two_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000, mutual=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.4901, 0.5625, 0.2948, 0.3196, 0.1819, 0.0992, 0.3619, 0.4291, 0.6053,
         0.6298, 0.4329, 0.1439, 0.17...379, 0.4110, 0.2151, 0.6119, 0.5539, 0.0421, 0.2439, 0.7459, 0.6979,
         0.1869, 0.9532, 0.4810, 0.1814, 0.1253]])
desc2 = tensor([[0.4284, 0.0323, 0.5963, 0.6521, 0.4780, 0.4150, 0.9319, 0.4772, 0.3761,
         0.2028, 0.7380, 0.9969, 0.40...341, 0.9668, 0.8957, 0.2117, 0.0202, 0.8250, 0.1847, 0.9979, 0.2512,
         0.8085, 0.6232, 0.7408, 0.7544, 0.3682]])
lafs1 = tensor([[[[0.5332, 0.6423, 0.7327],
          [0.2724, 0.1515, 0.5098]],

         [[0.2616, 0.7681, 0.7660],
        ...1268],
          [0.6226, 0.8119, 0.6124]],

         [[0.5892, 0.9169, 0.5521],
          [0.8109, 0.3205, 0.7598]]]])
lafs2 = tensor([[[[0.0421, 0.6077, 0.1029],
          [0.6504, 0.0174, 0.0449]],

         [[0.9751, 0.2628, 0.4323],
          [0.5829, 0.7289, 0.2267]]]])
th = 0.9, spatial_th = 1000, mutual = True
dm = tensor([[2.1235, 2.1157],
        [2.5478, 2.3471],
        [2.3871, 2.4230],
        [2.0814, 2.2419],
        [2.4600, 2.6567],
        [2.2612, 2.1288]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for descriptor matching.
            spatial_th (float): Spatial threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and matching indices.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th is not None:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
__________________ TestMatchFGINN.test_matching1[cpu-float32] __________________

self = <test_matching.TestMatchFGINN object at 0x779882f70100>
device = device(type='cpu'), dtype = torch.float32

    def test_matching1(self, device, dtype):
        desc1 = torch.tensor([[0, 0.0], [1, 1.001], [2, 2], [3, 3.0], [5, 5.0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0], [3, 3.0], [2.3, 2.4], [1, 1.001], [0, 0.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8, 0.01)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:266: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.0000, 0.0000],
        [1.0000, 1.0010],
        [2.0000, 2.0000],
        [3.0000, 3.0000],
        [5.0000, 5.0000]])
desc2 = tensor([[5.0000, 5.0000],
        [3.0000, 3.0000],
        [2.3000, 2.4000],
        [1.0000, 1.0010],
        [0.0000, 0.0000]])
lafs1 = tensor([[[[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]],

         [[1.0000, 0.0000, 1.0000],
       ...00],
          [-0.0000, 1.0000, 3.0000]],

         [[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]]]])
lafs2 = tensor([[[[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 3.0000],
       ...00],
          [-0.0000, 1.0000, 1.0010]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
th = 0.8, spatial_th = 0.01, mutual = False
dm = tensor([[7.0711, 4.2426, 3.3242, 1.4149, 0.0000],
        [5.6561, 2.8277, 1.9098, 0.0000, 1.4149],
        [4.2426, 1..., 1.4135, 2.8284],
        [2.8284, 0.0000, 0.9220, 2.8277, 4.2426],
        [0.0000, 2.8284, 3.7483, 5.6561, 7.0711]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for descriptor matching.
            spatial_th (float): Spatial threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and matching indices.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th is not None:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
_______________ TestMatchFGINN.test_matching_mutual[cpu-float32] _______________

self = <test_matching.TestMatchFGINN object at 0x779882f70430>
device = device(type='cpu'), dtype = torch.float32

    def test_matching_mutual(self, device, dtype):
        desc1 = torch.tensor([[0, 0.1], [1, 1.001], [2, 2], [3, 3.0], [5, 5.0], [0.0, 0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0], [3, 3.0], [2.3, 2.4], [1, 1.001], [0, 0.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8, 2.0, mutual=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:282: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.0000, 0.1000],
        [1.0000, 1.0010],
        [2.0000, 2.0000],
        [3.0000, 3.0000],
        [5.0000, 5.0000],
        [0.0000, 0.0000]])
desc2 = tensor([[5.0000, 5.0000],
        [3.0000, 3.0000],
        [2.3000, 2.4000],
        [1.0000, 1.0010],
        [0.0000, 0.0000]])
lafs1 = tensor([[[[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.1000]],

         [[1.0000, 0.0000, 1.0000],
       ...00],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
lafs2 = tensor([[[[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 3.0000],
       ...00],
          [-0.0000, 1.0000, 1.0010]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
th = 0.8, spatial_th = 2.0, mutual = True
dm = tensor([[7.0007, 4.1725, 3.2527, 1.3460, 0.1000],
        [5.6561, 2.8277, 1.9098, 0.0000, 1.4149],
        [4.2426, 1..., 2.8277, 4.2426],
        [0.0000, 2.8284, 3.7483, 5.6561, 7.0711],
        [7.0711, 4.2426, 3.3242, 1.4149, 0.0000]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for descriptor matching.
            spatial_th (float): Spatial threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and matching indices.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th is not None:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
___________________ TestMatchFGINN.test_nomatch[cpu-float32] ___________________

self = <test_matching.TestMatchFGINN object at 0x779882f70760>
device = device(type='cpu'), dtype = torch.float32

    def test_nomatch(self, device, dtype):
        desc1 = torch.tensor([[0, 0.0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:298: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0., 0.]]), desc2 = tensor([[5., 5.]])
lafs1 = tensor([[[[1., 0., 0.],
          [-0., 1., 0.]]]])
lafs2 = tensor([[[[1., 0., 5.],
          [-0., 1., 5.]]]]), th = 0.8
spatial_th = 10.0, mutual = False, dm = tensor([[7.0711]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for descriptor matching.
            spatial_th (float): Spatial threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and matching indices.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th is not None:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
__________________ TestMatchFGINN.test_matching2[cpu-float32] __________________

self = <test_matching.TestMatchFGINN object at 0x779882f70a90>
device = device(type='cpu'), dtype = torch.float32

    def test_matching2(self, device, dtype):
        desc1 = torch.tensor([[0, 0.0], [1, 1.001], [2, 2], [3, 3.0], [5, 5.0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0], [3, 3.0], [2.3, 2.4], [1, 1.001], [0, 0.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8, 2.0)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:308: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.0000, 0.0000],
        [1.0000, 1.0010],
        [2.0000, 2.0000],
        [3.0000, 3.0000],
        [5.0000, 5.0000]])
desc2 = tensor([[5.0000, 5.0000],
        [3.0000, 3.0000],
        [2.3000, 2.4000],
        [1.0000, 1.0010],
        [0.0000, 0.0000]])
lafs1 = tensor([[[[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]],

         [[1.0000, 0.0000, 1.0000],
       ...00],
          [-0.0000, 1.0000, 3.0000]],

         [[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]]]])
lafs2 = tensor([[[[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 3.0000],
       ...00],
          [-0.0000, 1.0000, 1.0010]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
th = 0.8, spatial_th = 2.0, mutual = False
dm = tensor([[7.0711, 4.2426, 3.3242, 1.4149, 0.0000],
        [5.6561, 2.8277, 1.9098, 0.0000, 1.4149],
        [4.2426, 1..., 1.4135, 2.8284],
        [2.8284, 0.0000, 0.9220, 2.8277, 4.2426],
        [0.0000, 2.8284, 3.7483, 5.6561, 7.0711]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for descriptor matching.
            spatial_th (float): Spatial threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and matching indices.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th is not None:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
______________________ TestMatchFGINN.test_gradcheck[cpu] ______________________

self = <test_matching.TestMatchFGINN object at 0x779882f70d60>
device = device(type='cpu')

    def test_gradcheck(self, device):
        desc1 = torch.rand(5, 8, device=device, dtype=torch.float64)
        desc2 = torch.rand(7, 8, device=device, dtype=torch.float64)
        center1 = torch.rand(1, 5, 2, device=device, dtype=torch.float64)
        center2 = torch.rand(1, 7, 2, device=device, dtype=torch.float64)
        lafs1 = laf_from_center_scale_ori(center1)
        lafs2 = laf_from_center_scale_ori(center2)
>       self.gradcheck(match_fginn, (desc1, desc2, lafs1, lafs2, 0.8, 0.05), nondet_tol=1e-4)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:325: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.4118, 0.7212, 0.2653, 0.1407, 0.6527, 0.8586, 0.0059, 0.3553],
        [0.6665, 0.0499, 0.3098, 0.7881, 0.7...     [0.0443, 0.7223, 0.3906, 0.1296, 0.0586, 0.6046, 0.2280, 0.2490]],
       dtype=torch.float64, requires_grad=True)
desc2 = tensor([[0.3251, 0.7015, 0.8852, 0.7799, 0.5720, 0.5209, 0.9955, 0.0756],
        [0.1799, 0.9548, 0.7810, 0.6085, 0.4...     [0.4466, 0.4373, 0.4954, 0.1764, 0.8007, 0.3863, 0.0739, 0.9913]],
       dtype=torch.float64, requires_grad=True)
lafs1 = tensor([[[[1.0000, 0.0000, 0.6247],
          [-0.0000, 1.0000, 0.7831]],

         [[1.0000, 0.0000, 0.4242],
       ...     [[1.0000, 0.0000, 0.6694],
          [-0.0000, 1.0000, 0.4391]]]], dtype=torch.float64,
       requires_grad=True)
lafs2 = tensor([[[[1.0000, 0.0000, 0.2031],
          [-0.0000, 1.0000, 0.6281]],

         [[1.0000, 0.0000, 0.2065],
       ...     [[1.0000, 0.0000, 0.6364],
          [-0.0000, 1.0000, 0.6355]]]], dtype=torch.float64,
       requires_grad=True)
th = 0.8, spatial_th = 0.05, mutual = False
dm = tensor([[1.4067, 1.0314, 1.2444, 1.5337, 0.8065, 0.9429, 0.8889],
        [1.4227, 1.2733, 1.0324, 0.8631, 1.4247, 1.3...       [1.2792, 0.9283, 1.0212, 1.5336, 1.1176, 1.2813, 1.1956]],
       dtype=torch.float64, grad_fn=<CdistBackward0>)

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for descriptor matching.
            spatial_th (float): Spatial threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and matching indices.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th is not None:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu]
======================== 11 failed, 1 skipped in 0.59s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'onnxrt', 'jit', 'tvm', 'cudagraphs', None, 'openxla'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 12 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_jit[cpu-float32] SKIPPED

======================== 11 passed, 1 skipped in 0.18s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'cudagraphs', 'inductor', 'openxla', 'onnxrt', 'tvm', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 12 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_jit[cpu-float32] SKIPPED

======================== 11 passed, 1 skipped in 0.17s =========================
