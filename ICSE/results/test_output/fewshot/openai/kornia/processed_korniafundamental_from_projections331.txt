output file:
processed_korniafundamental_from_projections331.json
function:
fundamental_from_projections
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_smoke[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_gradcheck[cpu]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape_large[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_batch_support_check[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_from_to_projections[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_gradcheck[cpu] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-4]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape_large[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_batch_support_check[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_smoke[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_from_to_projections[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-7] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'onnxrt', 'inductor', None, 'openxla', 'jit', 'cudagraphs'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 9 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_smoke[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-7] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape_large[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_from_to_projections[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_gradcheck[cpu] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_batch_support_check[cpu-float32] FAILED

=================================== FAILURES ===================================
____________ TestFundamentalFromProjections.test_smoke[cpu-float32] ____________

self = <test_fundamental.TestFundamentalFromProjections object at 0x7685ec91ea40>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke(self, device, dtype):
        P1 = torch.rand(1, 3, 4, device=device, dtype=dtype)
        P2 = torch.rand(1, 3, 4, device=device, dtype=dtype)
>       F_mat = epi.fundamental_from_projections(P1, P2)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:388: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:273: in fundamental_from_projections
    return fundamental_from_projections(P1, P2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

P1 = tensor([[[0.0960, 0.2110, 0.0634, 0.9231],
         [0.4162, 0.7959, 0.8892, 0.9398],
         [0.8359, 0.6038, 0.5114, 0.9500]]])
P2 = tensor([[[0.2486, 0.9535, 0.2649, 0.5662],
         [0.7581, 0.8245, 0.1282, 0.7177],
         [0.1364, 0.4624, 0.6611, 0.0377]]])

    def fundamental_from_projections(P1: torch.Tensor, P2: torch.Tensor) -> torch.Tensor:
        """
        Calculate the fundamental matrix from two projection matrices.
    
        Args:
            P1 (Tensor): First projection matrix of shape (*, 3, 4).
            P2 (Tensor): Second projection matrix of shape (*, 3, 4).
    
        Returns:
            Tensor: Fundamental matrix of shape (*, 3, 3).
        """
        assert P1.shape[-2:] == (3, 4), 'P1 must have shape (*, 3, 4)'
        assert P2.shape[-2:] == (3, 4), 'P2 must have shape (*, 3, 4)'
        assert P1.shape[:-2] == P2.shape[:-2], 'P1 and P2 must have matching batch dimensions'
        if P1.dtype not in [torch.float32, torch.float64]:
            P1 = P1.to(torch.float32)
        if P2.dtype not in [torch.float32, torch.float64]:
            P2 = P2.to(torch.float32)
        F = torch.zeros(*P1.shape[:-2], 3, 3, dtype=P1.dtype, device=P1.device)
        for i in range(3):
            for j in range(3):
                P1_sub = torch.cat([P1[..., :i, :], P1[..., i + 1:, :]], dim=-2)
                P2_sub = torch.cat([P2[..., :j, :], P2[..., j + 1:, :]], dim=-2)
>               F[..., i, j] = torch.det(P1_sub) * torch.det(P2_sub)
E               RuntimeError: linalg.det: A must be batches of square matrices, but they are 2 by 4 matrices

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:34: RuntimeError
___________ TestFundamentalFromProjections.test_shape[cpu-float32-1] ___________

self = <test_fundamental.TestFundamentalFromProjections object at 0x7685ec91eef0>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 4, 7])
    def test_shape(self, batch_size, device, dtype):
        B: int = batch_size
        P1 = torch.rand(B, 3, 4, device=device, dtype=dtype)
        P2 = torch.rand(B, 3, 4, device=device, dtype=dtype)
>       F_mat = epi.fundamental_from_projections(P1, P2)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:396: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:273: in fundamental_from_projections
    return fundamental_from_projections(P1, P2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

P1 = tensor([[[0.9790, 0.6764, 0.5614, 0.1699],
         [0.9429, 0.2466, 0.5792, 0.1778],
         [0.4797, 0.6828, 0.1031, 0.2377]]])
P2 = tensor([[[0.4804, 0.8658, 0.3755, 0.6325],
         [0.3899, 0.3876, 0.4949, 0.9790],
         [0.4782, 0.5928, 0.7794, 0.3785]]])

    def fundamental_from_projections(P1: torch.Tensor, P2: torch.Tensor) -> torch.Tensor:
        """
        Calculate the fundamental matrix from two projection matrices.
    
        Args:
            P1 (Tensor): First projection matrix of shape (*, 3, 4).
            P2 (Tensor): Second projection matrix of shape (*, 3, 4).
    
        Returns:
            Tensor: Fundamental matrix of shape (*, 3, 3).
        """
        assert P1.shape[-2:] == (3, 4), 'P1 must have shape (*, 3, 4)'
        assert P2.shape[-2:] == (3, 4), 'P2 must have shape (*, 3, 4)'
        assert P1.shape[:-2] == P2.shape[:-2], 'P1 and P2 must have matching batch dimensions'
        if P1.dtype not in [torch.float32, torch.float64]:
            P1 = P1.to(torch.float32)
        if P2.dtype not in [torch.float32, torch.float64]:
            P2 = P2.to(torch.float32)
        F = torch.zeros(*P1.shape[:-2], 3, 3, dtype=P1.dtype, device=P1.device)
        for i in range(3):
            for j in range(3):
                P1_sub = torch.cat([P1[..., :i, :], P1[..., i + 1:, :]], dim=-2)
                P2_sub = torch.cat([P2[..., :j, :], P2[..., j + 1:, :]], dim=-2)
>               F[..., i, j] = torch.det(P1_sub) * torch.det(P2_sub)
E               RuntimeError: linalg.det: A must be batches of square matrices, but they are 2 by 4 matrices

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:34: RuntimeError
___________ TestFundamentalFromProjections.test_shape[cpu-float32-2] ___________

self = <test_fundamental.TestFundamentalFromProjections object at 0x7685ec91ee30>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 4, 7])
    def test_shape(self, batch_size, device, dtype):
        B: int = batch_size
        P1 = torch.rand(B, 3, 4, device=device, dtype=dtype)
        P2 = torch.rand(B, 3, 4, device=device, dtype=dtype)
>       F_mat = epi.fundamental_from_projections(P1, P2)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:396: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:273: in fundamental_from_projections
    return fundamental_from_projections(P1, P2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

P1 = tensor([[[0.7961, 0.7117, 0.2525, 0.2840],
         [0.8076, 0.8371, 0.6474, 0.4288],
         [0.0463, 0.0607, 0.0175....3485, 0.0481, 0.5493, 0.3426],
         [0.5438, 0.1485, 0.3396, 0.9338],
         [0.2075, 0.0997, 0.7304, 0.5243]]])
P2 = tensor([[[0.7625, 0.6464, 0.7184, 0.9052],
         [0.8844, 0.3081, 0.3569, 0.4380],
         [0.6084, 0.8549, 0.5351....0214, 0.5417, 0.2141, 0.7308],
         [0.0218, 0.0423, 0.5910, 0.0969],
         [0.5763, 0.1297, 0.5104, 0.7450]]])

    def fundamental_from_projections(P1: torch.Tensor, P2: torch.Tensor) -> torch.Tensor:
        """
        Calculate the fundamental matrix from two projection matrices.
    
        Args:
            P1 (Tensor): First projection matrix of shape (*, 3, 4).
            P2 (Tensor): Second projection matrix of shape (*, 3, 4).
    
        Returns:
            Tensor: Fundamental matrix of shape (*, 3, 3).
        """
        assert P1.shape[-2:] == (3, 4), 'P1 must have shape (*, 3, 4)'
        assert P2.shape[-2:] == (3, 4), 'P2 must have shape (*, 3, 4)'
        assert P1.shape[:-2] == P2.shape[:-2], 'P1 and P2 must have matching batch dimensions'
        if P1.dtype not in [torch.float32, torch.float64]:
            P1 = P1.to(torch.float32)
        if P2.dtype not in [torch.float32, torch.float64]:
            P2 = P2.to(torch.float32)
        F = torch.zeros(*P1.shape[:-2], 3, 3, dtype=P1.dtype, device=P1.device)
        for i in range(3):
            for j in range(3):
                P1_sub = torch.cat([P1[..., :i, :], P1[..., i + 1:, :]], dim=-2)
                P2_sub = torch.cat([P2[..., :j, :], P2[..., j + 1:, :]], dim=-2)
>               F[..., i, j] = torch.det(P1_sub) * torch.det(P2_sub)
E               RuntimeError: linalg.det: A must be batches of square matrices, but they are 2 by 4 matrices

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:34: RuntimeError
___________ TestFundamentalFromProjections.test_shape[cpu-float32-4] ___________

self = <test_fundamental.TestFundamentalFromProjections object at 0x7685ec91f1c0>
batch_size = 4, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 4, 7])
    def test_shape(self, batch_size, device, dtype):
        B: int = batch_size
        P1 = torch.rand(B, 3, 4, device=device, dtype=dtype)
        P2 = torch.rand(B, 3, 4, device=device, dtype=dtype)
>       F_mat = epi.fundamental_from_projections(P1, P2)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:396: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:273: in fundamental_from_projections
    return fundamental_from_projections(P1, P2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

P1 = tensor([[[0.4880, 0.5873, 0.9737, 0.6446],
         [0.7531, 0.7200, 0.6520, 0.7808],
         [0.6248, 0.4478, 0.0026....8671, 0.6985, 0.8615, 0.2424],
         [0.6873, 0.4841, 0.5115, 0.6930],
         [0.7045, 0.6688, 0.3593, 0.8933]]])
P2 = tensor([[[0.3532, 0.0535, 0.3099, 0.4809],
         [0.2789, 0.6771, 0.4989, 0.1149],
         [0.7491, 0.4626, 0.6979....2810, 0.8033, 0.9962, 0.2101],
         [0.6731, 0.0732, 0.1143, 0.9385],
         [0.1141, 0.3758, 0.2512, 0.3417]]])

    def fundamental_from_projections(P1: torch.Tensor, P2: torch.Tensor) -> torch.Tensor:
        """
        Calculate the fundamental matrix from two projection matrices.
    
        Args:
            P1 (Tensor): First projection matrix of shape (*, 3, 4).
            P2 (Tensor): Second projection matrix of shape (*, 3, 4).
    
        Returns:
            Tensor: Fundamental matrix of shape (*, 3, 3).
        """
        assert P1.shape[-2:] == (3, 4), 'P1 must have shape (*, 3, 4)'
        assert P2.shape[-2:] == (3, 4), 'P2 must have shape (*, 3, 4)'
        assert P1.shape[:-2] == P2.shape[:-2], 'P1 and P2 must have matching batch dimensions'
        if P1.dtype not in [torch.float32, torch.float64]:
            P1 = P1.to(torch.float32)
        if P2.dtype not in [torch.float32, torch.float64]:
            P2 = P2.to(torch.float32)
        F = torch.zeros(*P1.shape[:-2], 3, 3, dtype=P1.dtype, device=P1.device)
        for i in range(3):
            for j in range(3):
                P1_sub = torch.cat([P1[..., :i, :], P1[..., i + 1:, :]], dim=-2)
                P2_sub = torch.cat([P2[..., :j, :], P2[..., j + 1:, :]], dim=-2)
>               F[..., i, j] = torch.det(P1_sub) * torch.det(P2_sub)
E               RuntimeError: linalg.det: A must be batches of square matrices, but they are 2 by 4 matrices

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:34: RuntimeError
___________ TestFundamentalFromProjections.test_shape[cpu-float32-7] ___________

self = <test_fundamental.TestFundamentalFromProjections object at 0x7685ec91f280>
batch_size = 7, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 4, 7])
    def test_shape(self, batch_size, device, dtype):
        B: int = batch_size
        P1 = torch.rand(B, 3, 4, device=device, dtype=dtype)
        P2 = torch.rand(B, 3, 4, device=device, dtype=dtype)
>       F_mat = epi.fundamental_from_projections(P1, P2)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:396: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:273: in fundamental_from_projections
    return fundamental_from_projections(P1, P2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

P1 = tensor([[[0.1374, 0.4840, 0.1173, 0.0592],
         [0.3528, 0.2359, 0.6874, 0.6120],
         [0.7906, 0.6098, 0.9485....3858, 0.6083, 0.9877, 0.2604],
         [0.3799, 0.1821, 0.3904, 0.0503],
         [0.3435, 0.9729, 0.8671, 0.7998]]])
P2 = tensor([[[0.7111, 0.7277, 0.4553, 0.5236],
         [0.7897, 0.3928, 0.3611, 0.6871],
         [0.9858, 0.9272, 0.6700....3965, 0.4372, 0.9531, 0.0510],
         [0.8061, 0.2981, 0.2551, 0.3210],
         [0.6972, 0.6547, 0.0092, 0.4580]]])

    def fundamental_from_projections(P1: torch.Tensor, P2: torch.Tensor) -> torch.Tensor:
        """
        Calculate the fundamental matrix from two projection matrices.
    
        Args:
            P1 (Tensor): First projection matrix of shape (*, 3, 4).
            P2 (Tensor): Second projection matrix of shape (*, 3, 4).
    
        Returns:
            Tensor: Fundamental matrix of shape (*, 3, 3).
        """
        assert P1.shape[-2:] == (3, 4), 'P1 must have shape (*, 3, 4)'
        assert P2.shape[-2:] == (3, 4), 'P2 must have shape (*, 3, 4)'
        assert P1.shape[:-2] == P2.shape[:-2], 'P1 and P2 must have matching batch dimensions'
        if P1.dtype not in [torch.float32, torch.float64]:
            P1 = P1.to(torch.float32)
        if P2.dtype not in [torch.float32, torch.float64]:
            P2 = P2.to(torch.float32)
        F = torch.zeros(*P1.shape[:-2], 3, 3, dtype=P1.dtype, device=P1.device)
        for i in range(3):
            for j in range(3):
                P1_sub = torch.cat([P1[..., :i, :], P1[..., i + 1:, :]], dim=-2)
                P2_sub = torch.cat([P2[..., :j, :], P2[..., j + 1:, :]], dim=-2)
>               F[..., i, j] = torch.det(P1_sub) * torch.det(P2_sub)
E               RuntimeError: linalg.det: A must be batches of square matrices, but they are 2 by 4 matrices

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:34: RuntimeError
_________ TestFundamentalFromProjections.test_shape_large[cpu-float32] _________

self = <test_fundamental.TestFundamentalFromProjections object at 0x7685ec91f550>
device = device(type='cpu'), dtype = torch.float32

    def test_shape_large(self, device, dtype):
        P1 = torch.rand(1, 2, 3, 4, device=device, dtype=dtype)
        P2 = torch.rand(1, 2, 3, 4, device=device, dtype=dtype)
>       F_mat = epi.fundamental_from_projections(P1, P2)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:402: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:273: in fundamental_from_projections
    return fundamental_from_projections(P1, P2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

P1 = tensor([[[[0.6625, 0.1923, 0.8661, 0.6125],
          [0.4862, 0.7727, 0.1271, 0.7135],
          [0.2453, 0.6220, 0.1...86, 0.7961, 0.4241, 0.0821],
          [0.1048, 0.4232, 0.7102, 0.0347],
          [0.9902, 0.6422, 0.1804, 0.5636]]]])
P2 = tensor([[[[0.1131, 0.5320, 0.9764, 0.1748],
          [0.8166, 0.8965, 0.8752, 0.3267],
          [0.6884, 0.1072, 0.9...54, 0.7349, 0.3149, 0.0188],
          [0.4506, 0.2904, 0.9221, 0.6465],
          [0.5351, 0.7210, 0.9645, 0.8372]]]])

    def fundamental_from_projections(P1: torch.Tensor, P2: torch.Tensor) -> torch.Tensor:
        """
        Calculate the fundamental matrix from two projection matrices.
    
        Args:
            P1 (Tensor): First projection matrix of shape (*, 3, 4).
            P2 (Tensor): Second projection matrix of shape (*, 3, 4).
    
        Returns:
            Tensor: Fundamental matrix of shape (*, 3, 3).
        """
        assert P1.shape[-2:] == (3, 4), 'P1 must have shape (*, 3, 4)'
        assert P2.shape[-2:] == (3, 4), 'P2 must have shape (*, 3, 4)'
        assert P1.shape[:-2] == P2.shape[:-2], 'P1 and P2 must have matching batch dimensions'
        if P1.dtype not in [torch.float32, torch.float64]:
            P1 = P1.to(torch.float32)
        if P2.dtype not in [torch.float32, torch.float64]:
            P2 = P2.to(torch.float32)
        F = torch.zeros(*P1.shape[:-2], 3, 3, dtype=P1.dtype, device=P1.device)
        for i in range(3):
            for j in range(3):
                P1_sub = torch.cat([P1[..., :i, :], P1[..., i + 1:, :]], dim=-2)
                P2_sub = torch.cat([P2[..., :j, :], P2[..., j + 1:, :]], dim=-2)
>               F[..., i, j] = torch.det(P1_sub) * torch.det(P2_sub)
E               RuntimeError: linalg.det: A must be batches of square matrices, but they are 2 by 4 matrices

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:34: RuntimeError
_____ TestFundamentalFromProjections.test_from_to_projections[cpu-float32] _____

self = <test_fundamental.TestFundamentalFromProjections object at 0x7685ec91f880>
device = device(type='cpu'), dtype = torch.float32

    def test_from_to_projections(self, device, dtype):
        P1 = torch.tensor(
            [[[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 1.0, 0.0]]], device=device, dtype=dtype
        )
    
        P2 = torch.tensor(
            [[[1.0, 1.0, 1.0, 3.0], [0.0, 2.0, 0.0, 3.0], [0.0, 1.0, 1.0, 0.0]]], device=device, dtype=dtype
        )
    
>       F_mat = epi.fundamental_from_projections(P1, P2)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:273: in fundamental_from_projections
    return fundamental_from_projections(P1, P2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

P1 = tensor([[[1., 0., 0., 0.],
         [0., 1., 0., 0.],
         [1., 0., 1., 0.]]])
P2 = tensor([[[1., 1., 1., 3.],
         [0., 2., 0., 3.],
         [0., 1., 1., 0.]]])

    def fundamental_from_projections(P1: torch.Tensor, P2: torch.Tensor) -> torch.Tensor:
        """
        Calculate the fundamental matrix from two projection matrices.
    
        Args:
            P1 (Tensor): First projection matrix of shape (*, 3, 4).
            P2 (Tensor): Second projection matrix of shape (*, 3, 4).
    
        Returns:
            Tensor: Fundamental matrix of shape (*, 3, 3).
        """
        assert P1.shape[-2:] == (3, 4), 'P1 must have shape (*, 3, 4)'
        assert P2.shape[-2:] == (3, 4), 'P2 must have shape (*, 3, 4)'
        assert P1.shape[:-2] == P2.shape[:-2], 'P1 and P2 must have matching batch dimensions'
        if P1.dtype not in [torch.float32, torch.float64]:
            P1 = P1.to(torch.float32)
        if P2.dtype not in [torch.float32, torch.float64]:
            P2 = P2.to(torch.float32)
        F = torch.zeros(*P1.shape[:-2], 3, 3, dtype=P1.dtype, device=P1.device)
        for i in range(3):
            for j in range(3):
                P1_sub = torch.cat([P1[..., :i, :], P1[..., i + 1:, :]], dim=-2)
                P2_sub = torch.cat([P2[..., :j, :], P2[..., j + 1:, :]], dim=-2)
>               F[..., i, j] = torch.det(P1_sub) * torch.det(P2_sub)
E               RuntimeError: linalg.det: A must be batches of square matrices, but they are 2 by 4 matrices

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:34: RuntimeError
______________ TestFundamentalFromProjections.test_gradcheck[cpu] ______________

self = <test_fundamental.TestFundamentalFromProjections object at 0x7685ec91fb50>
device = device(type='cpu')

    def test_gradcheck(self, device):
        P1 = torch.rand(1, 3, 4, device=device, dtype=torch.float64, requires_grad=True)
        P2 = torch.rand(1, 3, 4, device=device, dtype=torch.float64)
>       self.gradcheck(epi.fundamental_from_projections, (P1, P2), requires_grad=(True, False))

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:425: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:273: in fundamental_from_projections
    return fundamental_from_projections(P1, P2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

P1 = tensor([[[0.8255, 0.5263, 0.4313, 0.9587],
         [0.6089, 0.9579, 0.6081, 0.2224],
         [0.5714, 0.1274, 0.7788, 0.2639]]], dtype=torch.float64,
       requires_grad=True)
P2 = tensor([[[0.2090, 0.9674, 0.7263, 0.1611],
         [0.2110, 0.7555, 0.0577, 0.7892],
         [0.8220, 0.8757, 0.6270, 0.0337]]], dtype=torch.float64)

    def fundamental_from_projections(P1: torch.Tensor, P2: torch.Tensor) -> torch.Tensor:
        """
        Calculate the fundamental matrix from two projection matrices.
    
        Args:
            P1 (Tensor): First projection matrix of shape (*, 3, 4).
            P2 (Tensor): Second projection matrix of shape (*, 3, 4).
    
        Returns:
            Tensor: Fundamental matrix of shape (*, 3, 3).
        """
        assert P1.shape[-2:] == (3, 4), 'P1 must have shape (*, 3, 4)'
        assert P2.shape[-2:] == (3, 4), 'P2 must have shape (*, 3, 4)'
        assert P1.shape[:-2] == P2.shape[:-2], 'P1 and P2 must have matching batch dimensions'
        if P1.dtype not in [torch.float32, torch.float64]:
            P1 = P1.to(torch.float32)
        if P2.dtype not in [torch.float32, torch.float64]:
            P2 = P2.to(torch.float32)
        F = torch.zeros(*P1.shape[:-2], 3, 3, dtype=P1.dtype, device=P1.device)
        for i in range(3):
            for j in range(3):
                P1_sub = torch.cat([P1[..., :i, :], P1[..., i + 1:, :]], dim=-2)
                P2_sub = torch.cat([P2[..., :j, :], P2[..., j + 1:, :]], dim=-2)
>               F[..., i, j] = torch.det(P1_sub) * torch.det(P2_sub)
E               RuntimeError: linalg.det: A must be batches of square matrices, but they are 2 by 4 matrices

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:34: RuntimeError
_____ TestFundamentalFromProjections.test_batch_support_check[cpu-float32] _____

self = <test_fundamental.TestFundamentalFromProjections object at 0x7685ec91fe50>
device = device(type='cpu'), dtype = torch.float32

    def test_batch_support_check(self, device, dtype):
        P1_batch = torch.tensor(
            [
                [
                    [9.4692e02, -9.6658e02, 6.0862e02, -2.3076e05],
                    [-2.1829e02, 5.4163e02, 1.3445e03, -6.4387e05],
                    [-6.0675e-01, -6.9807e-01, 3.8021e-01, 3.8896e02],
                ],
                [
                    [9.4692e02, -9.6658e02, 6.0862e02, -2.3076e05],
                    [-2.1829e02, 5.4163e02, 1.3445e03, -6.4387e05],
                    [-6.0675e-01, -6.9807e-01, 3.8021e-01, 3.8896e02],
                ],
            ],
            device=device,
            dtype=dtype,
        )
        P1 = torch.tensor(
            [
                [
                    [9.4692e02, -9.6658e02, 6.0862e02, -2.3076e05],
                    [-2.1829e02, 5.4163e02, 1.3445e03, -6.4387e05],
                    [-6.0675e-01, -6.9807e-01, 3.8021e-01, 3.8896e02],
                ]
            ],
            device=device,
            dtype=dtype,
        )
        P2_batch = torch.tensor(
            [
                [
                    [1.1518e03, -7.5822e02, 5.4764e02, -1.9764e05],
                    [-2.1548e02, 5.3102e02, 1.3492e03, -6.4731e05],
                    [-4.3727e-01, -7.8632e-01, 4.3646e-01, 3.4515e02],
                ],
                [
                    [9.9595e02, -8.6464e02, 6.7959e02, -2.7517e05],
                    [-8.1716e01, 7.7826e02, 1.2395e03, -5.8137e05],
                    [-5.7090e-01, -6.0416e-01, 5.5594e-01, 2.8111e02],
                ],
            ],
            device=device,
            dtype=dtype,
        )
        P2 = torch.tensor(
            [
                [
                    [1.1518e03, -7.5822e02, 5.4764e02, -1.9764e05],
                    [-2.1548e02, 5.3102e02, 1.3492e03, -6.4731e05],
                    [-4.3727e-01, -7.8632e-01, 4.3646e-01, 3.4515e02],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       F_batch = epi.fundamental_from_projections(P1_batch, P2_batch)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:483: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:273: in fundamental_from_projections
    return fundamental_from_projections(P1, P2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

P1 = tensor([[[ 9.4692e+02, -9.6658e+02,  6.0862e+02, -2.3076e+05],
         [-2.1829e+02,  5.4163e+02,  1.3445e+03, -6.438... [-2.1829e+02,  5.4163e+02,  1.3445e+03, -6.4387e+05],
         [-6.0675e-01, -6.9807e-01,  3.8021e-01,  3.8896e+02]]])
P2 = tensor([[[ 1.1518e+03, -7.5822e+02,  5.4764e+02, -1.9764e+05],
         [-2.1548e+02,  5.3102e+02,  1.3492e+03, -6.473... [-8.1716e+01,  7.7826e+02,  1.2395e+03, -5.8137e+05],
         [-5.7090e-01, -6.0416e-01,  5.5594e-01,  2.8111e+02]]])

    def fundamental_from_projections(P1: torch.Tensor, P2: torch.Tensor) -> torch.Tensor:
        """
        Calculate the fundamental matrix from two projection matrices.
    
        Args:
            P1 (Tensor): First projection matrix of shape (*, 3, 4).
            P2 (Tensor): Second projection matrix of shape (*, 3, 4).
    
        Returns:
            Tensor: Fundamental matrix of shape (*, 3, 3).
        """
        assert P1.shape[-2:] == (3, 4), 'P1 must have shape (*, 3, 4)'
        assert P2.shape[-2:] == (3, 4), 'P2 must have shape (*, 3, 4)'
        assert P1.shape[:-2] == P2.shape[:-2], 'P1 and P2 must have matching batch dimensions'
        if P1.dtype not in [torch.float32, torch.float64]:
            P1 = P1.to(torch.float32)
        if P2.dtype not in [torch.float32, torch.float64]:
            P2 = P2.to(torch.float32)
        F = torch.zeros(*P1.shape[:-2], 3, 3, dtype=P1.dtype, device=P1.device)
        for i in range(3):
            for j in range(3):
                P1_sub = torch.cat([P1[..., :i, :], P1[..., i + 1:, :]], dim=-2)
                P2_sub = torch.cat([P2[..., :j, :], P2[..., j + 1:, :]], dim=-2)
>               F[..., i, j] = torch.det(P1_sub) * torch.det(P2_sub)
E               RuntimeError: linalg.det: A must be batches of square matrices, but they are 2 by 4 matrices

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:34: RuntimeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_smoke[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape_large[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_from_to_projections[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_gradcheck[cpu]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_batch_support_check[cpu-float32]
============================== 9 failed in 0.45s ===============================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'cudagraphs', 'inductor', 'onnxrt', 'tvm', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 9 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-7] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape_large[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_from_to_projections[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_batch_support_check[cpu-float32] PASSED

============================== 9 passed in 0.18s ===============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'tvm', 'cudagraphs', 'onnxrt', 'inductor', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 9 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-7] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape_large[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_from_to_projections[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_batch_support_check[cpu-float32] PASSED

============================== 9 passed in 0.21s ===============================
