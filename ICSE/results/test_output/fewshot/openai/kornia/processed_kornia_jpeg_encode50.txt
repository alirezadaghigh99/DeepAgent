output file:
processed_kornia_jpeg_encode50.json
function:
_jpeg_encode
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_param[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_cardinality[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_cardinality[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke_not_div_by_16[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke_not_div_by_16[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_multi_batch[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module_with_param[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_custom_qt[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_inp[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_multi_batch[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_gradcheck[cpu]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_inp[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_param[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_gradcheck[cpu] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module_with_param[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_custom_qt[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'tvm', 'jit', 'onnxrt', 'openxla', 'cudagraphs', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 11 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke_not_div_by_16[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_multi_batch[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_custom_qt[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_param[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_inp[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_exception[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_cardinality[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module_with_param[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_gradcheck[cpu] FAILED

=================================== FAILURES ===================================
_____________________ TestDiffJPEG.test_smoke[cpu-float32] _____________________

self = <test_jpeg.TestDiffJPEG object at 0x714a14534f10>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke(self, device, dtype) -> None:
        """This test standard usage."""
        B, H, W = 2, 32, 32
        img = torch.rand(B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(B,), device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:47: in _jpeg_encode
    y_encoded = block_dct_quantize(y, quantization_table_y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

channel = tensor([[[ 1.3010e-01,  1.2799e+02,  1.2836e+02],
         [ 3.2158e-01,  1.2785e+02,  1.2845e+02],
         [ 2.0879e...02,  1.2844e+02],
         [ 6.1984e-01,  1.2812e+02,  1.2817e+02],
         [ 2.8298e-01,  1.2775e+02,  1.2824e+02]]])
quant_table = tensor([[[ 16.,  11.,  10.,  16.,  24.,  40.,  51.,  61.],
         [ 12.,  12.,  14.,  19.,  26.,  58.,  60.,  55.],
...         [ 49.,  64.,  78.,  87., 103., 121., 120., 101.],
         [ 72.,  92.,  95.,  98., 112., 100., 103.,  99.]]])

    def block_dct_quantize(channel, quant_table):
>       channel = channel.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:41: RuntimeError
______________ TestDiffJPEG.test_smoke_not_div_by_16[cpu-float32] ______________

self = <test_jpeg.TestDiffJPEG object at 0x714a14535300>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke_not_div_by_16(self, device, dtype) -> None:
        """This test standard usage."""
        B, H, W = 2, 33, 33
        img = torch.rand(B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(B,), device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:47: in _jpeg_encode
    y_encoded = block_dct_quantize(y, quantization_table_y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

channel = tensor([[[ 6.5444e-01,  1.2819e+02,  1.2810e+02],
         [ 4.0394e-01,  1.2772e+02,  1.2801e+02],
         [ 3.2209e...02,  1.2829e+02],
         [ 4.0130e-01,  1.2742e+02,  1.2829e+02],
         [ 4.0130e-01,  1.2742e+02,  1.2829e+02]]])
quant_table = tensor([[[ 16.,  11.,  10.,  16.,  24.,  40.,  51.,  61.],
         [ 12.,  12.,  14.,  19.,  26.,  58.,  60.,  55.],
...         [ 49.,  64.,  78.,  87., 103., 121., 120., 101.],
         [ 72.,  92.,  95.,  98., 112., 100., 103.,  99.]]])

    def block_dct_quantize(channel, quant_table):
>       channel = channel.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:41: RuntimeError
__________________ TestDiffJPEG.test_multi_batch[cpu-float32] __________________

self = <test_jpeg.TestDiffJPEG object at 0x714a14535630>
device = device(type='cpu'), dtype = torch.float32

    def test_multi_batch(self, device, dtype) -> None:
        """Here we test two batch dimensions."""
        B, H, W = 4, 32, 32
        img = torch.rand(B, B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(1,), device=device, dtype=dtype)
        qt_y = torch.randint(low=1, high=255, size=(B * B, 8, 8), device=device, dtype=dtype)
        qt_c = torch.randint(low=1, high=255, size=(B * B, 8, 8), device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality, qt_y, qt_c)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:47: in _jpeg_encode
    y_encoded = block_dct_quantize(y, quantization_table_y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

channel = tensor([[[2.3947e-01, 1.2819e+02, 1.2805e+02],
         [1.6626e-01, 1.2765e+02, 1.2838e+02],
         [4.8618e-01, 1.....2838e+02, 1.2813e+02],
         [1.5773e-01, 1.2819e+02, 1.2859e+02],
         [3.7190e-01, 1.2797e+02, 1.2820e+02]]])
quant_table = tensor([[[213., 119., 169.,  ..., 176., 211., 163.],
         [ 82., 114., 184.,  ...,  48., 170.,  57.],
         [ 3...03., 169.],
         [ 74., 212., 133.,  ..., 221., 127., 237.],
         [104., 169., 208.,  ...,  26.,  96.,  19.]]])

    def block_dct_quantize(channel, quant_table):
>       channel = channel.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:41: RuntimeError
___________________ TestDiffJPEG.test_custom_qt[cpu-float32] ___________________

self = <test_jpeg.TestDiffJPEG object at 0x714a14535960>
device = device(type='cpu'), dtype = torch.float32

    def test_custom_qt(self, device, dtype) -> None:
        """Here we test if we can handle custom quantization tables."""
        B, H, W = 4, 32, 32
        img = torch.rand(B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(B,), device=device, dtype=dtype)
        qt_y = torch.randint(low=1, high=255, size=(B, 8, 8), device=device, dtype=dtype)
        qt_c = torch.randint(low=1, high=255, size=(B, 8, 8), device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality, qt_y, qt_c)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:47: in _jpeg_encode
    y_encoded = block_dct_quantize(y, quantization_table_y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

channel = tensor([[[ 3.6532e-01,  1.2738e+02,  1.2838e+02],
         [ 5.0375e-01,  1.2818e+02,  1.2814e+02],
         [ 2.6031e...02,  1.2845e+02],
         [ 2.0597e-01,  1.2773e+02,  1.2842e+02],
         [ 1.8834e-01,  1.2776e+02,  1.2822e+02]]])
quant_table = tensor([[[ 67.,  25.,  80., 159., 239., 151., 154., 185.],
         [ 98., 204., 137., 171., 222., 123., 221., 151.],
...         [ 34., 141.,  60., 102.,  83., 242.,  21., 201.],
         [243.,  61., 174., 167., 142., 177., 198., 203.]]])

    def block_dct_quantize(channel, quant_table):
>       channel = channel.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:41: RuntimeError
________________ TestDiffJPEG.test_non_batch_param[cpu-float32] ________________

self = <test_jpeg.TestDiffJPEG object at 0x714a14535c90>
device = device(type='cpu'), dtype = torch.float32

    def test_non_batch_param(self, device, dtype) -> None:
        """Here we test if we can handle non-batched JPEG parameters (JPEG quality and QT's)."""
        B, H, W = 3, 32, 32
        img = torch.rand(B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(1,), device=device, dtype=dtype)
        qt_y = torch.randint(low=1, high=255, size=(1, 8, 8), device=device, dtype=dtype)
        qt_c = torch.randint(low=1, high=255, size=(1, 8, 8), device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality, qt_y, qt_c)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:47: in _jpeg_encode
    y_encoded = block_dct_quantize(y, quantization_table_y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

channel = tensor([[[ 1.8931e-01,  1.2753e+02,  1.2840e+02],
         [ 5.7280e-02,  1.2767e+02,  1.2843e+02],
         [ 7.6676e...02,  1.2848e+02],
         [ 1.3072e-01,  1.2786e+02,  1.2823e+02],
         [ 9.8451e-02,  1.2803e+02,  1.2846e+02]]])
quant_table = tensor([[[ 58., 173., 141., 106., 187., 200., 122., 127.],
         [154.,  95.,  32., 233.,  93., 217., 186., 157.],
...         [100.,  46.,  96., 229.,  19.,   8., 163.,  51.],
         [130., 200.,   6., 173., 104.,  81., 254., 161.]]])

    def block_dct_quantize(channel, quant_table):
>       channel = channel.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:41: RuntimeError
_________________ TestDiffJPEG.test_non_batch_inp[cpu-float32] _________________

self = <test_jpeg.TestDiffJPEG object at 0x714a14535fc0>
device = device(type='cpu'), dtype = torch.float32

    def test_non_batch_inp(self, device, dtype) -> None:
        """Here we test if we can handle non-batched inputs (input image, JPEG quality, and QT's)."""
        H, W = 32, 32
        img = torch.rand(3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(1,), device=device, dtype=dtype)
        qt_y = torch.randint(low=1, high=255, size=(8, 8), device=device, dtype=dtype)
        qt_c = torch.randint(low=1, high=255, size=(8, 8), device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality, qt_y, qt_c)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:47: in _jpeg_encode
    y_encoded = block_dct_quantize(y, quantization_table_y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

channel = tensor([[[ 5.5210e-01,  1.2771e+02,  1.2817e+02],
         [ 6.9661e-02,  1.2805e+02,  1.2854e+02],
         [ 5.7601e...02,  1.2830e+02],
         [ 4.7210e-01,  1.2785e+02,  1.2851e+02],
         [ 5.2286e-01,  1.2779e+02,  1.2814e+02]]])
quant_table = tensor([[[133.,  20.,  81., 119.,   2., 112., 163., 199.],
         [159., 183.,  29., 148.,  18., 189.,  74., 141.],
...         [148.,  93., 153.,  51.,  92.,  61.,  41., 239.],
         [146., 201., 232.,  97., 144.,  56., 207.,  92.]]])

    def block_dct_quantize(channel, quant_table):
>       channel = channel.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:41: RuntimeError
__________________ TestDiffJPEG.test_cardinality[cpu-float32] __________________

self = <test_jpeg.TestDiffJPEG object at 0x714a14536620>
device = device(type='cpu'), dtype = torch.float32

    def test_cardinality(self, device, dtype) -> None:
        B, H, W = 1, 16, 16
        img = torch.zeros(B, 3, H, W, device=device, dtype=dtype)
        img[..., 4:-4, 4:-4] = 1.0
        jpeg_quality = torch.tensor([2.0], device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:47: in _jpeg_encode
    y_encoded = block_dct_quantize(y, quantization_table_y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

channel = tensor([[[  0., 128., 128.],
         [  0., 128., 128.],
         [  0., 128., 128.],
         [  0., 128., 128.],
  ...,
         [  0., 128., 128.],
         [  0., 128., 128.],
         [  0., 128., 128.],
         [  0., 128., 128.]]])
quant_table = tensor([[[ 16.,  11.,  10.,  16.,  24.,  40.,  51.,  61.],
         [ 12.,  12.,  14.,  19.,  26.,  58.,  60.,  55.],
...         [ 49.,  64.,  78.,  87., 103., 121., 120., 101.],
         [ 72.,  92.,  95.,  98., 112., 100., 103.,  99.]]])

    def block_dct_quantize(channel, quant_table):
>       channel = channel.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:41: RuntimeError
____________________ TestDiffJPEG.test_module[cpu-float32] _____________________

self = <test_jpeg.TestDiffJPEG object at 0x714a14536950>
device = device(type='cpu'), dtype = torch.float32

    def test_module(self, device, dtype) -> None:
        B, H, W = 4, 16, 16
        img = torch.rand(B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(B,), device=device, dtype=dtype)
        qt_y = torch.randint(low=1, high=255, size=(B, 8, 8), device=device, dtype=dtype)
        qt_c = torch.randint(low=1, high=255, size=(B, 8, 8), device=device, dtype=dtype)
        diff_jpeg_module = kornia.enhance.JPEGCodecDifferentiable(qt_y, qt_c)
>       img_jpeg = diff_jpeg_module(img, jpeg_quality)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:1033: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:432: in forward
    image_rgb_jpeg: Tensor = jpeg_codec_differentiable(image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=self.quantization_table_c, quantization_table_y=self.quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:47: in _jpeg_encode
    y_encoded = block_dct_quantize(y, quantization_table_y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

channel = tensor([[[-5.5081e-03,  1.2775e+02,  1.2844e+02],
         [ 1.6628e-01,  1.2820e+02,  1.2827e+02],
         [ 2.5943e...02,  1.2834e+02],
         [ 3.7193e-01,  1.2784e+02,  1.2826e+02],
         [ 2.6775e-01,  1.2812e+02,  1.2853e+02]]])
quant_table = tensor([[[124., 155.,  32.,  44., 178., 228., 244., 195.],
         [189., 242., 224., 167., 222., 247.,  54., 196.],
...         [138., 139., 190.,  11., 156., 230.,  87., 250.],
         [154., 181., 176.,  90.,  26.,  18., 233.,  77.]]])

    def block_dct_quantize(channel, quant_table):
>       channel = channel.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:41: RuntimeError
_______________ TestDiffJPEG.test_module_with_param[cpu-float32] _______________

self = <test_jpeg.TestDiffJPEG object at 0x714a14535e10>
device = device(type='cpu'), dtype = torch.float32

    def test_module_with_param(self, device, dtype) -> None:
        B, H, W = 4, 16, 16
        img = torch.rand(B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(B,), device=device, dtype=dtype)
        qt_y = torch.nn.Parameter(torch.randint(low=1, high=255, size=(B, 8, 8), device=device, dtype=dtype))
        qt_c = torch.nn.Parameter(torch.randint(low=1, high=255, size=(B, 8, 8), device=device, dtype=dtype))
        diff_jpeg_module = kornia.enhance.JPEGCodecDifferentiable(qt_y, qt_c)
>       img_jpeg = diff_jpeg_module(img, jpeg_quality)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:1044: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:432: in forward
    image_rgb_jpeg: Tensor = jpeg_codec_differentiable(image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=self.quantization_table_c, quantization_table_y=self.quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:47: in _jpeg_encode
    y_encoded = block_dct_quantize(y, quantization_table_y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

channel = tensor([[[ 5.7253e-01,  1.2776e+02,  1.2851e+02],
         [ 6.6839e-02,  1.2778e+02,  1.2830e+02],
         [ 1.1725e...02,  1.2812e+02],
         [ 2.3882e-01,  1.2797e+02,  1.2854e+02],
         [ 1.1571e-01,  1.2797e+02,  1.2819e+02]]])
quant_table = Parameter containing:
tensor([[[ 51., 109., 116.,  15., 117.,  64., 211.,  24.],
         [ 86.,  16., 211., 214., 222... 235.,  24., 239., 187., 121.],
         [ 39., 189.,  17., 196.,   5., 140., 115.,  27.]]],
       requires_grad=True)

    def block_dct_quantize(channel, quant_table):
>       channel = channel.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:41: RuntimeError
_______________________ TestDiffJPEG.test_gradcheck[cpu] _______________________

self = <test_jpeg.TestDiffJPEG object at 0x714a145368c0>
device = device(type='cpu')

    def test_gradcheck(self, device) -> None:
        """We test that the gradient matches the gradient of the reference implementation."""
        B, H, W = 1, 16, 16
        img = torch.zeros(B, 3, H, W, device=device, dtype=torch.float)
        img[..., 0, 4:-4, 4:-4] = 1.0
        img[..., 1, 4:-4, 4:-4] = 0.5
        img[..., 2, 4:-4, 4:-4] = 0.5
        img.requires_grad = True
        jpeg_quality = torch.tensor([10.0], device=device, dtype=torch.float, requires_grad=True)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:1058: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:47: in _jpeg_encode
    y_encoded = block_dct_quantize(y, quantization_table_y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

channel = tensor([[[  0., 128., 128.],
         [  0., 128., 128.],
         [  0., 128., 128.],
         [  0., 128., 128.],
  ...8.],
         [  0., 128., 128.],
         [  0., 128., 128.],
         [  0., 128., 128.]]], grad_fn=<SliceBackward0>)
quant_table = tensor([[[ 16.,  11.,  10.,  16.,  24.,  40.,  51.,  61.],
         [ 12.,  12.,  14.,  19.,  26.,  58.,  60.,  55.],
...         [ 49.,  64.,  78.,  87., 103., 121., 120., 101.],
         [ 72.,  92.,  95.,  98., 112., 100., 103.,  99.]]])

    def block_dct_quantize(channel, quant_table):
>       channel = channel.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:41: RuntimeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke_not_div_by_16[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_multi_batch[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_custom_qt[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_param[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_inp[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_cardinality[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module_with_param[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_gradcheck[cpu]
========================= 10 failed, 1 passed in 0.57s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'cudagraphs', 'tvm', 'inductor', 'openxla', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 11 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke_not_div_by_16[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_multi_batch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_custom_qt[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_param[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_inp[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_exception[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_cardinality[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module_with_param[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_gradcheck[cpu] PASSED

=============================== warnings summary ===============================
tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/functional.py:534: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3595.)
    return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 11 passed, 1 warning in 0.22s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'tvm', 'onnxrt', 'openxla', 'cudagraphs', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 11 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke_not_div_by_16[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_multi_batch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_custom_qt[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_param[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_inp[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_exception[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_cardinality[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module_with_param[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_gradcheck[cpu] PASSED

=============================== warnings summary ===============================
tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/functional.py:534: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3595.)
    return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 11 passed, 1 warning in 0.30s =========================
