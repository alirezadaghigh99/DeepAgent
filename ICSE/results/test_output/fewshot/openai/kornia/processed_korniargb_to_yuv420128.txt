output file:
processed_korniargb_to_yuv420128.json
function:
rgb_to_yuv420
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_blue[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_gray[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape3]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape1] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape4] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_red[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_red[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_module[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_smoke[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_forth_and_back[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_forth_and_back[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_blue[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_white[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_white[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_black[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape0] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_module[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_gray[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_gradcheck[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_black[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_smoke[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_gradcheck[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape2] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'onnxrt', 'jit', 'tvm', 'openxla', 'cudagraphs', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 16 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_smoke[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape3] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_exception[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_white[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_black[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_gray[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_red[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_blue[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_forth_and_back[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_gradcheck[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_jit[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_module[cpu-float32] FAILED

=================================== FAILURES ===================================
___________________ TestRgbToYuv420.test_smoke[cpu-float32] ____________________

self = <test_yuv.TestRgbToYuv420 object at 0x778339d15ff0>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke(self, device, dtype):
        C, H, W = 3, 4, 6
        img = torch.rand(C, H, W, device=device, dtype=dtype)
>       assert isinstance(kornia.color.rgb_to_yuv420(img)[0], torch.Tensor)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0.5066, 0.4645, 0.6056],
         [0.2325, 0.1604, 0.6393],
         [0.6693, 0.5060, 0.4090],
         [0.4...45, 0.6548],
         [0.3208, 0.2765, 0.9454],
         [0.4761, 0.5127, 0.2800],
         [0.4742, 0.7176, 0.7560]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        *batch_dims, C, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        image = image.permute(*range(len(batch_dims)), -2, -1, -3)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([-1], [1]))
        Y, U, V = yuv.unbind(dim=-1)
>       Y = Y.permute(*range(len(batch_dims)), -1, -3, -2).unsqueeze(-3)
E       RuntimeError: permute(sparse_coo): number of dimensions in the tensor input does not match the length of the desired ordering of dimensions i.e. input.dim() = 2 is not equal to len(dims) = 3

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:30: RuntimeError
_____________ TestRgbToYuv420.test_cardinality[cpu-float32-shape0] _____________

self = <test_yuv.TestRgbToYuv420 object at 0x778339d164a0>
device = device(type='cpu'), dtype = torch.float32, shape = (1, 3, 4, 4)

    @pytest.mark.parametrize("shape", [(1, 3, 4, 4), (2, 3, 2, 4), (3, 3, 4, 2), (3, 2, 2), (3, 3, 3, 4, 4)])
    def test_cardinality(self, device, dtype, shape):
        img = torch.ones(shape, device=device, dtype=dtype)
        shapey = list(shape)
        shapey[-3] = 1
        shapeuv = list(shape)
        shapeuv[-3] = 2
        shapeuv[-2] /= 2
        shapeuv[-1] /= 2
>       assert kornia.color.rgb_to_yuv420(img)[0].shape == tuple(shapey)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]],

         [[1., 1., 1...     [1., 1., 1.]],

         [[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        *batch_dims, C, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        image = image.permute(*range(len(batch_dims)), -2, -1, -3)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([-1], [1]))
        Y, U, V = yuv.unbind(dim=-1)
>       Y = Y.permute(*range(len(batch_dims)), -1, -3, -2).unsqueeze(-3)
E       RuntimeError: permute(sparse_coo): number of dimensions in the tensor input does not match the length of the desired ordering of dimensions i.e. input.dim() = 3 is not equal to len(dims) = 4

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:30: RuntimeError
_____________ TestRgbToYuv420.test_cardinality[cpu-float32-shape1] _____________

self = <test_yuv.TestRgbToYuv420 object at 0x778339d163e0>
device = device(type='cpu'), dtype = torch.float32, shape = (2, 3, 2, 4)

    @pytest.mark.parametrize("shape", [(1, 3, 4, 4), (2, 3, 2, 4), (3, 3, 4, 2), (3, 2, 2), (3, 3, 3, 4, 4)])
    def test_cardinality(self, device, dtype, shape):
        img = torch.ones(shape, device=device, dtype=dtype)
        shapey = list(shape)
        shapey[-3] = 1
        shapeuv = list(shape)
        shapeuv[-3] = 2
        shapeuv[-2] /= 2
        shapeuv[-1] /= 2
>       assert kornia.color.rgb_to_yuv420(img)[0].shape == tuple(shapey)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]],

         [[1., 1., 1...     [1., 1., 1.]],

         [[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        *batch_dims, C, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        image = image.permute(*range(len(batch_dims)), -2, -1, -3)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([-1], [1]))
        Y, U, V = yuv.unbind(dim=-1)
>       Y = Y.permute(*range(len(batch_dims)), -1, -3, -2).unsqueeze(-3)
E       RuntimeError: permute(sparse_coo): number of dimensions in the tensor input does not match the length of the desired ordering of dimensions i.e. input.dim() = 3 is not equal to len(dims) = 4

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:30: RuntimeError
_____________ TestRgbToYuv420.test_cardinality[cpu-float32-shape2] _____________

self = <test_yuv.TestRgbToYuv420 object at 0x778339d167a0>
device = device(type='cpu'), dtype = torch.float32, shape = (3, 3, 4, 2)

    @pytest.mark.parametrize("shape", [(1, 3, 4, 4), (2, 3, 2, 4), (3, 3, 4, 2), (3, 2, 2), (3, 3, 3, 4, 4)])
    def test_cardinality(self, device, dtype, shape):
        img = torch.ones(shape, device=device, dtype=dtype)
        shapey = list(shape)
        shapey[-3] = 1
        shapeuv = list(shape)
        shapeuv[-3] = 2
        shapeuv[-2] /= 2
        shapeuv[-1] /= 2
>       assert kornia.color.rgb_to_yuv420(img)[0].shape == tuple(shapey)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.],
          [1., 1., 1.]],

         [[1., 1., 1.],
          [1., 1., 1.]],

         [[1., 1.,...   [1., 1., 1.]],

         [[1., 1., 1.],
          [1., 1., 1.]],

         [[1., 1., 1.],
          [1., 1., 1.]]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        *batch_dims, C, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        image = image.permute(*range(len(batch_dims)), -2, -1, -3)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([-1], [1]))
        Y, U, V = yuv.unbind(dim=-1)
>       Y = Y.permute(*range(len(batch_dims)), -1, -3, -2).unsqueeze(-3)
E       RuntimeError: permute(sparse_coo): number of dimensions in the tensor input does not match the length of the desired ordering of dimensions i.e. input.dim() = 3 is not equal to len(dims) = 4

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:30: RuntimeError
_____________ TestRgbToYuv420.test_cardinality[cpu-float32-shape3] _____________

self = <test_yuv.TestRgbToYuv420 object at 0x778339d16860>
device = device(type='cpu'), dtype = torch.float32, shape = (3, 2, 2)

    @pytest.mark.parametrize("shape", [(1, 3, 4, 4), (2, 3, 2, 4), (3, 3, 4, 2), (3, 2, 2), (3, 3, 3, 4, 4)])
    def test_cardinality(self, device, dtype, shape):
        img = torch.ones(shape, device=device, dtype=dtype)
        shapey = list(shape)
        shapey[-3] = 1
        shapeuv = list(shape)
        shapeuv[-3] = 2
        shapeuv[-2] /= 2
        shapeuv[-1] /= 2
>       assert kornia.color.rgb_to_yuv420(img)[0].shape == tuple(shapey)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[1., 1., 1.],
         [1., 1., 1.]],

        [[1., 1., 1.],
         [1., 1., 1.]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        *batch_dims, C, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        image = image.permute(*range(len(batch_dims)), -2, -1, -3)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([-1], [1]))
        Y, U, V = yuv.unbind(dim=-1)
>       Y = Y.permute(*range(len(batch_dims)), -1, -3, -2).unsqueeze(-3)
E       RuntimeError: permute(sparse_coo): number of dimensions in the tensor input does not match the length of the desired ordering of dimensions i.e. input.dim() = 2 is not equal to len(dims) = 3

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:30: RuntimeError
_____________ TestRgbToYuv420.test_cardinality[cpu-float32-shape4] _____________

self = <test_yuv.TestRgbToYuv420 object at 0x778339d16920>
device = device(type='cpu'), dtype = torch.float32, shape = (3, 3, 3, 4, 4)

    @pytest.mark.parametrize("shape", [(1, 3, 4, 4), (2, 3, 2, 4), (3, 3, 4, 2), (3, 2, 2), (3, 3, 3, 4, 4)])
    def test_cardinality(self, device, dtype, shape):
        img = torch.ones(shape, device=device, dtype=dtype)
        shapey = list(shape)
        shapey[-3] = 1
        shapeuv = list(shape)
        shapeuv[-3] = 2
        shapeuv[-2] /= 2
        shapeuv[-1] /= 2
>       assert kornia.color.rgb_to_yuv420(img)[0].shape == tuple(shapey)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[[1., 1., 1.],
           [1., 1., 1.],
           [1., 1., 1.],
           [1., 1., 1.]],

          [[1., ...[1., 1., 1.]],

          [[1., 1., 1.],
           [1., 1., 1.],
           [1., 1., 1.],
           [1., 1., 1.]]]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        *batch_dims, C, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        image = image.permute(*range(len(batch_dims)), -2, -1, -3)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([-1], [1]))
        Y, U, V = yuv.unbind(dim=-1)
>       Y = Y.permute(*range(len(batch_dims)), -1, -3, -2).unsqueeze(-3)
E       RuntimeError: permute(sparse_coo): number of dimensions in the tensor input does not match the length of the desired ordering of dimensions i.e. input.dim() = 4 is not equal to len(dims) = 5

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:30: RuntimeError
_________________ TestRgbToYuv420.test_exception[cpu-float32] __________________

self = <test_yuv.TestRgbToYuv420 object at 0x778339d16ad0>
device = device(type='cpu'), dtype = torch.float32

    def test_exception(self, device, dtype):
        with pytest.raises(TypeError):
>           assert kornia.color.rgb_to_yuv420([0.0])

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = [0.0]

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
>       if image.dim() < 3 or image.size(-3) != 3:
E       AttributeError: 'list' object has no attribute 'dim'

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:21: AttributeError
_________________ TestRgbToYuv420.test_unit_white[cpu-float32] _________________

self = <test_yuv.TestRgbToYuv420 object at 0x778339d16e00>
device = device(type='cpu'), dtype = torch.float32

    def test_unit_white(self, device, dtype):  # skipcq: PYL-R0201
        rgb = (
            torch.tensor(
                [[[255, 255], [255, 255]], [[255, 255], [255, 255]], [[255, 255], [255, 255]]],
                device=device,
                dtype=torch.uint8,
            ).type(dtype)
            / 255.0
        )
        refy = torch.tensor([[[255, 255], [255, 255]]], device=device, dtype=torch.uint8)
        refuv = torch.tensor([[[0]], [[0]]], device=device, dtype=torch.int8)
    
>       resy = (kornia.color.rgb_to_yuv420(rgb)[0] * 255.0).round().type(torch.uint8)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[1., 1., 1.],
         [1., 1., 1.]],

        [[1., 1., 1.],
         [1., 1., 1.]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        *batch_dims, C, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        image = image.permute(*range(len(batch_dims)), -2, -1, -3)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([-1], [1]))
        Y, U, V = yuv.unbind(dim=-1)
>       Y = Y.permute(*range(len(batch_dims)), -1, -3, -2).unsqueeze(-3)
E       RuntimeError: permute(sparse_coo): number of dimensions in the tensor input does not match the length of the desired ordering of dimensions i.e. input.dim() = 2 is not equal to len(dims) = 3

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:30: RuntimeError
_________________ TestRgbToYuv420.test_unit_black[cpu-float32] _________________

self = <test_yuv.TestRgbToYuv420 object at 0x778339d17130>
device = device(type='cpu'), dtype = torch.float32

    def test_unit_black(self, device, dtype):  # skipcq: PYL-R0201
        rgb = (
            torch.tensor([[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]], device=device, dtype=torch.uint8).type(
                dtype
            )
            / 255.0
        )
        refy = torch.tensor([[[0, 0], [0, 0]]], device=device, dtype=torch.uint8)
        refuv = torch.tensor([[[0]], [[0]]], device=device, dtype=torch.int8)
    
>       resy = (kornia.color.rgb_to_yuv420(rgb)[0] * 255.0).round().type(torch.uint8)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0.],
         [0., 0., 0.]],

        [[0., 0., 0.],
         [0., 0., 0.]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        *batch_dims, C, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        image = image.permute(*range(len(batch_dims)), -2, -1, -3)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([-1], [1]))
        Y, U, V = yuv.unbind(dim=-1)
>       Y = Y.permute(*range(len(batch_dims)), -1, -3, -2).unsqueeze(-3)
E       RuntimeError: permute(sparse_coo): number of dimensions in the tensor input does not match the length of the desired ordering of dimensions i.e. input.dim() = 2 is not equal to len(dims) = 3

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:30: RuntimeError
_________________ TestRgbToYuv420.test_unit_gray[cpu-float32] __________________

self = <test_yuv.TestRgbToYuv420 object at 0x778339d17460>
device = device(type='cpu'), dtype = torch.float32

    def test_unit_gray(self, device, dtype):  # skipcq: PYL-R0201
        rgb = (
            torch.tensor(
                [[[127, 127], [127, 127]], [[127, 127], [127, 127]], [[127, 127], [127, 127]]],
                device=device,
                dtype=torch.uint8,
            ).type(dtype)
            / 255.0
        )
        refy = torch.tensor([[[127, 127], [127, 127]]], device=device, dtype=torch.uint8)
        refuv = torch.tensor([[[0]], [[0]]], device=device, dtype=torch.int8)
    
>       resy = (kornia.color.rgb_to_yuv420(rgb)[0] * 255.0).round().type(torch.uint8)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0.4980, 0.4980, 0.4980],
         [0.4980, 0.4980, 0.4980]],

        [[0.4980, 0.4980, 0.4980],
         [0.4980, 0.4980, 0.4980]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        *batch_dims, C, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        image = image.permute(*range(len(batch_dims)), -2, -1, -3)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([-1], [1]))
        Y, U, V = yuv.unbind(dim=-1)
>       Y = Y.permute(*range(len(batch_dims)), -1, -3, -2).unsqueeze(-3)
E       RuntimeError: permute(sparse_coo): number of dimensions in the tensor input does not match the length of the desired ordering of dimensions i.e. input.dim() = 2 is not equal to len(dims) = 3

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:30: RuntimeError
__________________ TestRgbToYuv420.test_unit_red[cpu-float32] __________________

self = <test_yuv.TestRgbToYuv420 object at 0x778339d17790>
device = device(type='cpu'), dtype = torch.float32

    def test_unit_red(self, device, dtype):  # skipcq: PYL-R0201
        rgb = (
            torch.tensor(
                [[[255, 255], [255, 255]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]], device=device, dtype=torch.uint8
            ).type(dtype)
            / 255.0
        )
        refy = torch.tensor([[[76, 76], [76, 76]]], device=device, dtype=torch.uint8)
        refuv = torch.tensor([[[-37]], [[127]]], device=device, dtype=torch.int8)
    
>       resy = (kornia.color.rgb_to_yuv420(rgb)[0] * 255.0).round().type(torch.uint8)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[1., 0., 0.],
         [1., 0., 0.]],

        [[1., 0., 0.],
         [1., 0., 0.]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        *batch_dims, C, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        image = image.permute(*range(len(batch_dims)), -2, -1, -3)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([-1], [1]))
        Y, U, V = yuv.unbind(dim=-1)
>       Y = Y.permute(*range(len(batch_dims)), -1, -3, -2).unsqueeze(-3)
E       RuntimeError: permute(sparse_coo): number of dimensions in the tensor input does not match the length of the desired ordering of dimensions i.e. input.dim() = 2 is not equal to len(dims) = 3

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:30: RuntimeError
_________________ TestRgbToYuv420.test_unit_blue[cpu-float32] __________________

self = <test_yuv.TestRgbToYuv420 object at 0x778339d17ac0>
device = device(type='cpu'), dtype = torch.float32

    def test_unit_blue(self, device, dtype):  # skipcq: PYL-R0201
        rgb = (
            torch.tensor(
                [[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[255, 255], [255, 255]]], device=device, dtype=torch.uint8
            ).type(dtype)
            / 255.0
        )
        refy = torch.tensor([[[29, 29], [29, 29]]], device=device, dtype=torch.uint8)
        refuv = torch.tensor([[[111]], [[-25]]], device=device, dtype=torch.int8)
    
>       resy = (kornia.color.rgb_to_yuv420(rgb)[0] * 255.0).type(torch.uint8)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 1.],
         [0., 0., 1.]],

        [[0., 0., 1.],
         [0., 0., 1.]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        *batch_dims, C, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        image = image.permute(*range(len(batch_dims)), -2, -1, -3)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([-1], [1]))
        Y, U, V = yuv.unbind(dim=-1)
>       Y = Y.permute(*range(len(batch_dims)), -1, -3, -2).unsqueeze(-3)
E       RuntimeError: permute(sparse_coo): number of dimensions in the tensor input does not match the length of the desired ordering of dimensions i.e. input.dim() = 2 is not equal to len(dims) = 3

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:30: RuntimeError
_______________ TestRgbToYuv420.test_forth_and_back[cpu-float32] _______________

self = <test_yuv.TestRgbToYuv420 object at 0x778339d17df0>
device = device(type='cpu'), dtype = torch.float32

    def test_forth_and_back(self, device, dtype):  # skipcq: PYL-R0201
        data = torch.rand(3, 4, 5, device=device, dtype=dtype).repeat_interleave(2, dim=2).repeat_interleave(2, dim=1)
    
        yuv = kornia.color.rgb_to_yuv420
        rgb = kornia.color.yuv420_to_rgb
>       (a, b) = yuv(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0.4364, 0.9480, 0.5488],
         [0.4364, 0.9480, 0.5488],
         [0.2277, 0.3750, 0.3570],
         [0.2...70, 0.7656],
         [0.5821, 0.5270, 0.7656],
         [0.5339, 0.5228, 0.0643],
         [0.5339, 0.5228, 0.0643]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        *batch_dims, C, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        image = image.permute(*range(len(batch_dims)), -2, -1, -3)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([-1], [1]))
        Y, U, V = yuv.unbind(dim=-1)
>       Y = Y.permute(*range(len(batch_dims)), -1, -3, -2).unsqueeze(-3)
E       RuntimeError: permute(sparse_coo): number of dimensions in the tensor input does not match the length of the desired ordering of dimensions i.e. input.dim() = 2 is not equal to len(dims) = 3

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:30: RuntimeError
_________________ TestRgbToYuv420.test_gradcheck[cpu-float32] __________________

self = <test_yuv.TestRgbToYuv420 object at 0x778339d50160>
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.grad()
    def test_gradcheck(self, device, dtype):
        B, C, H, W = 2, 3, 4, 4
        img = torch.rand(B, C, H, W, device=device, dtype=torch.float64, requires_grad=True)
>       assert gradcheck(kornia.color.rgb_to_yuv420, (img,), raise_exception=True, fast_mode=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:206: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.9657, 0.5394, 0.3883],
          [0.3825, 0.6845, 0.5757],
          [0.9764, 0.8788, 0.0766],
          ...0.0374, 0.1546, 0.8649],
          [0.7946, 0.0747, 0.4464]]]], dtype=torch.float64,
       grad_fn=<PermuteBackward0>)

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        *batch_dims, C, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        image = image.permute(*range(len(batch_dims)), -2, -1, -3)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([-1], [1]))
        Y, U, V = yuv.unbind(dim=-1)
>       Y = Y.permute(*range(len(batch_dims)), -1, -3, -2).unsqueeze(-3)
E       RuntimeError: permute(sparse_coo): number of dimensions in the tensor input does not match the length of the desired ordering of dimensions i.e. input.dim() = 3 is not equal to len(dims) = 4

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:30: RuntimeError
____________________ TestRgbToYuv420.test_jit[cpu-float32] _____________________

self = <test_yuv.TestRgbToYuv420 object at 0x778339d50490>
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.jit()
    def test_jit(self, device, dtype):
        B, C, H, W = 2, 3, 4, 4
        img = torch.ones(B, C, H, W, device=device, dtype=dtype)
        op = kornia.color.rgb_to_yuv420
>       op_jit = torch.jit.script(op)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/_script.py:1429: in script
    ret = _script_impl(
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/_script.py:1202: in _script_impl
    ast = get_jit_def(obj, obj.__name__)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:383: in get_jit_def
    return build_def(
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:444: in build_def
    return Def(Ident(r, def_name), decl, build_stmts(ctx, body))
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:197: in build_stmts
    stmts = [build_stmt(ctx, s) for s in stmts]
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:197: in <listcomp>
    stmts = [build_stmt(ctx, s) for s in stmts]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.jit.frontend.StmtBuilder object at 0x77840f971ba0>
ctx = <torch._sources.SourceContext object at 0x778339d57a60>
node = <ast.ImportFrom object at 0x778339d15de0>

    def __call__(self, ctx, node):
        method = getattr(self, "build_" + node.__class__.__name__, None)
        if method is None:
>           raise UnsupportedNodeError(ctx, node)
E           torch.jit.frontend.UnsupportedNodeError: import statements aren't supported:
E             File "/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py", line 44
E           def rgb_to_yuv420(image: Tensor) -> tuple[Tensor, Tensor]:
E               from .temp import rgb_to_yuv420
E               ~~~~ <--- HERE
E               return rgb_to_yuv420(image)

/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:416: UnsupportedNodeError
___________________ TestRgbToYuv420.test_module[cpu-float32] ___________________

self = <test_yuv.TestRgbToYuv420 object at 0x778339d507c0>
device = device(type='cpu'), dtype = torch.float32

    def test_module(self, device, dtype):
        B, C, H, W = 2, 3, 4, 4
        img = torch.ones(B, C, H, W, device=device, dtype=dtype)
        ops = kornia.color.RgbToYuv420().to(device, dtype)
        fcn = kornia.color.rgb_to_yuv420
>       self.assert_close(ops(img)[0], fcn(img)[0])

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:222: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:282: in forward
    return rgb_to_yuv420(yuvinput)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]],

         [[1., 1., 1...     [1., 1., 1.]],

         [[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        *batch_dims, C, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        image = image.permute(*range(len(batch_dims)), -2, -1, -3)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([-1], [1]))
        Y, U, V = yuv.unbind(dim=-1)
>       Y = Y.permute(*range(len(batch_dims)), -1, -3, -2).unsqueeze(-3)
E       RuntimeError: permute(sparse_coo): number of dimensions in the tensor input does not match the length of the desired ordering of dimensions i.e. input.dim() = 3 is not equal to len(dims) = 4

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:30: RuntimeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_smoke[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape3]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_exception[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_white[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_black[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_gray[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_red[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_blue[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_forth_and_back[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_gradcheck[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_jit[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_module[cpu-float32]
============================== 16 failed in 0.67s ==============================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'inductor', 'onnxrt', 'cudagraphs', 'jit', None, 'openxla'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 16 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_exception[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_white[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_black[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_gray[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_red[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_blue[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_forth_and_back[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_gradcheck[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_jit[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_module[cpu-float32] PASSED

============================== 16 passed in 0.23s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'cudagraphs', None, 'inductor', 'onnxrt', 'openxla', 'jit'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 16 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_exception[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_white[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_black[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_gray[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_red[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_blue[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_forth_and_back[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_gradcheck[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_jit[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_module[cpu-float32] PASSED

============================== 16 passed in 0.21s ==============================
