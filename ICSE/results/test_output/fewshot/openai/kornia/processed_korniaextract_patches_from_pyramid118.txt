output file:
processed_korniaextract_patches_from_pyramid118.json
function:
extract_patches_from_pyramid
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_gradcheck[cpu] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_odd[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_non_zero[cpu]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_gradcheck[cpu]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_odd[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_even[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_non_zero[cpu] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_shape[cpu]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_shape[cpu] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_even[cpu-float32]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'openxla', 'jit', 'cudagraphs', 'onnxrt', 'inductor', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 5 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_shape[cpu] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_non_zero[cpu] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_odd[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_even[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_gradcheck[cpu] FAILED

=================================== FAILURES ===================================
____________________ TestExtractPatchesPyr.test_shape[cpu] _____________________

self = <test_laf.TestExtractPatchesPyr object at 0x7a68a4547c10>
device = device(type='cpu')

    def test_shape(self, device):
        laf = torch.rand(5, 4, 2, 3, device=device)
        img = torch.rand(5, 3, 100, 30, device=device)
        PS = 10
>       patches = kornia.feature.extract_patches_from_pyramid(img, laf, PS)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/laf.py:348: in extract_patches_from_pyramid
    return extract_patches_from_pyramid(img, laf, PS, normalize_lafs_before_extraction)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

img = tensor([[[[0.6431, 0.4800, 0.7145,  ..., 0.6452, 0.9297, 0.0535],
          [0.8812, 0.0414, 0.8648,  ..., 0.0071, 0.6...06, 0.4067, 0.8768,  ..., 0.8775, 0.4778, 0.5415],
          [0.5614, 0.1864, 0.1333,  ..., 0.7061, 0.6497, 0.6700]]]])
laf = tensor([[[[0.7818, 0.2066, 0.4433],
          [0.5653, 0.3336, 0.5479]],

         [[0.9944, 0.8213, 0.2441],
        ...1121],
          [0.9991, 0.0811, 0.1203]],

         [[0.8252, 0.2862, 0.7702],
          [0.0773, 0.5723, 0.9311]]]])
pyramid = 10, patch_size = True, normalize_lafs = False

    def extract_patches_from_pyramid(img, laf, pyramid, patch_size, normalize_lafs=False):
        """
        Extract image patches from a pyramid of images based on input Local Affine Frames (LAFs).
    
        Args:
            img (Tensor): Input image tensor of shape (B, CH, H, W).
            laf (Tensor): Local Affine Frames of shape (B, N, 2, 3).
            pyramid (List[Tensor]): List of image tensors representing the pyramid levels.
            patch_size (int): Size of the extracted patches (PS).
            normalize_lafs (bool): Whether to normalize the LAFs before extraction.
    
        Returns:
            Tensor: Extracted patches of shape (B, N, CH, PS, PS).
        """
        B, N, _, _ = laf.shape
        _, CH, _, _ = img.shape
        if normalize_lafs:
            laf = normalize_lafs_function(laf)
        patches = torch.zeros((B, N, CH, patch_size, patch_size), dtype=img.dtype, device=img.device)
        for b in range(B):
            for n in range(N):
                current_laf = laf[b, n]
                scale = torch.sqrt(torch.det(current_laf[:, :2]))
                level = determine_pyramid_level(scale, pyramid)
>               patch = extract_patch_from_level(pyramid[level][b], current_laf, patch_size)
E               TypeError: 'int' object is not subscriptable

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:37: TypeError
___________________ TestExtractPatchesPyr.test_non_zero[cpu] ___________________

self = <test_laf.TestExtractPatchesPyr object at 0x7a68a4547f40>
device = device(type='cpu')

    def test_non_zero(self, device):
        img = torch.zeros(1, 1, 24, 24, device=device)
        img[:, :, 10:, 20:] = 1.0
        laf = torch.tensor([[8.0, 0, 14.0], [0, 8.0, 8.0]], device=device).reshape(1, 1, 2, 3)
    
        PS = 32
>       patches = kornia.feature.extract_patches_from_pyramid(img, laf, PS)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py:429: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/laf.py:348: in extract_patches_from_pyramid
    return extract_patches_from_pyramid(img, laf, PS, normalize_lafs_before_extraction)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

img = tensor([[[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0., 0., 0.],...        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 1., 1., 1., 1.]]]])
laf = tensor([[[[ 8.,  0., 14.],
          [ 0.,  8.,  8.]]]]), pyramid = 32
patch_size = True, normalize_lafs = False

    def extract_patches_from_pyramid(img, laf, pyramid, patch_size, normalize_lafs=False):
        """
        Extract image patches from a pyramid of images based on input Local Affine Frames (LAFs).
    
        Args:
            img (Tensor): Input image tensor of shape (B, CH, H, W).
            laf (Tensor): Local Affine Frames of shape (B, N, 2, 3).
            pyramid (List[Tensor]): List of image tensors representing the pyramid levels.
            patch_size (int): Size of the extracted patches (PS).
            normalize_lafs (bool): Whether to normalize the LAFs before extraction.
    
        Returns:
            Tensor: Extracted patches of shape (B, N, CH, PS, PS).
        """
        B, N, _, _ = laf.shape
        _, CH, _, _ = img.shape
        if normalize_lafs:
            laf = normalize_lafs_function(laf)
        patches = torch.zeros((B, N, CH, patch_size, patch_size), dtype=img.dtype, device=img.device)
        for b in range(B):
            for n in range(N):
                current_laf = laf[b, n]
                scale = torch.sqrt(torch.det(current_laf[:, :2]))
                level = determine_pyramid_level(scale, pyramid)
>               patch = extract_patch_from_level(pyramid[level][b], current_laf, patch_size)
E               TypeError: 'int' object is not subscriptable

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:37: TypeError
_______________ TestExtractPatchesPyr.test_same_odd[cpu-float32] _______________

self = <test_laf.TestExtractPatchesPyr object at 0x7a68a4584280>
device = device(type='cpu'), dtype = torch.float32

    def test_same_odd(self, device, dtype):
        img = torch.arange(5)[None].repeat(5, 1)[None, None].to(device, dtype)
        laf = torch.tensor([[2.0, 0, 2.0], [0, 2.0, 2.0]]).reshape(1, 1, 2, 3).to(device, dtype)
    
>       patch = kornia.feature.extract_patches_from_pyramid(img, laf, 5, 1.0)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/laf.py:348: in extract_patches_from_pyramid
    return extract_patches_from_pyramid(img, laf, PS, normalize_lafs_before_extraction)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

img = tensor([[[[0., 1., 2., 3., 4.],
          [0., 1., 2., 3., 4.],
          [0., 1., 2., 3., 4.],
          [0., 1., 2., 3., 4.],
          [0., 1., 2., 3., 4.]]]])
laf = tensor([[[[2., 0., 2.],
          [0., 2., 2.]]]]), pyramid = 5
patch_size = 1.0, normalize_lafs = False

    def extract_patches_from_pyramid(img, laf, pyramid, patch_size, normalize_lafs=False):
        """
        Extract image patches from a pyramid of images based on input Local Affine Frames (LAFs).
    
        Args:
            img (Tensor): Input image tensor of shape (B, CH, H, W).
            laf (Tensor): Local Affine Frames of shape (B, N, 2, 3).
            pyramid (List[Tensor]): List of image tensors representing the pyramid levels.
            patch_size (int): Size of the extracted patches (PS).
            normalize_lafs (bool): Whether to normalize the LAFs before extraction.
    
        Returns:
            Tensor: Extracted patches of shape (B, N, CH, PS, PS).
        """
        B, N, _, _ = laf.shape
        _, CH, _, _ = img.shape
        if normalize_lafs:
            laf = normalize_lafs_function(laf)
>       patches = torch.zeros((B, N, CH, patch_size, patch_size), dtype=img.dtype, device=img.device)
E       TypeError: zeros(): argument 'size' failed to unpack the object at pos 4 with error "type must be tuple of ints,but got float"

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:31: TypeError
______________ TestExtractPatchesPyr.test_same_even[cpu-float32] _______________

self = <test_laf.TestExtractPatchesPyr object at 0x7a68a45845b0>
device = device(type='cpu'), dtype = torch.float32

    def test_same_even(self, device, dtype):
        img = torch.arange(4)[None].repeat(4, 1)[None, None].to(device, dtype)
        laf = torch.tensor([[1.5, 0, 1.5], [0, 1.5, 1.5]]).reshape(1, 1, 2, 3).to(device, dtype)
    
>       patch = kornia.feature.extract_patches_from_pyramid(img, laf, 4, 1.0)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py:444: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/laf.py:348: in extract_patches_from_pyramid
    return extract_patches_from_pyramid(img, laf, PS, normalize_lafs_before_extraction)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

img = tensor([[[[0., 1., 2., 3.],
          [0., 1., 2., 3.],
          [0., 1., 2., 3.],
          [0., 1., 2., 3.]]]])
laf = tensor([[[[1.5000, 0.0000, 1.5000],
          [0.0000, 1.5000, 1.5000]]]])
pyramid = 4, patch_size = 1.0, normalize_lafs = False

    def extract_patches_from_pyramid(img, laf, pyramid, patch_size, normalize_lafs=False):
        """
        Extract image patches from a pyramid of images based on input Local Affine Frames (LAFs).
    
        Args:
            img (Tensor): Input image tensor of shape (B, CH, H, W).
            laf (Tensor): Local Affine Frames of shape (B, N, 2, 3).
            pyramid (List[Tensor]): List of image tensors representing the pyramid levels.
            patch_size (int): Size of the extracted patches (PS).
            normalize_lafs (bool): Whether to normalize the LAFs before extraction.
    
        Returns:
            Tensor: Extracted patches of shape (B, N, CH, PS, PS).
        """
        B, N, _, _ = laf.shape
        _, CH, _, _ = img.shape
        if normalize_lafs:
            laf = normalize_lafs_function(laf)
>       patches = torch.zeros((B, N, CH, patch_size, patch_size), dtype=img.dtype, device=img.device)
E       TypeError: zeros(): argument 'size' failed to unpack the object at pos 4 with error "type must be tuple of ints,but got float"

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:31: TypeError
__________________ TestExtractPatchesPyr.test_gradcheck[cpu] ___________________

self = <test_laf.TestExtractPatchesPyr object at 0x7a68a4584880>
device = device(type='cpu')

    def test_gradcheck(self, device):
        nlaf = torch.tensor([[0.1, 0.001, 0.5], [0, 0.1, 0.5]], device=device, dtype=torch.float64)
        nlaf = nlaf.view(1, 1, 2, 3)
        img = torch.rand(1, 3, 20, 30, device=device, dtype=torch.float64)
        PS = 11
>       self.gradcheck(
            kornia.feature.extract_patches_from_pyramid,
            (img, nlaf, PS, False),
            nondet_tol=1e-8,
        )

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py:452: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/laf.py:348: in extract_patches_from_pyramid
    return extract_patches_from_pyramid(img, laf, PS, normalize_lafs_before_extraction)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

img = tensor([[[[0.8180, 0.9048, 0.3429,  ..., 0.6891, 0.2088, 0.0308],
          [0.6328, 0.7406, 0.1511,  ..., 0.9389, 0.6...],
          [0.2178, 0.3171, 0.4439,  ..., 0.5949, 0.0861, 0.7147]]]],
       dtype=torch.float64, requires_grad=True)
laf = tensor([[[[0.1000, 0.0010, 0.5000],
          [0.0000, 0.1000, 0.5000]]]], dtype=torch.float64, requires_grad=True)
pyramid = 11, patch_size = False, normalize_lafs = False

    def extract_patches_from_pyramid(img, laf, pyramid, patch_size, normalize_lafs=False):
        """
        Extract image patches from a pyramid of images based on input Local Affine Frames (LAFs).
    
        Args:
            img (Tensor): Input image tensor of shape (B, CH, H, W).
            laf (Tensor): Local Affine Frames of shape (B, N, 2, 3).
            pyramid (List[Tensor]): List of image tensors representing the pyramid levels.
            patch_size (int): Size of the extracted patches (PS).
            normalize_lafs (bool): Whether to normalize the LAFs before extraction.
    
        Returns:
            Tensor: Extracted patches of shape (B, N, CH, PS, PS).
        """
        B, N, _, _ = laf.shape
        _, CH, _, _ = img.shape
        if normalize_lafs:
            laf = normalize_lafs_function(laf)
        patches = torch.zeros((B, N, CH, patch_size, patch_size), dtype=img.dtype, device=img.device)
        for b in range(B):
            for n in range(N):
                current_laf = laf[b, n]
                scale = torch.sqrt(torch.det(current_laf[:, :2]))
                level = determine_pyramid_level(scale, pyramid)
>               patch = extract_patch_from_level(pyramid[level][b], current_laf, patch_size)
E               TypeError: 'int' object is not subscriptable

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:37: TypeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_shape[cpu]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_non_zero[cpu]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_odd[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_even[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_gradcheck[cpu]
============================== 5 failed in 0.41s ===============================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'onnxrt', 'openxla', 'inductor', 'jit', 'cudagraphs', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 5 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_shape[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_non_zero[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_odd[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_even[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_gradcheck[cpu] PASSED

============================== 5 passed in 0.18s ===============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'tvm', 'openxla', 'jit', 'inductor', None, 'cudagraphs'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 5 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_shape[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_non_zero[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_odd[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_even[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_gradcheck[cpu] PASSED

============================== 5 passed in 0.19s ===============================
