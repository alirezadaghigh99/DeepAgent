output file:
processed_scikit-learndict_learning_online66.json
function:
dict_learning_online
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[True-False] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[False-True]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[True-False]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[True-True]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[False-False]', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[True-True] FAILED', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[False-True] FAILED', 'FAILED'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 4 items

../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[False-False] I: Seeding RNGs with 1693457679
FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[False-True] FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[True-False] FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[True-True] FAILED

=================================== FAILURES ===================================
______________ test_dict_learning_online_positivity[False-False] _______________

positive_code = False, positive_dict = False

    @pytest.mark.parametrize("positive_code", [False, True])
    @pytest.mark.parametrize("positive_dict", [False, True])
    def test_dict_learning_online_positivity(positive_code, positive_dict):
        rng = np.random.RandomState(0)
        n_components = 8
    
>       code, dictionary = dict_learning_online(
            X,
            n_components=n_components,
            batch_size=4,
            method="cd",
            alpha=1,
            random_state=rng,
            positive_dict=positive_dict,
            positive_code=positive_code,
        )

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py:376: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_dict_learning.py:390: in dict_learning_online
    return dict_learning_online(X, n_components)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[ 1.76405235,  0.40015721,  0.97873798,  2.2408932 ,  1.86755799,
        -0.97727788,  0.95008842, -0.15135721...     [ 1.13940068, -1.23482582,  0.40234164, -0.68481009, -0.87079715,
        -0.57884966, -0.31155253,  0.05616534]])
n_components = 8, alpha = 1, max_iter = 100, return_code = True
dict_init = None, callback = None, batch_size = 256, verbose = False
shuffle = True, n_jobs = None, method = 'lars', random_state = None
positive_dict = False, positive_code = False, method_max_iter = 1000
tol = 0.001, max_no_improvement = 10

    def dict_learning_online(X, n_components=2, alpha=1, max_iter=100, return_code=True, dict_init=None, callback=None, batch_size=256, verbose=False, shuffle=True, n_jobs=None, method='lars', random_state=None, positive_dict=False, positive_code=False, method_max_iter=1000, tol=0.001, max_no_improvement=10):
        """
        Solve a dictionary learning matrix factorization problem online.
    
        Parameters
        ----------
        X : array-like of shape (n_samples, n_features)
            Data matrix.
    
        n_components : int or None, default=2
            Number of dictionary atoms to extract. If None, then ``n_components``
            is set to ``n_features``.
    
        alpha : float, default=1
            Sparsity controlling parameter.
    
        max_iter : int, default=100
            Maximum number of iterations over the complete dataset before
            stopping independently of any early stopping criterion heuristics.
    
        return_code : bool, default=True
            Whether to also return the code U or just the dictionary `V`.
    
        dict_init : ndarray of shape (n_components, n_features), default=None
            Initial values for the dictionary for warm restart scenarios.
    
        callback : callable, default=None
            A callable that gets invoked at the end of each iteration.
    
        batch_size : int, default=256
            The number of samples to take in each batch.
    
        verbose : bool, default=False
            To control the verbosity of the procedure.
    
        shuffle : bool, default=True
            Whether to shuffle the data before splitting it in batches.
    
        n_jobs : int, default=None
            Number of parallel jobs to run.
    
        method : {'lars', 'cd'}, default='lars'
            Method to solve the lasso problem.
    
        random_state : int, RandomState instance or None, default=None
            Used for initializing the dictionary when ``dict_init`` is not
            specified, randomly shuffling the data when ``shuffle`` is set to
            ``True``, and updating the dictionary.
    
        positive_dict : bool, default=False
            Whether to enforce positivity when finding the dictionary.
    
        positive_code : bool, default=False
            Whether to enforce positivity when finding the code.
    
        method_max_iter : int, default=1000
            Maximum number of iterations to perform when solving the lasso problem.
    
        tol : float, default=1e-3
            Control early stopping based on the norm of the differences in the
            dictionary between 2 steps.
    
        max_no_improvement : int, default=10
            Control early stopping based on the consecutive number of mini batches
            that does not yield an improvement on the smoothed cost function.
    
        Returns
        -------
        code : ndarray of shape (n_samples, n_components),
            The sparse code (only returned if `return_code=True`).
    
        dictionary : ndarray of shape (n_components, n_features),
            The solutions to the dictionary learning problem.
    
        n_iter : int
            Number of iterations run.
        """
>       model = MiniBatchDictionaryLearning(n_components=n_components, alpha=alpha, n_iter=max_iter, fit_algorithm=method, batch_size=batch_size, shuffle=shuffle, dict_init=dict_init, transform_algorithm='lasso_lars' if method == 'lars' else 'lasso_cd', transform_alpha=alpha, verbose=verbose, random_state=random_state, positive_dict=positive_dict, positive_code=positive_code, n_jobs=n_jobs, tol=tol, max_no_improvement=max_no_improvement, callback=callback)
E       TypeError: __init__() got an unexpected keyword argument 'n_iter'

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/temp.py:95: TypeError
_______________ test_dict_learning_online_positivity[False-True] _______________

positive_code = True, positive_dict = False

    @pytest.mark.parametrize("positive_code", [False, True])
    @pytest.mark.parametrize("positive_dict", [False, True])
    def test_dict_learning_online_positivity(positive_code, positive_dict):
        rng = np.random.RandomState(0)
        n_components = 8
    
>       code, dictionary = dict_learning_online(
            X,
            n_components=n_components,
            batch_size=4,
            method="cd",
            alpha=1,
            random_state=rng,
            positive_dict=positive_dict,
            positive_code=positive_code,
        )

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py:376: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_dict_learning.py:390: in dict_learning_online
    return dict_learning_online(X, n_components)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[ 1.76405235,  0.40015721,  0.97873798,  2.2408932 ,  1.86755799,
        -0.97727788,  0.95008842, -0.15135721...     [ 1.13940068, -1.23482582,  0.40234164, -0.68481009, -0.87079715,
        -0.57884966, -0.31155253,  0.05616534]])
n_components = 8, alpha = 1, max_iter = 100, return_code = True
dict_init = None, callback = None, batch_size = 256, verbose = False
shuffle = True, n_jobs = None, method = 'lars', random_state = None
positive_dict = False, positive_code = False, method_max_iter = 1000
tol = 0.001, max_no_improvement = 10

    def dict_learning_online(X, n_components=2, alpha=1, max_iter=100, return_code=True, dict_init=None, callback=None, batch_size=256, verbose=False, shuffle=True, n_jobs=None, method='lars', random_state=None, positive_dict=False, positive_code=False, method_max_iter=1000, tol=0.001, max_no_improvement=10):
        """
        Solve a dictionary learning matrix factorization problem online.
    
        Parameters
        ----------
        X : array-like of shape (n_samples, n_features)
            Data matrix.
    
        n_components : int or None, default=2
            Number of dictionary atoms to extract. If None, then ``n_components``
            is set to ``n_features``.
    
        alpha : float, default=1
            Sparsity controlling parameter.
    
        max_iter : int, default=100
            Maximum number of iterations over the complete dataset before
            stopping independently of any early stopping criterion heuristics.
    
        return_code : bool, default=True
            Whether to also return the code U or just the dictionary `V`.
    
        dict_init : ndarray of shape (n_components, n_features), default=None
            Initial values for the dictionary for warm restart scenarios.
    
        callback : callable, default=None
            A callable that gets invoked at the end of each iteration.
    
        batch_size : int, default=256
            The number of samples to take in each batch.
    
        verbose : bool, default=False
            To control the verbosity of the procedure.
    
        shuffle : bool, default=True
            Whether to shuffle the data before splitting it in batches.
    
        n_jobs : int, default=None
            Number of parallel jobs to run.
    
        method : {'lars', 'cd'}, default='lars'
            Method to solve the lasso problem.
    
        random_state : int, RandomState instance or None, default=None
            Used for initializing the dictionary when ``dict_init`` is not
            specified, randomly shuffling the data when ``shuffle`` is set to
            ``True``, and updating the dictionary.
    
        positive_dict : bool, default=False
            Whether to enforce positivity when finding the dictionary.
    
        positive_code : bool, default=False
            Whether to enforce positivity when finding the code.
    
        method_max_iter : int, default=1000
            Maximum number of iterations to perform when solving the lasso problem.
    
        tol : float, default=1e-3
            Control early stopping based on the norm of the differences in the
            dictionary between 2 steps.
    
        max_no_improvement : int, default=10
            Control early stopping based on the consecutive number of mini batches
            that does not yield an improvement on the smoothed cost function.
    
        Returns
        -------
        code : ndarray of shape (n_samples, n_components),
            The sparse code (only returned if `return_code=True`).
    
        dictionary : ndarray of shape (n_components, n_features),
            The solutions to the dictionary learning problem.
    
        n_iter : int
            Number of iterations run.
        """
>       model = MiniBatchDictionaryLearning(n_components=n_components, alpha=alpha, n_iter=max_iter, fit_algorithm=method, batch_size=batch_size, shuffle=shuffle, dict_init=dict_init, transform_algorithm='lasso_lars' if method == 'lars' else 'lasso_cd', transform_alpha=alpha, verbose=verbose, random_state=random_state, positive_dict=positive_dict, positive_code=positive_code, n_jobs=n_jobs, tol=tol, max_no_improvement=max_no_improvement, callback=callback)
E       TypeError: __init__() got an unexpected keyword argument 'n_iter'

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/temp.py:95: TypeError
_______________ test_dict_learning_online_positivity[True-False] _______________

positive_code = False, positive_dict = True

    @pytest.mark.parametrize("positive_code", [False, True])
    @pytest.mark.parametrize("positive_dict", [False, True])
    def test_dict_learning_online_positivity(positive_code, positive_dict):
        rng = np.random.RandomState(0)
        n_components = 8
    
>       code, dictionary = dict_learning_online(
            X,
            n_components=n_components,
            batch_size=4,
            method="cd",
            alpha=1,
            random_state=rng,
            positive_dict=positive_dict,
            positive_code=positive_code,
        )

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py:376: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_dict_learning.py:390: in dict_learning_online
    return dict_learning_online(X, n_components)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[ 1.76405235,  0.40015721,  0.97873798,  2.2408932 ,  1.86755799,
        -0.97727788,  0.95008842, -0.15135721...     [ 1.13940068, -1.23482582,  0.40234164, -0.68481009, -0.87079715,
        -0.57884966, -0.31155253,  0.05616534]])
n_components = 8, alpha = 1, max_iter = 100, return_code = True
dict_init = None, callback = None, batch_size = 256, verbose = False
shuffle = True, n_jobs = None, method = 'lars', random_state = None
positive_dict = False, positive_code = False, method_max_iter = 1000
tol = 0.001, max_no_improvement = 10

    def dict_learning_online(X, n_components=2, alpha=1, max_iter=100, return_code=True, dict_init=None, callback=None, batch_size=256, verbose=False, shuffle=True, n_jobs=None, method='lars', random_state=None, positive_dict=False, positive_code=False, method_max_iter=1000, tol=0.001, max_no_improvement=10):
        """
        Solve a dictionary learning matrix factorization problem online.
    
        Parameters
        ----------
        X : array-like of shape (n_samples, n_features)
            Data matrix.
    
        n_components : int or None, default=2
            Number of dictionary atoms to extract. If None, then ``n_components``
            is set to ``n_features``.
    
        alpha : float, default=1
            Sparsity controlling parameter.
    
        max_iter : int, default=100
            Maximum number of iterations over the complete dataset before
            stopping independently of any early stopping criterion heuristics.
    
        return_code : bool, default=True
            Whether to also return the code U or just the dictionary `V`.
    
        dict_init : ndarray of shape (n_components, n_features), default=None
            Initial values for the dictionary for warm restart scenarios.
    
        callback : callable, default=None
            A callable that gets invoked at the end of each iteration.
    
        batch_size : int, default=256
            The number of samples to take in each batch.
    
        verbose : bool, default=False
            To control the verbosity of the procedure.
    
        shuffle : bool, default=True
            Whether to shuffle the data before splitting it in batches.
    
        n_jobs : int, default=None
            Number of parallel jobs to run.
    
        method : {'lars', 'cd'}, default='lars'
            Method to solve the lasso problem.
    
        random_state : int, RandomState instance or None, default=None
            Used for initializing the dictionary when ``dict_init`` is not
            specified, randomly shuffling the data when ``shuffle`` is set to
            ``True``, and updating the dictionary.
    
        positive_dict : bool, default=False
            Whether to enforce positivity when finding the dictionary.
    
        positive_code : bool, default=False
            Whether to enforce positivity when finding the code.
    
        method_max_iter : int, default=1000
            Maximum number of iterations to perform when solving the lasso problem.
    
        tol : float, default=1e-3
            Control early stopping based on the norm of the differences in the
            dictionary between 2 steps.
    
        max_no_improvement : int, default=10
            Control early stopping based on the consecutive number of mini batches
            that does not yield an improvement on the smoothed cost function.
    
        Returns
        -------
        code : ndarray of shape (n_samples, n_components),
            The sparse code (only returned if `return_code=True`).
    
        dictionary : ndarray of shape (n_components, n_features),
            The solutions to the dictionary learning problem.
    
        n_iter : int
            Number of iterations run.
        """
>       model = MiniBatchDictionaryLearning(n_components=n_components, alpha=alpha, n_iter=max_iter, fit_algorithm=method, batch_size=batch_size, shuffle=shuffle, dict_init=dict_init, transform_algorithm='lasso_lars' if method == 'lars' else 'lasso_cd', transform_alpha=alpha, verbose=verbose, random_state=random_state, positive_dict=positive_dict, positive_code=positive_code, n_jobs=n_jobs, tol=tol, max_no_improvement=max_no_improvement, callback=callback)
E       TypeError: __init__() got an unexpected keyword argument 'n_iter'

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/temp.py:95: TypeError
_______________ test_dict_learning_online_positivity[True-True] ________________

positive_code = True, positive_dict = True

    @pytest.mark.parametrize("positive_code", [False, True])
    @pytest.mark.parametrize("positive_dict", [False, True])
    def test_dict_learning_online_positivity(positive_code, positive_dict):
        rng = np.random.RandomState(0)
        n_components = 8
    
>       code, dictionary = dict_learning_online(
            X,
            n_components=n_components,
            batch_size=4,
            method="cd",
            alpha=1,
            random_state=rng,
            positive_dict=positive_dict,
            positive_code=positive_code,
        )

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py:376: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_dict_learning.py:390: in dict_learning_online
    return dict_learning_online(X, n_components)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[ 1.76405235,  0.40015721,  0.97873798,  2.2408932 ,  1.86755799,
        -0.97727788,  0.95008842, -0.15135721...     [ 1.13940068, -1.23482582,  0.40234164, -0.68481009, -0.87079715,
        -0.57884966, -0.31155253,  0.05616534]])
n_components = 8, alpha = 1, max_iter = 100, return_code = True
dict_init = None, callback = None, batch_size = 256, verbose = False
shuffle = True, n_jobs = None, method = 'lars', random_state = None
positive_dict = False, positive_code = False, method_max_iter = 1000
tol = 0.001, max_no_improvement = 10

    def dict_learning_online(X, n_components=2, alpha=1, max_iter=100, return_code=True, dict_init=None, callback=None, batch_size=256, verbose=False, shuffle=True, n_jobs=None, method='lars', random_state=None, positive_dict=False, positive_code=False, method_max_iter=1000, tol=0.001, max_no_improvement=10):
        """
        Solve a dictionary learning matrix factorization problem online.
    
        Parameters
        ----------
        X : array-like of shape (n_samples, n_features)
            Data matrix.
    
        n_components : int or None, default=2
            Number of dictionary atoms to extract. If None, then ``n_components``
            is set to ``n_features``.
    
        alpha : float, default=1
            Sparsity controlling parameter.
    
        max_iter : int, default=100
            Maximum number of iterations over the complete dataset before
            stopping independently of any early stopping criterion heuristics.
    
        return_code : bool, default=True
            Whether to also return the code U or just the dictionary `V`.
    
        dict_init : ndarray of shape (n_components, n_features), default=None
            Initial values for the dictionary for warm restart scenarios.
    
        callback : callable, default=None
            A callable that gets invoked at the end of each iteration.
    
        batch_size : int, default=256
            The number of samples to take in each batch.
    
        verbose : bool, default=False
            To control the verbosity of the procedure.
    
        shuffle : bool, default=True
            Whether to shuffle the data before splitting it in batches.
    
        n_jobs : int, default=None
            Number of parallel jobs to run.
    
        method : {'lars', 'cd'}, default='lars'
            Method to solve the lasso problem.
    
        random_state : int, RandomState instance or None, default=None
            Used for initializing the dictionary when ``dict_init`` is not
            specified, randomly shuffling the data when ``shuffle`` is set to
            ``True``, and updating the dictionary.
    
        positive_dict : bool, default=False
            Whether to enforce positivity when finding the dictionary.
    
        positive_code : bool, default=False
            Whether to enforce positivity when finding the code.
    
        method_max_iter : int, default=1000
            Maximum number of iterations to perform when solving the lasso problem.
    
        tol : float, default=1e-3
            Control early stopping based on the norm of the differences in the
            dictionary between 2 steps.
    
        max_no_improvement : int, default=10
            Control early stopping based on the consecutive number of mini batches
            that does not yield an improvement on the smoothed cost function.
    
        Returns
        -------
        code : ndarray of shape (n_samples, n_components),
            The sparse code (only returned if `return_code=True`).
    
        dictionary : ndarray of shape (n_components, n_features),
            The solutions to the dictionary learning problem.
    
        n_iter : int
            Number of iterations run.
        """
>       model = MiniBatchDictionaryLearning(n_components=n_components, alpha=alpha, n_iter=max_iter, fit_algorithm=method, batch_size=batch_size, shuffle=shuffle, dict_init=dict_init, transform_algorithm='lasso_lars' if method == 'lars' else 'lasso_cd', transform_alpha=alpha, verbose=verbose, random_state=random_state, positive_dict=positive_dict, positive_code=positive_code, n_jobs=n_jobs, tol=tol, max_no_improvement=max_no_improvement, callback=callback)
E       TypeError: __init__() got an unexpected keyword argument 'n_iter'

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/temp.py:95: TypeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[False-False]
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[False-True]
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[True-False]
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[True-True]
============================== 4 failed in 0.62s ===============================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 4 items

../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[False-False] I: Seeding RNGs with 1384851733
PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[False-True] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[True-False] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[True-True] PASSED

============================== 4 passed in 0.44s ===============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 4 items

../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[False-False] I: Seeding RNGs with 1945004952
PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[False-True] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[True-False] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_dict_learning.py::test_dict_learning_online_positivity[True-True] PASSED

============================== 4 passed in 0.49s ===============================
