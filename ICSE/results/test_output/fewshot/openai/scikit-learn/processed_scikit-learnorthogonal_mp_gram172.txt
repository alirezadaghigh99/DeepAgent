output file:
processed_scikit-learnorthogonal_mp_gram172.json
function:
orthogonal_mp_gram
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_return_path_prop_with_gram FAILED', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_gram_dtype_match[float64] FAILED', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_reaches_least_squares FAILED', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_orthogonal_mp_gram_readonly FAILED', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_with_without_gram FAILED', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_gram_dtype_match[float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_gram_dtype_match[float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_correct_shapes_gram', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_gram_numerical_consistency FAILED', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_perfect_signal_recovery FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_with_without_gram', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_return_path_prop_with_gram', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_swapped_regressors', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_correct_shapes_gram FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_gram_dtype_match[float64]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_with_without_gram_tol', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_unreachable_accuracy FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_tol', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_gram_numerical_consistency', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_reaches_least_squares', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_path FAILED', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_tol FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_perfect_signal_recovery', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_path', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_orthogonal_mp_gram_readonly', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_with_without_gram_tol FAILED', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_swapped_regressors FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_unreachable_accuracy'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 23 items

../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_correct_shapes I: Seeding RNGs with 2016530557
PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_correct_shapes_gram FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_n_nonzero_coefs PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_tol FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_with_without_gram FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_with_without_gram_tol FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_unreachable_accuracy FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_bad_input[keyword_params0-positional_params0] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_bad_input[keyword_params0-positional_params1] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_perfect_signal_recovery FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_orthogonal_mp_gram_readonly FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_estimator PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_estimator_n_nonzero_coefs PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_identical_regressors PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_swapped_regressors FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_no_atoms PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_path FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_return_path_prop_with_gram FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_cv PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_reaches_least_squares FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_gram_dtype_match[float32] FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_gram_dtype_match[float64] FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_gram_numerical_consistency FAILED

=================================== FAILURES ===================================
___________________________ test_correct_shapes_gram ___________________________

    def test_correct_shapes_gram():
>       assert orthogonal_mp_gram(G, Xy[:, 0], n_nonzero_coefs=5).shape == (n_features,)
E       AssertionError

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py:47: AssertionError
___________________________________ test_tol ___________________________________

    def test_tol():
        tol = 0.5
        gamma = orthogonal_mp(X, y[:, 0], tol=tol)
        gamma_gram = orthogonal_mp(X, y[:, 0], tol=tol, precompute=True)
        assert np.sum((y[:, 0] - np.dot(X, gamma)) ** 2) <= tol
>       assert np.sum((y[:, 0] - np.dot(X, gamma_gram)) ** 2) <= tol
E       AssertionError

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py:64: AssertionError
____________________________ test_with_without_gram ____________________________

    def test_with_without_gram():
        assert_array_almost_equal(
            orthogonal_mp(X, y, n_nonzero_coefs=5),
>           orthogonal_mp(X, y, n_nonzero_coefs=5, precompute=True),
        )

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_omp.py:329: in orthogonal_mp
    return orthogonal_mp_gram(G, Xy, n_nonzero_coefs=n_nonzero_coefs, tol=tol, norms_squared=norms_squared, copy_Gram=copy_X, copy_Xy=False, return_path=return_path)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_omp.py:356: in orthogonal_mp_gram
    return orthogonal_mp_gram(Gram, Xy)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[100.        ,  -2.40443536, -11.84224424, ...,   5.02512549,
         -6.83541684, -37.35248456],
       [ -2....9.69377232],
       [-37.35248456, -24.4398946 , -16.39454396, ...,  -6.12874257,
        -19.69377232, 100.        ]])
y = array([[  -6.61271573,   47.65692719,  -12.38150206],
       [  30.58230642,   70.01990535,    3.63642093],
       [  ...22685944],
       [ -23.72568845,   28.39552943,  -38.82878853],
       [  -8.90044923,  -11.49348283,  -17.3969092 ]])
n_nonzero_coefs = 3, tol = None, precompute = False, copy_X = True
return_path = False, return_n_iter = False

    def orthogonal_mp_gram(X, y, n_nonzero_coefs=None, tol=None, precompute='auto', copy_X=True, return_path=False, return_n_iter=False):
        """
        Orthogonal Matching Pursuit (OMP) algorithm for sparse linear regression.
    
        Parameters:
        - X: 2D array-like of shape (n_samples, n_features) with unit norm columns.
        - y: 1D or 2D array-like of shape (n_samples,) or (n_samples, n_targets).
        - n_nonzero_coefs: Desired number of non-zero coefficients in the solution.
        - tol: Maximum squared norm of the residual.
        - precompute: Whether to precompute the Gram matrix.
        - copy_X: Whether to copy the input matrix X.
        - return_path: Whether to return the entire coefficient path.
        - return_n_iter: Whether to return the number of iterations.
    
        Returns:
        - coef: Coefficients of the OMP solution.
        - (Optional) n_iter: Number of iterations taken for convergence.
        """
        X = np.array(X, copy=copy_X)
        y = np.array(y, copy=False)
        n_samples, n_features = X.shape
        if y.ndim == 1:
            y = y[:, np.newaxis]
        n_targets = y.shape[1]
        if n_nonzero_coefs is None:
            n_nonzero_coefs = max(1, int(0.1 * n_features))
        if n_nonzero_coefs > n_features:
            raise ValueError('Number of non-zero coefficients cannot exceed the number of features.')
        if precompute == 'auto':
            precompute = n_targets == 1 or n_samples > n_features
        if precompute:
            G = np.dot(X.T, X)
        coef = np.zeros((n_features, n_targets))
        residual = y.copy()
        index_set = []
        path = []
        for n_iter in range(n_nonzero_coefs):
            if precompute:
                correlations = np.dot(X.T, residual)
            else:
                correlations = np.dot(X.T, residual)
            if n_targets == 1:
                correlations = correlations.ravel()
            best_index = np.argmax(np.abs(correlations), axis=0)
            index_set.append(best_index)
            if precompute:
                A = G[np.ix_(index_set, index_set)]
            else:
>               A = np.dot(X[:, index_set].T, X[:, index_set])
E               ValueError: shapes (3,1,35) and (35,1,3) not aligned: 35 (dim 2) != 1 (dim 1)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:66: ValueError
__________________________ test_with_without_gram_tol __________________________

    def test_with_without_gram_tol():
        assert_array_almost_equal(
>           orthogonal_mp(X, y, tol=1.0), orthogonal_mp(X, y, tol=1.0, precompute=True)
        )

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_omp.py:329: in orthogonal_mp
    return orthogonal_mp_gram(G, Xy, n_nonzero_coefs=n_nonzero_coefs, tol=tol, norms_squared=norms_squared, copy_Gram=copy_X, copy_Xy=False, return_path=return_path)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_omp.py:356: in orthogonal_mp_gram
    return orthogonal_mp_gram(Gram, Xy)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[100.        ,  -2.40443536, -11.84224424, ...,   5.02512549,
         -6.83541684, -37.35248456],
       [ -2....9.69377232],
       [-37.35248456, -24.4398946 , -16.39454396, ...,  -6.12874257,
        -19.69377232, 100.        ]])
y = array([[  -6.61271573,   47.65692719,  -12.38150206],
       [  30.58230642,   70.01990535,    3.63642093],
       [  ...22685944],
       [ -23.72568845,   28.39552943,  -38.82878853],
       [  -8.90044923,  -11.49348283,  -17.3969092 ]])
n_nonzero_coefs = 3, tol = None, precompute = False, copy_X = True
return_path = False, return_n_iter = False

    def orthogonal_mp_gram(X, y, n_nonzero_coefs=None, tol=None, precompute='auto', copy_X=True, return_path=False, return_n_iter=False):
        """
        Orthogonal Matching Pursuit (OMP) algorithm for sparse linear regression.
    
        Parameters:
        - X: 2D array-like of shape (n_samples, n_features) with unit norm columns.
        - y: 1D or 2D array-like of shape (n_samples,) or (n_samples, n_targets).
        - n_nonzero_coefs: Desired number of non-zero coefficients in the solution.
        - tol: Maximum squared norm of the residual.
        - precompute: Whether to precompute the Gram matrix.
        - copy_X: Whether to copy the input matrix X.
        - return_path: Whether to return the entire coefficient path.
        - return_n_iter: Whether to return the number of iterations.
    
        Returns:
        - coef: Coefficients of the OMP solution.
        - (Optional) n_iter: Number of iterations taken for convergence.
        """
        X = np.array(X, copy=copy_X)
        y = np.array(y, copy=False)
        n_samples, n_features = X.shape
        if y.ndim == 1:
            y = y[:, np.newaxis]
        n_targets = y.shape[1]
        if n_nonzero_coefs is None:
            n_nonzero_coefs = max(1, int(0.1 * n_features))
        if n_nonzero_coefs > n_features:
            raise ValueError('Number of non-zero coefficients cannot exceed the number of features.')
        if precompute == 'auto':
            precompute = n_targets == 1 or n_samples > n_features
        if precompute:
            G = np.dot(X.T, X)
        coef = np.zeros((n_features, n_targets))
        residual = y.copy()
        index_set = []
        path = []
        for n_iter in range(n_nonzero_coefs):
            if precompute:
                correlations = np.dot(X.T, residual)
            else:
                correlations = np.dot(X.T, residual)
            if n_targets == 1:
                correlations = correlations.ravel()
            best_index = np.argmax(np.abs(correlations), axis=0)
            index_set.append(best_index)
            if precompute:
                A = G[np.ix_(index_set, index_set)]
            else:
>               A = np.dot(X[:, index_set].T, X[:, index_set])
E               ValueError: shapes (3,1,35) and (35,1,3) not aligned: 35 (dim 2) != 1 (dim 1)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:66: ValueError
__________________________ test_unreachable_accuracy ___________________________

    def test_unreachable_accuracy():
        assert_array_almost_equal(
            orthogonal_mp(X, y, tol=0), orthogonal_mp(X, y, n_nonzero_coefs=n_features)
        )
        warning_message = (
            "Orthogonal matching pursuit ended prematurely "
            "due to linear dependence in the dictionary. "
            "The requested precision might not have been met."
        )
        with pytest.warns(RuntimeWarning, match=warning_message):
            assert_array_almost_equal(
>               orthogonal_mp(X, y, tol=0, precompute=True),
                orthogonal_mp(X, y, precompute=True, n_nonzero_coefs=n_features),
            )

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_omp.py:329: in orthogonal_mp
    return orthogonal_mp_gram(G, Xy, n_nonzero_coefs=n_nonzero_coefs, tol=tol, norms_squared=norms_squared, copy_Gram=copy_X, copy_Xy=False, return_path=return_path)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_omp.py:356: in orthogonal_mp_gram
    return orthogonal_mp_gram(Gram, Xy)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[100.        ,  -2.40443536, -11.84224424, ...,   5.02512549,
         -6.83541684, -37.35248456],
       [ -2....9.69377232],
       [-37.35248456, -24.4398946 , -16.39454396, ...,  -6.12874257,
        -19.69377232, 100.        ]])
y = array([[  -6.61271573,   47.65692719,  -12.38150206],
       [  30.58230642,   70.01990535,    3.63642093],
       [  ...22685944],
       [ -23.72568845,   28.39552943,  -38.82878853],
       [  -8.90044923,  -11.49348283,  -17.3969092 ]])
n_nonzero_coefs = 3, tol = None, precompute = False, copy_X = True
return_path = False, return_n_iter = False

    def orthogonal_mp_gram(X, y, n_nonzero_coefs=None, tol=None, precompute='auto', copy_X=True, return_path=False, return_n_iter=False):
        """
        Orthogonal Matching Pursuit (OMP) algorithm for sparse linear regression.
    
        Parameters:
        - X: 2D array-like of shape (n_samples, n_features) with unit norm columns.
        - y: 1D or 2D array-like of shape (n_samples,) or (n_samples, n_targets).
        - n_nonzero_coefs: Desired number of non-zero coefficients in the solution.
        - tol: Maximum squared norm of the residual.
        - precompute: Whether to precompute the Gram matrix.
        - copy_X: Whether to copy the input matrix X.
        - return_path: Whether to return the entire coefficient path.
        - return_n_iter: Whether to return the number of iterations.
    
        Returns:
        - coef: Coefficients of the OMP solution.
        - (Optional) n_iter: Number of iterations taken for convergence.
        """
        X = np.array(X, copy=copy_X)
        y = np.array(y, copy=False)
        n_samples, n_features = X.shape
        if y.ndim == 1:
            y = y[:, np.newaxis]
        n_targets = y.shape[1]
        if n_nonzero_coefs is None:
            n_nonzero_coefs = max(1, int(0.1 * n_features))
        if n_nonzero_coefs > n_features:
            raise ValueError('Number of non-zero coefficients cannot exceed the number of features.')
        if precompute == 'auto':
            precompute = n_targets == 1 or n_samples > n_features
        if precompute:
            G = np.dot(X.T, X)
        coef = np.zeros((n_features, n_targets))
        residual = y.copy()
        index_set = []
        path = []
        for n_iter in range(n_nonzero_coefs):
            if precompute:
                correlations = np.dot(X.T, residual)
            else:
                correlations = np.dot(X.T, residual)
            if n_targets == 1:
                correlations = correlations.ravel()
            best_index = np.argmax(np.abs(correlations), axis=0)
            index_set.append(best_index)
            if precompute:
                A = G[np.ix_(index_set, index_set)]
            else:
>               A = np.dot(X[:, index_set].T, X[:, index_set])
E               ValueError: shapes (3,1,35) and (35,1,3) not aligned: 35 (dim 2) != 1 (dim 1)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:66: ValueError

During handling of the above exception, another exception occurred:

    def test_unreachable_accuracy():
        assert_array_almost_equal(
            orthogonal_mp(X, y, tol=0), orthogonal_mp(X, y, n_nonzero_coefs=n_features)
        )
        warning_message = (
            "Orthogonal matching pursuit ended prematurely "
            "due to linear dependence in the dictionary. "
            "The requested precision might not have been met."
        )
        with pytest.warns(RuntimeWarning, match=warning_message):
>           assert_array_almost_equal(
                orthogonal_mp(X, y, tol=0, precompute=True),
                orthogonal_mp(X, y, precompute=True, n_nonzero_coefs=n_features),
            )
E           Failed: DID NOT WARN. No warnings of type (<class 'RuntimeWarning'>,) were emitted.
E            Emitted warnings: [].

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py:90: Failed
_________________________ test_perfect_signal_recovery _________________________

    def test_perfect_signal_recovery():
        (idx,) = gamma[:, 0].nonzero()
        gamma_rec = orthogonal_mp(X, y[:, 0], n_nonzero_coefs=5)
        gamma_gram = orthogonal_mp_gram(G, Xy[:, 0], n_nonzero_coefs=5)
        assert_array_equal(idx, np.flatnonzero(gamma_rec))
>       assert_array_equal(idx, np.flatnonzero(gamma_gram))

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/numpy/_utils/__init__.py:85: in wrapper
    return fun(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<built-in function eq>, array([17, 18, 29, 31, 32]), array([17, 24, 32]))
kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not equal
E           
E           (shapes (5,), (3,) mismatch)
E            ACTUAL: array([17, 18, 29, 31, 32])
E            DESIRED: array([17, 24, 32])

/usr/local/lib/python3.9/contextlib.py:79: AssertionError
_______________________ test_orthogonal_mp_gram_readonly _______________________

    def test_orthogonal_mp_gram_readonly():
        # Non-regression test for:
        # https://github.com/scikit-learn/scikit-learn/issues/5956
        (idx,) = gamma[:, 0].nonzero()
        G_readonly = G.copy()
        G_readonly.setflags(write=False)
        Xy_readonly = Xy.copy()
        Xy_readonly.setflags(write=False)
        gamma_gram = orthogonal_mp_gram(
            G_readonly, Xy_readonly[:, 0], n_nonzero_coefs=5, copy_Gram=False, copy_Xy=False
        )
>       assert_array_equal(idx, np.flatnonzero(gamma_gram))

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/numpy/_utils/__init__.py:85: in wrapper
    return fun(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<built-in function eq>, array([17, 18, 29, 31, 32]), array([17, 24, 32]))
kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not equal
E           
E           (shapes (5,), (3,) mismatch)
E            ACTUAL: array([17, 18, 29, 31, 32])
E            DESIRED: array([17, 24, 32])

/usr/local/lib/python3.9/contextlib.py:79: AssertionError
___________________________ test_swapped_regressors ____________________________

    def test_swapped_regressors():
        gamma = np.zeros(n_features)
        # X[:, 21] should be selected first, then X[:, 0] selected second,
        # which will take X[:, 21]'s place in case the algorithm does
        # column swapping for optimization (which is the case at the moment)
        gamma[21] = 1.0
        gamma[0] = 0.5
        new_y = np.dot(X, gamma)
        new_Xy = np.dot(X.T, new_y)
        gamma_hat = orthogonal_mp(X, new_y, n_nonzero_coefs=2)
>       gamma_hat_gram = orthogonal_mp_gram(G, new_Xy, n_nonzero_coefs=2)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py:196: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_omp.py:356: in orthogonal_mp_gram
    return orthogonal_mp_gram(Gram, Xy)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:68: in orthogonal_mp_gram
    coef_active = np.linalg.solve(A, b)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/numpy/linalg/_linalg.py:410: in solve
    r = gufunc(a, b, signature=signature)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

err = 'invalid value', flag = 8

    def _raise_linalgerror_singular(err, flag):
>       raise LinAlgError("Singular matrix")
E       numpy.linalg.LinAlgError: Singular matrix

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/numpy/linalg/_linalg.py:104: LinAlgError
________________________________ test_omp_path _________________________________

    def test_omp_path():
        path = orthogonal_mp(X, y, n_nonzero_coefs=5, return_path=True)
        last = orthogonal_mp(X, y, n_nonzero_coefs=5, return_path=False)
        assert path.shape == (n_features, n_targets, 5)
        assert_array_almost_equal(path[:, :, -1], last)
>       path = orthogonal_mp_gram(G, Xy, n_nonzero_coefs=5, return_path=True)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py:215: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_omp.py:356: in orthogonal_mp_gram
    return orthogonal_mp_gram(Gram, Xy)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[100.        ,  -2.40443536, -11.84224424, ...,   5.02512549,
         -6.83541684, -37.35248456],
       [ -2....9.69377232],
       [-37.35248456, -24.4398946 , -16.39454396, ...,  -6.12874257,
        -19.69377232, 100.        ]])
y = array([[  -6.61271573,   47.65692719,  -12.38150206],
       [  30.58230642,   70.01990535,    3.63642093],
       [  ...22685944],
       [ -23.72568845,   28.39552943,  -38.82878853],
       [  -8.90044923,  -11.49348283,  -17.3969092 ]])
n_nonzero_coefs = 3, tol = None, precompute = False, copy_X = True
return_path = False, return_n_iter = False

    def orthogonal_mp_gram(X, y, n_nonzero_coefs=None, tol=None, precompute='auto', copy_X=True, return_path=False, return_n_iter=False):
        """
        Orthogonal Matching Pursuit (OMP) algorithm for sparse linear regression.
    
        Parameters:
        - X: 2D array-like of shape (n_samples, n_features) with unit norm columns.
        - y: 1D or 2D array-like of shape (n_samples,) or (n_samples, n_targets).
        - n_nonzero_coefs: Desired number of non-zero coefficients in the solution.
        - tol: Maximum squared norm of the residual.
        - precompute: Whether to precompute the Gram matrix.
        - copy_X: Whether to copy the input matrix X.
        - return_path: Whether to return the entire coefficient path.
        - return_n_iter: Whether to return the number of iterations.
    
        Returns:
        - coef: Coefficients of the OMP solution.
        - (Optional) n_iter: Number of iterations taken for convergence.
        """
        X = np.array(X, copy=copy_X)
        y = np.array(y, copy=False)
        n_samples, n_features = X.shape
        if y.ndim == 1:
            y = y[:, np.newaxis]
        n_targets = y.shape[1]
        if n_nonzero_coefs is None:
            n_nonzero_coefs = max(1, int(0.1 * n_features))
        if n_nonzero_coefs > n_features:
            raise ValueError('Number of non-zero coefficients cannot exceed the number of features.')
        if precompute == 'auto':
            precompute = n_targets == 1 or n_samples > n_features
        if precompute:
            G = np.dot(X.T, X)
        coef = np.zeros((n_features, n_targets))
        residual = y.copy()
        index_set = []
        path = []
        for n_iter in range(n_nonzero_coefs):
            if precompute:
                correlations = np.dot(X.T, residual)
            else:
                correlations = np.dot(X.T, residual)
            if n_targets == 1:
                correlations = correlations.ravel()
            best_index = np.argmax(np.abs(correlations), axis=0)
            index_set.append(best_index)
            if precompute:
                A = G[np.ix_(index_set, index_set)]
            else:
>               A = np.dot(X[:, index_set].T, X[:, index_set])
E               ValueError: shapes (3,1,35) and (35,1,3) not aligned: 35 (dim 2) != 1 (dim 1)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:66: ValueError
_____________________ test_omp_return_path_prop_with_gram ______________________

    def test_omp_return_path_prop_with_gram():
>       path = orthogonal_mp(X, y, n_nonzero_coefs=5, return_path=True, precompute=True)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py:222: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_omp.py:329: in orthogonal_mp
    return orthogonal_mp_gram(G, Xy, n_nonzero_coefs=n_nonzero_coefs, tol=tol, norms_squared=norms_squared, copy_Gram=copy_X, copy_Xy=False, return_path=return_path)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_omp.py:356: in orthogonal_mp_gram
    return orthogonal_mp_gram(Gram, Xy)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[100.        ,  -2.40443536, -11.84224424, ...,   5.02512549,
         -6.83541684, -37.35248456],
       [ -2....9.69377232],
       [-37.35248456, -24.4398946 , -16.39454396, ...,  -6.12874257,
        -19.69377232, 100.        ]])
y = array([[  -6.61271573,   47.65692719,  -12.38150206],
       [  30.58230642,   70.01990535,    3.63642093],
       [  ...22685944],
       [ -23.72568845,   28.39552943,  -38.82878853],
       [  -8.90044923,  -11.49348283,  -17.3969092 ]])
n_nonzero_coefs = 3, tol = None, precompute = False, copy_X = True
return_path = False, return_n_iter = False

    def orthogonal_mp_gram(X, y, n_nonzero_coefs=None, tol=None, precompute='auto', copy_X=True, return_path=False, return_n_iter=False):
        """
        Orthogonal Matching Pursuit (OMP) algorithm for sparse linear regression.
    
        Parameters:
        - X: 2D array-like of shape (n_samples, n_features) with unit norm columns.
        - y: 1D or 2D array-like of shape (n_samples,) or (n_samples, n_targets).
        - n_nonzero_coefs: Desired number of non-zero coefficients in the solution.
        - tol: Maximum squared norm of the residual.
        - precompute: Whether to precompute the Gram matrix.
        - copy_X: Whether to copy the input matrix X.
        - return_path: Whether to return the entire coefficient path.
        - return_n_iter: Whether to return the number of iterations.
    
        Returns:
        - coef: Coefficients of the OMP solution.
        - (Optional) n_iter: Number of iterations taken for convergence.
        """
        X = np.array(X, copy=copy_X)
        y = np.array(y, copy=False)
        n_samples, n_features = X.shape
        if y.ndim == 1:
            y = y[:, np.newaxis]
        n_targets = y.shape[1]
        if n_nonzero_coefs is None:
            n_nonzero_coefs = max(1, int(0.1 * n_features))
        if n_nonzero_coefs > n_features:
            raise ValueError('Number of non-zero coefficients cannot exceed the number of features.')
        if precompute == 'auto':
            precompute = n_targets == 1 or n_samples > n_features
        if precompute:
            G = np.dot(X.T, X)
        coef = np.zeros((n_features, n_targets))
        residual = y.copy()
        index_set = []
        path = []
        for n_iter in range(n_nonzero_coefs):
            if precompute:
                correlations = np.dot(X.T, residual)
            else:
                correlations = np.dot(X.T, residual)
            if n_targets == 1:
                correlations = correlations.ravel()
            best_index = np.argmax(np.abs(correlations), axis=0)
            index_set.append(best_index)
            if precompute:
                A = G[np.ix_(index_set, index_set)]
            else:
>               A = np.dot(X[:, index_set].T, X[:, index_set])
E               ValueError: shapes (3,1,35) and (35,1,3) not aligned: 35 (dim 2) != 1 (dim 1)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:66: ValueError
________________________ test_omp_reaches_least_squares ________________________

    def test_omp_reaches_least_squares():
        # Use small simple data; it's a sanity check but OMP can stop early
        rng = check_random_state(0)
        n_samples, n_features = (10, 8)
        n_targets = 3
        X = rng.randn(n_samples, n_features)
        Y = rng.randn(n_samples, n_targets)
        omp = OrthogonalMatchingPursuit(n_nonzero_coefs=n_features)
        lstsq = LinearRegression()
>       omp.fit(X, Y)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_omp.py:619: in fit
    coef_, self.n_iter_ = orthogonal_mp_gram(Gram, Xy=Xy, n_nonzero_coefs=self.n_nonzero_coefs_, tol=self.tol, norms_squared=norms_sq, copy_Gram=True, copy_Xy=True, return_n_iter=True)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_omp.py:356: in orthogonal_mp_gram
    return orthogonal_mp_gram(Gram, Xy)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[15.27171517,  1.07699595,  7.03836901, -2.9155821 ,  2.15523654,
         3.20971532,  4.58284238, -1.55114244...     [-1.55114244, -2.03589247, -1.28560571,  3.36562022,  2.40180048,
        -0.3587242 ,  0.06121659,  4.64012724]])
y = array([[ 0.85555733, -0.71056666, -4.54306975],
       [-4.89065182, -0.62298592, -0.63426023],
       [-0.76688859,  ...4901771, -2.90188452],
       [-1.00830809,  2.54439015, -3.73139093],
       [ 1.64094516,  3.25280491,  2.96536116]])
n_nonzero_coefs = 1, tol = None, precompute = False, copy_X = True
return_path = False, return_n_iter = False

    def orthogonal_mp_gram(X, y, n_nonzero_coefs=None, tol=None, precompute='auto', copy_X=True, return_path=False, return_n_iter=False):
        """
        Orthogonal Matching Pursuit (OMP) algorithm for sparse linear regression.
    
        Parameters:
        - X: 2D array-like of shape (n_samples, n_features) with unit norm columns.
        - y: 1D or 2D array-like of shape (n_samples,) or (n_samples, n_targets).
        - n_nonzero_coefs: Desired number of non-zero coefficients in the solution.
        - tol: Maximum squared norm of the residual.
        - precompute: Whether to precompute the Gram matrix.
        - copy_X: Whether to copy the input matrix X.
        - return_path: Whether to return the entire coefficient path.
        - return_n_iter: Whether to return the number of iterations.
    
        Returns:
        - coef: Coefficients of the OMP solution.
        - (Optional) n_iter: Number of iterations taken for convergence.
        """
        X = np.array(X, copy=copy_X)
        y = np.array(y, copy=False)
        n_samples, n_features = X.shape
        if y.ndim == 1:
            y = y[:, np.newaxis]
        n_targets = y.shape[1]
        if n_nonzero_coefs is None:
            n_nonzero_coefs = max(1, int(0.1 * n_features))
        if n_nonzero_coefs > n_features:
            raise ValueError('Number of non-zero coefficients cannot exceed the number of features.')
        if precompute == 'auto':
            precompute = n_targets == 1 or n_samples > n_features
        if precompute:
            G = np.dot(X.T, X)
        coef = np.zeros((n_features, n_targets))
        residual = y.copy()
        index_set = []
        path = []
        for n_iter in range(n_nonzero_coefs):
            if precompute:
                correlations = np.dot(X.T, residual)
            else:
                correlations = np.dot(X.T, residual)
            if n_targets == 1:
                correlations = correlations.ravel()
            best_index = np.argmax(np.abs(correlations), axis=0)
            index_set.append(best_index)
            if precompute:
                A = G[np.ix_(index_set, index_set)]
            else:
>               A = np.dot(X[:, index_set].T, X[:, index_set])
E               ValueError: shapes (3,1,8) and (8,1,3) not aligned: 8 (dim 2) != 1 (dim 1)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:66: ValueError
______________________ test_omp_gram_dtype_match[float32] ______________________

data_type = <class 'numpy.float32'>

    @pytest.mark.parametrize("data_type", (np.float32, np.float64))
    def test_omp_gram_dtype_match(data_type):
        # verify matching input data type and output data type
>       coef = orthogonal_mp_gram(
            G.astype(data_type), Xy.astype(data_type), n_nonzero_coefs=5
        )

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py:259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_omp.py:356: in orthogonal_mp_gram
    return orthogonal_mp_gram(Gram, Xy)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[100.       ,  -2.4044354, -11.842244 , ...,   5.0251255,
         -6.835417 , -37.352486 ],
       [ -2.404435... ],
       [-37.352486 , -24.439894 , -16.394545 , ...,  -6.1287427,
        -19.693773 , 100.       ]], dtype=float32)
y = array([[  -6.6127157,   47.65693  ,  -12.381502 ],
       [  30.582306 ,   70.019905 ,    3.636421 ],
       [   6.513...,
       [ -23.725689 ,   28.395529 ,  -38.82879  ],
       [  -8.900449 ,  -11.493483 ,  -17.39691  ]], dtype=float32)
n_nonzero_coefs = 3, tol = None, precompute = False, copy_X = True
return_path = False, return_n_iter = False

    def orthogonal_mp_gram(X, y, n_nonzero_coefs=None, tol=None, precompute='auto', copy_X=True, return_path=False, return_n_iter=False):
        """
        Orthogonal Matching Pursuit (OMP) algorithm for sparse linear regression.
    
        Parameters:
        - X: 2D array-like of shape (n_samples, n_features) with unit norm columns.
        - y: 1D or 2D array-like of shape (n_samples,) or (n_samples, n_targets).
        - n_nonzero_coefs: Desired number of non-zero coefficients in the solution.
        - tol: Maximum squared norm of the residual.
        - precompute: Whether to precompute the Gram matrix.
        - copy_X: Whether to copy the input matrix X.
        - return_path: Whether to return the entire coefficient path.
        - return_n_iter: Whether to return the number of iterations.
    
        Returns:
        - coef: Coefficients of the OMP solution.
        - (Optional) n_iter: Number of iterations taken for convergence.
        """
        X = np.array(X, copy=copy_X)
        y = np.array(y, copy=False)
        n_samples, n_features = X.shape
        if y.ndim == 1:
            y = y[:, np.newaxis]
        n_targets = y.shape[1]
        if n_nonzero_coefs is None:
            n_nonzero_coefs = max(1, int(0.1 * n_features))
        if n_nonzero_coefs > n_features:
            raise ValueError('Number of non-zero coefficients cannot exceed the number of features.')
        if precompute == 'auto':
            precompute = n_targets == 1 or n_samples > n_features
        if precompute:
            G = np.dot(X.T, X)
        coef = np.zeros((n_features, n_targets))
        residual = y.copy()
        index_set = []
        path = []
        for n_iter in range(n_nonzero_coefs):
            if precompute:
                correlations = np.dot(X.T, residual)
            else:
                correlations = np.dot(X.T, residual)
            if n_targets == 1:
                correlations = correlations.ravel()
            best_index = np.argmax(np.abs(correlations), axis=0)
            index_set.append(best_index)
            if precompute:
                A = G[np.ix_(index_set, index_set)]
            else:
>               A = np.dot(X[:, index_set].T, X[:, index_set])
E               ValueError: shapes (3,1,35) and (35,1,3) not aligned: 35 (dim 2) != 1 (dim 1)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:66: ValueError
______________________ test_omp_gram_dtype_match[float64] ______________________

data_type = <class 'numpy.float64'>

    @pytest.mark.parametrize("data_type", (np.float32, np.float64))
    def test_omp_gram_dtype_match(data_type):
        # verify matching input data type and output data type
>       coef = orthogonal_mp_gram(
            G.astype(data_type), Xy.astype(data_type), n_nonzero_coefs=5
        )

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py:259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_omp.py:356: in orthogonal_mp_gram
    return orthogonal_mp_gram(Gram, Xy)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[100.        ,  -2.40443536, -11.84224424, ...,   5.02512549,
         -6.83541684, -37.35248456],
       [ -2....9.69377232],
       [-37.35248456, -24.4398946 , -16.39454396, ...,  -6.12874257,
        -19.69377232, 100.        ]])
y = array([[  -6.61271573,   47.65692719,  -12.38150206],
       [  30.58230642,   70.01990535,    3.63642093],
       [  ...22685944],
       [ -23.72568845,   28.39552943,  -38.82878853],
       [  -8.90044923,  -11.49348283,  -17.3969092 ]])
n_nonzero_coefs = 3, tol = None, precompute = False, copy_X = True
return_path = False, return_n_iter = False

    def orthogonal_mp_gram(X, y, n_nonzero_coefs=None, tol=None, precompute='auto', copy_X=True, return_path=False, return_n_iter=False):
        """
        Orthogonal Matching Pursuit (OMP) algorithm for sparse linear regression.
    
        Parameters:
        - X: 2D array-like of shape (n_samples, n_features) with unit norm columns.
        - y: 1D or 2D array-like of shape (n_samples,) or (n_samples, n_targets).
        - n_nonzero_coefs: Desired number of non-zero coefficients in the solution.
        - tol: Maximum squared norm of the residual.
        - precompute: Whether to precompute the Gram matrix.
        - copy_X: Whether to copy the input matrix X.
        - return_path: Whether to return the entire coefficient path.
        - return_n_iter: Whether to return the number of iterations.
    
        Returns:
        - coef: Coefficients of the OMP solution.
        - (Optional) n_iter: Number of iterations taken for convergence.
        """
        X = np.array(X, copy=copy_X)
        y = np.array(y, copy=False)
        n_samples, n_features = X.shape
        if y.ndim == 1:
            y = y[:, np.newaxis]
        n_targets = y.shape[1]
        if n_nonzero_coefs is None:
            n_nonzero_coefs = max(1, int(0.1 * n_features))
        if n_nonzero_coefs > n_features:
            raise ValueError('Number of non-zero coefficients cannot exceed the number of features.')
        if precompute == 'auto':
            precompute = n_targets == 1 or n_samples > n_features
        if precompute:
            G = np.dot(X.T, X)
        coef = np.zeros((n_features, n_targets))
        residual = y.copy()
        index_set = []
        path = []
        for n_iter in range(n_nonzero_coefs):
            if precompute:
                correlations = np.dot(X.T, residual)
            else:
                correlations = np.dot(X.T, residual)
            if n_targets == 1:
                correlations = correlations.ravel()
            best_index = np.argmax(np.abs(correlations), axis=0)
            index_set.append(best_index)
            if precompute:
                A = G[np.ix_(index_set, index_set)]
            else:
>               A = np.dot(X[:, index_set].T, X[:, index_set])
E               ValueError: shapes (3,1,35) and (35,1,3) not aligned: 35 (dim 2) != 1 (dim 1)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:66: ValueError
_____________________ test_omp_gram_numerical_consistency ______________________

    def test_omp_gram_numerical_consistency():
        # verify numericaly consistency among np.float32 and np.float64
>       coef_32 = orthogonal_mp_gram(
            G.astype(np.float32), Xy.astype(np.float32), n_nonzero_coefs=5
        )

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py:267: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_omp.py:356: in orthogonal_mp_gram
    return orthogonal_mp_gram(Gram, Xy)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[100.       ,  -2.4044354, -11.842244 , ...,   5.0251255,
         -6.835417 , -37.352486 ],
       [ -2.404435... ],
       [-37.352486 , -24.439894 , -16.394545 , ...,  -6.1287427,
        -19.693773 , 100.       ]], dtype=float32)
y = array([[  -6.6127157,   47.65693  ,  -12.381502 ],
       [  30.582306 ,   70.019905 ,    3.636421 ],
       [   6.513...,
       [ -23.725689 ,   28.395529 ,  -38.82879  ],
       [  -8.900449 ,  -11.493483 ,  -17.39691  ]], dtype=float32)
n_nonzero_coefs = 3, tol = None, precompute = False, copy_X = True
return_path = False, return_n_iter = False

    def orthogonal_mp_gram(X, y, n_nonzero_coefs=None, tol=None, precompute='auto', copy_X=True, return_path=False, return_n_iter=False):
        """
        Orthogonal Matching Pursuit (OMP) algorithm for sparse linear regression.
    
        Parameters:
        - X: 2D array-like of shape (n_samples, n_features) with unit norm columns.
        - y: 1D or 2D array-like of shape (n_samples,) or (n_samples, n_targets).
        - n_nonzero_coefs: Desired number of non-zero coefficients in the solution.
        - tol: Maximum squared norm of the residual.
        - precompute: Whether to precompute the Gram matrix.
        - copy_X: Whether to copy the input matrix X.
        - return_path: Whether to return the entire coefficient path.
        - return_n_iter: Whether to return the number of iterations.
    
        Returns:
        - coef: Coefficients of the OMP solution.
        - (Optional) n_iter: Number of iterations taken for convergence.
        """
        X = np.array(X, copy=copy_X)
        y = np.array(y, copy=False)
        n_samples, n_features = X.shape
        if y.ndim == 1:
            y = y[:, np.newaxis]
        n_targets = y.shape[1]
        if n_nonzero_coefs is None:
            n_nonzero_coefs = max(1, int(0.1 * n_features))
        if n_nonzero_coefs > n_features:
            raise ValueError('Number of non-zero coefficients cannot exceed the number of features.')
        if precompute == 'auto':
            precompute = n_targets == 1 or n_samples > n_features
        if precompute:
            G = np.dot(X.T, X)
        coef = np.zeros((n_features, n_targets))
        residual = y.copy()
        index_set = []
        path = []
        for n_iter in range(n_nonzero_coefs):
            if precompute:
                correlations = np.dot(X.T, residual)
            else:
                correlations = np.dot(X.T, residual)
            if n_targets == 1:
                correlations = correlations.ravel()
            best_index = np.argmax(np.abs(correlations), axis=0)
            index_set.append(best_index)
            if precompute:
                A = G[np.ix_(index_set, index_set)]
            else:
>               A = np.dot(X[:, index_set].T, X[:, index_set])
E               ValueError: shapes (3,1,35) and (35,1,3) not aligned: 35 (dim 2) != 1 (dim 1)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:66: ValueError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_correct_shapes_gram
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_tol
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_with_without_gram
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_with_without_gram_tol
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_unreachable_accuracy
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_perfect_signal_recovery
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_orthogonal_mp_gram_readonly
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_swapped_regressors
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_path
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_return_path_prop_with_gram
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_reaches_least_squares
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_gram_dtype_match[float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_gram_dtype_match[float64]
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_gram_numerical_consistency
=================== 14 failed, 9 passed, 6 warnings in 0.61s ===================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 23 items

../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_correct_shapes I: Seeding RNGs with 159714933
PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_correct_shapes_gram PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_n_nonzero_coefs PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_tol PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_with_without_gram PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_with_without_gram_tol PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_unreachable_accuracy PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_bad_input[keyword_params0-positional_params0] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_bad_input[keyword_params0-positional_params1] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_perfect_signal_recovery PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_orthogonal_mp_gram_readonly PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_estimator PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_estimator_n_nonzero_coefs PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_identical_regressors PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_swapped_regressors PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_no_atoms PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_path PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_return_path_prop_with_gram PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_cv PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_reaches_least_squares PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_gram_dtype_match[float32] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_gram_dtype_match[float64] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_gram_numerical_consistency PASSED

======================== 23 passed, 6 warnings in 0.24s ========================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 23 items

../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_correct_shapes I: Seeding RNGs with 745254368
PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_correct_shapes_gram PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_n_nonzero_coefs PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_tol PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_with_without_gram PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_with_without_gram_tol PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_unreachable_accuracy PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_bad_input[keyword_params0-positional_params0] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_bad_input[keyword_params0-positional_params1] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_perfect_signal_recovery PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_orthogonal_mp_gram_readonly PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_estimator PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_estimator_n_nonzero_coefs PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_identical_regressors PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_swapped_regressors PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_no_atoms PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_path PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_return_path_prop_with_gram PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_cv PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_reaches_least_squares PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_gram_dtype_match[float32] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_gram_dtype_match[float64] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_omp.py::test_omp_gram_numerical_consistency PASSED

======================== 23 passed, 6 warnings in 0.23s ========================
