output file:
processed_deepchemwigner_D372.json
function:
wigner_D
Error Cases:
2025-02-13 23:01:21.428316: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739505681.439443 1522266 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
E0000 00:00:1739505681.442848 1522266 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
2025-02-13 23:01:21.455314: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_orthogonality', '../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_unitary_property FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_unitary_property', '../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_orthogonality FAILED'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/deepchem/deepchem/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/deepchem/deepchem
configfile: setup.cfg
plugins: flaky-3.8.1
collecting ... collected 14 items

../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_device FAILED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_dtype_conversion PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_j_0 PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_j_2 PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_orthogonality FAILED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_commutation PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_generators_shape PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_j0 PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_j1 PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_commutation PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_generators_angular_momentum_one PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_generators_shape PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_generators_zero_momenta PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_unitary_property FAILED

=================================== FAILURES ===================================
________ TestEquivarianceUtils.test_change_basis_real_to_complex_device ________

self = <deepchem.utils.test.test_equivariance_utils.TestEquivarianceUtils testMethod=test_change_basis_real_to_complex_device>

    @unittest.skipIf(not has_torch, "torch is not available")
    def test_change_basis_real_to_complex_device(self) -> None:
        # Test for device placement (CPU to CUDA)
        j = 1
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        Q = equivariance_utils.change_basis_real_to_complex(j, device=device)
>       self.assertEqual(Q.device, device)
E       AssertionError: device(type='cuda', index=0) != device(type='cuda')

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py:111: AssertionError
___________________ TestEquivarianceUtils.test_orthogonality ___________________

self = <deepchem.utils.test.test_equivariance_utils.TestEquivarianceUtils testMethod=test_orthogonality>

    @unittest.skipIf(not has_torch, "torch is not available")
    def test_orthogonality(self):
        j = 2
        alpha = torch.tensor([0.2])
        beta = torch.tensor([0.1])
        gamma = torch.tensor([0.7])
    
>       D_matrix = equivariance_utils.wigner_D(j, alpha, beta, gamma)

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/equivariance_utils.py:232: in wigner_D
    return wigner_D(k, alpha, beta, gamma)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

k = 2, alpha = tensor([0.2000]), beta = tensor([0.1000])
gamma = tensor([0.7000])

    def wigner_D(k: int, alpha: torch.Tensor, beta: torch.Tensor, gamma: torch.Tensor) -> torch.Tensor:
        """
        Compute the Wigner D-matrix for the SO(3) rotation group.
    
        Parameters
        ----------
        k : int
            The representation index, which determines the order of the representation.
        alpha : torch.Tensor
            Rotation angles (in radians) around the Z axis, applied third.
        beta : torch.Tensor
            Rotation angles (in radians) around the Y axis, applied second.
        gamma : torch.Tensor
            Rotation angles (in radians) around the Z axis, applied first.
    
        Returns
        -------
        torch.Tensor
            The Wigner D matrix of shape (#angles, 2k+1, 2k+1).
        """
        alpha = alpha.view(-1)
        beta = beta.view(-1)
        gamma = gamma.view(-1)
        num_angles = alpha.size(0)
        D = torch.zeros((num_angles, 2 * k + 1, 2 * k + 1), dtype=torch.complex128)
        for m in range(-k, k + 1):
            for n in range(-k, k + 1):
                d_mn = torch.zeros(num_angles, dtype=torch.complex128)
                for s in range(max(0, m - n), min(k + m, k - n) + 1):
>                   prefactor = (-1) ** (m - n + s) * torch.sqrt(factorial(k + m) * factorial(k - m) * factorial(k + n) * factorial(k - n)) / (factorial(k + m - s) * factorial(k - n - s) * factorial(s) * factorial(s + n - m))
E                   TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not numpy.float64

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/temp.py:36: TypeError
_________________ TestEquivarianceUtils.test_unitary_property __________________

self = <deepchem.utils.test.test_equivariance_utils.TestEquivarianceUtils testMethod=test_unitary_property>

    @unittest.skipIf(not has_torch, "torch is not available")
    def test_unitary_property(self):
        j = 2
        alpha = torch.tensor([0.2])
        beta = torch.tensor([0.1])
        gamma = torch.tensor([0.7])
    
>       D_matrix = equivariance_utils.wigner_D(j, alpha, beta, gamma)

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py:177: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/equivariance_utils.py:232: in wigner_D
    return wigner_D(k, alpha, beta, gamma)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

k = 2, alpha = tensor([0.2000]), beta = tensor([0.1000])
gamma = tensor([0.7000])

    def wigner_D(k: int, alpha: torch.Tensor, beta: torch.Tensor, gamma: torch.Tensor) -> torch.Tensor:
        """
        Compute the Wigner D-matrix for the SO(3) rotation group.
    
        Parameters
        ----------
        k : int
            The representation index, which determines the order of the representation.
        alpha : torch.Tensor
            Rotation angles (in radians) around the Z axis, applied third.
        beta : torch.Tensor
            Rotation angles (in radians) around the Y axis, applied second.
        gamma : torch.Tensor
            Rotation angles (in radians) around the Z axis, applied first.
    
        Returns
        -------
        torch.Tensor
            The Wigner D matrix of shape (#angles, 2k+1, 2k+1).
        """
        alpha = alpha.view(-1)
        beta = beta.view(-1)
        gamma = gamma.view(-1)
        num_angles = alpha.size(0)
        D = torch.zeros((num_angles, 2 * k + 1, 2 * k + 1), dtype=torch.complex128)
        for m in range(-k, k + 1):
            for n in range(-k, k + 1):
                d_mn = torch.zeros(num_angles, dtype=torch.complex128)
                for s in range(max(0, m - n), min(k + m, k - n) + 1):
>                   prefactor = (-1) ** (m - n + s) * torch.sqrt(factorial(k + m) * factorial(k - m) * factorial(k + n) * factorial(k - n)) / (factorial(k + m - s) * factorial(k - n - s) * factorial(s) * factorial(s + n - m))
E                   TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not numpy.float64

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/temp.py:36: TypeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_device
FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_orthogonality
FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_unitary_property
========================= 3 failed, 11 passed in 4.15s =========================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/deepchem/deepchem/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/deepchem/deepchem
configfile: setup.cfg
plugins: flaky-3.8.1
collecting ... collected 14 items

../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_device FAILED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_dtype_conversion PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_j_0 PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_j_2 PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_orthogonality PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_commutation PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_generators_shape PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_j0 PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_j1 PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_commutation PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_generators_angular_momentum_one PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_generators_shape PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_generators_zero_momenta PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_unitary_property PASSED

=================================== FAILURES ===================================
________ TestEquivarianceUtils.test_change_basis_real_to_complex_device ________

self = <deepchem.utils.test.test_equivariance_utils.TestEquivarianceUtils testMethod=test_change_basis_real_to_complex_device>

    @unittest.skipIf(not has_torch, "torch is not available")
    def test_change_basis_real_to_complex_device(self) -> None:
        # Test for device placement (CPU to CUDA)
        j = 1
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        Q = equivariance_utils.change_basis_real_to_complex(j, device=device)
>       self.assertEqual(Q.device, device)
E       AssertionError: device(type='cuda', index=0) != device(type='cuda')

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py:111: AssertionError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_device
========================= 1 failed, 13 passed in 4.17s =========================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/deepchem/deepchem/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/deepchem/deepchem
configfile: setup.cfg
plugins: flaky-3.8.1
collecting ... collected 14 items

../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_device FAILED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_dtype_conversion PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_j_0 PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_j_2 PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_orthogonality PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_commutation PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_generators_shape PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_j0 PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_j1 PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_commutation PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_generators_angular_momentum_one PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_generators_shape PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_generators_zero_momenta PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_unitary_property PASSED

=================================== FAILURES ===================================
________ TestEquivarianceUtils.test_change_basis_real_to_complex_device ________

self = <deepchem.utils.test.test_equivariance_utils.TestEquivarianceUtils testMethod=test_change_basis_real_to_complex_device>

    @unittest.skipIf(not has_torch, "torch is not available")
    def test_change_basis_real_to_complex_device(self) -> None:
        # Test for device placement (CPU to CUDA)
        j = 1
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        Q = equivariance_utils.change_basis_real_to_complex(j, device=device)
>       self.assertEqual(Q.device, device)
E       AssertionError: device(type='cuda', index=0) != device(type='cuda')

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py:111: AssertionError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_device
========================= 1 failed, 13 passed in 4.14s =========================
