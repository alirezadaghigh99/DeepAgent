output file:
processed_pfrl_apply_categorical_projection258.json
function:
_apply_categorical_projection
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pfrl/pfrl/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pfrl/pfrl
configfile: pytest.ini
collecting ... collected 40 items

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7] FAILED

=================================== FAILURES ===================================
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range0-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7651019838d0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[0.2062, 0.6061]]), y_probs = tensor([[0.9660, 0.0340]])
z = tensor([-3., -1.])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range0-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcab7d0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 3.4034, -0.8081],
        [-0.2131, -0.0728],
        [-0.1681, -0.8968],
        [ 0.5052,  1.2994],
        [ 0.7867,  0.2629],
        [-0.3553,  0.1321],
        [ 0.4944,  0.7115]])
y_probs = tensor([[0.1436, 0.8564],
        [0.3694, 0.6306],
        [0.2416, 0.7584],
        [0.5978, 0.4022],
        [0.0944, 0.9056],
        [0.0788, 0.9212],
        [0.2935, 0.7065]])
z = tensor([-3., -1.])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range0-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcab950>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 1.6078, -0.6770,  0.6044, -0.1852, -0.2521]])
y_probs = tensor([[4.7312e-02, 2.0495e-01, 1.5356e-01, 4.0149e-04, 5.9377e-01]])
z = tensor([-3.0000, -2.5000, -2.0000, -1.5000, -1.0000])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range0-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcabad0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.0221, -0.2724, -0.9760,  0.5941,  1.4810],
        [-1.5024, -0.0526,  0.1092,  0.2442, -0.1575],
        ...0.9935],
        [-0.9170, -0.8034, -1.5504,  0.5477, -1.4051],
        [ 0.0932, -0.2713,  2.5893,  0.5037,  1.5483]])
y_probs = tensor([[0.3691, 0.0383, 0.1136, 0.3837, 0.0953],
        [0.1378, 0.3815, 0.0220, 0.0342, 0.4246],
        [0.0772, 0..., 0.0605, 0.1025],
        [0.2615, 0.5289, 0.0142, 0.0965, 0.0990],
        [0.5983, 0.0293, 0.0420, 0.0237, 0.3068]])
z = tensor([-3.0000, -2.5000, -2.0000, -1.5000, -1.0000])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range1-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcabc50>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.5996, -0.5264]]), y_probs = tensor([[0.1996, 0.8004]])
z = tensor([-2.,  0.])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range1-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcabe10>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.1670, -0.6330],
        [ 0.6631,  1.3248],
        [ 0.3936, -0.3297],
        [-1.1958, -1.0000],
        [ 0.8963, -1.6671],
        [-2.8698, -1.2131],
        [ 1.6711,  1.0673]])
y_probs = tensor([[0.7969, 0.2031],
        [0.9902, 0.0098],
        [0.6336, 0.3664],
        [0.1663, 0.8337],
        [0.5018, 0.4982],
        [0.9417, 0.0583],
        [0.2672, 0.7328]])
z = tensor([-2.,  0.])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range1-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcb4110>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 1.4650,  0.9015, -0.1216,  0.6476,  0.5422]])
y_probs = tensor([[0.0207, 0.2328, 0.2084, 0.2126, 0.3255]])
z = tensor([-2.0000, -1.5000, -1.0000, -0.5000,  0.0000])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range1-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcb43d0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.2157,  0.0093, -2.3159, -1.6929, -0.7691],
        [-0.4064, -0.7092, -0.7219,  0.9975,  0.6269],
        ...0.3127],
        [-2.0621, -0.9183,  0.1913,  0.0059, -1.0675],
        [-0.0704, -0.4981, -0.0318, -0.8737, -0.2291]])
y_probs = tensor([[0.2001, 0.1239, 0.0614, 0.4544, 0.1601],
        [0.0455, 0.5116, 0.2925, 0.1198, 0.0306],
        [0.1697, 0..., 0.3137, 0.2277],
        [0.1551, 0.3423, 0.0688, 0.1042, 0.3296],
        [0.1562, 0.1034, 0.0011, 0.3405, 0.3988]])
z = tensor([-2.0000, -1.5000, -1.0000, -0.5000,  0.0000])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range2-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcb4690>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.4569, -0.6881]]), y_probs = tensor([[0.7453, 0.2547]])
z = tensor([-2.,  1.])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range2-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcb4910>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.1866,  1.2359],
        [ 0.9288,  1.1066],
        [ 1.2642, -1.0822],
        [-1.2663, -0.8222],
        [ 1.2513,  0.0546],
        [ 2.0923, -0.2536],
        [-0.3819, -0.1418]])
y_probs = tensor([[0.2009, 0.7991],
        [0.9524, 0.0476],
        [0.3918, 0.6082],
        [0.9396, 0.0604],
        [0.0263, 0.9737],
        [0.5435, 0.4565],
        [0.4506, 0.5494]])
z = tensor([-2.,  1.])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range2-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcb4bd0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.6460,  0.9850, -1.4136,  0.4048,  0.5920]])
y_probs = tensor([[0.0657, 0.1168, 0.5322, 0.1775, 0.1077]])
z = tensor([-2.0000, -1.2500, -0.5000,  0.2500,  1.0000])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range2-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcb4e90>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.3747, -0.6899,  0.6033, -1.4914, -0.2133],
        [ 0.1743,  0.0260,  2.9062,  0.1967,  0.7903],
        ...0.2765],
        [ 0.1978,  0.5253,  0.7738, -1.4319, -0.5380],
        [ 0.9028, -0.9105, -0.0093,  0.2400,  0.0486]])
y_probs = tensor([[0.6609, 0.0523, 0.0307, 0.0946, 0.1615],
        [0.5146, 0.2459, 0.0136, 0.1232, 0.1027],
        [0.2695, 0..., 0.0016, 0.3413],
        [0.0728, 0.2873, 0.0621, 0.1197, 0.4581],
        [0.1598, 0.2033, 0.2494, 0.3815, 0.0060]])
z = tensor([-2.0000, -1.2500, -0.5000,  0.2500,  1.0000])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range3-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcb5150>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.0184,  0.2967]]), y_probs = tensor([[0.1600, 0.8400]])
z = tensor([0., 1.])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range3-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcb5450>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.3832, -1.0955],
        [-0.1599, -0.7236],
        [ 0.5421,  0.9643],
        [ 0.1840, -0.0888],
        [-1.3628, -0.1389],
        [ 2.2443,  0.6611],
        [-0.6919,  2.5775]])
y_probs = tensor([[0.9712, 0.0288],
        [0.3969, 0.6031],
        [0.2223, 0.7777],
        [0.4825, 0.5175],
        [0.1224, 0.8776],
        [0.9443, 0.0557],
        [0.5484, 0.4516]])
z = tensor([0., 1.])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range3-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcb5790>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.9161, -0.1799, -0.0818, -0.9418, -1.1850]])
y_probs = tensor([[0.0997, 0.1016, 0.0661, 0.3231, 0.4094]])
z = tensor([0.0000, 0.2500, 0.5000, 0.7500, 1.0000])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range3-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcb5ad0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.1280, -1.0174, -0.3449, -0.8222, -0.3513],
        [ 1.4438,  0.1608,  2.0526,  0.9760,  0.9705],
        ...1.1600],
        [ 0.0377, -0.1955,  1.2727,  1.5189,  0.6518],
        [ 0.4571,  0.3399, -0.8260, -0.7598, -1.8084]])
y_probs = tensor([[0.0250, 0.0431, 0.3530, 0.2566, 0.3223],
        [0.6545, 0.0339, 0.1817, 0.0725, 0.0574],
        [0.1044, 0..., 0.0345, 0.2535],
        [0.0097, 0.3038, 0.0092, 0.0061, 0.6712],
        [0.4733, 0.0486, 0.0316, 0.0444, 0.4020]])
z = tensor([0.0000, 0.2500, 0.5000, 0.7500, 1.0000])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range4-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcb5e10>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-1.6064,  1.0550]]), y_probs = tensor([[0.7367, 0.2633]])
z = tensor([1., 5.])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range4-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcb6150>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.7781, -0.4316],
        [-1.1519, -1.4727],
        [ 1.0360,  0.1110],
        [-0.4819, -0.6476],
        [ 0.7497,  1.1905],
        [-0.9765,  1.3310],
        [ 1.1425, -0.6684]])
y_probs = tensor([[0.8705, 0.1295],
        [0.3061, 0.6939],
        [0.2853, 0.7147],
        [0.0211, 0.9789],
        [0.8997, 0.1003],
        [0.7688, 0.2312],
        [0.9388, 0.0612]])
z = tensor([1., 5.])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range4-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcb6490>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.0484, -1.0006, -0.8903, -1.2802, -1.1612]])
y_probs = tensor([[0.0143, 0.0991, 0.3665, 0.1796, 0.3404]])
z = tensor([1., 2., 3., 4., 5.])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range4-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcb67d0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-1.0447,  1.4135, -1.6693, -1.5073,  0.1474],
        [-1.0027,  0.0152,  0.9329, -0.4711,  0.5839],
        ...0.6905],
        [ 0.3445, -0.5196,  1.2333, -1.0875, -0.8099],
        [ 0.1309,  0.0144, -0.3810,  1.2333,  0.7498]])
y_probs = tensor([[0.5548, 0.0741, 0.2016, 0.1327, 0.0367],
        [0.3450, 0.2427, 0.1726, 0.1912, 0.0485],
        [0.3840, 0..., 0.0185, 0.0009],
        [0.3366, 0.2749, 0.0966, 0.2544, 0.0375],
        [0.1843, 0.0962, 0.1763, 0.4217, 0.1215]])
z = tensor([1., 2., 3., 4., 5.])

    def _apply_categorical_projection(y, y_probs, z):
        """
        Apply categorical projection to calculate the probabilities of atoms whose values are z.
    
        Args:
            y (ndarray): Values of atoms before projection with shape (batch_size, n_atoms).
            y_probs (ndarray): Probabilities of atoms with shape (batch_size, n_atoms).
            z (ndarray): Values of atoms after projection with shape (n_atoms,).
    
        Returns:
            ndarray: Probabilities of atoms whose values are z with shape (batch_size, n_atoms).
        """
        assert y.shape == y_probs.shape, 'y and y_probs must have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z must match'
        batch_size, n_atoms = y.shape
        z_probs = np.zeros((batch_size, n_atoms), dtype=np.float32)
        delta_z = z[1] - z[0]
        for b in range(batch_size):
            for j in range(n_atoms):
                bj = (y[b, j] - z[0]) / delta_z
>               l = np.floor(bj).astype(int)
E               AttributeError: 'Tensor' object has no attribute 'astype'

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range0-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcb7fd0>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(1.9676, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range0-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcc0210>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(1.7322, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range0-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcc0910>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(6.4510, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range0-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcc2c90>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(7.3212, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range1-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcc2e10>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(1.3913, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range1-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcc2fd0>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(0.7761, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range1-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcc3290>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(5.3040, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range1-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcc3550>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(2.8506, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range2-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcc3810>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(1.0508, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range2-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcc3a90>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(0.9393, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range2-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcc3d50>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(3.3345, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range2-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcd0050>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(1.8419, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range3-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcd0310>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(1.1797, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range3-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcd0610>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(-0.5859, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range3-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcd0950>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(-0.5188, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range3-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcd0c90>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(10.9699, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range4-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcd0fd0>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(-0.4565, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range4-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcd1310>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(0.0033, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range4-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcd1650>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(-0.9377, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range4-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7650ddcd1990>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: in _apply_categorical_projection
    l = np.floor(bj).astype(int)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor(-1.0535, device='cuda:0'), dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/venv/lib/python3.11/site-packages/torch/_tensor.py:1149: TypeError
=============================== warnings summary ===============================
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

tests/agents_tests/test_categorical_dqn.py: 20 warnings
  /local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)
    l = np.floor(bj).astype(int)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7]
======================= 40 failed, 24 warnings in 2.21s ========================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pfrl/pfrl/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pfrl/pfrl
configfile: pytest.ini
collecting ... collected 40 items

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7] PASSED

=============================== warnings summary ===============================
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 40 passed, 4 warnings in 1.17s ========================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pfrl/pfrl/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pfrl/pfrl
configfile: pytest.ini
collecting ... collected 40 items

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7] PASSED

=============================== warnings summary ===============================
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 40 passed, 4 warnings in 1.30s ========================
