output file:
processed_pyro_standard_stable387.json
function:
_standard_stable
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0--0.5-0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.5-0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0--1.0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.9-1.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8--0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-1]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape1-sample_shape0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5--1]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.5-0.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0--0.5-0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3--0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1-0.0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.0-0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7--0.5-1.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0-1.0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7-0.0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5--1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.9-0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape2-sample_shape0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8-0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4-0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.9-0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.0-0.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7--0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape1-sample_shape2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0-0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0--0.5-1.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8-0.0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99-1.0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99--0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1--0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1--1.0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape1-sample_shape1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3-0.0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.0-0.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7-0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4--1.0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999--1.0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-2_1]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4-0.0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3-0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_variance[2.0-0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape1-sample_shape2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-2_1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99--1.0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.5-1.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0--0.5-1.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-2_0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999-1.0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0-0.0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7--0.5-0.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4--0.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999--1.0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001-1.0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001--0.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999-0.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.0-1.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99-1.0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.0-0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape2-sample_shape0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8--1.0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.5-1.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0--0.5-1.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1--0.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.5-1.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999-0.0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7--0.5-1.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7-0.0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7--1.0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01-1.0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01-0.0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.0-1.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001--0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8-1.0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4-1.0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.9-0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.5-1.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99-0.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001--1.0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.5-0.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.9-1.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.0-1.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8-0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape1-sample_shape0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001-0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0-1.0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4--0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-2_1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_variance[2.0-0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-2_1]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1-0.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0-0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-2_1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001--1.0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1--1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2--1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.0-1.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3--1.0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.0-1.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3-1.0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-2_0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4-0.0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3--0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7-0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99--1.0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99--0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3-0.0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01--1.0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape2-sample_shape1]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01--0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0-0.0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.9-0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7--0.5-0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.9-1.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999--0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0--0.5-0.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7-1.0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7--0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-2_0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0--0.5-1.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01--0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001-0.0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.5-1.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7--0.5-0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1-1.0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.0-1.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape2-sample_shape2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999--0.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8-0.0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.0-0.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1-1.0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape2-sample_shape1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01--1.0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7--0.5-1.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001-0.0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3-1.0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.0-1.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99-0.0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4-0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-2_0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-2_1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.9-0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.5-0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999-0.0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0--1.0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.9-1.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99-0.0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01-0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3--1.0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3-0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-2_0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7--0.5-0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.5-1.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4--1.0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8--0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_variance[2.0-1.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001-0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-1]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2--1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.0-0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1--1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0--0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7--0.5-1.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01-0.0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4-1.0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-1]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0--0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-2_0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01-0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.9-1.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0--0.5-0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.9-1.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.9-1.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.9-1.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.0-1.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999-0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.5-1.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7--1.0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001-1.0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape2-sample_shape2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999-1.0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape1-sample_shape1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.5-0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8-1.0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.5-1.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_variance[2.0-1.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.9-0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.5-0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.0-0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.5-0.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.5-0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99-0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7-1.0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1--1.0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1-0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.0-0.5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.9-0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8--1.0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01-1.0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.9-0.5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1-0.0] FAILED'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pyro/pyro/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pyro/pyro
configfile: setup.cfg
plugins: typeguard-4.4.1, jaxtyping-0.2.19
collecting ... collected 687 items

../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape0-sample_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape0-sample_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape0-sample_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape1-sample_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape1-sample_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape1-sample_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape2-sample_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape2-sample_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape2-sample_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5--1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-2_0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-2_1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1--1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-2_0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-2_1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2--1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-2_0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-2_1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7--0.5-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7--0.5-1.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.0-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.0-1.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.5-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.5-1.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.9-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.9-1.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0--0.5-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0--0.5-1.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.0-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.0-1.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.5-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.5-1.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.9-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.9-1.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7--0.5-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7--0.5-1.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.0-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.0-1.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.5-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.5-1.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.9-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.9-1.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0--0.5-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0--0.5-1.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.0-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.0-1.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.5-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.5-1.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.9-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.9-1.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_variance[1.7-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_variance[1.7-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_variance[2.0-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_variance[2.0-1.5] FAILED

=================================== FAILURES ===================================
____________________ test_shape[batch_shape1-sample_shape0] ____________________

sample_shape = (), batch_shape = (4,)

    @pytest.mark.parametrize("sample_shape", [(), (7,), (6, 5)])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (3, 2)])
    def test_shape(sample_shape, batch_shape):
        stability = torch.empty(batch_shape).uniform_(0, 2).requires_grad_()
        skew = torch.empty(batch_shape).uniform_(-1, 1).requires_grad_()
        scale = torch.randn(batch_shape).exp().requires_grad_()
        loc = torch.randn(batch_shape).requires_grad_()
    
        d = dist.Stable(stability, skew, scale, loc)
        assert d.batch_shape == batch_shape
    
>       x = d.rsample(sample_shape)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False]),), kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
____________________ test_shape[batch_shape1-sample_shape1] ____________________

sample_shape = (7,), batch_shape = (4,)

    @pytest.mark.parametrize("sample_shape", [(), (7,), (6, 5)])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (3, 2)])
    def test_shape(sample_shape, batch_shape):
        stability = torch.empty(batch_shape).uniform_(0, 2).requires_grad_()
        skew = torch.empty(batch_shape).uniform_(-1, 1).requires_grad_()
        scale = torch.randn(batch_shape).exp().requires_grad_()
        loc = torch.randn(batch_shape).requires_grad_()
    
        d = dist.Stable(stability, skew, scale, loc)
        assert d.batch_shape == batch_shape
    
>       x = d.rsample(sample_shape)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False]),), kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
____________________ test_shape[batch_shape1-sample_shape2] ____________________

sample_shape = (6, 5), batch_shape = (4,)

    @pytest.mark.parametrize("sample_shape", [(), (7,), (6, 5)])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (3, 2)])
    def test_shape(sample_shape, batch_shape):
        stability = torch.empty(batch_shape).uniform_(0, 2).requires_grad_()
        skew = torch.empty(batch_shape).uniform_(-1, 1).requires_grad_()
        scale = torch.randn(batch_shape).exp().requires_grad_()
        loc = torch.randn(batch_shape).requires_grad_()
    
        d = dist.Stable(stability, skew, scale, loc)
        assert d.batch_shape == batch_shape
    
>       x = d.rsample(sample_shape)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False]),), kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
____________________ test_shape[batch_shape2-sample_shape0] ____________________

sample_shape = (), batch_shape = (3, 2)

    @pytest.mark.parametrize("sample_shape", [(), (7,), (6, 5)])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (3, 2)])
    def test_shape(sample_shape, batch_shape):
        stability = torch.empty(batch_shape).uniform_(0, 2).requires_grad_()
        skew = torch.empty(batch_shape).uniform_(-1, 1).requires_grad_()
        scale = torch.randn(batch_shape).exp().requires_grad_()
        loc = torch.randn(batch_shape).requires_grad_()
    
        d = dist.Stable(stability, skew, scale, loc)
        assert d.batch_shape == batch_shape
    
>       x = d.rsample(sample_shape)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([[False, False],
        [False, False],
        [False, False]]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
____________________ test_shape[batch_shape2-sample_shape1] ____________________

sample_shape = (7,), batch_shape = (3, 2)

    @pytest.mark.parametrize("sample_shape", [(), (7,), (6, 5)])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (3, 2)])
    def test_shape(sample_shape, batch_shape):
        stability = torch.empty(batch_shape).uniform_(0, 2).requires_grad_()
        skew = torch.empty(batch_shape).uniform_(-1, 1).requires_grad_()
        scale = torch.randn(batch_shape).exp().requires_grad_()
        loc = torch.randn(batch_shape).requires_grad_()
    
        d = dist.Stable(stability, skew, scale, loc)
        assert d.batch_shape == batch_shape
    
>       x = d.rsample(sample_shape)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([[False, False],
        [False, False],
        [False, False]]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
____________________ test_shape[batch_shape2-sample_shape2] ____________________

sample_shape = (6, 5), batch_shape = (3, 2)

    @pytest.mark.parametrize("sample_shape", [(), (7,), (6, 5)])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (3, 2)])
    def test_shape(sample_shape, batch_shape):
        stability = torch.empty(batch_shape).uniform_(0, 2).requires_grad_()
        skew = torch.empty(batch_shape).uniform_(-1, 1).requires_grad_()
        scale = torch.randn(batch_shape).exp().requires_grad_()
        loc = torch.randn(batch_shape).requires_grad_()
    
        d = dist.Stable(stability, skew, scale, loc)
        assert d.batch_shape == batch_shape
    
>       x = d.rsample(sample_shape)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([[False, False],
        [False, False],
        [False, False]]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
____________________________ test_sample[0.1--1.0] _____________________________

alpha = 0.1, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d03880>],
      dtype=object)
args = (array(0.1), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.1--0.5] _____________________________

alpha = 0.1, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x78099b5bbd80>],
      dtype=object)
args = (array(0.1), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.1-0.0] _____________________________

alpha = 0.1, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x78099ab04040>],
      dtype=object)
args = (array(0.1), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.1-0.5] _____________________________

alpha = 0.1, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d03d80>],
      dtype=object)
args = (array(0.1), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.1-1.0] _____________________________

alpha = 0.1, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d03740>],
      dtype=object)
args = (array(0.1), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.4--1.0] _____________________________

alpha = 0.4, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x78099b5bbce0>],
      dtype=object)
args = (array(0.4), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.4--0.5] _____________________________

alpha = 0.4, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d03880>],
      dtype=object)
args = (array(0.4), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.4-0.0] _____________________________

alpha = 0.4, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d03f60>],
      dtype=object)
args = (array(0.4), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.4-0.5] _____________________________

alpha = 0.4, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d194e0>],
      dtype=object)
args = (array(0.4), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.4-1.0] _____________________________

alpha = 0.4, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d196c0>],
      dtype=object)
args = (array(0.4), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.8--1.0] _____________________________

alpha = 0.8, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d034c0>],
      dtype=object)
args = (array(0.8), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.8--0.5] _____________________________

alpha = 0.8, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d03f60>],
      dtype=object)
args = (array(0.8), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.8-0.0] _____________________________

alpha = 0.8, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d1a480>],
      dtype=object)
args = (array(0.8), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.8-0.5] _____________________________

alpha = 0.8, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d19580>],
      dtype=object)
args = (array(0.8), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.8-1.0] _____________________________

alpha = 0.8, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d19c60>],
      dtype=object)
args = (array(0.8), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99--1.0] ____________________________

alpha = 0.99, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d1a700>],
      dtype=object)
args = (array(0.99), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99--0.5] ____________________________

alpha = 0.99, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d19f80>],
      dtype=object)
args = (array(0.99), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99-0.0] _____________________________

alpha = 0.99, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d194e0>],
      dtype=object)
args = (array(0.99), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99-0.5] _____________________________

alpha = 0.99, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d1b2e0>],
      dtype=object)
args = (array(0.99), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99-1.0] _____________________________

alpha = 0.99, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d1bc40>],
      dtype=object)
args = (array(0.99), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.0--1.0] _____________________________

ar = array([[1.0, -1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, -1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
____________________________ test_sample[1.0--0.5] _____________________________

ar = array([[1.0, -0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, -0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
_____________________________ test_sample[1.0-0.0] _____________________________

ar = array([[1.0, 0.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, 0.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
_____________________________ test_sample[1.0-0.5] _____________________________

ar = array([[1.0, 0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, 0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
_____________________________ test_sample[1.0-1.0] _____________________________

ar = array([[1.0, 1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, 1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
____________________________ test_sample[1.01--1.0] ____________________________

alpha = 1.01, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d1a700>],
      dtype=object)
args = (array(1.01), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01--0.5] ____________________________

alpha = 1.01, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d1ab60>],
      dtype=object)
args = (array(1.01), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01-0.0] _____________________________

alpha = 1.01, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d194e0>],
      dtype=object)
args = (array(1.01), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01-0.5] _____________________________

alpha = 1.01, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998ddd9e0>],
      dtype=object)
args = (array(1.01), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01-1.0] _____________________________

alpha = 1.01, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998dde980>],
      dtype=object)
args = (array(1.01), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.3--1.0] _____________________________

alpha = 1.3, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998dde520>],
      dtype=object)
args = (array(1.3), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.3--0.5] _____________________________

alpha = 1.3, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998ddf060>],
      dtype=object)
args = (array(1.3), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.3-0.0] _____________________________

alpha = 1.3, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998ddd760>],
      dtype=object)
args = (array(1.3), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.3-0.5] _____________________________

alpha = 1.3, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998ddf6a0>],
      dtype=object)
args = (array(1.3), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.3-1.0] _____________________________

alpha = 1.3, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998ddc220>],
      dtype=object)
args = (array(1.3), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.7--1.0] _____________________________

alpha = 1.7, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998ddc9a0>],
      dtype=object)
args = (array(1.7), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.7--0.5] _____________________________

alpha = 1.7, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998ddf380>],
      dtype=object)
args = (array(1.7), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.7-0.0] _____________________________

alpha = 1.7, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998ddede0>],
      dtype=object)
args = (array(1.7), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.7-0.5] _____________________________

alpha = 1.7, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998ddc220>],
      dtype=object)
args = (array(1.7), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.7-1.0] _____________________________

alpha = 1.7, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998ddf7e0>],
      dtype=object)
args = (array(1.7), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[2.0--1.0] _____________________________

alpha = 2.0, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998ddf380>],
      dtype=object)
args = (array(2.), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[2.0--0.5] _____________________________

alpha = 2.0, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998ddede0>],
      dtype=object)
args = (array(2.), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[2.0-0.0] _____________________________

alpha = 2.0, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998ddc220>],
      dtype=object)
args = (array(2.), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[2.0-0.5] _____________________________

alpha = 2.0, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998d0a160>],
      dtype=object)
args = (array(2.), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[2.0-1.0] _____________________________

alpha = 2.0, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7809c59fa210>
x = array([<function test_sample.<locals>.sampler at 0x780998ddf6a0>],
      dtype=object)
args = (array(2.), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
___________________________ test_sample_2[0.1--1.0] ____________________________

alpha = 0.1, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(-4.923725977287201e-10), statistic_sign=np.int8(1)).pvalue
E        +    where KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(-4.923725977287201e-10), statistic_sign=np.int8(1)) = ks_2samp(array([-3.15145151e-02, -4.95554071e-03, -2.15762100e-02, ...,\n       -5.15118098e+00, -8.74745631e+04, -2.02801722e+03]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[0.1--0.5] ____________________________

alpha = 0.1, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.7572), pvalue=np.float64(0.0), statistic_location=np.float64(-8.199633666435544e-11), statistic_sign=np.int8(1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.7572), pvalue=np.float64(0.0), statistic_location=np.float64(-8.199633666435544e-11), statistic_sign=np.int8(1)) = ks_2samp(array([-9.14970934e-03, -2.04022809e-03, -7.82603321e-03, ...,\n        9.21775743e+05, -3.12243038e+04, -9.20866368e+02]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
____________________________ test_sample_2[0.1-0.0] ____________________________

alpha = 0.1, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 5.11785953e-02, -5.80212785e-04, -2.08754904e-03, ...,\n        1.68885624e+08, -8.22789148e+03,  9.56071062e+02]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
____________________________ test_sample_2[0.1-0.5] ____________________________

alpha = 0.1, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.7452), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.7452), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 1.79823741e-01,  6.18581675e-05, -8.04847564e-05, ...,\n        5.03937445e+09, -3.88542356e+02,  3.89268738e+03]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
____________________________ test_sample_2[0.1-1.0] ____________________________

alpha = 0.1, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([4.24037597e-01, 2.76752321e-04, 3.88606886e-04, ...,\n       6.31184682e+10, 1.37396759e+03, 8.25840093e+03]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[0.4--1.0] ____________________________

alpha = 0.4, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(-0.015816132860939212), statistic_sign=np.int8(1)).pvalue
E        +    where KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(-0.015816132860939212), statistic_sign=np.int8(1)) = ks_2samp(array([ -0.36958303,  -0.95129527,  -1.7578711 , ...,  -0.69918619,\n       -23.19323362,  -2.69387547]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[0.4--0.5] ____________________________

alpha = 0.4, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.7835), pvalue=np.float64(0.0), statistic_location=np.float64(-4.082171846929814e-05), statistic_sign=np.int8(1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.7835), pvalue=np.float64(0.0), statistic_location=np.float64(-4.082171846929814e-05), statistic_sign=np.int8(1)) = ks_2samp(array([-1.13388414e-01, -5.02053420e-01, -9.22924691e-01, ...,\n        2.36755016e+02, -1.21662232e+01, -1.16165988e+00]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
____________________________ test_sample_2[0.4-0.0] ____________________________

alpha = 0.4, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 3.22706852e-01, -1.74426505e-01, -3.45791714e-01, ...,\n        1.28469841e+03, -4.58203177e+00,  8.56311616e-01]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
____________________________ test_sample_2[0.4-0.5] ____________________________

alpha = 0.4, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.7709), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.7709), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 9.60268486e-01,  4.32302263e-02,  4.02527651e-03, ...,\n        3.48651020e+03, -2.56050733e-02,  3.39103670e+00]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
____________________________ test_sample_2[0.4-1.0] ____________________________

alpha = 0.4, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([1.81894101e+00, 1.63816257e-01, 1.61425176e-01, ...,\n       7.10067631e+03, 1.97971122e+00, 6.47193077e+00]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[0.8--1.0] ____________________________

alpha = 0.8, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(-1.4097892075917142), statistic_sign=np.int8(1)).pvalue
E        +    where KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(-1.4097892075917142), statistic_sign=np.int8(1)) = ks_2samp(array([-2.50029797, -4.0107703 , -4.9522371 , ..., -2.65124692,\n       -7.71639653, -3.59607831]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[0.8--0.5] ____________________________

alpha = 0.8, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.9), pvalue=np.float64(0.0), statistic_location=np.float64(-0.002495670814712031), statistic_sign=np.int8(1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.9), pvalue=np.float64(0.0), statistic_location=np.float64(-0.002495670814712031), statistic_sign=np.int8(1)) = ks_2samp(array([-1.05374667, -2.23997229, -2.85698394, ..., 18.0370582 ,\n       -4.46762402, -1.66285945]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
____________________________ test_sample_2[0.8-0.0] ____________________________

alpha = 0.8, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 0.59768584, -0.59650758, -0.93576523, ..., 48.85162985,\n       -1.49184648,  0.40209787]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
____________________________ test_sample_2[0.8-0.5] ____________________________

alpha = 0.8, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.8962), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.8962), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 2.40942689,  0.89013834,  0.76016929, ..., 84.34855825,\n        1.12878518,  2.58243471]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
____________________________ test_sample_2[0.8-1.0] ____________________________

alpha = 0.8, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([  4.35334197,   2.17113217,   2.13121305, ..., 123.17125921,\n         3.23176515,   4.86552117]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[0.99--1.0] ___________________________

alpha = 0.99, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(-61.48882219544935), statistic_sign=np.int8(1)).pvalue
E        +    where KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(-61.48882219544935), statistic_sign=np.int8(1)) = ks_2samp(array([-62.9888824 , -64.7814344 , -65.63989068, ..., -63.07826619,\n       -66.87031923, -63.96484349]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[0.99--0.5] ___________________________

alpha = 0.99, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.9965), pvalue=np.float64(0.0), statistic_location=np.float64(-0.34831322374101636), statistic_sign=np.int8(1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.9965), pvalue=np.float64(0.0), statistic_location=np.float64(-0.34831322374101636), statistic_sign=np.int8(1)) = ks_2samp(array([-31.23233676, -32.7312869 , -33.33050718, ..., -21.44241079,\n       -33.97704428, -31.84053088]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[0.99-0.0] ____________________________

alpha = 0.99, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 0.70439384, -0.78569262, -1.14706366, ..., 22.18546851,\n       -1.21400539,  0.37261383]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[0.99-0.5] ____________________________

alpha = 0.99, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.9944), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.9944), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([32.76951947, 31.0204107 , 30.8555917 , ..., 66.22164918,\n       31.36066202, 32.6598371 ]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[0.99-1.0] ____________________________

alpha = 0.99, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 64.93300759,  62.62346178,  62.55608524, ..., 110.48402742,\n        63.61545429,  65.01026226]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
_________________________ test_sample_2[0.999999--1.0] _________________________

alpha = 0.999999, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(-636617.5578790483), statistic_sign=np.int8(1)).pvalue
E        +    where KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(-636617.5578790483), statistic_sign=np.int8(1)) = ks_2samp(array([-636619.09970922, -636620.9053101 , -636621.75876601, ...,\n       -636619.18617831, -636622.93271684, -636620.07135295]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
_________________________ test_sample_2[0.999999--0.5] _________________________

alpha = 0.999999, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(-316864.4955791214), statistic_sign=np.int8(1)).pvalue
E        +    where KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(-316864.4955791214), statistic_sign=np.int8(1)) = ks_2samp(array([-318309.28431281, -318310.79869382, -318311.39608723, ...,\n       -318299.794864  , -318312.00537882, -318309.89329279]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
_________________________ test_sample_2[0.999999-0.0] __________________________

alpha = 0.999999, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 0.70972915, -0.7952902 , -1.15715138, ..., 21.41222973,\n       -1.20368666,  0.37176742]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
_________________________ test_sample_2[0.999999-0.5] __________________________

alpha = 0.999999, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([318310.83049343, 318309.06981598, 318308.90333456, ...,\n       318342.95650739, 318309.41530177, 318310.70925523]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
_________________________ test_sample_2[0.999999-1.0] __________________________

alpha = 0.999999, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([636621.04803183, 636618.73266516, 636618.66365749, ...,\n       636664.68072027, 636619.72194812, 636621.1084149 ]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
_________________________ test_sample_2[1.000001--1.0] _________________________

alpha = 1.000001, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([636620.44485423, 636618.63952851, 636617.78616564, ...,\n       636620.36321965, 636616.61212496, 636619.47359889]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
_________________________ test_sample_2[1.000001--0.5] _________________________

alpha = 1.000001, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([318310.48809463, 318308.97375839, 318308.37635614, ...,\n       318319.97752165, 318307.76707415, 318309.87914001]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
_________________________ test_sample_2[1.000001-0.0] __________________________

alpha = 1.000001, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 0.70973022, -0.79529212, -1.15715339, ..., 21.41207885,\n       -1.20368463,  0.37176725]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
_________________________ test_sample_2[1.000001-0.5] __________________________

alpha = 1.000001, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(-313964.10594951716), statistic_sign=np.int8(1)).pvalue
E        +    where KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(-313964.10594951716), statistic_sign=np.int8(1)) = ks_2samp(array([-318308.94191255, -318310.70264003, -318310.86906018, ...,\n       -318276.81615903, -318310.35716442, -318309.06316234]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
_________________________ test_sample_2[1.000001-1.0] __________________________

alpha = 1.000001, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(-630823.4282643283), statistic_sign=np.int8(1)).pvalue
E        +    where KstestResult(statistic=np.float64(1.0), pvalue=np.float64(0.0), statistic_location=np.float64(-630823.4282643283), statistic_sign=np.int8(1)) = ks_2samp(array([-636618.49681771, -636620.81205521, -636620.88083396, ...,\n       -636574.86448012, -636619.82284293, -636618.43642685]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[1.01--1.0] ___________________________

alpha = 1.01, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.9897), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.9897), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([64.33387444, 62.51559891, 61.66736756, ..., 64.2509503 ,\n       60.54801795, 63.36678797]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[1.01--0.5] ___________________________

alpha = 1.01, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.9849), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.9849), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([32.43606753, 30.90640207, 30.31089505, ..., 41.63703667,\n       29.73787878, 31.82624939]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[1.01-0.0] ____________________________

alpha = 1.01, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 0.71504171, -0.80485521, -1.16715019, ..., 20.67584422,\n       -1.19367388,  0.37097147]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[1.01-0.5] ____________________________

alpha = 1.01, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.9855), pvalue=np.float64(0.0), statistic_location=np.float64(-0.012519488055332692), statistic_sign=np.int8(1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.9855), pvalue=np.float64(0.0), statistic_location=np.float64(-0.012519488055332692), statistic_sign=np.int8(1)) = ks_2samp(array([-3.08809281e+01, -3.26531652e+01, -3.28212557e+01, ...,\n       -1.25194881e-02, -3.23024367e+01, -3.10134704e+01]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[1.01-1.0] ____________________________

alpha = 1.01, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.9918), pvalue=np.float64(0.0), statistic_location=np.float64(-0.9685508887421201), statistic_sign=np.int8(1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.9918), pvalue=np.float64(0.0), statistic_location=np.float64(-0.9685508887421201), statistic_sign=np.int8(1)) = ks_2samp(array([-62.38165712, -64.70261778, -64.77317472, ..., -20.5624475 ,\n       -63.71590399, -62.33767691]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[1.3--1.0] ____________________________

alpha = 1.3, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.763), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.763), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 2.77300538,  0.63733495, -0.05079895, ...,  2.78748095,\n       -0.09042718,  1.89326328]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[1.3--0.5] ____________________________

alpha = 1.3, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.6869), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.6869), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 1.75844891, -0.18231575, -0.70232745, ...,  5.86373065,\n       -0.51963884,  1.10609033]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
____________________________ test_sample_2[1.3-0.0] ____________________________

alpha = 1.3, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 0.86113751, -1.06924891, -1.42523312, ...,  8.79158162,\n       -0.99737411,  0.36333326]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
____________________________ test_sample_2[1.3-0.5] ____________________________

alpha = 1.3, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.6905), pvalue=np.float64(0.0), statistic_location=np.float64(-0.0002941517592540463), statistic_sign=np.int8(1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.6905), pvalue=np.float64(0.0), statistic_location=np.float64(-0.0002941517592540463), statistic_sign=np.int8(1)) = ks_2samp(array([ 0.04265203, -2.0515895 , -2.26055067, ..., 11.45674658,\n       -1.55243391, -0.34339889]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
____________________________ test_sample_2[1.3-1.0] ____________________________

alpha = 1.3, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.775), pvalue=np.float64(0.0), statistic_location=np.float64(-0.0010877047910435639), statistic_sign=np.int8(1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.775), pvalue=np.float64(0.0), statistic_location=np.float64(-0.0010877047910435639), statistic_sign=np.int8(1)) = ks_2samp(array([-0.71860681, -3.1824104 , -3.30511332, ..., 13.94843563,\n       -2.25456708, -1.02021152]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[1.7--1.0] ____________________________

alpha = 1.7, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.5891), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.5891), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 1.52021865, -0.985973  , -1.44415652, ...,  1.69316727,\n       -0.75004335,  0.69593238]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[1.7--0.5] ____________________________

alpha = 1.7, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.5487), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.5487), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 1.27107822, -1.18750241, -1.5754103 , ...,  2.6014173 ,\n       -0.81182978,  0.53234522]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
____________________________ test_sample_2[1.7-0.0] ____________________________

alpha = 1.7, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 1.05316468, -1.41307491, -1.73296067, ...,  3.44493307,\n       -0.88686574,  0.37845239]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
____________________________ test_sample_2[1.7-0.5] ____________________________

alpha = 1.7, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.5445), pvalue=np.float64(0.0), statistic_location=np.float64(-0.00012511392934856495), statistic_sign=np.int8(1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.5445), pvalue=np.float64(0.0), statistic_location=np.float64(-0.00012511392934856495), statistic_sign=np.int8(1)) = ks_2samp(array([ 0.85881303, -1.67029988, -1.92912422, ...,  4.16879436,\n       -0.9816211 ,  0.23294617]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
____________________________ test_sample_2[1.7-1.0] ____________________________

alpha = 1.7, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.5862), pvalue=np.float64(0.0), statistic_location=np.float64(-0.0004078507295679264), statistic_sign=np.int8(1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.5862), pvalue=np.float64(0.0), statistic_location=np.float64(-0.0004078507295679264), statistic_sign=np.int8(1)) = ks_2samp(array([ 0.68285115, -1.97096135, -2.18662922, ...,  4.81498771,\n       -1.10829189,  0.09476771]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[2.0--1.0] ____________________________

alpha = 2.0, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 1.20746185, -1.68463049, -1.9933968 , ...,  1.53315049,\n       -0.87626082,  0.39939476]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
___________________________ test_sample_2[2.0--0.5] ____________________________

alpha = 2.0, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 1.20746185, -1.68463049, -1.9933968 , ...,  1.53315049,\n       -0.87626082,  0.39939476]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
____________________________ test_sample_2[2.0-0.0] ____________________________

alpha = 2.0, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 1.20746185, -1.68463049, -1.9933968 , ...,  1.53315049,\n       -0.87626082,  0.39939476]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
____________________________ test_sample_2[2.0-0.5] ____________________________

alpha = 2.0, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 1.20746185, -1.68463049, -1.9933968 , ...,  1.53315049,\n       -0.87626082,  0.39939476]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
____________________________ test_sample_2[2.0-1.0] ____________________________

alpha = 2.0, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize(
        "alpha",
        [
            0.1,
            0.4,
            0.8,
            0.99,
            0.999999,
            1.000001,  # scipy sampler is buggy very close to 1
            1.01,
            1.3,
            1.7,
            2.0,
        ],
    )
    def test_sample_2(alpha, beta):
        num_samples = 10000
    
        d = dist.Stable(alpha, beta, coords="S")
        # Temporarily increase radius to test hole-patching logic.
        # Scipy doesn't handle values of alpha very close to 1.
        try:
            old = pyro.distributions.stable.RADIUS
            pyro.distributions.stable.RADIUS = 0.02
            actual = d.sample([num_samples])
        finally:
            pyro.distributions.stable.RADIUS = old
        actual = d.sample([num_samples])
    
        expected = levy_stable.rvs(alpha, beta, size=num_samples)
    
>       assert ks_2samp(expected, actual).pvalue > 0.05
E       assert np.float64(0.0) > 0.05
E        +  where np.float64(0.0) = KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)).pvalue
E        +    where KstestResult(statistic=np.float64(0.5035), pvalue=np.float64(0.0), statistic_location=np.float64(0.0), statistic_sign=np.int8(-1)) = ks_2samp(array([ 1.20746185, -1.68463049, -1.9933968 , ...,  1.53315049,\n       -0.87626082,  0.39939476]), tensor([0., 0., 0.,  ..., 0., 0., 0.]))

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:94: AssertionError
______________________________ test_normal[0.5-0] ______________________________

loc = 0, scale = 0.5

    @pytest.mark.parametrize("loc", [0, 1, -1, 2, 2])
    @pytest.mark.parametrize("scale", [0.5, 1, 2])
    def test_normal(loc, scale):
        num_samples = 100000
        expected = dist.Normal(loc, scale).sample([num_samples])
        actual = dist.Stable(2, 0, scale * 0.5**0.5, loc).sample([num_samples])
        assert_close(actual.mean(), expected.mean(), atol=0.01)
>       assert_close(actual.std(), expected.std(), atol=0.01)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor(0.), b = tensor(0.5002), prec = 0.01
msg = '0.0 vs 0.5001658280512051'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: 0.0 vs 0.5001658280512051

/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:170: AssertionError
______________________________ test_normal[0.5-1] ______________________________

loc = 1, scale = 0.5

    @pytest.mark.parametrize("loc", [0, 1, -1, 2, 2])
    @pytest.mark.parametrize("scale", [0.5, 1, 2])
    def test_normal(loc, scale):
        num_samples = 100000
        expected = dist.Normal(loc, scale).sample([num_samples])
        actual = dist.Stable(2, 0, scale * 0.5**0.5, loc).sample([num_samples])
        assert_close(actual.mean(), expected.mean(), atol=0.01)
>       assert_close(actual.std(), expected.std(), atol=0.01)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor(0.), b = tensor(0.5002), prec = 0.01
msg = '0.0 vs 0.5001658280512051'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: 0.0 vs 0.5001658280512051

/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:170: AssertionError
_____________________________ test_normal[0.5--1] ______________________________

loc = -1, scale = 0.5

    @pytest.mark.parametrize("loc", [0, 1, -1, 2, 2])
    @pytest.mark.parametrize("scale", [0.5, 1, 2])
    def test_normal(loc, scale):
        num_samples = 100000
        expected = dist.Normal(loc, scale).sample([num_samples])
        actual = dist.Stable(2, 0, scale * 0.5**0.5, loc).sample([num_samples])
        assert_close(actual.mean(), expected.mean(), atol=0.01)
>       assert_close(actual.std(), expected.std(), atol=0.01)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor(0.), b = tensor(0.5002), prec = 0.01
msg = '0.0 vs 0.5001658280512051'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: 0.0 vs 0.5001658280512051

/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:170: AssertionError
_____________________________ test_normal[0.5-2_0] _____________________________

loc = 2, scale = 0.5

    @pytest.mark.parametrize("loc", [0, 1, -1, 2, 2])
    @pytest.mark.parametrize("scale", [0.5, 1, 2])
    def test_normal(loc, scale):
        num_samples = 100000
        expected = dist.Normal(loc, scale).sample([num_samples])
        actual = dist.Stable(2, 0, scale * 0.5**0.5, loc).sample([num_samples])
        assert_close(actual.mean(), expected.mean(), atol=0.01)
>       assert_close(actual.std(), expected.std(), atol=0.01)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor(0.), b = tensor(0.5002), prec = 0.01
msg = '0.0 vs 0.5001658280512051'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: 0.0 vs 0.5001658280512051

/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:170: AssertionError
_____________________________ test_normal[0.5-2_1] _____________________________

loc = 2, scale = 0.5

    @pytest.mark.parametrize("loc", [0, 1, -1, 2, 2])
    @pytest.mark.parametrize("scale", [0.5, 1, 2])
    def test_normal(loc, scale):
        num_samples = 100000
        expected = dist.Normal(loc, scale).sample([num_samples])
        actual = dist.Stable(2, 0, scale * 0.5**0.5, loc).sample([num_samples])
        assert_close(actual.mean(), expected.mean(), atol=0.01)
>       assert_close(actual.std(), expected.std(), atol=0.01)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor(0.), b = tensor(0.5002), prec = 0.01
msg = '0.0 vs 0.5001658280512051'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: 0.0 vs 0.5001658280512051

/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:170: AssertionError
_______________________________ test_normal[1-0] _______________________________

loc = 0, scale = 1

    @pytest.mark.parametrize("loc", [0, 1, -1, 2, 2])
    @pytest.mark.parametrize("scale", [0.5, 1, 2])
    def test_normal(loc, scale):
        num_samples = 100000
        expected = dist.Normal(loc, scale).sample([num_samples])
        actual = dist.Stable(2, 0, scale * 0.5**0.5, loc).sample([num_samples])
        assert_close(actual.mean(), expected.mean(), atol=0.01)
>       assert_close(actual.std(), expected.std(), atol=0.01)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor(0.), b = tensor(1.0003), prec = 0.01
msg = '0.0 vs 1.0003316561024103'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: 0.0 vs 1.0003316561024103

/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:170: AssertionError
_______________________________ test_normal[1-1] _______________________________

loc = 1, scale = 1

    @pytest.mark.parametrize("loc", [0, 1, -1, 2, 2])
    @pytest.mark.parametrize("scale", [0.5, 1, 2])
    def test_normal(loc, scale):
        num_samples = 100000
        expected = dist.Normal(loc, scale).sample([num_samples])
        actual = dist.Stable(2, 0, scale * 0.5**0.5, loc).sample([num_samples])
        assert_close(actual.mean(), expected.mean(), atol=0.01)
>       assert_close(actual.std(), expected.std(), atol=0.01)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor(0.), b = tensor(1.0003), prec = 0.01
msg = '0.0 vs 1.0003316561024103'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: 0.0 vs 1.0003316561024103

/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:170: AssertionError
______________________________ test_normal[1--1] _______________________________

loc = -1, scale = 1

    @pytest.mark.parametrize("loc", [0, 1, -1, 2, 2])
    @pytest.mark.parametrize("scale", [0.5, 1, 2])
    def test_normal(loc, scale):
        num_samples = 100000
        expected = dist.Normal(loc, scale).sample([num_samples])
        actual = dist.Stable(2, 0, scale * 0.5**0.5, loc).sample([num_samples])
        assert_close(actual.mean(), expected.mean(), atol=0.01)
>       assert_close(actual.std(), expected.std(), atol=0.01)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor(0.), b = tensor(1.0003), prec = 0.01
msg = '0.0 vs 1.0003316561024103'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: 0.0 vs 1.0003316561024103

/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:170: AssertionError
______________________________ test_normal[1-2_0] ______________________________

loc = 2, scale = 1

    @pytest.mark.parametrize("loc", [0, 1, -1, 2, 2])
    @pytest.mark.parametrize("scale", [0.5, 1, 2])
    def test_normal(loc, scale):
        num_samples = 100000
        expected = dist.Normal(loc, scale).sample([num_samples])
        actual = dist.Stable(2, 0, scale * 0.5**0.5, loc).sample([num_samples])
        assert_close(actual.mean(), expected.mean(), atol=0.01)
>       assert_close(actual.std(), expected.std(), atol=0.01)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor(0.), b = tensor(1.0003), prec = 0.01
msg = '0.0 vs 1.0003316561024103'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: 0.0 vs 1.0003316561024103

/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:170: AssertionError
______________________________ test_normal[1-2_1] ______________________________

loc = 2, scale = 1

    @pytest.mark.parametrize("loc", [0, 1, -1, 2, 2])
    @pytest.mark.parametrize("scale", [0.5, 1, 2])
    def test_normal(loc, scale):
        num_samples = 100000
        expected = dist.Normal(loc, scale).sample([num_samples])
        actual = dist.Stable(2, 0, scale * 0.5**0.5, loc).sample([num_samples])
        assert_close(actual.mean(), expected.mean(), atol=0.01)
>       assert_close(actual.std(), expected.std(), atol=0.01)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor(0.), b = tensor(1.0003), prec = 0.01
msg = '0.0 vs 1.0003316561024103'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: 0.0 vs 1.0003316561024103

/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:170: AssertionError
_______________________________ test_normal[2-0] _______________________________

loc = 0, scale = 2

    @pytest.mark.parametrize("loc", [0, 1, -1, 2, 2])
    @pytest.mark.parametrize("scale", [0.5, 1, 2])
    def test_normal(loc, scale):
        num_samples = 100000
        expected = dist.Normal(loc, scale).sample([num_samples])
        actual = dist.Stable(2, 0, scale * 0.5**0.5, loc).sample([num_samples])
        assert_close(actual.mean(), expected.mean(), atol=0.01)
>       assert_close(actual.std(), expected.std(), atol=0.01)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor(0.), b = tensor(2.0007), prec = 0.01
msg = '0.0 vs 2.0006633122048205'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: 0.0 vs 2.0006633122048205

/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:170: AssertionError
_______________________________ test_normal[2-1] _______________________________

loc = 1, scale = 2

    @pytest.mark.parametrize("loc", [0, 1, -1, 2, 2])
    @pytest.mark.parametrize("scale", [0.5, 1, 2])
    def test_normal(loc, scale):
        num_samples = 100000
        expected = dist.Normal(loc, scale).sample([num_samples])
        actual = dist.Stable(2, 0, scale * 0.5**0.5, loc).sample([num_samples])
        assert_close(actual.mean(), expected.mean(), atol=0.01)
>       assert_close(actual.std(), expected.std(), atol=0.01)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor(0.), b = tensor(2.0007), prec = 0.01
msg = '0.0 vs 2.0006633122048205'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: 0.0 vs 2.0006633122048205

/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:170: AssertionError
______________________________ test_normal[2--1] _______________________________

loc = -1, scale = 2

    @pytest.mark.parametrize("loc", [0, 1, -1, 2, 2])
    @pytest.mark.parametrize("scale", [0.5, 1, 2])
    def test_normal(loc, scale):
        num_samples = 100000
        expected = dist.Normal(loc, scale).sample([num_samples])
        actual = dist.Stable(2, 0, scale * 0.5**0.5, loc).sample([num_samples])
        assert_close(actual.mean(), expected.mean(), atol=0.01)
>       assert_close(actual.std(), expected.std(), atol=0.01)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor(0.), b = tensor(2.0007), prec = 0.01
msg = '0.0 vs 2.0006633122048205'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: 0.0 vs 2.0006633122048205

/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:170: AssertionError
______________________________ test_normal[2-2_0] ______________________________

loc = 2, scale = 2

    @pytest.mark.parametrize("loc", [0, 1, -1, 2, 2])
    @pytest.mark.parametrize("scale", [0.5, 1, 2])
    def test_normal(loc, scale):
        num_samples = 100000
        expected = dist.Normal(loc, scale).sample([num_samples])
        actual = dist.Stable(2, 0, scale * 0.5**0.5, loc).sample([num_samples])
        assert_close(actual.mean(), expected.mean(), atol=0.01)
>       assert_close(actual.std(), expected.std(), atol=0.01)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor(0.), b = tensor(2.0007), prec = 0.01
msg = '0.0 vs 2.0006633122048205'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: 0.0 vs 2.0006633122048205

/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:170: AssertionError
______________________________ test_normal[2-2_1] ______________________________

loc = 2, scale = 2

    @pytest.mark.parametrize("loc", [0, 1, -1, 2, 2])
    @pytest.mark.parametrize("scale", [0.5, 1, 2])
    def test_normal(loc, scale):
        num_samples = 100000
        expected = dist.Normal(loc, scale).sample([num_samples])
        actual = dist.Stable(2, 0, scale * 0.5**0.5, loc).sample([num_samples])
        assert_close(actual.mean(), expected.mean(), atol=0.01)
>       assert_close(actual.std(), expected.std(), atol=0.01)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor(0.), b = tensor(2.0007), prec = 0.01
msg = '0.0 vs 2.0006633122048205'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: 0.0 vs 2.0006633122048205

/local/data0/moved_data/publishablew/pyro/pyro/tests/common.py:170: AssertionError
__________________________ test_mean[S0-1.7--0.5-0.5] __________________________

stability = 1.7, skew = -0.5, scale = 0.5, coords = 'S0'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S0-1.7--0.5-1.5] __________________________

stability = 1.7, skew = -0.5, scale = 1.5, coords = 'S0'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S0-1.7-0.0-0.5] ___________________________

stability = 1.7, skew = 0.0, scale = 0.5, coords = 'S0'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S0-1.7-0.0-1.5] ___________________________

stability = 1.7, skew = 0.0, scale = 1.5, coords = 'S0'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S0-1.7-0.5-0.5] ___________________________

stability = 1.7, skew = 0.5, scale = 0.5, coords = 'S0'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S0-1.7-0.5-1.5] ___________________________

stability = 1.7, skew = 0.5, scale = 1.5, coords = 'S0'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S0-1.7-0.9-0.5] ___________________________

stability = 1.7, skew = 0.9, scale = 0.5, coords = 'S0'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S0-1.7-0.9-1.5] ___________________________

stability = 1.7, skew = 0.9, scale = 1.5, coords = 'S0'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S0-2.0--0.5-0.5] __________________________

stability = 2.0, skew = -0.5, scale = 0.5, coords = 'S0'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S0-2.0--0.5-1.5] __________________________

stability = 2.0, skew = -0.5, scale = 1.5, coords = 'S0'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S0-2.0-0.0-0.5] ___________________________

stability = 2.0, skew = 0.0, scale = 0.5, coords = 'S0'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S0-2.0-0.0-1.5] ___________________________

stability = 2.0, skew = 0.0, scale = 1.5, coords = 'S0'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S0-2.0-0.5-0.5] ___________________________

stability = 2.0, skew = 0.5, scale = 0.5, coords = 'S0'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S0-2.0-0.5-1.5] ___________________________

stability = 2.0, skew = 0.5, scale = 1.5, coords = 'S0'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S0-2.0-0.9-0.5] ___________________________

stability = 2.0, skew = 0.9, scale = 0.5, coords = 'S0'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S0-2.0-0.9-1.5] ___________________________

stability = 2.0, skew = 0.9, scale = 1.5, coords = 'S0'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S-1.7--0.5-0.5] ___________________________

stability = 1.7, skew = -0.5, scale = 0.5, coords = 'S'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S-1.7--0.5-1.5] ___________________________

stability = 1.7, skew = -0.5, scale = 1.5, coords = 'S'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
___________________________ test_mean[S-1.7-0.0-0.5] ___________________________

stability = 1.7, skew = 0.0, scale = 0.5, coords = 'S'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
___________________________ test_mean[S-1.7-0.0-1.5] ___________________________

stability = 1.7, skew = 0.0, scale = 1.5, coords = 'S'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
___________________________ test_mean[S-1.7-0.5-0.5] ___________________________

stability = 1.7, skew = 0.5, scale = 0.5, coords = 'S'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
___________________________ test_mean[S-1.7-0.5-1.5] ___________________________

stability = 1.7, skew = 0.5, scale = 1.5, coords = 'S'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
___________________________ test_mean[S-1.7-0.9-0.5] ___________________________

stability = 1.7, skew = 0.9, scale = 0.5, coords = 'S'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
___________________________ test_mean[S-1.7-0.9-1.5] ___________________________

stability = 1.7, skew = 0.9, scale = 1.5, coords = 'S'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S-2.0--0.5-0.5] ___________________________

stability = 2.0, skew = -0.5, scale = 0.5, coords = 'S'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
__________________________ test_mean[S-2.0--0.5-1.5] ___________________________

stability = 2.0, skew = -0.5, scale = 1.5, coords = 'S'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
___________________________ test_mean[S-2.0-0.0-0.5] ___________________________

stability = 2.0, skew = 0.0, scale = 0.5, coords = 'S'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
___________________________ test_mean[S-2.0-0.0-1.5] ___________________________

stability = 2.0, skew = 0.0, scale = 1.5, coords = 'S'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
___________________________ test_mean[S-2.0-0.5-0.5] ___________________________

stability = 2.0, skew = 0.5, scale = 0.5, coords = 'S'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
___________________________ test_mean[S-2.0-0.5-1.5] ___________________________

stability = 2.0, skew = 0.5, scale = 1.5, coords = 'S'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
___________________________ test_mean[S-2.0-0.9-0.5] ___________________________

stability = 2.0, skew = 0.9, scale = 0.5, coords = 'S'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
___________________________ test_mean[S-2.0-0.9-1.5] ___________________________

stability = 2.0, skew = 0.9, scale = 1.5, coords = 'S'

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("skew", [-0.5, 0.0, 0.5, 0.9])
    @pytest.mark.parametrize("stability", [0.5, 1.0, 1.7, 2.0])
    @pytest.mark.parametrize("coords", ["S0", "S"])
    def test_mean(stability, skew, scale, coords):
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc, coords=coords)
        if stability <= 1:
            assert torch.isnan(d.mean).all()
        else:
>           expected = d.sample((100000,)).mean(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
____________________________ test_variance[2.0-0.5] ____________________________

stability = 2.0, scale = 0.5

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("stability", [1.7, 2.0])
    def test_variance(stability, scale):
        skew = dist.Uniform(-1, 1).sample((10,))
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc)
        if stability < 2:
            assert torch.isinf(d.variance).all()
        else:
>           expected = d.sample((100000,)).var(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:152: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
____________________________ test_variance[2.0-1.5] ____________________________

stability = 2.0, scale = 1.5

    @pytest.mark.parametrize("scale", [0.5, 1.5])
    @pytest.mark.parametrize("stability", [1.7, 2.0])
    def test_variance(stability, scale):
        skew = dist.Uniform(-1, 1).sample((10,))
        loc = torch.randn(10)
        d = dist.Stable(stability, skew, scale, loc)
        if stability < 2:
            assert torch.isinf(d.variance).all()
        else:
>           expected = d.sample((100000,)).var(0)

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:152: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/distribution.py:167: in sample
    return self.rsample(sample_shape)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:163: in rsample
    x = _standard_stable(self.stability, self.skew, aux_uniform, aux_exponential, coords=self.coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/stable.py:29: in _standard_stable
    return _standard_stable(alpha, beta, aux_uniform, aux_exponential, coords)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/temp.py:36: in _standard_stable
    if torch.abs(alpha - 1) < RADIUS:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.utils._device.DeviceContext object at 0x780a1ea93c10>
func = <method '__bool__' of 'torch._C.TensorBase' objects>
types = (<class 'torch.Tensor'>,)
args = (tensor([False, False, False, False, False, False, False, False, False, False]),)
kwargs = {}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
>       return func(*args, **kwargs)
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/utils/_device.py:106: RuntimeError
=============================== warnings summary ===============================
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:8
  /local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:8: DeprecationWarning: Please import `IntegrationWarning` from the `scipy.integrate` namespace; the `scipy.integrate.quadpack` namespace is deprecated and will be removed in SciPy 2.0.0.
    from scipy.integrate.quadpack import IntegrationWarning

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape1-sample_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape1-sample_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape1-sample_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape2-sample_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape2-sample_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape2-sample_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5--1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-2_0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-2_1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1--1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-2_0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-2_1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2--1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-2_0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-2_1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7--0.5-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7--0.5-1.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.0-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.0-1.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.5-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.5-1.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.9-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.9-1.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0--0.5-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0--0.5-1.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.0-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.0-1.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.5-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.5-1.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.9-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.9-1.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7--0.5-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7--0.5-1.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.0-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.0-1.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.5-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.5-1.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.9-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.9-1.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0--0.5-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0--0.5-1.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.0-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.0-1.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.5-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.5-1.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.9-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.9-1.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_variance[2.0-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_variance[2.0-1.5]
================== 150 failed, 537 passed, 1 warning in 9.08s ==================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pyro/pyro/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pyro/pyro
configfile: setup.cfg
plugins: typeguard-4.4.1, jaxtyping-0.2.19
collecting ... collected 687 items

../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape0-sample_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape0-sample_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape0-sample_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape1-sample_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape1-sample_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape1-sample_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape2-sample_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape2-sample_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape2-sample_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5--1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-2_0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-2_1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1--1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-2_0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-2_1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2--1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-2_0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-2_1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_variance[1.7-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_variance[1.7-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_variance[2.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_variance[2.0-1.5] PASSED

=================================== FAILURES ===================================
____________________________ test_sample[0.1--1.0] _____________________________

alpha = 0.1, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62499d4e00>],
      dtype=object)
args = (array(0.1), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.1--0.5] _____________________________

alpha = 0.1, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a624b7b7ce0>],
      dtype=object)
args = (array(0.1), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.1-0.0] _____________________________

alpha = 0.1, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a624ad00040>],
      dtype=object)
args = (array(0.1), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.1-0.5] _____________________________

alpha = 0.1, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62499ff600>],
      dtype=object)
args = (array(0.1), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.1-1.0] _____________________________

alpha = 0.1, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a624ad00040>],
      dtype=object)
args = (array(0.1), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.4--1.0] _____________________________

alpha = 0.4, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a624b7b7ce0>],
      dtype=object)
args = (array(0.4), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.4--0.5] _____________________________

alpha = 0.4, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a624ad000e0>],
      dtype=object)
args = (array(0.4), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.4-0.0] _____________________________

alpha = 0.4, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62499ff4c0>],
      dtype=object)
args = (array(0.4), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.4-0.5] _____________________________

alpha = 0.4, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a624ad00040>],
      dtype=object)
args = (array(0.4), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.4-1.0] _____________________________

alpha = 0.4, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62499ff880>],
      dtype=object)
args = (array(0.4), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.8--1.0] _____________________________

alpha = 0.8, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62499ff420>],
      dtype=object)
args = (array(0.8), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.8--0.5] _____________________________

alpha = 0.8, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62499ff6a0>],
      dtype=object)
args = (array(0.8), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.8-0.0] _____________________________

alpha = 0.8, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62499ffec0>],
      dtype=object)
args = (array(0.8), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.8-0.5] _____________________________

alpha = 0.8, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a624718d9e0>],
      dtype=object)
args = (array(0.8), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.8-1.0] _____________________________

alpha = 0.8, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a624718dbc0>],
      dtype=object)
args = (array(0.8), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99--1.0] ____________________________

alpha = 0.99, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a624718c5e0>],
      dtype=object)
args = (array(0.99), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99--0.5] ____________________________

alpha = 0.99, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62499ffec0>],
      dtype=object)
args = (array(0.99), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99-0.0] _____________________________

alpha = 0.99, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a624718d9e0>],
      dtype=object)
args = (array(0.99), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99-0.5] _____________________________

alpha = 0.99, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a624718dc60>],
      dtype=object)
args = (array(0.99), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99-1.0] _____________________________

alpha = 0.99, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a624718d8a0>],
      dtype=object)
args = (array(0.99), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.0--1.0] _____________________________

ar = array([[1.0, -1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, -1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
____________________________ test_sample[1.0--0.5] _____________________________

ar = array([[1.0, -0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, -0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
_____________________________ test_sample[1.0-0.0] _____________________________

ar = array([[1.0, 0.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, 0.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
_____________________________ test_sample[1.0-0.5] _____________________________

ar = array([[1.0, 0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, 0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
_____________________________ test_sample[1.0-1.0] _____________________________

ar = array([[1.0, 1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, 1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
____________________________ test_sample[1.01--1.0] ____________________________

alpha = 1.01, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a624718fb00>],
      dtype=object)
args = (array(1.01), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01--0.5] ____________________________

alpha = 1.01, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a624718ef20>],
      dtype=object)
args = (array(1.01), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01-0.0] _____________________________

alpha = 1.01, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a624718fba0>],
      dtype=object)
args = (array(1.01), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01-0.5] _____________________________

alpha = 1.01, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a624718ff60>],
      dtype=object)
args = (array(1.01), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01-1.0] _____________________________

alpha = 1.01, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62446b13a0>],
      dtype=object)
args = (array(1.01), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.3--1.0] _____________________________

alpha = 1.3, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a624718d940>],
      dtype=object)
args = (array(1.3), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.3--0.5] _____________________________

alpha = 1.3, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62446b1da0>],
      dtype=object)
args = (array(1.3), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.3-0.0] _____________________________

alpha = 1.3, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62446b1940>],
      dtype=object)
args = (array(1.3), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.3-0.5] _____________________________

alpha = 1.3, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a624718f380>],
      dtype=object)
args = (array(1.3), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.3-1.0] _____________________________

alpha = 1.3, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62446b2020>],
      dtype=object)
args = (array(1.3), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.7--1.0] _____________________________

alpha = 1.7, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62446b0a40>],
      dtype=object)
args = (array(1.7), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.7--0.5] _____________________________

alpha = 1.7, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62446b0e00>],
      dtype=object)
args = (array(1.7), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.7-0.0] _____________________________

alpha = 1.7, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62446b2980>],
      dtype=object)
args = (array(1.7), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.7-0.5] _____________________________

alpha = 1.7, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62446b2200>],
      dtype=object)
args = (array(1.7), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.7-1.0] _____________________________

alpha = 1.7, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62446b2fc0>],
      dtype=object)
args = (array(1.7), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[2.0--1.0] _____________________________

alpha = 2.0, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62446b32e0>],
      dtype=object)
args = (array(2.), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[2.0--0.5] _____________________________

alpha = 2.0, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62446b28e0>],
      dtype=object)
args = (array(2.), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[2.0-0.0] _____________________________

alpha = 2.0, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62446b3b00>],
      dtype=object)
args = (array(2.), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[2.0-0.5] _____________________________

alpha = 2.0, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62446b3f60>],
      dtype=object)
args = (array(2.), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[2.0-1.0] _____________________________

alpha = 2.0, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7a6275a239d0>
x = array([<function test_sample.<locals>.sampler at 0x7a62446b0ea0>],
      dtype=object)
args = (array(2.), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
=============================== warnings summary ===============================
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:8
  /local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:8: DeprecationWarning: Please import `IntegrationWarning` from the `scipy.integrate` namespace; the `scipy.integrate.quadpack` namespace is deprecated and will be removed in SciPy 2.0.0.
    from scipy.integrate.quadpack import IntegrationWarning

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-1.0]
================== 45 failed, 642 passed, 1 warning in 10.46s ==================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pyro/pyro/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pyro/pyro
configfile: setup.cfg
plugins: typeguard-4.4.1, jaxtyping-0.2.19
collecting ... collected 687 items

../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape0-sample_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape0-sample_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape0-sample_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape1-sample_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape1-sample_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape1-sample_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape2-sample_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape2-sample_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_shape[batch_shape2-sample_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-1.0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.1-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.4-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.8-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.99-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[0.999999-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.000001-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.01-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.3-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[1.7-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0--1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample_2[2.0-1.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5--1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-2_0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[0.5-2_1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1--1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-2_0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[1-2_1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2--1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-2_0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_normal[2-2_1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.1-0.9-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.2-0.8-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.4-0.6-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.5-0.5-0.5-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.1-0.9-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.2-0.8-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.4-0.6-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[0.99-0.5-0.5-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.1-0.9-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.2-0.8-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.4-0.6-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.01-0.5-0.5-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.1-0.9-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.2-0.8-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.4-0.6-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.5-0.5-0.5-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.1-0.9-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.2-0.8-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.4-0.6-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5--0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.0--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.0--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.0-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.0-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.5--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.5--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.5-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.5-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.9--0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.9--0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.9-0.0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_additive[1.9-0.5-0.5-0.9-0.9] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-0.5-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.0-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-1.7-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S0-2.0-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-0.5-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.0-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-1.7-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0--0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0--0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.0-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.5-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.5-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.9-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_mean[S-2.0-0.9-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_variance[1.7-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_variance[1.7-1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_variance[2.0-0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_variance[2.0-1.5] PASSED

=================================== FAILURES ===================================
____________________________ test_sample[0.1--1.0] _____________________________

alpha = 0.1, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x7549903c8e00>],
      dtype=object)
args = (array(0.1), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.1--0.5] _____________________________

alpha = 0.1, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x7549921abce0>],
      dtype=object)
args = (array(0.1), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.1-0.0] _____________________________

alpha = 0.1, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x7549921f4040>],
      dtype=object)
args = (array(0.1), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.1-0.5] _____________________________

alpha = 0.1, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x7549903f3600>],
      dtype=object)
args = (array(0.1), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.1-1.0] _____________________________

alpha = 0.1, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x7549921f4040>],
      dtype=object)
args = (array(0.1), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.4--1.0] _____________________________

alpha = 0.4, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x7549921abce0>],
      dtype=object)
args = (array(0.4), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.4--0.5] _____________________________

alpha = 0.4, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x7549921f40e0>],
      dtype=object)
args = (array(0.4), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.4-0.0] _____________________________

alpha = 0.4, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x7549903f34c0>],
      dtype=object)
args = (array(0.4), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.4-0.5] _____________________________

alpha = 0.4, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x7549921f4040>],
      dtype=object)
args = (array(0.4), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.4-1.0] _____________________________

alpha = 0.4, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x7549903f3880>],
      dtype=object)
args = (array(0.4), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.8--1.0] _____________________________

alpha = 0.8, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x7549903f3420>],
      dtype=object)
args = (array(0.8), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.8--0.5] _____________________________

alpha = 0.8, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x7549903f36a0>],
      dtype=object)
args = (array(0.8), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.8-0.0] _____________________________

alpha = 0.8, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x7549903f3ec0>],
      dtype=object)
args = (array(0.8), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.8-0.5] _____________________________

alpha = 0.8, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498dbdd9e0>],
      dtype=object)
args = (array(0.8), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.8-1.0] _____________________________

alpha = 0.8, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498dbddbc0>],
      dtype=object)
args = (array(0.8), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99--1.0] ____________________________

alpha = 0.99, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498dbdc5e0>],
      dtype=object)
args = (array(0.99), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99--0.5] ____________________________

alpha = 0.99, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x7549903f3ec0>],
      dtype=object)
args = (array(0.99), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99-0.0] _____________________________

alpha = 0.99, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498dbdd9e0>],
      dtype=object)
args = (array(0.99), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99-0.5] _____________________________

alpha = 0.99, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498dbddc60>],
      dtype=object)
args = (array(0.99), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99-1.0] _____________________________

alpha = 0.99, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498dbdd8a0>],
      dtype=object)
args = (array(0.99), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.0--1.0] _____________________________

ar = array([[1.0, -1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, -1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
____________________________ test_sample[1.0--0.5] _____________________________

ar = array([[1.0, -0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, -0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
_____________________________ test_sample[1.0-0.0] _____________________________

ar = array([[1.0, 0.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, 0.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
_____________________________ test_sample[1.0-0.5] _____________________________

ar = array([[1.0, 0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, 0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
_____________________________ test_sample[1.0-1.0] _____________________________

ar = array([[1.0, 1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, 1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
____________________________ test_sample[1.01--1.0] ____________________________

alpha = 1.01, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498dbdfb00>],
      dtype=object)
args = (array(1.01), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01--0.5] ____________________________

alpha = 1.01, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498dbdef20>],
      dtype=object)
args = (array(1.01), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01-0.0] _____________________________

alpha = 1.01, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498dbdfba0>],
      dtype=object)
args = (array(1.01), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01-0.5] _____________________________

alpha = 1.01, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498dbdff60>],
      dtype=object)
args = (array(1.01), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01-1.0] _____________________________

alpha = 1.01, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498b7e93a0>],
      dtype=object)
args = (array(1.01), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.3--1.0] _____________________________

alpha = 1.3, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498dbdd940>],
      dtype=object)
args = (array(1.3), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.3--0.5] _____________________________

alpha = 1.3, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498b7e9da0>],
      dtype=object)
args = (array(1.3), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.3-0.0] _____________________________

alpha = 1.3, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498b7e9940>],
      dtype=object)
args = (array(1.3), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.3-0.5] _____________________________

alpha = 1.3, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498dbdf380>],
      dtype=object)
args = (array(1.3), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.3-1.0] _____________________________

alpha = 1.3, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498b7ea020>],
      dtype=object)
args = (array(1.3), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.7--1.0] _____________________________

alpha = 1.7, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498b7e8a40>],
      dtype=object)
args = (array(1.7), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.7--0.5] _____________________________

alpha = 1.7, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498b7e8e00>],
      dtype=object)
args = (array(1.7), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.7-0.0] _____________________________

alpha = 1.7, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498b7ea980>],
      dtype=object)
args = (array(1.7), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.7-0.5] _____________________________

alpha = 1.7, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498b7ea200>],
      dtype=object)
args = (array(1.7), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.7-1.0] _____________________________

alpha = 1.7, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498b7eafc0>],
      dtype=object)
args = (array(1.7), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[2.0--1.0] _____________________________

alpha = 2.0, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498b7eb2e0>],
      dtype=object)
args = (array(2.), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[2.0--0.5] _____________________________

alpha = 2.0, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498b7ea8e0>],
      dtype=object)
args = (array(2.), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[2.0-0.0] _____________________________

alpha = 2.0, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498b7ebb00>],
      dtype=object)
args = (array(2.), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[2.0-0.5] _____________________________

alpha = 2.0, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498b7ebf60>],
      dtype=object)
args = (array(2.), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[2.0-1.0] _____________________________

alpha = 2.0, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7549b69ed7d0>
x = array([<function test_sample.<locals>.sampler at 0x75498b7e8ea0>],
      dtype=object)
args = (array(2.), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
=============================== warnings summary ===============================
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:8
  /local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:8: DeprecationWarning: Please import `IntegrationWarning` from the `scipy.integrate` namespace; the `scipy.integrate.quadpack` namespace is deprecated and will be removed in SciPy 2.0.0.
    from scipy.integrate.quadpack import IntegrationWarning

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--1.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-1.0]
================== 45 failed, 642 passed, 1 warning in 10.34s ==================
