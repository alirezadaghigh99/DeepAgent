output file:
processed_pyroconvolve380.json
function:
convolve
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-3] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-4]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-6]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-3]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-5]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-10]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-5]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pyro/pyro/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pyro/pyro
configfile: setup.cfg
plugins: typeguard-4.4.1, jaxtyping-0.2.19
collecting ... collected 324 items

../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-10] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-3] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-4] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-5] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-6] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-10] PASSED

=================================== FAILURES ===================================
__________________________ test_convolve[full-()-2-3] __________________________

batch_shape = (), m = 3, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696])
kernel = tensor([-0.2404, -1.1969]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-2-4] __________________________

batch_shape = (), m = 4, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404])
kernel = tensor([-1.1969,  0.2093]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-2-5] __________________________

batch_shape = (), m = 5, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969])
kernel = tensor([ 0.2093, -0.9724]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-2-6] __________________________

batch_shape = (), m = 6, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093])
kernel = tensor([-0.9724, -0.7550]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-()-2-10] __________________________

batch_shape = (), m = 10, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550,
         0.3239, -0.1085])
kernel = tensor([ 0.2103, -0.3908]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-3-2] __________________________

batch_shape = (), m = 2, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204])
kernel = tensor([-0.3696, -0.2404, -1.1969]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-3-4] __________________________

batch_shape = (), m = 4, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404])
kernel = tensor([-1.1969,  0.2093, -0.9724]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-3-5] __________________________

batch_shape = (), m = 5, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969])
kernel = tensor([ 0.2093, -0.9724, -0.7550]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-3-6] __________________________

batch_shape = (), m = 6, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093])
kernel = tensor([-0.9724, -0.7550,  0.3239]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-()-3-10] __________________________

batch_shape = (), m = 10, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550,
         0.3239, -0.1085])
kernel = tensor([ 0.2103, -0.3908,  0.2350]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-4-2] __________________________

batch_shape = (), m = 2, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204])
kernel = tensor([-0.3696, -0.2404, -1.1969,  0.2093]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-4-3] __________________________

batch_shape = (), m = 3, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696])
kernel = tensor([-0.2404, -1.1969,  0.2093, -0.9724]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-4-5] __________________________

batch_shape = (), m = 5, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969])
kernel = tensor([ 0.2093, -0.9724, -0.7550,  0.3239]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-4-6] __________________________

batch_shape = (), m = 6, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093])
kernel = tensor([-0.9724, -0.7550,  0.3239, -0.1085]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-()-4-10] __________________________

batch_shape = (), m = 10, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550,
         0.3239, -0.1085])
kernel = tensor([ 0.2103, -0.3908,  0.2350,  0.6653]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-5-2] __________________________

batch_shape = (), m = 2, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204])
kernel = tensor([-0.3696, -0.2404, -1.1969,  0.2093, -0.9724]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-5-3] __________________________

batch_shape = (), m = 3, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696])
kernel = tensor([-0.2404, -1.1969,  0.2093, -0.9724, -0.7550]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-5-4] __________________________

batch_shape = (), m = 4, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404])
kernel = tensor([-1.1969,  0.2093, -0.9724, -0.7550,  0.3239]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-5-6] __________________________

batch_shape = (), m = 6, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093])
kernel = tensor([-0.9724, -0.7550,  0.3239, -0.1085,  0.2103]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-()-5-10] __________________________

batch_shape = (), m = 10, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550,
         0.3239, -0.1085])
kernel = tensor([ 0.2103, -0.3908,  0.2350,  0.6653,  0.3528]), mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-6-2] __________________________

batch_shape = (), m = 2, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204])
kernel = tensor([-0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-6-3] __________________________

batch_shape = (), m = 3, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696])
kernel = tensor([-0.2404, -1.1969,  0.2093, -0.9724, -0.7550,  0.3239])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-6-4] __________________________

batch_shape = (), m = 4, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404])
kernel = tensor([-1.1969,  0.2093, -0.9724, -0.7550,  0.3239, -0.1085])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[full-()-6-5] __________________________

batch_shape = (), m = 5, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969])
kernel = tensor([ 0.2093, -0.9724, -0.7550,  0.3239, -0.1085,  0.2103])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-()-6-10] __________________________

batch_shape = (), m = 10, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550,
         0.3239, -0.1085])
kernel = tensor([ 0.2103, -0.3908,  0.2350,  0.6653,  0.3528,  0.9728])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-()-10-2] __________________________

batch_shape = (), m = 2, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204])
kernel = tensor([-0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550,  0.3239, -0.1085,
         0.2103, -0.3908])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-()-10-3] __________________________

batch_shape = (), m = 3, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696])
kernel = tensor([-0.2404, -1.1969,  0.2093, -0.9724, -0.7550,  0.3239, -0.1085,  0.2103,
        -0.3908,  0.2350])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-()-10-4] __________________________

batch_shape = (), m = 4, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404])
kernel = tensor([-1.1969,  0.2093, -0.9724, -0.7550,  0.3239, -0.1085,  0.2103, -0.3908,
         0.2350,  0.6653])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-()-10-5] __________________________

batch_shape = (), m = 5, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969])
kernel = tensor([ 0.2093, -0.9724, -0.7550,  0.3239, -0.1085,  0.2103, -0.3908,  0.2350,
         0.6653,  0.3528])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-()-10-6] __________________________

batch_shape = (), m = 6, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093])
kernel = tensor([-0.9724, -0.7550,  0.3239, -0.1085,  0.2103, -0.3908,  0.2350,  0.6653,
         0.3528,  0.9728])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-2-3] _________________________

batch_shape = (4,), m = 3, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204, -0.3696],
        [-0.2404, -1.1969,  0.2093],
        [-0.9724, -0.7550,  0.3239],
        [-0.1085,  0.2103, -0.3908]])
kernel = tensor([[ 0.2350,  0.6653],
        [ 0.3528,  0.9728],
        [-0.0386, -0.8861],
        [-0.4709, -0.4269]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-2-4] _________________________

batch_shape = (4,), m = 4, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665],
        [ 0.3767,  0.2252,  0.4648, -1.0580],
        [-0.3048,  0.0572, -1.1788,  0.2451],
        [ 1.0664,  1.1940,  1.2815,  0.6294]])
kernel = tensor([[-0.0386, -0.8861],
        [-0.4709, -0.4269],
        [-0.0283,  1.4220],
        [-0.3886, -0.8903]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-2-5] _________________________

batch_shape = (4,), m = 5, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665, -0.7536],
        [ 0.0974, -1.0334,  0.1820, -1.0745,  0.9522],
        [ 1.9336, -1.1461, -0.1259,  1.4190, -1.1132],
        [ 0.9542,  0.7113,  0.4269,  1.4130, -0.0791]])
kernel = tensor([[ 0.7290,  1.2775],
        [-1.0815, -1.3027],
        [ 1.0827, -1.3841],
        [ 0.4033, -1.2239]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-2-6] _________________________

batch_shape = (4,), m = 6, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
        [ 0.4648, -1.0580, -1.0745,  0.9522,  1.9336, ... 0.6059, -0.3921, -0.9019,  0.0509,  0.7113,  0.4269],
        [ 1.4130, -0.0791,  1.0618, -0.6267, -1.0863, -0.7031]])
kernel = tensor([[ 1.0827, -1.3841],
        [ 0.4033, -1.2239],
        [ 0.7017,  2.2139],
        [-0.0276,  1.0541]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(4,)-2-10] _________________________

batch_shape = (4,), m = 10, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648, -1.0580,
         -0.3048,  0.0572],
        [...-0.7076],
        [ 0.7600,  0.5615, -1.1005,  1.6964,  0.5282,  1.0614,  0.2744,  2.2121,
         -0.0944, -0.8925]])
kernel = tensor([[ 0.7885,  0.3208],
        [ 0.8456, -0.3621],
        [ 0.1027, -3.5310],
        [ 0.5485, -1.6063]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-3-2] _________________________

batch_shape = (4,), m = 2, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204],
        [-0.3696, -0.2404],
        [-1.1969,  0.2093],
        [-0.9724, -0.7550]])
kernel = tensor([[ 0.3239, -0.1085,  0.2103],
        [-0.3908,  0.2350,  0.6653],
        [ 0.3528,  0.9728, -0.0386],
        [-0.8861, -0.4709, -0.4269]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-3-4] _________________________

batch_shape = (4,), m = 4, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665],
        [ 0.3767,  0.2252,  0.4648, -1.0580],
        [-0.3048,  0.0572, -1.1788,  0.2451],
        [ 1.0664,  1.1940,  1.2815,  0.6294]])
kernel = tensor([[-0.0386, -0.8861, -0.4709],
        [-0.4269, -0.0283,  1.4220],
        [-0.3886, -0.8903, -0.9601],
        [-0.4087,  1.0764, -0.4015]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-3-5] _________________________

batch_shape = (4,), m = 5, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665, -0.7536],
        [ 0.0974, -1.0334,  0.1820, -1.0745,  0.9522],
        [ 1.9336, -1.1461, -0.1259,  1.4190, -1.1132],
        [ 0.9542,  0.7113,  0.4269,  1.4130, -0.0791]])
kernel = tensor([[ 0.7290,  1.2775, -1.0815],
        [-1.3027,  1.0827, -1.3841],
        [ 0.4033, -1.2239,  0.7017],
        [ 2.2139, -0.0276,  1.0541]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-3-6] _________________________

batch_shape = (4,), m = 6, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
        [ 0.4648, -1.0580, -1.0745,  0.9522,  1.9336, ... 0.6059, -0.3921, -0.9019,  0.0509,  0.7113,  0.4269],
        [ 1.4130, -0.0791,  1.0618, -0.6267, -1.0863, -0.7031]])
kernel = tensor([[ 1.0827, -1.3841,  0.4033],
        [-1.2239,  0.7017,  2.2139],
        [-0.0276,  1.0541,  0.5661],
        [-0.3820,  0.8807,  0.2710]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(4,)-3-10] _________________________

batch_shape = (4,), m = 10, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648, -1.0580,
         -0.3048,  0.0572],
        [...-0.7076],
        [ 0.7600,  0.5615, -1.1005,  1.6964,  0.5282,  1.0614,  0.2744,  2.2121,
         -0.0944, -0.8925]])
kernel = tensor([[ 0.7885,  0.3208,  0.8456],
        [-0.3621,  0.1027, -3.5310],
        [ 0.5485, -1.6063,  0.7281],
        [ 0.6609,  0.2391,  0.0340]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-4-2] _________________________

batch_shape = (4,), m = 2, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204],
        [-0.3696, -0.2404],
        [-1.1969,  0.2093],
        [-0.9724, -0.7550]])
kernel = tensor([[-0.1061, -0.1555, -1.3914,  0.1816],
        [-0.0132, -0.4622, -0.2632, -0.7370],
        [-2.4337,  0.3042, -1.2614,  0.4050],
        [ 0.6603, -0.5331, -0.6030,  0.7264]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-4-3] _________________________

batch_shape = (4,), m = 3, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204, -0.3696],
        [-0.2404, -1.1969,  0.2093],
        [-0.9724, -0.7550,  0.3239],
        [-0.1085,  0.2103, -0.3908]])
kernel = tensor([[-0.0132, -0.4622, -0.2632, -0.7370],
        [-1.5169, -0.7768,  1.2984, -0.6320],
        [ 0.6603, -0.5331, -0.6030,  0.7264],
        [-0.6457,  0.4280, -0.4844,  0.0673]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-4-5] _________________________

batch_shape = (4,), m = 5, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665, -0.7536],
        [ 0.0974, -1.0334,  0.1820, -1.0745,  0.9522],
        [ 1.9336, -1.1461, -0.1259,  1.4190, -1.1132],
        [ 0.9542,  0.7113,  0.4269,  1.4130, -0.0791]])
kernel = tensor([[ 0.1829,  1.3409, -0.0374, -1.5155],
        [ 1.6309,  0.4585,  1.7166, -0.7307],
        [ 0.5772, -0.6045,  1.4284,  0.7550],
        [-1.1005,  1.6964,  0.5282,  1.0614]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-4-6] _________________________

batch_shape = (4,), m = 6, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
        [ 0.4648, -1.0580, -1.0745,  0.9522,  1.9336, ... 0.6059, -0.3921, -0.9019,  0.0509,  0.7113,  0.4269],
        [ 1.4130, -0.0791,  1.0618, -0.6267, -1.0863, -0.7031]])
kernel = tensor([[ 1.6309,  0.4585,  1.7166, -0.7307],
        [ 0.6114, -0.7076,  0.7600,  0.5615],
        [-1.1005,  1.6964,  0.5282,  1.0614],
        [ 0.2744,  2.2121, -0.0944, -0.8925]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(4,)-4-10] _________________________

batch_shape = (4,), m = 10, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648, -1.0580,
         -0.3048,  0.0572],
        [...-0.7076],
        [ 0.7600,  0.5615, -1.1005,  1.6964,  0.5282,  1.0614,  0.2744,  2.2121,
         -0.0944, -0.8925]])
kernel = tensor([[ 0.2638, -0.6327,  2.3189,  0.9049],
        [ 0.1957, -2.7479,  1.7876,  1.0033],
        [ 0.2395,  0.5696,  0.3293,  0.1652],
        [-1.6648,  2.2198,  0.2171,  1.3690]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-5-2] _________________________

batch_shape = (4,), m = 2, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204],
        [-0.3696, -0.2404],
        [-1.1969,  0.2093],
        [-0.9724, -0.7550]])
kernel = tensor([[-0.1061, -0.1555, -1.3914,  0.1816,  0.6059],
        [-0.3921, -0.9019,  0.0509,  0.6298,  0.0847],
        [ 0.1440, -1.1005,  1.0618, -0.6267, -1.0863],
        [-0.7031, -0.8052, -0.3629, -0.4370, -0.4687]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-5-3] _________________________

batch_shape = (4,), m = 3, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204, -0.3696],
        [-0.2404, -1.1969,  0.2093],
        [-0.9724, -0.7550,  0.3239],
        [-0.1085,  0.2103, -0.3908]])
kernel = tensor([[-0.0132, -0.4622, -0.2632, -0.7370,  0.6298],
        [ 0.0847,  0.1440, -1.1005,  0.1829,  1.3409],
        [-0.0374, -1.5155, -0.8052, -0.3629, -0.4370],
        [-0.4687,  0.5772, -0.6045,  1.4284,  0.7550]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-5-4] _________________________

batch_shape = (4,), m = 4, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665],
        [ 0.3767,  0.2252,  0.4648, -1.0580],
        [-0.3048,  0.0572, -1.1788,  0.2451],
        [ 1.0664,  1.1940,  1.2815,  0.6294]])
kernel = tensor([[-1.5169, -0.7768,  1.2984, -0.6320,  0.1829],
        [ 1.3409, -0.0374, -1.5155,  1.6309,  0.4585],
        [ 1.7166, -0.7307,  0.5772, -0.6045,  1.4284],
        [ 0.7550, -1.1005,  1.6964,  0.5282,  1.0614]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-5-6] _________________________

batch_shape = (4,), m = 6, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
        [ 0.4648, -1.0580, -1.0745,  0.9522,  1.9336, ... 0.6059, -0.3921, -0.9019,  0.0509,  0.7113,  0.4269],
        [ 1.4130, -0.0791,  1.0618, -0.6267, -1.0863, -0.7031]])
kernel = tensor([[ 1.6309,  0.4585,  1.7166, -0.7307,  0.1957],
        [-2.7479,  1.7876,  1.0033, -0.3930, -0.9216],
        [ 0.2086, -0.1922, -1.6648,  2.2198,  0.2171],
        [ 1.3690, -0.3084, -0.3429,  0.0434,  0.1462]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(4,)-5-10] _________________________

batch_shape = (4,), m = 10, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648, -1.0580,
         -0.3048,  0.0572],
        [...-0.7076],
        [ 0.7600,  0.5615, -1.1005,  1.6964,  0.5282,  1.0614,  0.2744,  2.2121,
         -0.0944, -0.8925]])
kernel = tensor([[ 0.2638, -0.6327,  2.3189,  0.9049, -0.3975],
        [-0.0780,  1.1016, -0.1718,  0.9640, -0.5779],
        [ 0.0347, -1.2997, -0.7377, -1.2602, -0.3562],
        [ 1.0706,  1.6303,  0.0573, -0.9721,  0.0475]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-6-2] _________________________

batch_shape = (4,), m = 2, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204],
        [-0.3696, -0.2404],
        [-1.1969,  0.2093],
        [-0.9724, -0.7550]])
kernel = tensor([[-0.1061, -0.1555, -1.3914,  0.1816, -0.0132, -0.4622],
        [-0.2632, -0.7370,  0.6298,  0.0847,  0.1440, ... 0.1829,  1.3409, -0.0374, -1.5155, -0.8052, -0.3629],
        [-0.4370, -0.4687,  0.5772, -0.6045,  1.4284,  0.7550]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-6-3] _________________________

batch_shape = (4,), m = 3, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204, -0.3696],
        [-0.2404, -1.1969,  0.2093],
        [-0.9724, -0.7550,  0.3239],
        [-0.1085,  0.2103, -0.3908]])
kernel = tensor([[-0.0132, -0.4622, -0.2632, -0.7370, -1.5169, -0.7768],
        [ 1.2984, -0.6320,  0.1829,  1.3409, -0.0374, ... 1.6309,  0.4585,  1.7166, -0.7307,  0.5772, -0.6045],
        [ 1.4284,  0.7550, -1.1005,  1.6964,  0.5282,  1.0614]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-6-4] _________________________

batch_shape = (4,), m = 4, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665],
        [ 0.3767,  0.2252,  0.4648, -1.0580],
        [-0.3048,  0.0572, -1.1788,  0.2451],
        [ 1.0664,  1.1940,  1.2815,  0.6294]])
kernel = tensor([[-1.5169, -0.7768,  1.2984, -0.6320, -0.7536,  0.0974],
        [-1.0334,  0.1820,  1.6309,  0.4585,  1.7166, ... 0.6114, -0.7076,  0.7600,  0.5615, -1.1005,  1.6964],
        [ 0.5282,  1.0614,  0.2744,  2.2121, -0.0944, -0.8925]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[full-(4,)-6-5] _________________________

batch_shape = (4,), m = 5, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665, -0.7536],
        [ 0.0974, -1.0334,  0.1820, -1.0745,  0.9522],
        [ 1.9336, -1.1461, -0.1259,  1.4190, -1.1132],
        [ 0.9542,  0.7113,  0.4269,  1.4130, -0.0791]])
kernel = tensor([[ 0.1829,  1.3409, -0.0374, -1.5155,  1.6309,  0.4585],
        [ 1.7166, -0.7307,  0.1957, -2.7479,  1.7876, ...-0.3930, -0.9216,  0.2086, -0.1922, -1.6648,  2.2198],
        [ 0.2171,  1.3690, -0.3084, -0.3429,  0.0434,  0.1462]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(4,)-6-10] _________________________

batch_shape = (4,), m = 10, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648, -1.0580,
         -0.3048,  0.0572],
        [...-0.7076],
        [ 0.7600,  0.5615, -1.1005,  1.6964,  0.5282,  1.0614,  0.2744,  2.2121,
         -0.0944, -0.8925]])
kernel = tensor([[ 0.2638, -0.6327,  2.3189,  0.9049,  0.1957, -2.7479],
        [ 1.7876,  1.0033,  0.9640, -0.5779,  0.0347, ... 1.2775, -0.5276,  1.1303, -0.6333,  1.6303,  0.0573],
        [-0.9721,  0.0475, -0.7703, -1.5547, -2.1732, -0.4930]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(4,)-10-2] _________________________

batch_shape = (4,), m = 2, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204],
        [-0.3696, -0.2404],
        [-1.1969,  0.2093],
        [-0.9724, -0.7550]])
kernel = tensor([[-0.1061, -0.1555, -1.3914,  0.1816, -0.0132, -0.4622, -0.2632, -0.7370,
         -2.4337,  0.3042],
        [... 0.8433],
        [ 0.9058,  0.1582,  0.8185,  0.6440, -0.1228,  0.7623, -0.3727, -0.0103,
         -2.6528, -1.9059]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(4,)-10-3] _________________________

batch_shape = (4,), m = 3, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204, -0.3696],
        [-0.2404, -1.1969,  0.2093],
        [-0.9724, -0.7550,  0.3239],
        [-0.1085,  0.2103, -0.3908]])
kernel = tensor([[-0.0132, -0.4622, -0.2632, -0.7370, -1.5169, -0.7768,  1.2984, -0.6320,
          0.6603, -0.5331],
        [...-0.6327],
        [ 2.3189,  0.9049, -0.3727, -0.0103, -2.6528, -1.9059,  0.2395,  0.5696,
          0.3293,  0.1652]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(4,)-10-4] _________________________

batch_shape = (4,), m = 4, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665],
        [ 0.3767,  0.2252,  0.4648, -1.0580],
        [-0.3048,  0.0572, -1.1788,  0.2451],
        [ 1.0664,  1.1940,  1.2815,  0.6294]])
kernel = tensor([[-1.5169, -0.7768,  1.2984, -0.6320, -0.7536,  0.0974, -1.0334,  0.1820,
         -0.6457,  0.4280],
        [...-2.7479],
        [ 1.7876,  1.0033,  0.2395,  0.5696,  0.3293,  0.1652, -1.6648,  2.2198,
          0.2171,  1.3690]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(4,)-10-5] _________________________

batch_shape = (4,), m = 5, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665, -0.7536],
        [ 0.0974, -1.0334,  0.1820, -1.0745,  0.9522],
        [ 1.9336, -1.1461, -0.1259,  1.4190, -1.1132],
        [ 0.9542,  0.7113,  0.4269,  1.4130, -0.0791]])
kernel = tensor([[ 0.1829,  1.3409, -0.0374, -1.5155,  1.6309,  0.4585,  1.7166, -0.7307,
          0.5772, -0.6045],
        [...-0.5779],
        [ 0.0347, -1.2997, -0.7377, -1.2602, -0.3562,  1.0706,  1.6303,  0.0573,
         -0.9721,  0.0475]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(4,)-10-6] _________________________

batch_shape = (4,), m = 6, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
        [ 0.4648, -1.0580, -1.0745,  0.9522,  1.9336, ... 0.6059, -0.3921, -0.9019,  0.0509,  0.7113,  0.4269],
        [ 1.4130, -0.0791,  1.0618, -0.6267, -1.0863, -0.7031]])
kernel = tensor([[ 1.6309,  0.4585,  1.7166, -0.7307,  0.6114, -0.7076,  0.7600,  0.5615,
         -1.1005,  1.6964],
        [...-0.5276],
        [ 1.1303, -0.6333,  1.6303,  0.0573, -0.9721,  0.0475, -0.7703, -1.5547,
         -2.1732, -0.4930]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-2-3] ________________________

batch_shape = (2, 3), m = 3, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  1.2984],
         [-0.6320, -0.7536,  0.0974],
         [-1.0334,  0.1820, -1.0745]],

        [[ 0.9522, -0.4844,  0.0673],
         [-0.1259,  1.4190, -1.1132],
         [ 0.9542,  0.7113,  0.4269]]])
kernel = tensor([[[ 0.9657,  0.7057],
         [ 0.7290,  1.2775],
         [-1.0815, -1.3027]],

        [[ 1.0827, -1.3841],
         [ 0.4033, -1.2239],
         [ 0.7017,  2.2139]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-2-4] ________________________

batch_shape = (2, 3), m = 4, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665],
         [ 0.3767,  0.2252,  0.4648, -1.0580],
         [-1.0745,  0.95...921, -0.9019,  0.0509],
         [ 0.7113,  0.4269,  1.4130, -0.0791],
         [ 1.0618, -0.6267, -1.0863, -0.7031]]])
kernel = tensor([[[ 1.0827, -1.3841],
         [ 0.4033, -1.2239],
         [ 0.7017,  2.2139]],

        [[-0.0276,  1.0541],
         [ 0.5661, -0.3820],
         [ 0.8807,  0.2710]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-2-5] ________________________

batch_shape = (2, 3), m = 5, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767],
         [ 0.2252,  0.4648, -1.0580, -0.3048,  0.0572],
      ...005],
         [ 0.1829,  1.3409, -1.0863, -0.7031, -0.8052],
         [-0.3629, -0.4370, -0.4687,  0.5772, -0.6045]]])
kernel = tensor([[[-0.0276,  1.0541],
         [ 0.5661, -0.3820],
         [ 0.8807,  0.2710]],

        [[ 0.7694,  0.3453],
         [ 1.8979, -0.2357],
         [ 0.7885,  0.3208]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-2-6] ________________________

batch_shape = (2, 3), m = 6, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
         [ 0.4648, -1.0580, -0.3048,  0.0572, -1.1788....6309,  0.4585,  1.7166, -0.7307,  0.5772, -0.6045],
         [ 1.4284,  0.7550, -1.1005,  1.6964,  0.5282,  1.0614]]])
kernel = tensor([[[ 0.7694,  0.3453],
         [ 1.8979, -0.2357],
         [ 0.7885,  0.3208]],

        [[ 0.8456, -0.3621],
         [ 0.1027, -3.5310],
         [ 0.5485, -1.6063]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[full-(2, 3)-2-10] ________________________

batch_shape = (2, 3), m = 10, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648,
          -1.0580, -0.3048,  0.0572],
       ...9216],
         [ 0.2086, -0.1922, -1.6648,  2.2198,  0.2171,  1.3690, -0.3084,
          -0.3429,  0.0434,  0.1462]]])
kernel = tensor([[[-0.3604,  1.2101],
         [-1.0814,  0.0789],
         [ 0.2913, -0.5023]],

        [[-0.9306,  0.9086],
         [-0.7788, -1.4453],
         [ 0.7636, -0.2469]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-3-2] ________________________

batch_shape = (2, 3), m = 2, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[-0.1115,  0.1204],
         [-0.3696, -0.2404],
         [-1.1969,  0.2093]],

        [[-0.9724, -0.7550],
         [ 0.3239, -0.1085],
         [ 0.2103, -0.3908]]])
kernel = tensor([[[-0.0132, -0.4622, -0.9019],
         [ 0.0509,  0.6298,  0.0847],
         [ 0.1440, -1.1005,  0.1829]],

        [[ 1.3409, -1.0863, -0.7031],
         [-0.8052, -0.3629, -0.4370],
         [-0.4687,  0.5772, -0.6045]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-3-4] ________________________

batch_shape = (2, 3), m = 4, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665],
         [ 0.3767,  0.2252,  0.4648, -1.0580],
         [-1.0745,  0.95...921, -0.9019,  0.0509],
         [ 0.7113,  0.4269,  1.4130, -0.0791],
         [ 1.0618, -0.6267, -1.0863, -0.7031]]])
kernel = tensor([[[ 1.6309,  0.4585,  2.3189],
         [ 0.9049,  0.1957, -2.7479],
         [ 1.7876,  1.0033, -0.3930]],

        [[-0.9216,  0.3293,  0.1652],
         [-1.6648,  2.2198,  0.2171],
         [ 1.3690, -0.3084, -0.3429]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-3-5] ________________________

batch_shape = (2, 3), m = 5, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767],
         [ 0.2252,  0.4648, -1.0580, -0.3048,  0.0572],
      ...005],
         [ 0.1829,  1.3409, -1.0863, -0.7031, -0.8052],
         [-0.3629, -0.4370, -0.4687,  0.5772, -0.6045]]])
kernel = tensor([[[ 0.7600,  0.5615, -0.3930],
         [-0.9216,  0.2086, -0.1922],
         [-0.4884, -0.9498, -0.1966]],

        [[-0.5345, -0.3084, -0.3429],
         [ 0.0434,  0.1462,  1.6398],
         [-0.3044,  0.0143,  0.1944]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-3-6] ________________________

batch_shape = (2, 3), m = 6, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
         [ 0.4648, -1.0580, -0.3048,  0.0572, -1.1788....6309,  0.4585,  1.7166, -0.7307,  0.5772, -0.6045],
         [ 1.4284,  0.7550, -1.1005,  1.6964,  0.5282,  1.0614]]])
kernel = tensor([[[ 0.0108,  0.8433, -0.1966],
         [-0.5345,  0.6846,  0.7159],
         [-0.1843, -0.9072, -0.3975]],

        [[-0.0780,  0.0143,  0.1944],
         [-1.1805,  1.0556,  0.1799],
         [-0.4323, -0.7377, -1.2602]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[full-(2, 3)-3-10] ________________________

batch_shape = (2, 3), m = 10, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648,
          -1.0580, -0.3048,  0.0572],
       ...9216],
         [ 0.2086, -0.1922, -1.6648,  2.2198,  0.2171,  1.3690, -0.3084,
          -0.3429,  0.0434,  0.1462]]])
kernel = tensor([[[-0.3975, -0.0780,  1.5178],
         [ 1.2231, -1.0315,  1.5939],
         [-0.4903,  0.9087,  1.8196]],

        [[ 0.4511, -1.0943,  0.6026],
         [ 0.5989, -1.4274, -0.6300],
         [ 0.4348, -1.0199,  0.6034]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-4-2] ________________________

batch_shape = (2, 3), m = 2, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[-0.1115,  0.1204],
         [-0.3696, -0.2404],
         [-1.1969,  0.2093]],

        [[-0.9724, -0.7550],
         [ 0.3239, -0.1085],
         [ 0.2103, -0.3908]]])
kernel = tensor([[[-0.0132, -0.4622, -0.2632, -0.7370],
         [-1.5169, -0.7768,  1.2984, -0.6320],
         [ 0.1829,  1.34...585,  1.7166, -0.7307],
         [ 0.5772, -0.6045,  1.4284,  0.7550],
         [-1.1005,  1.6964,  0.5282,  1.0614]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-4-3] ________________________

batch_shape = (2, 3), m = 3, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  1.2984],
         [-0.6320, -0.7536,  0.0974],
         [-1.0334,  0.1820, -1.0745]],

        [[ 0.9522, -0.4844,  0.0673],
         [-0.1259,  1.4190, -1.1132],
         [ 0.9542,  0.7113,  0.4269]]])
kernel = tensor([[[ 0.1440, -1.1005,  0.1829,  1.3409],
         [-0.0374, -1.5155,  1.6309,  0.4585],
         [ 2.3189,  0.90...033, -0.3930, -0.9216],
         [ 0.3293,  0.1652, -1.6648,  2.2198],
         [ 0.2171,  1.3690, -0.3084, -0.3429]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-4-5] ________________________

batch_shape = (2, 3), m = 5, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767],
         [ 0.2252,  0.4648, -1.0580, -0.3048,  0.0572],
      ...005],
         [ 0.1829,  1.3409, -1.0863, -0.7031, -0.8052],
         [-0.3629, -0.4370, -0.4687,  0.5772, -0.6045]]])
kernel = tensor([[[ 0.7600,  0.5615,  2.0122, -0.2271],
         [ 0.2868, -0.5177,  0.0108,  0.8433],
         [-0.1966, -0.53...072, -0.3975, -0.0780],
         [ 0.0143,  0.1944, -1.1805,  1.0556],
         [ 0.1799, -0.4323, -0.7377, -1.2602]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-4-6] ________________________

batch_shape = (2, 3), m = 6, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
         [ 0.4648, -1.0580, -0.3048,  0.0572, -1.1788....6309,  0.4585,  1.7166, -0.7307,  0.5772, -0.6045],
         [ 1.4284,  0.7550, -1.1005,  1.6964,  0.5282,  1.0614]]])
kernel = tensor([[[ 0.0108,  0.8433,  0.9058,  0.1582],
         [ 0.2638, -0.6327,  2.3189,  0.9049],
         [-0.3975, -0.07...779,  0.0347, -1.2997],
         [-0.7377, -1.2602, -0.3562,  1.0706],
         [ 1.6303,  0.0573, -0.9721,  0.0475]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[full-(2, 3)-4-10] ________________________

batch_shape = (2, 3), m = 10, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648,
          -1.0580, -0.3048,  0.0572],
       ...9216],
         [ 0.2086, -0.1922, -1.6648,  2.2198,  0.2171,  1.3690, -0.3084,
          -0.3429,  0.0434,  0.1462]]])
kernel = tensor([[[-0.3975, -0.0780,  1.1016, -0.1718],
         [ 0.9640, -0.5779,  0.0347, -1.2997],
         [ 1.8196,  0.45...536, -1.1751, -0.0094],
         [-1.0199,  0.6034, -2.1064, -0.0826],
         [ 0.7310,  0.2947, -0.8301,  0.3838]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-5-2] ________________________

batch_shape = (2, 3), m = 2, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[-0.1115,  0.1204],
         [-0.3696, -0.2404],
         [-1.1969,  0.2093]],

        [[-0.9724, -0.7550],
         [ 0.3239, -0.1085],
         [ 0.2103, -0.3908]]])
kernel = tensor([[[-0.0132, -0.4622, -0.2632, -0.7370, -1.5169],
         [-0.7768,  1.2984, -0.6320,  0.6603, -0.5331],
      ...615],
         [ 2.0122, -0.2271,  0.5282,  1.0614,  0.2744],
         [ 2.2121, -0.0944, -0.8925,  0.8185,  0.6440]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-5-3] ________________________

batch_shape = (2, 3), m = 3, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  1.2984],
         [-0.6320, -0.7536,  0.0974],
         [-1.0334,  0.1820, -1.0745]],

        [[ 0.9522, -0.4844,  0.0673],
         [-0.1259,  1.4190, -1.1132],
         [ 0.9542,  0.7113,  0.4269]]])
kernel = tensor([[[ 0.1440, -1.1005,  0.1829,  1.3409, -0.0374],
         [-1.5155,  1.6309,  0.4585, -0.4370, -0.4687],
      ...498],
         [-0.1966, -0.5345, -0.3084, -0.3429,  0.0434],
         [ 0.1462,  1.6398, -0.3044,  0.0143,  0.1944]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-5-4] ________________________

batch_shape = (2, 3), m = 4, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665],
         [ 0.3767,  0.2252,  0.4648, -1.0580],
         [-1.0745,  0.95...921, -0.9019,  0.0509],
         [ 0.7113,  0.4269,  1.4130, -0.0791],
         [ 1.0618, -0.6267, -1.0863, -0.7031]]])
kernel = tensor([[[ 1.6309,  0.4585,  1.7166, -0.7307,  0.6114],
         [-0.7076,  0.7600,  0.5615, -1.1005,  1.6964],
      ...072],
         [-0.3975, -0.0780,  0.0143,  0.1944, -1.1805],
         [ 1.0556,  0.1799, -0.4323, -0.7377, -1.2602]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-5-6] ________________________

batch_shape = (2, 3), m = 6, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
         [ 0.4648, -1.0580, -0.3048,  0.0572, -1.1788....6309,  0.4585,  1.7166, -0.7307,  0.5772, -0.6045],
         [ 1.4284,  0.7550, -1.1005,  1.6964,  0.5282,  1.0614]]])
kernel = tensor([[[ 0.0108,  0.8433,  0.9058,  0.1582,  0.2638],
         [-0.6327,  2.3189,  0.9049, -0.3727, -0.0103],
      ...333],
         [-0.5996,  0.9252, -0.9721,  0.0475, -0.7703],
         [-1.5547, -2.1732, -0.4930, -0.0340, -0.6844]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[full-(2, 3)-5-10] ________________________

batch_shape = (2, 3), m = 10, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648,
          -1.0580, -0.3048,  0.0572],
       ...9216],
         [ 0.2086, -0.1922, -1.6648,  2.2198,  0.2171,  1.3690, -0.3084,
          -0.3429,  0.0434,  0.1462]]])
kernel = tensor([[[-0.3975, -0.0780,  1.1016, -0.1718,  0.9640],
         [-0.5779,  0.0347, -1.2997, -0.7377, -1.2602],
      ...380],
         [ 0.6207,  0.0158, -0.8301,  0.3838, -1.6000],
         [ 0.3316, -0.0565,  0.9084,  0.7460,  0.2136]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-6-2] ________________________

batch_shape = (2, 3), m = 2, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[-0.1115,  0.1204],
         [-0.3696, -0.2404],
         [-1.1969,  0.2093]],

        [[-0.9724, -0.7550],
         [ 0.3239, -0.1085],
         [ 0.2103, -0.3908]]])
kernel = tensor([[[-0.0132, -0.4622, -0.2632, -0.7370, -1.5169, -0.7768],
         [ 1.2984, -0.6320,  0.6603, -0.5331, -0.6030....0108,  0.8433,  0.9058,  0.1582,  0.8185,  0.6440],
         [-0.1228,  0.7623, -0.3727, -0.0103, -2.6528, -1.9059]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-6-3] ________________________

batch_shape = (2, 3), m = 3, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  1.2984],
         [-0.6320, -0.7536,  0.0974],
         [-1.0334,  0.1820, -1.0745]],

        [[ 0.9522, -0.4844,  0.0673],
         [-0.1259,  1.4190, -1.1132],
         [ 0.9542,  0.7113,  0.4269]]])
kernel = tensor([[[ 0.1440, -1.1005,  0.1829,  1.3409, -0.0374, -1.5155],
         [ 1.6309,  0.4585, -0.4370, -0.4687,  0.5772....1843, -0.9072, -0.3975, -0.0780,  0.0143,  0.1944],
         [-1.1805,  1.0556,  0.1799, -0.4323, -0.7377, -1.2602]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-6-4] ________________________

batch_shape = (2, 3), m = 4, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665],
         [ 0.3767,  0.2252,  0.4648, -1.0580],
         [-1.0745,  0.95...921, -0.9019,  0.0509],
         [ 0.7113,  0.4269,  1.4130, -0.0791],
         [ 1.0618, -0.6267, -1.0863, -0.7031]]])
kernel = tensor([[[ 1.6309,  0.4585,  1.7166, -0.7307,  0.6114, -0.7076],
         [ 0.7600,  0.5615, -1.1005,  1.6964,  0.5282....9640, -0.5779,  0.0347, -1.2997, -0.7377, -1.2602],
         [-0.3562,  1.0706,  1.6303,  0.0573, -0.9721,  0.0475]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[full-(2, 3)-6-5] ________________________

batch_shape = (2, 3), m = 5, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767],
         [ 0.2252,  0.4648, -1.0580, -0.3048,  0.0572],
      ...005],
         [ 0.1829,  1.3409, -1.0863, -0.7031, -0.8052],
         [-0.3629, -0.4370, -0.4687,  0.5772, -0.6045]]])
kernel = tensor([[[ 0.7600,  0.5615,  2.0122, -0.2271,  0.2868, -0.5177],
         [ 0.0108,  0.8433, -0.0944, -0.8925,  0.8185....1303, -0.6333, -0.5996,  0.9252, -0.9721,  0.0475],
         [-0.7703, -1.5547, -2.1732, -0.4930, -0.0340, -0.6844]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[full-(2, 3)-6-10] ________________________

batch_shape = (2, 3), m = 10, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648,
          -1.0580, -0.3048,  0.0572],
       ...9216],
         [ 0.2086, -0.1922, -1.6648,  2.2198,  0.2171,  1.3690, -0.3084,
          -0.3429,  0.0434,  0.1462]]])
kernel = tensor([[[-0.3975, -0.0780,  1.1016, -0.1718,  0.9640, -0.5779],
         [ 0.0347, -1.2997, -0.7377, -1.2602, -0.3562....5293, -0.4531, -1.1189,  0.1871,  0.7460,  0.2136],
         [ 0.1550, -0.0921,  1.3397,  0.0687,  0.3938, -0.4968]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[full-(2, 3)-10-2] ________________________

batch_shape = (2, 3), m = 2, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[-0.1115,  0.1204],
         [-0.3696, -0.2404],
         [-1.1969,  0.2093]],

        [[-0.9724, -0.7550],
         [ 0.3239, -0.1085],
         [ 0.2103, -0.3908]]])
kernel = tensor([[[-0.0132, -0.4622, -0.2632, -0.7370, -1.5169, -0.7768,  1.2984,
          -0.6320,  0.6603, -0.5331],
       ...0780],
         [ 1.1016, -0.1718, -1.1805,  1.0556,  0.1799, -0.4323, -0.7377,
          -1.2602, -0.3562,  1.0706]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[full-(2, 3)-10-3] ________________________

batch_shape = (2, 3), m = 3, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  1.2984],
         [-0.6320, -0.7536,  0.0974],
         [-1.0334,  0.1820, -1.0745]],

        [[ 0.9522, -0.4844,  0.0673],
         [-0.1259,  1.4190, -1.1132],
         [ 0.9542,  0.7113,  0.4269]]])
kernel = tensor([[[ 0.1440, -1.1005,  0.1829,  1.3409, -0.0374, -1.5155,  1.6309,
           0.4585, -0.4370, -0.4687],
       ...9087],
         [ 1.8196,  0.4511, -1.0943,  0.6026,  0.5989, -1.4274, -0.6300,
           0.4348, -1.0199,  0.6034]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[full-(2, 3)-10-4] ________________________

batch_shape = (2, 3), m = 4, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665],
         [ 0.3767,  0.2252,  0.4648, -1.0580],
         [-1.0745,  0.95...921, -0.9019,  0.0509],
         [ 0.7113,  0.4269,  1.4130, -0.0791],
         [ 1.0618, -0.6267, -1.0863, -0.7031]]])
kernel = tensor([[[ 1.6309,  0.4585,  1.7166, -0.7307,  0.6114, -0.7076,  0.7600,
           0.5615, -1.1005,  1.6964],
       ...0536],
         [-1.1751, -0.0094, -1.0199,  0.6034, -2.1064, -0.0826,  0.7310,
           0.2947, -0.8301,  0.3838]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[full-(2, 3)-10-5] ________________________

batch_shape = (2, 3), m = 5, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767],
         [ 0.2252,  0.4648, -1.0580, -0.3048,  0.0572],
      ...005],
         [ 0.1829,  1.3409, -1.0863, -0.7031, -0.8052],
         [-0.3629, -0.4370, -0.4687,  0.5772, -0.6045]]])
kernel = tensor([[[ 0.7600,  0.5615,  2.0122, -0.2271,  0.2868, -0.5177,  0.0108,
           0.8433, -0.0944, -0.8925],
       ...8380],
         [ 0.6207,  0.0158, -0.8301,  0.3838, -1.6000,  0.3316, -0.0565,
           0.9084,  0.7460,  0.2136]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[full-(2, 3)-10-6] ________________________

batch_shape = (2, 3), m = 6, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
         [ 0.4648, -1.0580, -0.3048,  0.0572, -1.1788....6309,  0.4585,  1.7166, -0.7307,  0.5772, -0.6045],
         [ 1.4284,  0.7550, -1.1005,  1.6964,  0.5282,  1.0614]]])
kernel = tensor([[[ 0.0108,  0.8433,  0.9058,  0.1582,  0.2638, -0.6327,  2.3189,
           0.9049, -0.3727, -0.0103],
       ...4531],
         [-1.1189,  0.1871,  0.7460,  0.2136,  0.1550, -0.0921,  1.3397,
           0.0687,  0.3938, -0.4968]]])
mode = 'full'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-2-3] __________________________

batch_shape = (), m = 3, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696])
kernel = tensor([-0.2404, -1.1969]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-2-4] __________________________

batch_shape = (), m = 4, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404])
kernel = tensor([-1.1969,  0.2093]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-2-5] __________________________

batch_shape = (), m = 5, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969])
kernel = tensor([ 0.2093, -0.9724]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-2-6] __________________________

batch_shape = (), m = 6, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093])
kernel = tensor([-0.9724, -0.7550]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-2-10] _________________________

batch_shape = (), m = 10, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550,
         0.3239, -0.1085])
kernel = tensor([ 0.2103, -0.3908]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-3-2] __________________________

batch_shape = (), m = 2, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204])
kernel = tensor([-0.3696, -0.2404, -1.1969]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-3-4] __________________________

batch_shape = (), m = 4, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404])
kernel = tensor([-1.1969,  0.2093, -0.9724]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-3-5] __________________________

batch_shape = (), m = 5, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969])
kernel = tensor([ 0.2093, -0.9724, -0.7550]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-3-6] __________________________

batch_shape = (), m = 6, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093])
kernel = tensor([-0.9724, -0.7550,  0.3239]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-3-10] _________________________

batch_shape = (), m = 10, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550,
         0.3239, -0.1085])
kernel = tensor([ 0.2103, -0.3908,  0.2350]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-4-2] __________________________

batch_shape = (), m = 2, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204])
kernel = tensor([-0.3696, -0.2404, -1.1969,  0.2093]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-4-3] __________________________

batch_shape = (), m = 3, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696])
kernel = tensor([-0.2404, -1.1969,  0.2093, -0.9724]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-4-5] __________________________

batch_shape = (), m = 5, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969])
kernel = tensor([ 0.2093, -0.9724, -0.7550,  0.3239]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-4-6] __________________________

batch_shape = (), m = 6, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093])
kernel = tensor([-0.9724, -0.7550,  0.3239, -0.1085]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-4-10] _________________________

batch_shape = (), m = 10, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550,
         0.3239, -0.1085])
kernel = tensor([ 0.2103, -0.3908,  0.2350,  0.6653]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-5-2] __________________________

batch_shape = (), m = 2, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204])
kernel = tensor([-0.3696, -0.2404, -1.1969,  0.2093, -0.9724]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-5-3] __________________________

batch_shape = (), m = 3, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696])
kernel = tensor([-0.2404, -1.1969,  0.2093, -0.9724, -0.7550]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-5-4] __________________________

batch_shape = (), m = 4, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404])
kernel = tensor([-1.1969,  0.2093, -0.9724, -0.7550,  0.3239]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-5-6] __________________________

batch_shape = (), m = 6, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093])
kernel = tensor([-0.9724, -0.7550,  0.3239, -0.1085,  0.2103]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-5-10] _________________________

batch_shape = (), m = 10, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550,
         0.3239, -0.1085])
kernel = tensor([ 0.2103, -0.3908,  0.2350,  0.6653,  0.3528]), mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-6-2] __________________________

batch_shape = (), m = 2, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204])
kernel = tensor([-0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-6-3] __________________________

batch_shape = (), m = 3, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696])
kernel = tensor([-0.2404, -1.1969,  0.2093, -0.9724, -0.7550,  0.3239])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-6-4] __________________________

batch_shape = (), m = 4, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404])
kernel = tensor([-1.1969,  0.2093, -0.9724, -0.7550,  0.3239, -0.1085])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-6-5] __________________________

batch_shape = (), m = 5, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969])
kernel = tensor([ 0.2093, -0.9724, -0.7550,  0.3239, -0.1085,  0.2103])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-6-10] _________________________

batch_shape = (), m = 10, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550,
         0.3239, -0.1085])
kernel = tensor([ 0.2103, -0.3908,  0.2350,  0.6653,  0.3528,  0.9728])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-10-2] _________________________

batch_shape = (), m = 2, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204])
kernel = tensor([-0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550,  0.3239, -0.1085,
         0.2103, -0.3908])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-10-3] _________________________

batch_shape = (), m = 3, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696])
kernel = tensor([-0.2404, -1.1969,  0.2093, -0.9724, -0.7550,  0.3239, -0.1085,  0.2103,
        -0.3908,  0.2350])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-10-4] _________________________

batch_shape = (), m = 4, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404])
kernel = tensor([-1.1969,  0.2093, -0.9724, -0.7550,  0.3239, -0.1085,  0.2103, -0.3908,
         0.2350,  0.6653])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-10-5] _________________________

batch_shape = (), m = 5, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969])
kernel = tensor([ 0.2093, -0.9724, -0.7550,  0.3239, -0.1085,  0.2103, -0.3908,  0.2350,
         0.6653,  0.3528])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[valid-()-10-6] _________________________

batch_shape = (), m = 6, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093])
kernel = tensor([-0.9724, -0.7550,  0.3239, -0.1085,  0.2103, -0.3908,  0.2350,  0.6653,
         0.3528,  0.9728])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-2-3] _________________________

batch_shape = (4,), m = 3, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204, -0.3696],
        [-0.2404, -1.1969,  0.2093],
        [-0.9724, -0.7550,  0.3239],
        [-0.1085,  0.2103, -0.3908]])
kernel = tensor([[ 0.2350,  0.6653],
        [ 0.3528,  0.9728],
        [-0.0386, -0.8861],
        [-0.4709, -0.4269]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-2-4] _________________________

batch_shape = (4,), m = 4, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665],
        [ 0.3767,  0.2252,  0.4648, -1.0580],
        [-0.3048,  0.0572, -1.1788,  0.2451],
        [ 1.0664,  1.1940,  1.2815,  0.6294]])
kernel = tensor([[-0.0386, -0.8861],
        [-0.4709, -0.4269],
        [-0.0283,  1.4220],
        [-0.3886, -0.8903]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-2-5] _________________________

batch_shape = (4,), m = 5, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665, -0.7536],
        [ 0.0974, -1.0334,  0.1820, -1.0745,  0.9522],
        [ 1.9336, -1.1461, -0.1259,  1.4190, -1.1132],
        [ 0.9542,  0.7113,  0.4269,  1.4130, -0.0791]])
kernel = tensor([[ 0.7290,  1.2775],
        [-1.0815, -1.3027],
        [ 1.0827, -1.3841],
        [ 0.4033, -1.2239]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-2-6] _________________________

batch_shape = (4,), m = 6, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
        [ 0.4648, -1.0580, -1.0745,  0.9522,  1.9336, ... 0.6059, -0.3921, -0.9019,  0.0509,  0.7113,  0.4269],
        [ 1.4130, -0.0791,  1.0618, -0.6267, -1.0863, -0.7031]])
kernel = tensor([[ 1.0827, -1.3841],
        [ 0.4033, -1.2239],
        [ 0.7017,  2.2139],
        [-0.0276,  1.0541]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-2-10] ________________________

batch_shape = (4,), m = 10, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648, -1.0580,
         -0.3048,  0.0572],
        [...-0.7076],
        [ 0.7600,  0.5615, -1.1005,  1.6964,  0.5282,  1.0614,  0.2744,  2.2121,
         -0.0944, -0.8925]])
kernel = tensor([[ 0.7885,  0.3208],
        [ 0.8456, -0.3621],
        [ 0.1027, -3.5310],
        [ 0.5485, -1.6063]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-3-2] _________________________

batch_shape = (4,), m = 2, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204],
        [-0.3696, -0.2404],
        [-1.1969,  0.2093],
        [-0.9724, -0.7550]])
kernel = tensor([[ 0.3239, -0.1085,  0.2103],
        [-0.3908,  0.2350,  0.6653],
        [ 0.3528,  0.9728, -0.0386],
        [-0.8861, -0.4709, -0.4269]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-3-4] _________________________

batch_shape = (4,), m = 4, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665],
        [ 0.3767,  0.2252,  0.4648, -1.0580],
        [-0.3048,  0.0572, -1.1788,  0.2451],
        [ 1.0664,  1.1940,  1.2815,  0.6294]])
kernel = tensor([[-0.0386, -0.8861, -0.4709],
        [-0.4269, -0.0283,  1.4220],
        [-0.3886, -0.8903, -0.9601],
        [-0.4087,  1.0764, -0.4015]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-3-5] _________________________

batch_shape = (4,), m = 5, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665, -0.7536],
        [ 0.0974, -1.0334,  0.1820, -1.0745,  0.9522],
        [ 1.9336, -1.1461, -0.1259,  1.4190, -1.1132],
        [ 0.9542,  0.7113,  0.4269,  1.4130, -0.0791]])
kernel = tensor([[ 0.7290,  1.2775, -1.0815],
        [-1.3027,  1.0827, -1.3841],
        [ 0.4033, -1.2239,  0.7017],
        [ 2.2139, -0.0276,  1.0541]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-3-6] _________________________

batch_shape = (4,), m = 6, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
        [ 0.4648, -1.0580, -1.0745,  0.9522,  1.9336, ... 0.6059, -0.3921, -0.9019,  0.0509,  0.7113,  0.4269],
        [ 1.4130, -0.0791,  1.0618, -0.6267, -1.0863, -0.7031]])
kernel = tensor([[ 1.0827, -1.3841,  0.4033],
        [-1.2239,  0.7017,  2.2139],
        [-0.0276,  1.0541,  0.5661],
        [-0.3820,  0.8807,  0.2710]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-3-10] ________________________

batch_shape = (4,), m = 10, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648, -1.0580,
         -0.3048,  0.0572],
        [...-0.7076],
        [ 0.7600,  0.5615, -1.1005,  1.6964,  0.5282,  1.0614,  0.2744,  2.2121,
         -0.0944, -0.8925]])
kernel = tensor([[ 0.7885,  0.3208,  0.8456],
        [-0.3621,  0.1027, -3.5310],
        [ 0.5485, -1.6063,  0.7281],
        [ 0.6609,  0.2391,  0.0340]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-4-2] _________________________

batch_shape = (4,), m = 2, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204],
        [-0.3696, -0.2404],
        [-1.1969,  0.2093],
        [-0.9724, -0.7550]])
kernel = tensor([[-0.1061, -0.1555, -1.3914,  0.1816],
        [-0.0132, -0.4622, -0.2632, -0.7370],
        [-2.4337,  0.3042, -1.2614,  0.4050],
        [ 0.6603, -0.5331, -0.6030,  0.7264]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-4-3] _________________________

batch_shape = (4,), m = 3, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204, -0.3696],
        [-0.2404, -1.1969,  0.2093],
        [-0.9724, -0.7550,  0.3239],
        [-0.1085,  0.2103, -0.3908]])
kernel = tensor([[-0.0132, -0.4622, -0.2632, -0.7370],
        [-1.5169, -0.7768,  1.2984, -0.6320],
        [ 0.6603, -0.5331, -0.6030,  0.7264],
        [-0.6457,  0.4280, -0.4844,  0.0673]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-4-5] _________________________

batch_shape = (4,), m = 5, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665, -0.7536],
        [ 0.0974, -1.0334,  0.1820, -1.0745,  0.9522],
        [ 1.9336, -1.1461, -0.1259,  1.4190, -1.1132],
        [ 0.9542,  0.7113,  0.4269,  1.4130, -0.0791]])
kernel = tensor([[ 0.1829,  1.3409, -0.0374, -1.5155],
        [ 1.6309,  0.4585,  1.7166, -0.7307],
        [ 0.5772, -0.6045,  1.4284,  0.7550],
        [-1.1005,  1.6964,  0.5282,  1.0614]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-4-6] _________________________

batch_shape = (4,), m = 6, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
        [ 0.4648, -1.0580, -1.0745,  0.9522,  1.9336, ... 0.6059, -0.3921, -0.9019,  0.0509,  0.7113,  0.4269],
        [ 1.4130, -0.0791,  1.0618, -0.6267, -1.0863, -0.7031]])
kernel = tensor([[ 1.6309,  0.4585,  1.7166, -0.7307],
        [ 0.6114, -0.7076,  0.7600,  0.5615],
        [-1.1005,  1.6964,  0.5282,  1.0614],
        [ 0.2744,  2.2121, -0.0944, -0.8925]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-4-10] ________________________

batch_shape = (4,), m = 10, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648, -1.0580,
         -0.3048,  0.0572],
        [...-0.7076],
        [ 0.7600,  0.5615, -1.1005,  1.6964,  0.5282,  1.0614,  0.2744,  2.2121,
         -0.0944, -0.8925]])
kernel = tensor([[ 0.2638, -0.6327,  2.3189,  0.9049],
        [ 0.1957, -2.7479,  1.7876,  1.0033],
        [ 0.2395,  0.5696,  0.3293,  0.1652],
        [-1.6648,  2.2198,  0.2171,  1.3690]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-5-2] _________________________

batch_shape = (4,), m = 2, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204],
        [-0.3696, -0.2404],
        [-1.1969,  0.2093],
        [-0.9724, -0.7550]])
kernel = tensor([[-0.1061, -0.1555, -1.3914,  0.1816,  0.6059],
        [-0.3921, -0.9019,  0.0509,  0.6298,  0.0847],
        [ 0.1440, -1.1005,  1.0618, -0.6267, -1.0863],
        [-0.7031, -0.8052, -0.3629, -0.4370, -0.4687]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-5-3] _________________________

batch_shape = (4,), m = 3, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204, -0.3696],
        [-0.2404, -1.1969,  0.2093],
        [-0.9724, -0.7550,  0.3239],
        [-0.1085,  0.2103, -0.3908]])
kernel = tensor([[-0.0132, -0.4622, -0.2632, -0.7370,  0.6298],
        [ 0.0847,  0.1440, -1.1005,  0.1829,  1.3409],
        [-0.0374, -1.5155, -0.8052, -0.3629, -0.4370],
        [-0.4687,  0.5772, -0.6045,  1.4284,  0.7550]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-5-4] _________________________

batch_shape = (4,), m = 4, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665],
        [ 0.3767,  0.2252,  0.4648, -1.0580],
        [-0.3048,  0.0572, -1.1788,  0.2451],
        [ 1.0664,  1.1940,  1.2815,  0.6294]])
kernel = tensor([[-1.5169, -0.7768,  1.2984, -0.6320,  0.1829],
        [ 1.3409, -0.0374, -1.5155,  1.6309,  0.4585],
        [ 1.7166, -0.7307,  0.5772, -0.6045,  1.4284],
        [ 0.7550, -1.1005,  1.6964,  0.5282,  1.0614]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-5-6] _________________________

batch_shape = (4,), m = 6, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
        [ 0.4648, -1.0580, -1.0745,  0.9522,  1.9336, ... 0.6059, -0.3921, -0.9019,  0.0509,  0.7113,  0.4269],
        [ 1.4130, -0.0791,  1.0618, -0.6267, -1.0863, -0.7031]])
kernel = tensor([[ 1.6309,  0.4585,  1.7166, -0.7307,  0.1957],
        [-2.7479,  1.7876,  1.0033, -0.3930, -0.9216],
        [ 0.2086, -0.1922, -1.6648,  2.2198,  0.2171],
        [ 1.3690, -0.3084, -0.3429,  0.0434,  0.1462]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-5-10] ________________________

batch_shape = (4,), m = 10, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648, -1.0580,
         -0.3048,  0.0572],
        [...-0.7076],
        [ 0.7600,  0.5615, -1.1005,  1.6964,  0.5282,  1.0614,  0.2744,  2.2121,
         -0.0944, -0.8925]])
kernel = tensor([[ 0.2638, -0.6327,  2.3189,  0.9049, -0.3975],
        [-0.0780,  1.1016, -0.1718,  0.9640, -0.5779],
        [ 0.0347, -1.2997, -0.7377, -1.2602, -0.3562],
        [ 1.0706,  1.6303,  0.0573, -0.9721,  0.0475]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-6-2] _________________________

batch_shape = (4,), m = 2, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204],
        [-0.3696, -0.2404],
        [-1.1969,  0.2093],
        [-0.9724, -0.7550]])
kernel = tensor([[-0.1061, -0.1555, -1.3914,  0.1816, -0.0132, -0.4622],
        [-0.2632, -0.7370,  0.6298,  0.0847,  0.1440, ... 0.1829,  1.3409, -0.0374, -1.5155, -0.8052, -0.3629],
        [-0.4370, -0.4687,  0.5772, -0.6045,  1.4284,  0.7550]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-6-3] _________________________

batch_shape = (4,), m = 3, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204, -0.3696],
        [-0.2404, -1.1969,  0.2093],
        [-0.9724, -0.7550,  0.3239],
        [-0.1085,  0.2103, -0.3908]])
kernel = tensor([[-0.0132, -0.4622, -0.2632, -0.7370, -1.5169, -0.7768],
        [ 1.2984, -0.6320,  0.1829,  1.3409, -0.0374, ... 1.6309,  0.4585,  1.7166, -0.7307,  0.5772, -0.6045],
        [ 1.4284,  0.7550, -1.1005,  1.6964,  0.5282,  1.0614]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-6-4] _________________________

batch_shape = (4,), m = 4, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665],
        [ 0.3767,  0.2252,  0.4648, -1.0580],
        [-0.3048,  0.0572, -1.1788,  0.2451],
        [ 1.0664,  1.1940,  1.2815,  0.6294]])
kernel = tensor([[-1.5169, -0.7768,  1.2984, -0.6320, -0.7536,  0.0974],
        [-1.0334,  0.1820,  1.6309,  0.4585,  1.7166, ... 0.6114, -0.7076,  0.7600,  0.5615, -1.1005,  1.6964],
        [ 0.5282,  1.0614,  0.2744,  2.2121, -0.0944, -0.8925]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-6-5] _________________________

batch_shape = (4,), m = 5, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665, -0.7536],
        [ 0.0974, -1.0334,  0.1820, -1.0745,  0.9522],
        [ 1.9336, -1.1461, -0.1259,  1.4190, -1.1132],
        [ 0.9542,  0.7113,  0.4269,  1.4130, -0.0791]])
kernel = tensor([[ 0.1829,  1.3409, -0.0374, -1.5155,  1.6309,  0.4585],
        [ 1.7166, -0.7307,  0.1957, -2.7479,  1.7876, ...-0.3930, -0.9216,  0.2086, -0.1922, -1.6648,  2.2198],
        [ 0.2171,  1.3690, -0.3084, -0.3429,  0.0434,  0.1462]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-6-10] ________________________

batch_shape = (4,), m = 10, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648, -1.0580,
         -0.3048,  0.0572],
        [...-0.7076],
        [ 0.7600,  0.5615, -1.1005,  1.6964,  0.5282,  1.0614,  0.2744,  2.2121,
         -0.0944, -0.8925]])
kernel = tensor([[ 0.2638, -0.6327,  2.3189,  0.9049,  0.1957, -2.7479],
        [ 1.7876,  1.0033,  0.9640, -0.5779,  0.0347, ... 1.2775, -0.5276,  1.1303, -0.6333,  1.6303,  0.0573],
        [-0.9721,  0.0475, -0.7703, -1.5547, -2.1732, -0.4930]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-10-2] ________________________

batch_shape = (4,), m = 2, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204],
        [-0.3696, -0.2404],
        [-1.1969,  0.2093],
        [-0.9724, -0.7550]])
kernel = tensor([[-0.1061, -0.1555, -1.3914,  0.1816, -0.0132, -0.4622, -0.2632, -0.7370,
         -2.4337,  0.3042],
        [... 0.8433],
        [ 0.9058,  0.1582,  0.8185,  0.6440, -0.1228,  0.7623, -0.3727, -0.0103,
         -2.6528, -1.9059]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-10-3] ________________________

batch_shape = (4,), m = 3, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204, -0.3696],
        [-0.2404, -1.1969,  0.2093],
        [-0.9724, -0.7550,  0.3239],
        [-0.1085,  0.2103, -0.3908]])
kernel = tensor([[-0.0132, -0.4622, -0.2632, -0.7370, -1.5169, -0.7768,  1.2984, -0.6320,
          0.6603, -0.5331],
        [...-0.6327],
        [ 2.3189,  0.9049, -0.3727, -0.0103, -2.6528, -1.9059,  0.2395,  0.5696,
          0.3293,  0.1652]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-10-4] ________________________

batch_shape = (4,), m = 4, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665],
        [ 0.3767,  0.2252,  0.4648, -1.0580],
        [-0.3048,  0.0572, -1.1788,  0.2451],
        [ 1.0664,  1.1940,  1.2815,  0.6294]])
kernel = tensor([[-1.5169, -0.7768,  1.2984, -0.6320, -0.7536,  0.0974, -1.0334,  0.1820,
         -0.6457,  0.4280],
        [...-2.7479],
        [ 1.7876,  1.0033,  0.2395,  0.5696,  0.3293,  0.1652, -1.6648,  2.2198,
          0.2171,  1.3690]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-10-5] ________________________

batch_shape = (4,), m = 5, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665, -0.7536],
        [ 0.0974, -1.0334,  0.1820, -1.0745,  0.9522],
        [ 1.9336, -1.1461, -0.1259,  1.4190, -1.1132],
        [ 0.9542,  0.7113,  0.4269,  1.4130, -0.0791]])
kernel = tensor([[ 0.1829,  1.3409, -0.0374, -1.5155,  1.6309,  0.4585,  1.7166, -0.7307,
          0.5772, -0.6045],
        [...-0.5779],
        [ 0.0347, -1.2997, -0.7377, -1.2602, -0.3562,  1.0706,  1.6303,  0.0573,
         -0.9721,  0.0475]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[valid-(4,)-10-6] ________________________

batch_shape = (4,), m = 6, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
        [ 0.4648, -1.0580, -1.0745,  0.9522,  1.9336, ... 0.6059, -0.3921, -0.9019,  0.0509,  0.7113,  0.4269],
        [ 1.4130, -0.0791,  1.0618, -0.6267, -1.0863, -0.7031]])
kernel = tensor([[ 1.6309,  0.4585,  1.7166, -0.7307,  0.6114, -0.7076,  0.7600,  0.5615,
         -1.1005,  1.6964],
        [...-0.5276],
        [ 1.1303, -0.6333,  1.6303,  0.0573, -0.9721,  0.0475, -0.7703, -1.5547,
         -2.1732, -0.4930]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-2-3] ________________________

batch_shape = (2, 3), m = 3, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  1.2984],
         [-0.6320, -0.7536,  0.0974],
         [-1.0334,  0.1820, -1.0745]],

        [[ 0.9522, -0.4844,  0.0673],
         [-0.1259,  1.4190, -1.1132],
         [ 0.9542,  0.7113,  0.4269]]])
kernel = tensor([[[ 0.9657,  0.7057],
         [ 0.7290,  1.2775],
         [-1.0815, -1.3027]],

        [[ 1.0827, -1.3841],
         [ 0.4033, -1.2239],
         [ 0.7017,  2.2139]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-2-4] ________________________

batch_shape = (2, 3), m = 4, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665],
         [ 0.3767,  0.2252,  0.4648, -1.0580],
         [-1.0745,  0.95...921, -0.9019,  0.0509],
         [ 0.7113,  0.4269,  1.4130, -0.0791],
         [ 1.0618, -0.6267, -1.0863, -0.7031]]])
kernel = tensor([[[ 1.0827, -1.3841],
         [ 0.4033, -1.2239],
         [ 0.7017,  2.2139]],

        [[-0.0276,  1.0541],
         [ 0.5661, -0.3820],
         [ 0.8807,  0.2710]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-2-5] ________________________

batch_shape = (2, 3), m = 5, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767],
         [ 0.2252,  0.4648, -1.0580, -0.3048,  0.0572],
      ...005],
         [ 0.1829,  1.3409, -1.0863, -0.7031, -0.8052],
         [-0.3629, -0.4370, -0.4687,  0.5772, -0.6045]]])
kernel = tensor([[[-0.0276,  1.0541],
         [ 0.5661, -0.3820],
         [ 0.8807,  0.2710]],

        [[ 0.7694,  0.3453],
         [ 1.8979, -0.2357],
         [ 0.7885,  0.3208]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-2-6] ________________________

batch_shape = (2, 3), m = 6, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
         [ 0.4648, -1.0580, -0.3048,  0.0572, -1.1788....6309,  0.4585,  1.7166, -0.7307,  0.5772, -0.6045],
         [ 1.4284,  0.7550, -1.1005,  1.6964,  0.5282,  1.0614]]])
kernel = tensor([[[ 0.7694,  0.3453],
         [ 1.8979, -0.2357],
         [ 0.7885,  0.3208]],

        [[ 0.8456, -0.3621],
         [ 0.1027, -3.5310],
         [ 0.5485, -1.6063]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-2-10] _______________________

batch_shape = (2, 3), m = 10, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648,
          -1.0580, -0.3048,  0.0572],
       ...9216],
         [ 0.2086, -0.1922, -1.6648,  2.2198,  0.2171,  1.3690, -0.3084,
          -0.3429,  0.0434,  0.1462]]])
kernel = tensor([[[-0.3604,  1.2101],
         [-1.0814,  0.0789],
         [ 0.2913, -0.5023]],

        [[-0.9306,  0.9086],
         [-0.7788, -1.4453],
         [ 0.7636, -0.2469]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-3-2] ________________________

batch_shape = (2, 3), m = 2, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[-0.1115,  0.1204],
         [-0.3696, -0.2404],
         [-1.1969,  0.2093]],

        [[-0.9724, -0.7550],
         [ 0.3239, -0.1085],
         [ 0.2103, -0.3908]]])
kernel = tensor([[[-0.0132, -0.4622, -0.9019],
         [ 0.0509,  0.6298,  0.0847],
         [ 0.1440, -1.1005,  0.1829]],

        [[ 1.3409, -1.0863, -0.7031],
         [-0.8052, -0.3629, -0.4370],
         [-0.4687,  0.5772, -0.6045]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-3-4] ________________________

batch_shape = (2, 3), m = 4, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665],
         [ 0.3767,  0.2252,  0.4648, -1.0580],
         [-1.0745,  0.95...921, -0.9019,  0.0509],
         [ 0.7113,  0.4269,  1.4130, -0.0791],
         [ 1.0618, -0.6267, -1.0863, -0.7031]]])
kernel = tensor([[[ 1.6309,  0.4585,  2.3189],
         [ 0.9049,  0.1957, -2.7479],
         [ 1.7876,  1.0033, -0.3930]],

        [[-0.9216,  0.3293,  0.1652],
         [-1.6648,  2.2198,  0.2171],
         [ 1.3690, -0.3084, -0.3429]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-3-5] ________________________

batch_shape = (2, 3), m = 5, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767],
         [ 0.2252,  0.4648, -1.0580, -0.3048,  0.0572],
      ...005],
         [ 0.1829,  1.3409, -1.0863, -0.7031, -0.8052],
         [-0.3629, -0.4370, -0.4687,  0.5772, -0.6045]]])
kernel = tensor([[[ 0.7600,  0.5615, -0.3930],
         [-0.9216,  0.2086, -0.1922],
         [-0.4884, -0.9498, -0.1966]],

        [[-0.5345, -0.3084, -0.3429],
         [ 0.0434,  0.1462,  1.6398],
         [-0.3044,  0.0143,  0.1944]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-3-6] ________________________

batch_shape = (2, 3), m = 6, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
         [ 0.4648, -1.0580, -0.3048,  0.0572, -1.1788....6309,  0.4585,  1.7166, -0.7307,  0.5772, -0.6045],
         [ 1.4284,  0.7550, -1.1005,  1.6964,  0.5282,  1.0614]]])
kernel = tensor([[[ 0.0108,  0.8433, -0.1966],
         [-0.5345,  0.6846,  0.7159],
         [-0.1843, -0.9072, -0.3975]],

        [[-0.0780,  0.0143,  0.1944],
         [-1.1805,  1.0556,  0.1799],
         [-0.4323, -0.7377, -1.2602]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-3-10] _______________________

batch_shape = (2, 3), m = 10, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648,
          -1.0580, -0.3048,  0.0572],
       ...9216],
         [ 0.2086, -0.1922, -1.6648,  2.2198,  0.2171,  1.3690, -0.3084,
          -0.3429,  0.0434,  0.1462]]])
kernel = tensor([[[-0.3975, -0.0780,  1.5178],
         [ 1.2231, -1.0315,  1.5939],
         [-0.4903,  0.9087,  1.8196]],

        [[ 0.4511, -1.0943,  0.6026],
         [ 0.5989, -1.4274, -0.6300],
         [ 0.4348, -1.0199,  0.6034]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-4-2] ________________________

batch_shape = (2, 3), m = 2, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[-0.1115,  0.1204],
         [-0.3696, -0.2404],
         [-1.1969,  0.2093]],

        [[-0.9724, -0.7550],
         [ 0.3239, -0.1085],
         [ 0.2103, -0.3908]]])
kernel = tensor([[[-0.0132, -0.4622, -0.2632, -0.7370],
         [-1.5169, -0.7768,  1.2984, -0.6320],
         [ 0.1829,  1.34...585,  1.7166, -0.7307],
         [ 0.5772, -0.6045,  1.4284,  0.7550],
         [-1.1005,  1.6964,  0.5282,  1.0614]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-4-3] ________________________

batch_shape = (2, 3), m = 3, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  1.2984],
         [-0.6320, -0.7536,  0.0974],
         [-1.0334,  0.1820, -1.0745]],

        [[ 0.9522, -0.4844,  0.0673],
         [-0.1259,  1.4190, -1.1132],
         [ 0.9542,  0.7113,  0.4269]]])
kernel = tensor([[[ 0.1440, -1.1005,  0.1829,  1.3409],
         [-0.0374, -1.5155,  1.6309,  0.4585],
         [ 2.3189,  0.90...033, -0.3930, -0.9216],
         [ 0.3293,  0.1652, -1.6648,  2.2198],
         [ 0.2171,  1.3690, -0.3084, -0.3429]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-4-5] ________________________

batch_shape = (2, 3), m = 5, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767],
         [ 0.2252,  0.4648, -1.0580, -0.3048,  0.0572],
      ...005],
         [ 0.1829,  1.3409, -1.0863, -0.7031, -0.8052],
         [-0.3629, -0.4370, -0.4687,  0.5772, -0.6045]]])
kernel = tensor([[[ 0.7600,  0.5615,  2.0122, -0.2271],
         [ 0.2868, -0.5177,  0.0108,  0.8433],
         [-0.1966, -0.53...072, -0.3975, -0.0780],
         [ 0.0143,  0.1944, -1.1805,  1.0556],
         [ 0.1799, -0.4323, -0.7377, -1.2602]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-4-6] ________________________

batch_shape = (2, 3), m = 6, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
         [ 0.4648, -1.0580, -0.3048,  0.0572, -1.1788....6309,  0.4585,  1.7166, -0.7307,  0.5772, -0.6045],
         [ 1.4284,  0.7550, -1.1005,  1.6964,  0.5282,  1.0614]]])
kernel = tensor([[[ 0.0108,  0.8433,  0.9058,  0.1582],
         [ 0.2638, -0.6327,  2.3189,  0.9049],
         [-0.3975, -0.07...779,  0.0347, -1.2997],
         [-0.7377, -1.2602, -0.3562,  1.0706],
         [ 1.6303,  0.0573, -0.9721,  0.0475]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-4-10] _______________________

batch_shape = (2, 3), m = 10, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648,
          -1.0580, -0.3048,  0.0572],
       ...9216],
         [ 0.2086, -0.1922, -1.6648,  2.2198,  0.2171,  1.3690, -0.3084,
          -0.3429,  0.0434,  0.1462]]])
kernel = tensor([[[-0.3975, -0.0780,  1.1016, -0.1718],
         [ 0.9640, -0.5779,  0.0347, -1.2997],
         [ 1.8196,  0.45...536, -1.1751, -0.0094],
         [-1.0199,  0.6034, -2.1064, -0.0826],
         [ 0.7310,  0.2947, -0.8301,  0.3838]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-5-2] ________________________

batch_shape = (2, 3), m = 2, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[-0.1115,  0.1204],
         [-0.3696, -0.2404],
         [-1.1969,  0.2093]],

        [[-0.9724, -0.7550],
         [ 0.3239, -0.1085],
         [ 0.2103, -0.3908]]])
kernel = tensor([[[-0.0132, -0.4622, -0.2632, -0.7370, -1.5169],
         [-0.7768,  1.2984, -0.6320,  0.6603, -0.5331],
      ...615],
         [ 2.0122, -0.2271,  0.5282,  1.0614,  0.2744],
         [ 2.2121, -0.0944, -0.8925,  0.8185,  0.6440]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-5-3] ________________________

batch_shape = (2, 3), m = 3, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  1.2984],
         [-0.6320, -0.7536,  0.0974],
         [-1.0334,  0.1820, -1.0745]],

        [[ 0.9522, -0.4844,  0.0673],
         [-0.1259,  1.4190, -1.1132],
         [ 0.9542,  0.7113,  0.4269]]])
kernel = tensor([[[ 0.1440, -1.1005,  0.1829,  1.3409, -0.0374],
         [-1.5155,  1.6309,  0.4585, -0.4370, -0.4687],
      ...498],
         [-0.1966, -0.5345, -0.3084, -0.3429,  0.0434],
         [ 0.1462,  1.6398, -0.3044,  0.0143,  0.1944]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-5-4] ________________________

batch_shape = (2, 3), m = 4, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665],
         [ 0.3767,  0.2252,  0.4648, -1.0580],
         [-1.0745,  0.95...921, -0.9019,  0.0509],
         [ 0.7113,  0.4269,  1.4130, -0.0791],
         [ 1.0618, -0.6267, -1.0863, -0.7031]]])
kernel = tensor([[[ 1.6309,  0.4585,  1.7166, -0.7307,  0.6114],
         [-0.7076,  0.7600,  0.5615, -1.1005,  1.6964],
      ...072],
         [-0.3975, -0.0780,  0.0143,  0.1944, -1.1805],
         [ 1.0556,  0.1799, -0.4323, -0.7377, -1.2602]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-5-6] ________________________

batch_shape = (2, 3), m = 6, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
         [ 0.4648, -1.0580, -0.3048,  0.0572, -1.1788....6309,  0.4585,  1.7166, -0.7307,  0.5772, -0.6045],
         [ 1.4284,  0.7550, -1.1005,  1.6964,  0.5282,  1.0614]]])
kernel = tensor([[[ 0.0108,  0.8433,  0.9058,  0.1582,  0.2638],
         [-0.6327,  2.3189,  0.9049, -0.3727, -0.0103],
      ...333],
         [-0.5996,  0.9252, -0.9721,  0.0475, -0.7703],
         [-1.5547, -2.1732, -0.4930, -0.0340, -0.6844]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-5-10] _______________________

batch_shape = (2, 3), m = 10, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648,
          -1.0580, -0.3048,  0.0572],
       ...9216],
         [ 0.2086, -0.1922, -1.6648,  2.2198,  0.2171,  1.3690, -0.3084,
          -0.3429,  0.0434,  0.1462]]])
kernel = tensor([[[-0.3975, -0.0780,  1.1016, -0.1718,  0.9640],
         [-0.5779,  0.0347, -1.2997, -0.7377, -1.2602],
      ...380],
         [ 0.6207,  0.0158, -0.8301,  0.3838, -1.6000],
         [ 0.3316, -0.0565,  0.9084,  0.7460,  0.2136]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-6-2] ________________________

batch_shape = (2, 3), m = 2, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[-0.1115,  0.1204],
         [-0.3696, -0.2404],
         [-1.1969,  0.2093]],

        [[-0.9724, -0.7550],
         [ 0.3239, -0.1085],
         [ 0.2103, -0.3908]]])
kernel = tensor([[[-0.0132, -0.4622, -0.2632, -0.7370, -1.5169, -0.7768],
         [ 1.2984, -0.6320,  0.6603, -0.5331, -0.6030....0108,  0.8433,  0.9058,  0.1582,  0.8185,  0.6440],
         [-0.1228,  0.7623, -0.3727, -0.0103, -2.6528, -1.9059]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-6-3] ________________________

batch_shape = (2, 3), m = 3, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  1.2984],
         [-0.6320, -0.7536,  0.0974],
         [-1.0334,  0.1820, -1.0745]],

        [[ 0.9522, -0.4844,  0.0673],
         [-0.1259,  1.4190, -1.1132],
         [ 0.9542,  0.7113,  0.4269]]])
kernel = tensor([[[ 0.1440, -1.1005,  0.1829,  1.3409, -0.0374, -1.5155],
         [ 1.6309,  0.4585, -0.4370, -0.4687,  0.5772....1843, -0.9072, -0.3975, -0.0780,  0.0143,  0.1944],
         [-1.1805,  1.0556,  0.1799, -0.4323, -0.7377, -1.2602]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-6-4] ________________________

batch_shape = (2, 3), m = 4, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665],
         [ 0.3767,  0.2252,  0.4648, -1.0580],
         [-1.0745,  0.95...921, -0.9019,  0.0509],
         [ 0.7113,  0.4269,  1.4130, -0.0791],
         [ 1.0618, -0.6267, -1.0863, -0.7031]]])
kernel = tensor([[[ 1.6309,  0.4585,  1.7166, -0.7307,  0.6114, -0.7076],
         [ 0.7600,  0.5615, -1.1005,  1.6964,  0.5282....9640, -0.5779,  0.0347, -1.2997, -0.7377, -1.2602],
         [-0.3562,  1.0706,  1.6303,  0.0573, -0.9721,  0.0475]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-6-5] ________________________

batch_shape = (2, 3), m = 5, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767],
         [ 0.2252,  0.4648, -1.0580, -0.3048,  0.0572],
      ...005],
         [ 0.1829,  1.3409, -1.0863, -0.7031, -0.8052],
         [-0.3629, -0.4370, -0.4687,  0.5772, -0.6045]]])
kernel = tensor([[[ 0.7600,  0.5615,  2.0122, -0.2271,  0.2868, -0.5177],
         [ 0.0108,  0.8433, -0.0944, -0.8925,  0.8185....1303, -0.6333, -0.5996,  0.9252, -0.9721,  0.0475],
         [-0.7703, -1.5547, -2.1732, -0.4930, -0.0340, -0.6844]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-6-10] _______________________

batch_shape = (2, 3), m = 10, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648,
          -1.0580, -0.3048,  0.0572],
       ...9216],
         [ 0.2086, -0.1922, -1.6648,  2.2198,  0.2171,  1.3690, -0.3084,
          -0.3429,  0.0434,  0.1462]]])
kernel = tensor([[[-0.3975, -0.0780,  1.1016, -0.1718,  0.9640, -0.5779],
         [ 0.0347, -1.2997, -0.7377, -1.2602, -0.3562....5293, -0.4531, -1.1189,  0.1871,  0.7460,  0.2136],
         [ 0.1550, -0.0921,  1.3397,  0.0687,  0.3938, -0.4968]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-10-2] _______________________

batch_shape = (2, 3), m = 2, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[-0.1115,  0.1204],
         [-0.3696, -0.2404],
         [-1.1969,  0.2093]],

        [[-0.9724, -0.7550],
         [ 0.3239, -0.1085],
         [ 0.2103, -0.3908]]])
kernel = tensor([[[-0.0132, -0.4622, -0.2632, -0.7370, -1.5169, -0.7768,  1.2984,
          -0.6320,  0.6603, -0.5331],
       ...0780],
         [ 1.1016, -0.1718, -1.1805,  1.0556,  0.1799, -0.4323, -0.7377,
          -1.2602, -0.3562,  1.0706]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-10-3] _______________________

batch_shape = (2, 3), m = 3, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  1.2984],
         [-0.6320, -0.7536,  0.0974],
         [-1.0334,  0.1820, -1.0745]],

        [[ 0.9522, -0.4844,  0.0673],
         [-0.1259,  1.4190, -1.1132],
         [ 0.9542,  0.7113,  0.4269]]])
kernel = tensor([[[ 0.1440, -1.1005,  0.1829,  1.3409, -0.0374, -1.5155,  1.6309,
           0.4585, -0.4370, -0.4687],
       ...9087],
         [ 1.8196,  0.4511, -1.0943,  0.6026,  0.5989, -1.4274, -0.6300,
           0.4348, -1.0199,  0.6034]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-10-4] _______________________

batch_shape = (2, 3), m = 4, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665],
         [ 0.3767,  0.2252,  0.4648, -1.0580],
         [-1.0745,  0.95...921, -0.9019,  0.0509],
         [ 0.7113,  0.4269,  1.4130, -0.0791],
         [ 1.0618, -0.6267, -1.0863, -0.7031]]])
kernel = tensor([[[ 1.6309,  0.4585,  1.7166, -0.7307,  0.6114, -0.7076,  0.7600,
           0.5615, -1.1005,  1.6964],
       ...0536],
         [-1.1751, -0.0094, -1.0199,  0.6034, -2.1064, -0.0826,  0.7310,
           0.2947, -0.8301,  0.3838]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-10-5] _______________________

batch_shape = (2, 3), m = 5, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767],
         [ 0.2252,  0.4648, -1.0580, -0.3048,  0.0572],
      ...005],
         [ 0.1829,  1.3409, -1.0863, -0.7031, -0.8052],
         [-0.3629, -0.4370, -0.4687,  0.5772, -0.6045]]])
kernel = tensor([[[ 0.7600,  0.5615,  2.0122, -0.2271,  0.2868, -0.5177,  0.0108,
           0.8433, -0.0944, -0.8925],
       ...8380],
         [ 0.6207,  0.0158, -0.8301,  0.3838, -1.6000,  0.3316, -0.0565,
           0.9084,  0.7460,  0.2136]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[valid-(2, 3)-10-6] _______________________

batch_shape = (2, 3), m = 6, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
         [ 0.4648, -1.0580, -0.3048,  0.0572, -1.1788....6309,  0.4585,  1.7166, -0.7307,  0.5772, -0.6045],
         [ 1.4284,  0.7550, -1.1005,  1.6964,  0.5282,  1.0614]]])
kernel = tensor([[[ 0.0108,  0.8433,  0.9058,  0.1582,  0.2638, -0.6327,  2.3189,
           0.9049, -0.3727, -0.0103],
       ...4531],
         [-1.1189,  0.1871,  0.7460,  0.2136,  0.1550, -0.0921,  1.3397,
           0.0687,  0.3938, -0.4968]]])
mode = 'valid'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-2-3] __________________________

batch_shape = (), m = 3, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696])
kernel = tensor([-0.2404, -1.1969]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-2-4] __________________________

batch_shape = (), m = 4, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404])
kernel = tensor([-1.1969,  0.2093]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-2-5] __________________________

batch_shape = (), m = 5, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969])
kernel = tensor([ 0.2093, -0.9724]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-2-6] __________________________

batch_shape = (), m = 6, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093])
kernel = tensor([-0.9724, -0.7550]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-()-2-10] __________________________

batch_shape = (), m = 10, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550,
         0.3239, -0.1085])
kernel = tensor([ 0.2103, -0.3908]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-3-2] __________________________

batch_shape = (), m = 2, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204])
kernel = tensor([-0.3696, -0.2404, -1.1969]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-3-4] __________________________

batch_shape = (), m = 4, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404])
kernel = tensor([-1.1969,  0.2093, -0.9724]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-3-5] __________________________

batch_shape = (), m = 5, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969])
kernel = tensor([ 0.2093, -0.9724, -0.7550]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-3-6] __________________________

batch_shape = (), m = 6, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093])
kernel = tensor([-0.9724, -0.7550,  0.3239]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-()-3-10] __________________________

batch_shape = (), m = 10, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550,
         0.3239, -0.1085])
kernel = tensor([ 0.2103, -0.3908,  0.2350]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-4-2] __________________________

batch_shape = (), m = 2, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204])
kernel = tensor([-0.3696, -0.2404, -1.1969,  0.2093]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-4-3] __________________________

batch_shape = (), m = 3, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696])
kernel = tensor([-0.2404, -1.1969,  0.2093, -0.9724]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-4-5] __________________________

batch_shape = (), m = 5, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969])
kernel = tensor([ 0.2093, -0.9724, -0.7550,  0.3239]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-4-6] __________________________

batch_shape = (), m = 6, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093])
kernel = tensor([-0.9724, -0.7550,  0.3239, -0.1085]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-()-4-10] __________________________

batch_shape = (), m = 10, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550,
         0.3239, -0.1085])
kernel = tensor([ 0.2103, -0.3908,  0.2350,  0.6653]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-5-2] __________________________

batch_shape = (), m = 2, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204])
kernel = tensor([-0.3696, -0.2404, -1.1969,  0.2093, -0.9724]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-5-3] __________________________

batch_shape = (), m = 3, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696])
kernel = tensor([-0.2404, -1.1969,  0.2093, -0.9724, -0.7550]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-5-4] __________________________

batch_shape = (), m = 4, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404])
kernel = tensor([-1.1969,  0.2093, -0.9724, -0.7550,  0.3239]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-5-6] __________________________

batch_shape = (), m = 6, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093])
kernel = tensor([-0.9724, -0.7550,  0.3239, -0.1085,  0.2103]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-()-5-10] __________________________

batch_shape = (), m = 10, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550,
         0.3239, -0.1085])
kernel = tensor([ 0.2103, -0.3908,  0.2350,  0.6653,  0.3528]), mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-6-2] __________________________

batch_shape = (), m = 2, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204])
kernel = tensor([-0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-6-3] __________________________

batch_shape = (), m = 3, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696])
kernel = tensor([-0.2404, -1.1969,  0.2093, -0.9724, -0.7550,  0.3239])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-6-4] __________________________

batch_shape = (), m = 4, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404])
kernel = tensor([-1.1969,  0.2093, -0.9724, -0.7550,  0.3239, -0.1085])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
__________________________ test_convolve[same-()-6-5] __________________________

batch_shape = (), m = 5, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969])
kernel = tensor([ 0.2093, -0.9724, -0.7550,  0.3239, -0.1085,  0.2103])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-()-6-10] __________________________

batch_shape = (), m = 10, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550,
         0.3239, -0.1085])
kernel = tensor([ 0.2103, -0.3908,  0.2350,  0.6653,  0.3528,  0.9728])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-()-10-2] __________________________

batch_shape = (), m = 2, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204])
kernel = tensor([-0.3696, -0.2404, -1.1969,  0.2093, -0.9724, -0.7550,  0.3239, -0.1085,
         0.2103, -0.3908])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-()-10-3] __________________________

batch_shape = (), m = 3, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696])
kernel = tensor([-0.2404, -1.1969,  0.2093, -0.9724, -0.7550,  0.3239, -0.1085,  0.2103,
        -0.3908,  0.2350])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-()-10-4] __________________________

batch_shape = (), m = 4, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404])
kernel = tensor([-1.1969,  0.2093, -0.9724, -0.7550,  0.3239, -0.1085,  0.2103, -0.3908,
         0.2350,  0.6653])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-()-10-5] __________________________

batch_shape = (), m = 5, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969])
kernel = tensor([ 0.2093, -0.9724, -0.7550,  0.3239, -0.1085,  0.2103, -0.3908,  0.2350,
         0.6653,  0.3528])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-()-10-6] __________________________

batch_shape = (), m = 6, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([-0.1115,  0.1204, -0.3696, -0.2404, -1.1969,  0.2093])
kernel = tensor([-0.9724, -0.7550,  0.3239, -0.1085,  0.2103, -0.3908,  0.2350,  0.6653,
         0.3528,  0.9728])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-2-3] _________________________

batch_shape = (4,), m = 3, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204, -0.3696],
        [-0.2404, -1.1969,  0.2093],
        [-0.9724, -0.7550,  0.3239],
        [-0.1085,  0.2103, -0.3908]])
kernel = tensor([[ 0.2350,  0.6653],
        [ 0.3528,  0.9728],
        [-0.0386, -0.8861],
        [-0.4709, -0.4269]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-2-4] _________________________

batch_shape = (4,), m = 4, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665],
        [ 0.3767,  0.2252,  0.4648, -1.0580],
        [-0.3048,  0.0572, -1.1788,  0.2451],
        [ 1.0664,  1.1940,  1.2815,  0.6294]])
kernel = tensor([[-0.0386, -0.8861],
        [-0.4709, -0.4269],
        [-0.0283,  1.4220],
        [-0.3886, -0.8903]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-2-5] _________________________

batch_shape = (4,), m = 5, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665, -0.7536],
        [ 0.0974, -1.0334,  0.1820, -1.0745,  0.9522],
        [ 1.9336, -1.1461, -0.1259,  1.4190, -1.1132],
        [ 0.9542,  0.7113,  0.4269,  1.4130, -0.0791]])
kernel = tensor([[ 0.7290,  1.2775],
        [-1.0815, -1.3027],
        [ 1.0827, -1.3841],
        [ 0.4033, -1.2239]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-2-6] _________________________

batch_shape = (4,), m = 6, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
        [ 0.4648, -1.0580, -1.0745,  0.9522,  1.9336, ... 0.6059, -0.3921, -0.9019,  0.0509,  0.7113,  0.4269],
        [ 1.4130, -0.0791,  1.0618, -0.6267, -1.0863, -0.7031]])
kernel = tensor([[ 1.0827, -1.3841],
        [ 0.4033, -1.2239],
        [ 0.7017,  2.2139],
        [-0.0276,  1.0541]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(4,)-2-10] _________________________

batch_shape = (4,), m = 10, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648, -1.0580,
         -0.3048,  0.0572],
        [...-0.7076],
        [ 0.7600,  0.5615, -1.1005,  1.6964,  0.5282,  1.0614,  0.2744,  2.2121,
         -0.0944, -0.8925]])
kernel = tensor([[ 0.7885,  0.3208],
        [ 0.8456, -0.3621],
        [ 0.1027, -3.5310],
        [ 0.5485, -1.6063]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-3-2] _________________________

batch_shape = (4,), m = 2, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204],
        [-0.3696, -0.2404],
        [-1.1969,  0.2093],
        [-0.9724, -0.7550]])
kernel = tensor([[ 0.3239, -0.1085,  0.2103],
        [-0.3908,  0.2350,  0.6653],
        [ 0.3528,  0.9728, -0.0386],
        [-0.8861, -0.4709, -0.4269]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-3-4] _________________________

batch_shape = (4,), m = 4, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665],
        [ 0.3767,  0.2252,  0.4648, -1.0580],
        [-0.3048,  0.0572, -1.1788,  0.2451],
        [ 1.0664,  1.1940,  1.2815,  0.6294]])
kernel = tensor([[-0.0386, -0.8861, -0.4709],
        [-0.4269, -0.0283,  1.4220],
        [-0.3886, -0.8903, -0.9601],
        [-0.4087,  1.0764, -0.4015]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-3-5] _________________________

batch_shape = (4,), m = 5, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665, -0.7536],
        [ 0.0974, -1.0334,  0.1820, -1.0745,  0.9522],
        [ 1.9336, -1.1461, -0.1259,  1.4190, -1.1132],
        [ 0.9542,  0.7113,  0.4269,  1.4130, -0.0791]])
kernel = tensor([[ 0.7290,  1.2775, -1.0815],
        [-1.3027,  1.0827, -1.3841],
        [ 0.4033, -1.2239,  0.7017],
        [ 2.2139, -0.0276,  1.0541]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-3-6] _________________________

batch_shape = (4,), m = 6, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
        [ 0.4648, -1.0580, -1.0745,  0.9522,  1.9336, ... 0.6059, -0.3921, -0.9019,  0.0509,  0.7113,  0.4269],
        [ 1.4130, -0.0791,  1.0618, -0.6267, -1.0863, -0.7031]])
kernel = tensor([[ 1.0827, -1.3841,  0.4033],
        [-1.2239,  0.7017,  2.2139],
        [-0.0276,  1.0541,  0.5661],
        [-0.3820,  0.8807,  0.2710]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(4,)-3-10] _________________________

batch_shape = (4,), m = 10, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648, -1.0580,
         -0.3048,  0.0572],
        [...-0.7076],
        [ 0.7600,  0.5615, -1.1005,  1.6964,  0.5282,  1.0614,  0.2744,  2.2121,
         -0.0944, -0.8925]])
kernel = tensor([[ 0.7885,  0.3208,  0.8456],
        [-0.3621,  0.1027, -3.5310],
        [ 0.5485, -1.6063,  0.7281],
        [ 0.6609,  0.2391,  0.0340]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-4-2] _________________________

batch_shape = (4,), m = 2, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204],
        [-0.3696, -0.2404],
        [-1.1969,  0.2093],
        [-0.9724, -0.7550]])
kernel = tensor([[-0.1061, -0.1555, -1.3914,  0.1816],
        [-0.0132, -0.4622, -0.2632, -0.7370],
        [-2.4337,  0.3042, -1.2614,  0.4050],
        [ 0.6603, -0.5331, -0.6030,  0.7264]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-4-3] _________________________

batch_shape = (4,), m = 3, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204, -0.3696],
        [-0.2404, -1.1969,  0.2093],
        [-0.9724, -0.7550,  0.3239],
        [-0.1085,  0.2103, -0.3908]])
kernel = tensor([[-0.0132, -0.4622, -0.2632, -0.7370],
        [-1.5169, -0.7768,  1.2984, -0.6320],
        [ 0.6603, -0.5331, -0.6030,  0.7264],
        [-0.6457,  0.4280, -0.4844,  0.0673]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-4-5] _________________________

batch_shape = (4,), m = 5, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665, -0.7536],
        [ 0.0974, -1.0334,  0.1820, -1.0745,  0.9522],
        [ 1.9336, -1.1461, -0.1259,  1.4190, -1.1132],
        [ 0.9542,  0.7113,  0.4269,  1.4130, -0.0791]])
kernel = tensor([[ 0.1829,  1.3409, -0.0374, -1.5155],
        [ 1.6309,  0.4585,  1.7166, -0.7307],
        [ 0.5772, -0.6045,  1.4284,  0.7550],
        [-1.1005,  1.6964,  0.5282,  1.0614]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-4-6] _________________________

batch_shape = (4,), m = 6, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
        [ 0.4648, -1.0580, -1.0745,  0.9522,  1.9336, ... 0.6059, -0.3921, -0.9019,  0.0509,  0.7113,  0.4269],
        [ 1.4130, -0.0791,  1.0618, -0.6267, -1.0863, -0.7031]])
kernel = tensor([[ 1.6309,  0.4585,  1.7166, -0.7307],
        [ 0.6114, -0.7076,  0.7600,  0.5615],
        [-1.1005,  1.6964,  0.5282,  1.0614],
        [ 0.2744,  2.2121, -0.0944, -0.8925]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(4,)-4-10] _________________________

batch_shape = (4,), m = 10, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648, -1.0580,
         -0.3048,  0.0572],
        [...-0.7076],
        [ 0.7600,  0.5615, -1.1005,  1.6964,  0.5282,  1.0614,  0.2744,  2.2121,
         -0.0944, -0.8925]])
kernel = tensor([[ 0.2638, -0.6327,  2.3189,  0.9049],
        [ 0.1957, -2.7479,  1.7876,  1.0033],
        [ 0.2395,  0.5696,  0.3293,  0.1652],
        [-1.6648,  2.2198,  0.2171,  1.3690]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-5-2] _________________________

batch_shape = (4,), m = 2, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204],
        [-0.3696, -0.2404],
        [-1.1969,  0.2093],
        [-0.9724, -0.7550]])
kernel = tensor([[-0.1061, -0.1555, -1.3914,  0.1816,  0.6059],
        [-0.3921, -0.9019,  0.0509,  0.6298,  0.0847],
        [ 0.1440, -1.1005,  1.0618, -0.6267, -1.0863],
        [-0.7031, -0.8052, -0.3629, -0.4370, -0.4687]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-5-3] _________________________

batch_shape = (4,), m = 3, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204, -0.3696],
        [-0.2404, -1.1969,  0.2093],
        [-0.9724, -0.7550,  0.3239],
        [-0.1085,  0.2103, -0.3908]])
kernel = tensor([[-0.0132, -0.4622, -0.2632, -0.7370,  0.6298],
        [ 0.0847,  0.1440, -1.1005,  0.1829,  1.3409],
        [-0.0374, -1.5155, -0.8052, -0.3629, -0.4370],
        [-0.4687,  0.5772, -0.6045,  1.4284,  0.7550]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-5-4] _________________________

batch_shape = (4,), m = 4, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665],
        [ 0.3767,  0.2252,  0.4648, -1.0580],
        [-0.3048,  0.0572, -1.1788,  0.2451],
        [ 1.0664,  1.1940,  1.2815,  0.6294]])
kernel = tensor([[-1.5169, -0.7768,  1.2984, -0.6320,  0.1829],
        [ 1.3409, -0.0374, -1.5155,  1.6309,  0.4585],
        [ 1.7166, -0.7307,  0.5772, -0.6045,  1.4284],
        [ 0.7550, -1.1005,  1.6964,  0.5282,  1.0614]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-5-6] _________________________

batch_shape = (4,), m = 6, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
        [ 0.4648, -1.0580, -1.0745,  0.9522,  1.9336, ... 0.6059, -0.3921, -0.9019,  0.0509,  0.7113,  0.4269],
        [ 1.4130, -0.0791,  1.0618, -0.6267, -1.0863, -0.7031]])
kernel = tensor([[ 1.6309,  0.4585,  1.7166, -0.7307,  0.1957],
        [-2.7479,  1.7876,  1.0033, -0.3930, -0.9216],
        [ 0.2086, -0.1922, -1.6648,  2.2198,  0.2171],
        [ 1.3690, -0.3084, -0.3429,  0.0434,  0.1462]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(4,)-5-10] _________________________

batch_shape = (4,), m = 10, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648, -1.0580,
         -0.3048,  0.0572],
        [...-0.7076],
        [ 0.7600,  0.5615, -1.1005,  1.6964,  0.5282,  1.0614,  0.2744,  2.2121,
         -0.0944, -0.8925]])
kernel = tensor([[ 0.2638, -0.6327,  2.3189,  0.9049, -0.3975],
        [-0.0780,  1.1016, -0.1718,  0.9640, -0.5779],
        [ 0.0347, -1.2997, -0.7377, -1.2602, -0.3562],
        [ 1.0706,  1.6303,  0.0573, -0.9721,  0.0475]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-6-2] _________________________

batch_shape = (4,), m = 2, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204],
        [-0.3696, -0.2404],
        [-1.1969,  0.2093],
        [-0.9724, -0.7550]])
kernel = tensor([[-0.1061, -0.1555, -1.3914,  0.1816, -0.0132, -0.4622],
        [-0.2632, -0.7370,  0.6298,  0.0847,  0.1440, ... 0.1829,  1.3409, -0.0374, -1.5155, -0.8052, -0.3629],
        [-0.4370, -0.4687,  0.5772, -0.6045,  1.4284,  0.7550]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-6-3] _________________________

batch_shape = (4,), m = 3, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204, -0.3696],
        [-0.2404, -1.1969,  0.2093],
        [-0.9724, -0.7550,  0.3239],
        [-0.1085,  0.2103, -0.3908]])
kernel = tensor([[-0.0132, -0.4622, -0.2632, -0.7370, -1.5169, -0.7768],
        [ 1.2984, -0.6320,  0.1829,  1.3409, -0.0374, ... 1.6309,  0.4585,  1.7166, -0.7307,  0.5772, -0.6045],
        [ 1.4284,  0.7550, -1.1005,  1.6964,  0.5282,  1.0614]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-6-4] _________________________

batch_shape = (4,), m = 4, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665],
        [ 0.3767,  0.2252,  0.4648, -1.0580],
        [-0.3048,  0.0572, -1.1788,  0.2451],
        [ 1.0664,  1.1940,  1.2815,  0.6294]])
kernel = tensor([[-1.5169, -0.7768,  1.2984, -0.6320, -0.7536,  0.0974],
        [-1.0334,  0.1820,  1.6309,  0.4585,  1.7166, ... 0.6114, -0.7076,  0.7600,  0.5615, -1.1005,  1.6964],
        [ 0.5282,  1.0614,  0.2744,  2.2121, -0.0944, -0.8925]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_________________________ test_convolve[same-(4,)-6-5] _________________________

batch_shape = (4,), m = 5, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665, -0.7536],
        [ 0.0974, -1.0334,  0.1820, -1.0745,  0.9522],
        [ 1.9336, -1.1461, -0.1259,  1.4190, -1.1132],
        [ 0.9542,  0.7113,  0.4269,  1.4130, -0.0791]])
kernel = tensor([[ 0.1829,  1.3409, -0.0374, -1.5155,  1.6309,  0.4585],
        [ 1.7166, -0.7307,  0.1957, -2.7479,  1.7876, ...-0.3930, -0.9216,  0.2086, -0.1922, -1.6648,  2.2198],
        [ 0.2171,  1.3690, -0.3084, -0.3429,  0.0434,  0.1462]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(4,)-6-10] _________________________

batch_shape = (4,), m = 10, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648, -1.0580,
         -0.3048,  0.0572],
        [...-0.7076],
        [ 0.7600,  0.5615, -1.1005,  1.6964,  0.5282,  1.0614,  0.2744,  2.2121,
         -0.0944, -0.8925]])
kernel = tensor([[ 0.2638, -0.6327,  2.3189,  0.9049,  0.1957, -2.7479],
        [ 1.7876,  1.0033,  0.9640, -0.5779,  0.0347, ... 1.2775, -0.5276,  1.1303, -0.6333,  1.6303,  0.0573],
        [-0.9721,  0.0475, -0.7703, -1.5547, -2.1732, -0.4930]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(4,)-10-2] _________________________

batch_shape = (4,), m = 2, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204],
        [-0.3696, -0.2404],
        [-1.1969,  0.2093],
        [-0.9724, -0.7550]])
kernel = tensor([[-0.1061, -0.1555, -1.3914,  0.1816, -0.0132, -0.4622, -0.2632, -0.7370,
         -2.4337,  0.3042],
        [... 0.8433],
        [ 0.9058,  0.1582,  0.8185,  0.6440, -0.1228,  0.7623, -0.3727, -0.0103,
         -2.6528, -1.9059]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(4,)-10-3] _________________________

batch_shape = (4,), m = 3, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[-0.1115,  0.1204, -0.3696],
        [-0.2404, -1.1969,  0.2093],
        [-0.9724, -0.7550,  0.3239],
        [-0.1085,  0.2103, -0.3908]])
kernel = tensor([[-0.0132, -0.4622, -0.2632, -0.7370, -1.5169, -0.7768,  1.2984, -0.6320,
          0.6603, -0.5331],
        [...-0.6327],
        [ 2.3189,  0.9049, -0.3727, -0.0103, -2.6528, -1.9059,  0.2395,  0.5696,
          0.3293,  0.1652]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(4,)-10-4] _________________________

batch_shape = (4,), m = 4, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665],
        [ 0.3767,  0.2252,  0.4648, -1.0580],
        [-0.3048,  0.0572, -1.1788,  0.2451],
        [ 1.0664,  1.1940,  1.2815,  0.6294]])
kernel = tensor([[-1.5169, -0.7768,  1.2984, -0.6320, -0.7536,  0.0974, -1.0334,  0.1820,
         -0.6457,  0.4280],
        [...-2.7479],
        [ 1.7876,  1.0033,  0.2395,  0.5696,  0.3293,  0.1652, -1.6648,  2.2198,
          0.2171,  1.3690]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(4,)-10-5] _________________________

batch_shape = (4,), m = 5, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665, -0.7536],
        [ 0.0974, -1.0334,  0.1820, -1.0745,  0.9522],
        [ 1.9336, -1.1461, -0.1259,  1.4190, -1.1132],
        [ 0.9542,  0.7113,  0.4269,  1.4130, -0.0791]])
kernel = tensor([[ 0.1829,  1.3409, -0.0374, -1.5155,  1.6309,  0.4585,  1.7166, -0.7307,
          0.5772, -0.6045],
        [...-0.5779],
        [ 0.0347, -1.2997, -0.7377, -1.2602, -0.3562,  1.0706,  1.6303,  0.0573,
         -0.9721,  0.0475]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(4,)-10-6] _________________________

batch_shape = (4,), m = 6, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
        [ 0.4648, -1.0580, -1.0745,  0.9522,  1.9336, ... 0.6059, -0.3921, -0.9019,  0.0509,  0.7113,  0.4269],
        [ 1.4130, -0.0791,  1.0618, -0.6267, -1.0863, -0.7031]])
kernel = tensor([[ 1.6309,  0.4585,  1.7166, -0.7307,  0.6114, -0.7076,  0.7600,  0.5615,
         -1.1005,  1.6964],
        [...-0.5276],
        [ 1.1303, -0.6333,  1.6303,  0.0573, -0.9721,  0.0475, -0.7703, -1.5547,
         -2.1732, -0.4930]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-2-3] ________________________

batch_shape = (2, 3), m = 3, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  1.2984],
         [-0.6320, -0.7536,  0.0974],
         [-1.0334,  0.1820, -1.0745]],

        [[ 0.9522, -0.4844,  0.0673],
         [-0.1259,  1.4190, -1.1132],
         [ 0.9542,  0.7113,  0.4269]]])
kernel = tensor([[[ 0.9657,  0.7057],
         [ 0.7290,  1.2775],
         [-1.0815, -1.3027]],

        [[ 1.0827, -1.3841],
         [ 0.4033, -1.2239],
         [ 0.7017,  2.2139]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-2-4] ________________________

batch_shape = (2, 3), m = 4, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665],
         [ 0.3767,  0.2252,  0.4648, -1.0580],
         [-1.0745,  0.95...921, -0.9019,  0.0509],
         [ 0.7113,  0.4269,  1.4130, -0.0791],
         [ 1.0618, -0.6267, -1.0863, -0.7031]]])
kernel = tensor([[[ 1.0827, -1.3841],
         [ 0.4033, -1.2239],
         [ 0.7017,  2.2139]],

        [[-0.0276,  1.0541],
         [ 0.5661, -0.3820],
         [ 0.8807,  0.2710]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-2-5] ________________________

batch_shape = (2, 3), m = 5, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767],
         [ 0.2252,  0.4648, -1.0580, -0.3048,  0.0572],
      ...005],
         [ 0.1829,  1.3409, -1.0863, -0.7031, -0.8052],
         [-0.3629, -0.4370, -0.4687,  0.5772, -0.6045]]])
kernel = tensor([[[-0.0276,  1.0541],
         [ 0.5661, -0.3820],
         [ 0.8807,  0.2710]],

        [[ 0.7694,  0.3453],
         [ 1.8979, -0.2357],
         [ 0.7885,  0.3208]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-2-6] ________________________

batch_shape = (2, 3), m = 6, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
         [ 0.4648, -1.0580, -0.3048,  0.0572, -1.1788....6309,  0.4585,  1.7166, -0.7307,  0.5772, -0.6045],
         [ 1.4284,  0.7550, -1.1005,  1.6964,  0.5282,  1.0614]]])
kernel = tensor([[[ 0.7694,  0.3453],
         [ 1.8979, -0.2357],
         [ 0.7885,  0.3208]],

        [[ 0.8456, -0.3621],
         [ 0.1027, -3.5310],
         [ 0.5485, -1.6063]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[same-(2, 3)-2-10] ________________________

batch_shape = (2, 3), m = 10, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648,
          -1.0580, -0.3048,  0.0572],
       ...9216],
         [ 0.2086, -0.1922, -1.6648,  2.2198,  0.2171,  1.3690, -0.3084,
          -0.3429,  0.0434,  0.1462]]])
kernel = tensor([[[-0.3604,  1.2101],
         [-1.0814,  0.0789],
         [ 0.2913, -0.5023]],

        [[-0.9306,  0.9086],
         [-0.7788, -1.4453],
         [ 0.7636, -0.2469]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-3-2] ________________________

batch_shape = (2, 3), m = 2, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[-0.1115,  0.1204],
         [-0.3696, -0.2404],
         [-1.1969,  0.2093]],

        [[-0.9724, -0.7550],
         [ 0.3239, -0.1085],
         [ 0.2103, -0.3908]]])
kernel = tensor([[[-0.0132, -0.4622, -0.9019],
         [ 0.0509,  0.6298,  0.0847],
         [ 0.1440, -1.1005,  0.1829]],

        [[ 1.3409, -1.0863, -0.7031],
         [-0.8052, -0.3629, -0.4370],
         [-0.4687,  0.5772, -0.6045]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-3-4] ________________________

batch_shape = (2, 3), m = 4, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665],
         [ 0.3767,  0.2252,  0.4648, -1.0580],
         [-1.0745,  0.95...921, -0.9019,  0.0509],
         [ 0.7113,  0.4269,  1.4130, -0.0791],
         [ 1.0618, -0.6267, -1.0863, -0.7031]]])
kernel = tensor([[[ 1.6309,  0.4585,  2.3189],
         [ 0.9049,  0.1957, -2.7479],
         [ 1.7876,  1.0033, -0.3930]],

        [[-0.9216,  0.3293,  0.1652],
         [-1.6648,  2.2198,  0.2171],
         [ 1.3690, -0.3084, -0.3429]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-3-5] ________________________

batch_shape = (2, 3), m = 5, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767],
         [ 0.2252,  0.4648, -1.0580, -0.3048,  0.0572],
      ...005],
         [ 0.1829,  1.3409, -1.0863, -0.7031, -0.8052],
         [-0.3629, -0.4370, -0.4687,  0.5772, -0.6045]]])
kernel = tensor([[[ 0.7600,  0.5615, -0.3930],
         [-0.9216,  0.2086, -0.1922],
         [-0.4884, -0.9498, -0.1966]],

        [[-0.5345, -0.3084, -0.3429],
         [ 0.0434,  0.1462,  1.6398],
         [-0.3044,  0.0143,  0.1944]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-3-6] ________________________

batch_shape = (2, 3), m = 6, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
         [ 0.4648, -1.0580, -0.3048,  0.0572, -1.1788....6309,  0.4585,  1.7166, -0.7307,  0.5772, -0.6045],
         [ 1.4284,  0.7550, -1.1005,  1.6964,  0.5282,  1.0614]]])
kernel = tensor([[[ 0.0108,  0.8433, -0.1966],
         [-0.5345,  0.6846,  0.7159],
         [-0.1843, -0.9072, -0.3975]],

        [[-0.0780,  0.0143,  0.1944],
         [-1.1805,  1.0556,  0.1799],
         [-0.4323, -0.7377, -1.2602]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[same-(2, 3)-3-10] ________________________

batch_shape = (2, 3), m = 10, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648,
          -1.0580, -0.3048,  0.0572],
       ...9216],
         [ 0.2086, -0.1922, -1.6648,  2.2198,  0.2171,  1.3690, -0.3084,
          -0.3429,  0.0434,  0.1462]]])
kernel = tensor([[[-0.3975, -0.0780,  1.5178],
         [ 1.2231, -1.0315,  1.5939],
         [-0.4903,  0.9087,  1.8196]],

        [[ 0.4511, -1.0943,  0.6026],
         [ 0.5989, -1.4274, -0.6300],
         [ 0.4348, -1.0199,  0.6034]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-4-2] ________________________

batch_shape = (2, 3), m = 2, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[-0.1115,  0.1204],
         [-0.3696, -0.2404],
         [-1.1969,  0.2093]],

        [[-0.9724, -0.7550],
         [ 0.3239, -0.1085],
         [ 0.2103, -0.3908]]])
kernel = tensor([[[-0.0132, -0.4622, -0.2632, -0.7370],
         [-1.5169, -0.7768,  1.2984, -0.6320],
         [ 0.1829,  1.34...585,  1.7166, -0.7307],
         [ 0.5772, -0.6045,  1.4284,  0.7550],
         [-1.1005,  1.6964,  0.5282,  1.0614]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-4-3] ________________________

batch_shape = (2, 3), m = 3, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  1.2984],
         [-0.6320, -0.7536,  0.0974],
         [-1.0334,  0.1820, -1.0745]],

        [[ 0.9522, -0.4844,  0.0673],
         [-0.1259,  1.4190, -1.1132],
         [ 0.9542,  0.7113,  0.4269]]])
kernel = tensor([[[ 0.1440, -1.1005,  0.1829,  1.3409],
         [-0.0374, -1.5155,  1.6309,  0.4585],
         [ 2.3189,  0.90...033, -0.3930, -0.9216],
         [ 0.3293,  0.1652, -1.6648,  2.2198],
         [ 0.2171,  1.3690, -0.3084, -0.3429]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-4-5] ________________________

batch_shape = (2, 3), m = 5, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767],
         [ 0.2252,  0.4648, -1.0580, -0.3048,  0.0572],
      ...005],
         [ 0.1829,  1.3409, -1.0863, -0.7031, -0.8052],
         [-0.3629, -0.4370, -0.4687,  0.5772, -0.6045]]])
kernel = tensor([[[ 0.7600,  0.5615,  2.0122, -0.2271],
         [ 0.2868, -0.5177,  0.0108,  0.8433],
         [-0.1966, -0.53...072, -0.3975, -0.0780],
         [ 0.0143,  0.1944, -1.1805,  1.0556],
         [ 0.1799, -0.4323, -0.7377, -1.2602]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-4-6] ________________________

batch_shape = (2, 3), m = 6, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
         [ 0.4648, -1.0580, -0.3048,  0.0572, -1.1788....6309,  0.4585,  1.7166, -0.7307,  0.5772, -0.6045],
         [ 1.4284,  0.7550, -1.1005,  1.6964,  0.5282,  1.0614]]])
kernel = tensor([[[ 0.0108,  0.8433,  0.9058,  0.1582],
         [ 0.2638, -0.6327,  2.3189,  0.9049],
         [-0.3975, -0.07...779,  0.0347, -1.2997],
         [-0.7377, -1.2602, -0.3562,  1.0706],
         [ 1.6303,  0.0573, -0.9721,  0.0475]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[same-(2, 3)-4-10] ________________________

batch_shape = (2, 3), m = 10, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648,
          -1.0580, -0.3048,  0.0572],
       ...9216],
         [ 0.2086, -0.1922, -1.6648,  2.2198,  0.2171,  1.3690, -0.3084,
          -0.3429,  0.0434,  0.1462]]])
kernel = tensor([[[-0.3975, -0.0780,  1.1016, -0.1718],
         [ 0.9640, -0.5779,  0.0347, -1.2997],
         [ 1.8196,  0.45...536, -1.1751, -0.0094],
         [-1.0199,  0.6034, -2.1064, -0.0826],
         [ 0.7310,  0.2947, -0.8301,  0.3838]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-5-2] ________________________

batch_shape = (2, 3), m = 2, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[-0.1115,  0.1204],
         [-0.3696, -0.2404],
         [-1.1969,  0.2093]],

        [[-0.9724, -0.7550],
         [ 0.3239, -0.1085],
         [ 0.2103, -0.3908]]])
kernel = tensor([[[-0.0132, -0.4622, -0.2632, -0.7370, -1.5169],
         [-0.7768,  1.2984, -0.6320,  0.6603, -0.5331],
      ...615],
         [ 2.0122, -0.2271,  0.5282,  1.0614,  0.2744],
         [ 2.2121, -0.0944, -0.8925,  0.8185,  0.6440]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-5-3] ________________________

batch_shape = (2, 3), m = 3, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  1.2984],
         [-0.6320, -0.7536,  0.0974],
         [-1.0334,  0.1820, -1.0745]],

        [[ 0.9522, -0.4844,  0.0673],
         [-0.1259,  1.4190, -1.1132],
         [ 0.9542,  0.7113,  0.4269]]])
kernel = tensor([[[ 0.1440, -1.1005,  0.1829,  1.3409, -0.0374],
         [-1.5155,  1.6309,  0.4585, -0.4370, -0.4687],
      ...498],
         [-0.1966, -0.5345, -0.3084, -0.3429,  0.0434],
         [ 0.1462,  1.6398, -0.3044,  0.0143,  0.1944]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-5-4] ________________________

batch_shape = (2, 3), m = 4, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665],
         [ 0.3767,  0.2252,  0.4648, -1.0580],
         [-1.0745,  0.95...921, -0.9019,  0.0509],
         [ 0.7113,  0.4269,  1.4130, -0.0791],
         [ 1.0618, -0.6267, -1.0863, -0.7031]]])
kernel = tensor([[[ 1.6309,  0.4585,  1.7166, -0.7307,  0.6114],
         [-0.7076,  0.7600,  0.5615, -1.1005,  1.6964],
      ...072],
         [-0.3975, -0.0780,  0.0143,  0.1944, -1.1805],
         [ 1.0556,  0.1799, -0.4323, -0.7377, -1.2602]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-5-6] ________________________

batch_shape = (2, 3), m = 6, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
         [ 0.4648, -1.0580, -0.3048,  0.0572, -1.1788....6309,  0.4585,  1.7166, -0.7307,  0.5772, -0.6045],
         [ 1.4284,  0.7550, -1.1005,  1.6964,  0.5282,  1.0614]]])
kernel = tensor([[[ 0.0108,  0.8433,  0.9058,  0.1582,  0.2638],
         [-0.6327,  2.3189,  0.9049, -0.3727, -0.0103],
      ...333],
         [-0.5996,  0.9252, -0.9721,  0.0475, -0.7703],
         [-1.5547, -2.1732, -0.4930, -0.0340, -0.6844]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[same-(2, 3)-5-10] ________________________

batch_shape = (2, 3), m = 10, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648,
          -1.0580, -0.3048,  0.0572],
       ...9216],
         [ 0.2086, -0.1922, -1.6648,  2.2198,  0.2171,  1.3690, -0.3084,
          -0.3429,  0.0434,  0.1462]]])
kernel = tensor([[[-0.3975, -0.0780,  1.1016, -0.1718,  0.9640],
         [-0.5779,  0.0347, -1.2997, -0.7377, -1.2602],
      ...380],
         [ 0.6207,  0.0158, -0.8301,  0.3838, -1.6000],
         [ 0.3316, -0.0565,  0.9084,  0.7460,  0.2136]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-6-2] ________________________

batch_shape = (2, 3), m = 2, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[-0.1115,  0.1204],
         [-0.3696, -0.2404],
         [-1.1969,  0.2093]],

        [[-0.9724, -0.7550],
         [ 0.3239, -0.1085],
         [ 0.2103, -0.3908]]])
kernel = tensor([[[-0.0132, -0.4622, -0.2632, -0.7370, -1.5169, -0.7768],
         [ 1.2984, -0.6320,  0.6603, -0.5331, -0.6030....0108,  0.8433,  0.9058,  0.1582,  0.8185,  0.6440],
         [-0.1228,  0.7623, -0.3727, -0.0103, -2.6528, -1.9059]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-6-3] ________________________

batch_shape = (2, 3), m = 3, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  1.2984],
         [-0.6320, -0.7536,  0.0974],
         [-1.0334,  0.1820, -1.0745]],

        [[ 0.9522, -0.4844,  0.0673],
         [-0.1259,  1.4190, -1.1132],
         [ 0.9542,  0.7113,  0.4269]]])
kernel = tensor([[[ 0.1440, -1.1005,  0.1829,  1.3409, -0.0374, -1.5155],
         [ 1.6309,  0.4585, -0.4370, -0.4687,  0.5772....1843, -0.9072, -0.3975, -0.0780,  0.0143,  0.1944],
         [-1.1805,  1.0556,  0.1799, -0.4323, -0.7377, -1.2602]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-6-4] ________________________

batch_shape = (2, 3), m = 4, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665],
         [ 0.3767,  0.2252,  0.4648, -1.0580],
         [-1.0745,  0.95...921, -0.9019,  0.0509],
         [ 0.7113,  0.4269,  1.4130, -0.0791],
         [ 1.0618, -0.6267, -1.0863, -0.7031]]])
kernel = tensor([[[ 1.6309,  0.4585,  1.7166, -0.7307,  0.6114, -0.7076],
         [ 0.7600,  0.5615, -1.1005,  1.6964,  0.5282....9640, -0.5779,  0.0347, -1.2997, -0.7377, -1.2602],
         [-0.3562,  1.0706,  1.6303,  0.0573, -0.9721,  0.0475]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
________________________ test_convolve[same-(2, 3)-6-5] ________________________

batch_shape = (2, 3), m = 5, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767],
         [ 0.2252,  0.4648, -1.0580, -0.3048,  0.0572],
      ...005],
         [ 0.1829,  1.3409, -1.0863, -0.7031, -0.8052],
         [-0.3629, -0.4370, -0.4687,  0.5772, -0.6045]]])
kernel = tensor([[[ 0.7600,  0.5615,  2.0122, -0.2271,  0.2868, -0.5177],
         [ 0.0108,  0.8433, -0.0944, -0.8925,  0.8185....1303, -0.6333, -0.5996,  0.9252, -0.9721,  0.0475],
         [-0.7703, -1.5547, -2.1732, -0.4930, -0.0340, -0.6844]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[same-(2, 3)-6-10] ________________________

batch_shape = (2, 3), m = 10, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252,  0.4648,
          -1.0580, -0.3048,  0.0572],
       ...9216],
         [ 0.2086, -0.1922, -1.6648,  2.2198,  0.2171,  1.3690, -0.3084,
          -0.3429,  0.0434,  0.1462]]])
kernel = tensor([[[-0.3975, -0.0780,  1.1016, -0.1718,  0.9640, -0.5779],
         [ 0.0347, -1.2997, -0.7377, -1.2602, -0.3562....5293, -0.4531, -1.1189,  0.1871,  0.7460,  0.2136],
         [ 0.1550, -0.0921,  1.3397,  0.0687,  0.3938, -0.4968]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[same-(2, 3)-10-2] ________________________

batch_shape = (2, 3), m = 2, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[-0.1115,  0.1204],
         [-0.3696, -0.2404],
         [-1.1969,  0.2093]],

        [[-0.9724, -0.7550],
         [ 0.3239, -0.1085],
         [ 0.2103, -0.3908]]])
kernel = tensor([[[-0.0132, -0.4622, -0.2632, -0.7370, -1.5169, -0.7768,  1.2984,
          -0.6320,  0.6603, -0.5331],
       ...0780],
         [ 1.1016, -0.1718, -1.1805,  1.0556,  0.1799, -0.4323, -0.7377,
          -1.2602, -0.3562,  1.0706]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[same-(2, 3)-10-3] ________________________

batch_shape = (2, 3), m = 3, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  1.2984],
         [-0.6320, -0.7536,  0.0974],
         [-1.0334,  0.1820, -1.0745]],

        [[ 0.9522, -0.4844,  0.0673],
         [-0.1259,  1.4190, -1.1132],
         [ 0.9542,  0.7113,  0.4269]]])
kernel = tensor([[[ 0.1440, -1.1005,  0.1829,  1.3409, -0.0374, -1.5155,  1.6309,
           0.4585, -0.4370, -0.4687],
       ...9087],
         [ 1.8196,  0.4511, -1.0943,  0.6026,  0.5989, -1.4274, -0.6300,
           0.4348, -1.0199,  0.6034]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[same-(2, 3)-10-4] ________________________

batch_shape = (2, 3), m = 4, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665],
         [ 0.3767,  0.2252,  0.4648, -1.0580],
         [-1.0745,  0.95...921, -0.9019,  0.0509],
         [ 0.7113,  0.4269,  1.4130, -0.0791],
         [ 1.0618, -0.6267, -1.0863, -0.7031]]])
kernel = tensor([[[ 1.6309,  0.4585,  1.7166, -0.7307,  0.6114, -0.7076,  0.7600,
           0.5615, -1.1005,  1.6964],
       ...0536],
         [-1.1751, -0.0094, -1.0199,  0.6034, -2.1064, -0.0826,  0.7310,
           0.2947, -0.8301,  0.3838]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[same-(2, 3)-10-5] ________________________

batch_shape = (2, 3), m = 5, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767],
         [ 0.2252,  0.4648, -1.0580, -0.3048,  0.0572],
      ...005],
         [ 0.1829,  1.3409, -1.0863, -0.7031, -0.8052],
         [-0.3629, -0.4370, -0.4687,  0.5772, -0.6045]]])
kernel = tensor([[[ 0.7600,  0.5615,  2.0122, -0.2271,  0.2868, -0.5177,  0.0108,
           0.8433, -0.0944, -0.8925],
       ...8380],
         [ 0.6207,  0.0158, -0.8301,  0.3838, -1.6000,  0.3316, -0.0565,
           0.9084,  0.7460,  0.2136]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
_______________________ test_convolve[same-(2, 3)-10-6] ________________________

batch_shape = (2, 3), m = 6, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
>       actual = convolve(signal, kernel, mode)

/local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/tensor_utils.py:183: in convolve
    return convolve(signal, kernel, mode)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

signal = tensor([[[ 0.9098,  0.1538,  0.6344,  0.3665,  0.3767,  0.2252],
         [ 0.4648, -1.0580, -0.3048,  0.0572, -1.1788....6309,  0.4585,  1.7166, -0.7307,  0.5772, -0.6045],
         [ 1.4284,  0.7550, -1.1005,  1.6964,  0.5282,  1.0614]]])
kernel = tensor([[[ 0.0108,  0.8433,  0.9058,  0.1582,  0.2638, -0.6327,  2.3189,
           0.9049, -0.3727, -0.0103],
       ...4531],
         [-1.1189,  0.1871,  0.7460,  0.2136,  0.1550, -0.0921,  1.3397,
           0.0687,  0.3938, -0.4968]]])
mode = 'same'

    def convolve(signal: torch.Tensor, kernel: torch.Tensor, mode: str='full') -> torch.Tensor:
        """
        Computes the 1-d convolution of signal by kernel using FFTs.
    
        :param torch.Tensor signal: A signal to convolve.
        :param torch.Tensor kernel: A convolution kernel.
        :param str mode: One of: 'full', 'valid', 'same'.
        :return: A tensor with broadcasted shape. Letting ``m = signal.size(-1)``
            and ``n = kernel.size(-1)``, the rightmost size of the result will be:
            ``m + n - 1`` if mode is 'full';
            ``max(m, n) - min(m, n) + 1`` if mode is 'valid'; or
            ``max(m, n)`` if mode is 'same'.
        :rtype torch.Tensor:
        """
        if signal.size(-1) != kernel.size(-1):
>           raise ValueError('The rightmost dimensions of signal and kernel must be the same.')
E           ValueError: The rightmost dimensions of signal and kernel must be the same.

/local/data0/moved_data/publishablew/pyro/pyro/pyro/ops/temp.py:22: ValueError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-6]
======================== 270 failed, 54 passed in 3.13s ========================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pyro/pyro/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pyro/pyro
configfile: setup.cfg
plugins: typeguard-4.4.1, jaxtyping-0.2.19
collecting ... collected 324 items

../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-10] PASSED

============================= 324 passed in 0.74s ==============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pyro/pyro/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pyro/pyro
configfile: setup.cfg
plugins: typeguard-4.4.1, jaxtyping-0.2.19
collecting ... collected 324 items

../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-10] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-3] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-4] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-5] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-6] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-10] PASSED

============================= 324 passed in 0.90s ==============================
