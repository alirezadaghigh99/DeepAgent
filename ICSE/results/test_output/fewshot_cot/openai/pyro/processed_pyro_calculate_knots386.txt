output file:
processed_pyro_calculate_knots386.json
function:
_calculate_knots
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-5-batch_shape1]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-5-batch_shape0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-3-batch_shape0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-2-batch_shape0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-5-batch_shape0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-2-batch_shape2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-3-batch_shape1]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-3-batch_shape1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-3-batch_shape1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-3-batch_shape1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-2-batch_shape0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-5-batch_shape0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-3-batch_shape0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-2-batch_shape0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-5-batch_shape1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-3-batch_shape2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-2-batch_shape1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-3-batch_shape2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-3-batch_shape1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-3-batch_shape0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-2-batch_shape1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-5-batch_shape2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-2-batch_shape0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-5-batch_shape1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-3-batch_shape1]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-2-batch_shape0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-5-batch_shape2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-5-batch_shape0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-2-batch_shape1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-2-batch_shape0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-2-batch_shape1]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-2-batch_shape0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-5-batch_shape1]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-3-batch_shape0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-3-batch_shape0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-2-batch_shape2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-2-batch_shape1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-5-batch_shape2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-5-batch_shape2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-2-batch_shape1]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-3-batch_shape0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-5-batch_shape2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-2-batch_shape2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-5-batch_shape1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-5-batch_shape2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-2-batch_shape1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-5-batch_shape1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-3-batch_shape2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-5-batch_shape2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-5-batch_shape0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-5-batch_shape0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-2-batch_shape0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-3-batch_shape0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-3-batch_shape1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-3-batch_shape0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-3-batch_shape2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-3-batch_shape1]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-3-batch_shape2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-3-batch_shape2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-2-batch_shape1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-3-batch_shape2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-3-batch_shape0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-2-batch_shape2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-3-batch_shape2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-3-batch_shape1]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-5-batch_shape1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-2-batch_shape1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-2-batch_shape1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-5-batch_shape1]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-3-batch_shape0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-3-batch_shape1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-5-batch_shape2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-5-batch_shape2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-2-batch_shape2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-2-batch_shape1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-5-batch_shape2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-3-batch_shape2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-5-batch_shape1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-2-batch_shape2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-5-batch_shape1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-2-batch_shape1]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-3-batch_shape0] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-3-batch_shape1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-5-batch_shape0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-3-batch_shape2]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-3-batch_shape2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-5-batch_shape2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-3-batch_shape1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-2-batch_shape0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-5-batch_shape0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-5-batch_shape0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-2-batch_shape0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-2-batch_shape2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-2-batch_shape2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-5-batch_shape2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-2-batch_shape2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-5-batch_shape0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-2-batch_shape0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-5-batch_shape1]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-2-batch_shape2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-2-batch_shape0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-5-batch_shape1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-3-batch_shape2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-3-batch_shape0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-2-batch_shape2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-2-batch_shape2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-5-batch_shape0]', '../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-5-batch_shape0] FAILED'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pyro/pyro/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pyro/pyro
configfile: setup.cfg
plugins: typeguard-4.4.1, jaxtyping-0.2.19
collecting ... collected 54 items

../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-2-batch_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-2-batch_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-2-batch_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-3-batch_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-3-batch_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-3-batch_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-5-batch_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-5-batch_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-5-batch_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-2-batch_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-2-batch_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-2-batch_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-3-batch_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-3-batch_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-3-batch_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-5-batch_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-5-batch_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-5-batch_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-2-batch_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-2-batch_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-2-batch_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-3-batch_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-3-batch_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-3-batch_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-5-batch_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-5-batch_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-5-batch_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-2-batch_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-2-batch_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-2-batch_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-3-batch_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-3-batch_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-3-batch_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-5-batch_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-5-batch_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-5-batch_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-2-batch_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-2-batch_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-2-batch_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-3-batch_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-3-batch_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-3-batch_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-5-batch_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-5-batch_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-5-batch_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-2-batch_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-2-batch_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-2-batch_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-3-batch_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-3-batch_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-3-batch_shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-5-batch_shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-5-batch_shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-5-batch_shape2] FAILED

=================================== FAILURES ===================================
________ test_conditional_compose_transform_module[0-2-2-batch_shape0] _________

batch_shape = (), input_dim = 2, context_dim = 2, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-2-2-batch_shape1] _________

batch_shape = (7,), input_dim = 2, context_dim = 2, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-2-2-batch_shape2] _________

batch_shape = (6, 7), input_dim = 2, context_dim = 2, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-2-3-batch_shape0] _________

batch_shape = (), input_dim = 3, context_dim = 2, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-2-3-batch_shape1] _________

batch_shape = (7,), input_dim = 3, context_dim = 2, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-2-3-batch_shape2] _________

batch_shape = (6, 7), input_dim = 3, context_dim = 2, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-2-5-batch_shape0] _________

batch_shape = (), input_dim = 5, context_dim = 2, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-2-5-batch_shape1] _________

batch_shape = (7,), input_dim = 5, context_dim = 2, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-2-5-batch_shape2] _________

batch_shape = (6, 7), input_dim = 5, context_dim = 2, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-3-2-batch_shape0] _________

batch_shape = (), input_dim = 2, context_dim = 3, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-3-2-batch_shape1] _________

batch_shape = (7,), input_dim = 2, context_dim = 3, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-3-2-batch_shape2] _________

batch_shape = (6, 7), input_dim = 2, context_dim = 3, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-3-3-batch_shape0] _________

batch_shape = (), input_dim = 3, context_dim = 3, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-3-3-batch_shape1] _________

batch_shape = (7,), input_dim = 3, context_dim = 3, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-3-3-batch_shape2] _________

batch_shape = (6, 7), input_dim = 3, context_dim = 3, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-3-5-batch_shape0] _________

batch_shape = (), input_dim = 5, context_dim = 3, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-3-5-batch_shape1] _________

batch_shape = (7,), input_dim = 5, context_dim = 3, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-3-5-batch_shape2] _________

batch_shape = (6, 7), input_dim = 5, context_dim = 3, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-5-2-batch_shape0] _________

batch_shape = (), input_dim = 2, context_dim = 5, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-5-2-batch_shape1] _________

batch_shape = (7,), input_dim = 2, context_dim = 5, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-5-2-batch_shape2] _________

batch_shape = (6, 7), input_dim = 2, context_dim = 5, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-5-3-batch_shape0] _________

batch_shape = (), input_dim = 3, context_dim = 5, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-5-3-batch_shape1] _________

batch_shape = (7,), input_dim = 3, context_dim = 5, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-5-3-batch_shape2] _________

batch_shape = (6, 7), input_dim = 3, context_dim = 5, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-5-5-batch_shape0] _________

batch_shape = (), input_dim = 5, context_dim = 5, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-5-5-batch_shape1] _________

batch_shape = (7,), input_dim = 5, context_dim = 5, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[0-5-5-batch_shape2] _________

batch_shape = (6, 7), input_dim = 5, context_dim = 5, cache_size = 0

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-2-2-batch_shape0] _________

batch_shape = (), input_dim = 2, context_dim = 2, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-2-2-batch_shape1] _________

batch_shape = (7,), input_dim = 2, context_dim = 2, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-2-2-batch_shape2] _________

batch_shape = (6, 7), input_dim = 2, context_dim = 2, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-2-3-batch_shape0] _________

batch_shape = (), input_dim = 3, context_dim = 2, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-2-3-batch_shape1] _________

batch_shape = (7,), input_dim = 3, context_dim = 2, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-2-3-batch_shape2] _________

batch_shape = (6, 7), input_dim = 3, context_dim = 2, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-2-5-batch_shape0] _________

batch_shape = (), input_dim = 5, context_dim = 2, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-2-5-batch_shape1] _________

batch_shape = (7,), input_dim = 5, context_dim = 2, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-2-5-batch_shape2] _________

batch_shape = (6, 7), input_dim = 5, context_dim = 2, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-3-2-batch_shape0] _________

batch_shape = (), input_dim = 2, context_dim = 3, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-3-2-batch_shape1] _________

batch_shape = (7,), input_dim = 2, context_dim = 3, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-3-2-batch_shape2] _________

batch_shape = (6, 7), input_dim = 2, context_dim = 3, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-3-3-batch_shape0] _________

batch_shape = (), input_dim = 3, context_dim = 3, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-3-3-batch_shape1] _________

batch_shape = (7,), input_dim = 3, context_dim = 3, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-3-3-batch_shape2] _________

batch_shape = (6, 7), input_dim = 3, context_dim = 3, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-3-5-batch_shape0] _________

batch_shape = (), input_dim = 5, context_dim = 3, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-3-5-batch_shape1] _________

batch_shape = (7,), input_dim = 5, context_dim = 3, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-3-5-batch_shape2] _________

batch_shape = (6, 7), input_dim = 5, context_dim = 3, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-5-2-batch_shape0] _________

batch_shape = (), input_dim = 2, context_dim = 5, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-5-2-batch_shape1] _________

batch_shape = (7,), input_dim = 2, context_dim = 5, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-5-2-batch_shape2] _________

batch_shape = (6, 7), input_dim = 2, context_dim = 5, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-5-3-batch_shape0] _________

batch_shape = (), input_dim = 3, context_dim = 5, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-5-3-batch_shape1] _________

batch_shape = (7,), input_dim = 3, context_dim = 5, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-5-3-batch_shape2] _________

batch_shape = (6, 7), input_dim = 3, context_dim = 5, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-5-5-batch_shape0] _________

batch_shape = (), input_dim = 5, context_dim = 5, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-5-5-batch_shape1] _________

batch_shape = (7,), input_dim = 5, context_dim = 5, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
________ test_conditional_compose_transform_module[1-5-5-batch_shape2] _________

batch_shape = (6, 7), input_dim = 5, context_dim = 5, cache_size = 1

    @pytest.mark.parametrize("batch_shape", [(), (7,), (6, 7)])
    @pytest.mark.parametrize("input_dim", [2, 3, 5])
    @pytest.mark.parametrize("context_dim", [2, 3, 5])
    @pytest.mark.parametrize("cache_size", [0, 1])
    def test_conditional_compose_transform_module(
        batch_shape, input_dim, context_dim, cache_size
    ):
        conditional_transforms = [
            T.AffineTransform(1.0, 2.0),
            T.Spline(input_dim),
            T.conditional_spline(input_dim, context_dim, [5]),
            T.SoftplusTransform(),
            T.conditional_spline(input_dim, context_dim, [6]),
        ]
        cond_transform = dist.conditional.ConditionalComposeTransformModule(
            conditional_transforms, cache_size=cache_size
        )
    
        base_dist = dist.Normal(0, 1).expand(batch_shape + (input_dim,)).to_event(1)
        cond_dist = dist.ConditionalTransformedDistribution(base_dist, [cond_transform])
    
        context = torch.rand(batch_shape + (context_dim,))
        d = cond_dist.condition(context)
        transform = d.transforms[0]
        assert isinstance(transform, T.ComposeTransformModule)
    
>       data = d.rsample()

/local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transformed_distribution.py:155: in rsample
    x = transform(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:358: in __call__
    x = part(x)
/local/data0/moved_data/publishablew/pyro/pyro/venv/lib/python3.11/site-packages/torch/distributions/transforms.py:162: in __call__
    y = self._call(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:147: in _call
    y, log_detJ = self.spline_op(x)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:174: in spline_op
    y, log_detJ = _monotonic_rational_spline(x, w, h, d, l, bound=self.bound, **kwargs)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:70: in _monotonic_rational_spline
    widths, cumwidths = _calculate_knots(widths, left, right)
/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/spline.py:32: in _calculate_knots
    from .temp import _calculate_knots
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from functools import partial
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.distributions import Transform, constraints
    from pyro.nn import DenseNN
    from ..conditional import ConditionalTransformModule
    from ..torch_transform import TransformModule
    from ..util import copy_docs_from
    import torch
    
>   def _calculate_knots(lengths: torch.Tensor, lower: float, upper: float) -> Tuple[torch.Tensor, torch.Tensor]:
E   NameError: name 'Tuple' is not defined

/local/data0/moved_data/publishablew/pyro/pyro/pyro/distributions/transforms/temp.py:12: NameError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-2-batch_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-2-batch_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-2-batch_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-3-batch_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-3-batch_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-3-batch_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-5-batch_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-5-batch_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-5-batch_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-2-batch_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-2-batch_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-2-batch_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-3-batch_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-3-batch_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-3-batch_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-5-batch_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-5-batch_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-5-batch_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-2-batch_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-2-batch_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-2-batch_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-3-batch_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-3-batch_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-3-batch_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-5-batch_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-5-batch_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-5-batch_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-2-batch_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-2-batch_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-2-batch_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-3-batch_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-3-batch_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-3-batch_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-5-batch_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-5-batch_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-5-batch_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-2-batch_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-2-batch_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-2-batch_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-3-batch_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-3-batch_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-3-batch_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-5-batch_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-5-batch_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-5-batch_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-2-batch_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-2-batch_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-2-batch_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-3-batch_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-3-batch_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-3-batch_shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-5-batch_shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-5-batch_shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-5-batch_shape2]
============================== 54 failed in 2.72s ==============================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pyro/pyro/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pyro/pyro
configfile: setup.cfg
plugins: typeguard-4.4.1, jaxtyping-0.2.19
collecting ... collected 54 items

../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-2-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-2-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-2-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-3-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-3-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-3-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-5-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-5-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-5-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-2-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-2-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-2-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-3-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-3-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-3-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-5-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-5-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-5-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-2-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-2-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-2-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-3-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-3-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-3-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-5-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-5-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-5-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-2-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-2-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-2-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-3-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-3-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-3-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-5-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-5-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-5-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-2-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-2-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-2-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-3-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-3-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-3-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-5-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-5-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-5-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-2-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-2-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-2-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-3-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-3-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-3-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-5-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-5-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-5-batch_shape2] PASSED

============================== 54 passed in 1.95s ==============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pyro/pyro/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pyro/pyro
configfile: setup.cfg
plugins: typeguard-4.4.1, jaxtyping-0.2.19
collecting ... collected 54 items

../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-2-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-2-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-2-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-3-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-3-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-3-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-5-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-5-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-2-5-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-2-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-2-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-2-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-3-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-3-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-3-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-5-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-5-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-3-5-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-2-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-2-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-2-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-3-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-3-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-3-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-5-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-5-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[0-5-5-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-2-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-2-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-2-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-3-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-3-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-3-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-5-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-5-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-2-5-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-2-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-2-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-2-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-3-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-3-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-3-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-5-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-5-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-3-5-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-2-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-2-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-2-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-3-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-3-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-3-batch_shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-5-batch_shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-5-batch_shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_transforms.py::test_conditional_compose_transform_module[1-5-5-batch_shape2] PASSED

============================== 54 passed in 1.83s ==============================
