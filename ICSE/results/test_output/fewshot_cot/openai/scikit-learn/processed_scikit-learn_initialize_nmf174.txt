output file:
processed_scikit-learn_initialize_nmf174.json
function:
_initialize_nmf
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[1]', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[2.5]', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[1.5] FAILED', 'FAILED', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[2] FAILED', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[2.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[-0.5]', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[0.5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[0.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[1.5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[2]', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[0]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 7 items

../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[-0.5] I: Seeding RNGs with 2051014413
FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[0] FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[0.5] FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[1] FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[1.5] FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[2] FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[2.5] FAILED

=================================== FAILURES ===================================
___________________ test_nmf_minibatchnmf_equivalence[-0.5] ____________________

beta_loss = -0.5

    @pytest.mark.parametrize("beta_loss", [-0.5, 0, 0.5, 1, 1.5, 2, 2.5])
    def test_nmf_minibatchnmf_equivalence(beta_loss):
        # Test that MiniBatchNMF is equivalent to NMF when batch_size = n_samples and
        # forget_factor 0.0 (stopping criterion put aside)
        rng = np.random.mtrand.RandomState(42)
        X = np.abs(rng.randn(48, 5))
    
        nmf = NMF(
            n_components=5,
            beta_loss=beta_loss,
            solver="mu",
            random_state=0,
            tol=0,
        )
        mbnmf = MiniBatchNMF(
            n_components=5,
            beta_loss=beta_loss,
            random_state=0,
            tol=0,
            max_no_improvement=None,
            batch_size=X.shape[0],
            forget_factor=0.0,
        )
>       W = nmf.fit_transform(X)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py:860: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_set_output.py:319: in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:1198: in fit_transform
    W, H, n_iter = self._fit_transform(X, W=W, H=H)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:1247: in _fit_transform
    W, H = self._check_w_h(X, W, H, update_H)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:874: in _check_w_h
    W, H = _initialize_nmf(X, self._n_components, init=self.init, random_state=self.random_state)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:161: in _initialize_nmf
    return _initialize_nmf(X, n_components, init, eps, random_state)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[0.49671415, 0.1382643 , 0.64768854, 1.52302986, 0.23415337],
       [0.23413696, 1.57921282, 0.76743473, 0.469... 0.21645859, 0.04557184, 0.65160035, 2.14394409],
       [0.63391902, 2.02514259, 0.18645431, 0.66178646, 0.85243333]])
n_components = 5, init = None, eps = 1e-06, random_state = 0

    def _initialize_nmf(X, n_components, init=None, eps=1e-06, random_state=None):
        """
        Compute an initial guess for the non-negative rank k matrix approximation
        for a given data matrix X using NMF initialization algorithms.
    
        Parameters:
        - X: array-like of shape (n_samples, n_features)
            The data matrix to be decomposed.
        - n_components: int
            The number of components desired in the approximation.
        - init: {'random', 'nndsvd', 'nndsvda', 'nndsvdar'}, default=None
            Method used to initialize the procedure.
        - eps: float, default=1e-6
            Truncate all values less than this in the output to zero.
        - random_state: int, RandomState instance or None, default=None
            Used for reproducible results.
    
        Returns:
        - W: array-like of shape (n_samples, n_components)
            Initial guesses for solving X ~= WH.
        - H: array-like of shape (n_components, n_features)
            Initial guesses for solving X ~= WH.
        """
        rng = check_random_state(random_state)
        if init == 'random':
            W = rng.rand(X.shape[0], n_components)
            H = rng.rand(n_components, X.shape[1])
        elif init in {'nndsvd', 'nndsvda', 'nndsvdar'}:
            model = NMF(n_components=n_components, init=init, random_state=random_state)
            W = model.fit_transform(X)
            H = model.components_
        else:
>           raise ValueError(f"Invalid init parameter: {init}. Choose from 'random', 'nndsvd', 'nndsvda', 'nndsvdar'.")
E           ValueError: Invalid init parameter: None. Choose from 'random', 'nndsvd', 'nndsvda', 'nndsvdar'.

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/temp.py:55: ValueError
_____________________ test_nmf_minibatchnmf_equivalence[0] _____________________

beta_loss = 0

    @pytest.mark.parametrize("beta_loss", [-0.5, 0, 0.5, 1, 1.5, 2, 2.5])
    def test_nmf_minibatchnmf_equivalence(beta_loss):
        # Test that MiniBatchNMF is equivalent to NMF when batch_size = n_samples and
        # forget_factor 0.0 (stopping criterion put aside)
        rng = np.random.mtrand.RandomState(42)
        X = np.abs(rng.randn(48, 5))
    
        nmf = NMF(
            n_components=5,
            beta_loss=beta_loss,
            solver="mu",
            random_state=0,
            tol=0,
        )
        mbnmf = MiniBatchNMF(
            n_components=5,
            beta_loss=beta_loss,
            random_state=0,
            tol=0,
            max_no_improvement=None,
            batch_size=X.shape[0],
            forget_factor=0.0,
        )
>       W = nmf.fit_transform(X)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py:860: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_set_output.py:319: in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:1198: in fit_transform
    W, H, n_iter = self._fit_transform(X, W=W, H=H)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:1247: in _fit_transform
    W, H = self._check_w_h(X, W, H, update_H)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:874: in _check_w_h
    W, H = _initialize_nmf(X, self._n_components, init=self.init, random_state=self.random_state)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:161: in _initialize_nmf
    return _initialize_nmf(X, n_components, init, eps, random_state)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[0.49671415, 0.1382643 , 0.64768854, 1.52302986, 0.23415337],
       [0.23413696, 1.57921282, 0.76743473, 0.469... 0.21645859, 0.04557184, 0.65160035, 2.14394409],
       [0.63391902, 2.02514259, 0.18645431, 0.66178646, 0.85243333]])
n_components = 5, init = None, eps = 1e-06, random_state = 0

    def _initialize_nmf(X, n_components, init=None, eps=1e-06, random_state=None):
        """
        Compute an initial guess for the non-negative rank k matrix approximation
        for a given data matrix X using NMF initialization algorithms.
    
        Parameters:
        - X: array-like of shape (n_samples, n_features)
            The data matrix to be decomposed.
        - n_components: int
            The number of components desired in the approximation.
        - init: {'random', 'nndsvd', 'nndsvda', 'nndsvdar'}, default=None
            Method used to initialize the procedure.
        - eps: float, default=1e-6
            Truncate all values less than this in the output to zero.
        - random_state: int, RandomState instance or None, default=None
            Used for reproducible results.
    
        Returns:
        - W: array-like of shape (n_samples, n_components)
            Initial guesses for solving X ~= WH.
        - H: array-like of shape (n_components, n_features)
            Initial guesses for solving X ~= WH.
        """
        rng = check_random_state(random_state)
        if init == 'random':
            W = rng.rand(X.shape[0], n_components)
            H = rng.rand(n_components, X.shape[1])
        elif init in {'nndsvd', 'nndsvda', 'nndsvdar'}:
            model = NMF(n_components=n_components, init=init, random_state=random_state)
            W = model.fit_transform(X)
            H = model.components_
        else:
>           raise ValueError(f"Invalid init parameter: {init}. Choose from 'random', 'nndsvd', 'nndsvda', 'nndsvdar'.")
E           ValueError: Invalid init parameter: None. Choose from 'random', 'nndsvd', 'nndsvda', 'nndsvdar'.

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/temp.py:55: ValueError
____________________ test_nmf_minibatchnmf_equivalence[0.5] ____________________

beta_loss = 0.5

    @pytest.mark.parametrize("beta_loss", [-0.5, 0, 0.5, 1, 1.5, 2, 2.5])
    def test_nmf_minibatchnmf_equivalence(beta_loss):
        # Test that MiniBatchNMF is equivalent to NMF when batch_size = n_samples and
        # forget_factor 0.0 (stopping criterion put aside)
        rng = np.random.mtrand.RandomState(42)
        X = np.abs(rng.randn(48, 5))
    
        nmf = NMF(
            n_components=5,
            beta_loss=beta_loss,
            solver="mu",
            random_state=0,
            tol=0,
        )
        mbnmf = MiniBatchNMF(
            n_components=5,
            beta_loss=beta_loss,
            random_state=0,
            tol=0,
            max_no_improvement=None,
            batch_size=X.shape[0],
            forget_factor=0.0,
        )
>       W = nmf.fit_transform(X)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py:860: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_set_output.py:319: in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:1198: in fit_transform
    W, H, n_iter = self._fit_transform(X, W=W, H=H)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:1247: in _fit_transform
    W, H = self._check_w_h(X, W, H, update_H)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:874: in _check_w_h
    W, H = _initialize_nmf(X, self._n_components, init=self.init, random_state=self.random_state)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:161: in _initialize_nmf
    return _initialize_nmf(X, n_components, init, eps, random_state)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[0.49671415, 0.1382643 , 0.64768854, 1.52302986, 0.23415337],
       [0.23413696, 1.57921282, 0.76743473, 0.469... 0.21645859, 0.04557184, 0.65160035, 2.14394409],
       [0.63391902, 2.02514259, 0.18645431, 0.66178646, 0.85243333]])
n_components = 5, init = None, eps = 1e-06, random_state = 0

    def _initialize_nmf(X, n_components, init=None, eps=1e-06, random_state=None):
        """
        Compute an initial guess for the non-negative rank k matrix approximation
        for a given data matrix X using NMF initialization algorithms.
    
        Parameters:
        - X: array-like of shape (n_samples, n_features)
            The data matrix to be decomposed.
        - n_components: int
            The number of components desired in the approximation.
        - init: {'random', 'nndsvd', 'nndsvda', 'nndsvdar'}, default=None
            Method used to initialize the procedure.
        - eps: float, default=1e-6
            Truncate all values less than this in the output to zero.
        - random_state: int, RandomState instance or None, default=None
            Used for reproducible results.
    
        Returns:
        - W: array-like of shape (n_samples, n_components)
            Initial guesses for solving X ~= WH.
        - H: array-like of shape (n_components, n_features)
            Initial guesses for solving X ~= WH.
        """
        rng = check_random_state(random_state)
        if init == 'random':
            W = rng.rand(X.shape[0], n_components)
            H = rng.rand(n_components, X.shape[1])
        elif init in {'nndsvd', 'nndsvda', 'nndsvdar'}:
            model = NMF(n_components=n_components, init=init, random_state=random_state)
            W = model.fit_transform(X)
            H = model.components_
        else:
>           raise ValueError(f"Invalid init parameter: {init}. Choose from 'random', 'nndsvd', 'nndsvda', 'nndsvdar'.")
E           ValueError: Invalid init parameter: None. Choose from 'random', 'nndsvd', 'nndsvda', 'nndsvdar'.

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/temp.py:55: ValueError
_____________________ test_nmf_minibatchnmf_equivalence[1] _____________________

beta_loss = 1

    @pytest.mark.parametrize("beta_loss", [-0.5, 0, 0.5, 1, 1.5, 2, 2.5])
    def test_nmf_minibatchnmf_equivalence(beta_loss):
        # Test that MiniBatchNMF is equivalent to NMF when batch_size = n_samples and
        # forget_factor 0.0 (stopping criterion put aside)
        rng = np.random.mtrand.RandomState(42)
        X = np.abs(rng.randn(48, 5))
    
        nmf = NMF(
            n_components=5,
            beta_loss=beta_loss,
            solver="mu",
            random_state=0,
            tol=0,
        )
        mbnmf = MiniBatchNMF(
            n_components=5,
            beta_loss=beta_loss,
            random_state=0,
            tol=0,
            max_no_improvement=None,
            batch_size=X.shape[0],
            forget_factor=0.0,
        )
>       W = nmf.fit_transform(X)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py:860: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_set_output.py:319: in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:1198: in fit_transform
    W, H, n_iter = self._fit_transform(X, W=W, H=H)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:1247: in _fit_transform
    W, H = self._check_w_h(X, W, H, update_H)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:874: in _check_w_h
    W, H = _initialize_nmf(X, self._n_components, init=self.init, random_state=self.random_state)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:161: in _initialize_nmf
    return _initialize_nmf(X, n_components, init, eps, random_state)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[0.49671415, 0.1382643 , 0.64768854, 1.52302986, 0.23415337],
       [0.23413696, 1.57921282, 0.76743473, 0.469... 0.21645859, 0.04557184, 0.65160035, 2.14394409],
       [0.63391902, 2.02514259, 0.18645431, 0.66178646, 0.85243333]])
n_components = 5, init = None, eps = 1e-06, random_state = 0

    def _initialize_nmf(X, n_components, init=None, eps=1e-06, random_state=None):
        """
        Compute an initial guess for the non-negative rank k matrix approximation
        for a given data matrix X using NMF initialization algorithms.
    
        Parameters:
        - X: array-like of shape (n_samples, n_features)
            The data matrix to be decomposed.
        - n_components: int
            The number of components desired in the approximation.
        - init: {'random', 'nndsvd', 'nndsvda', 'nndsvdar'}, default=None
            Method used to initialize the procedure.
        - eps: float, default=1e-6
            Truncate all values less than this in the output to zero.
        - random_state: int, RandomState instance or None, default=None
            Used for reproducible results.
    
        Returns:
        - W: array-like of shape (n_samples, n_components)
            Initial guesses for solving X ~= WH.
        - H: array-like of shape (n_components, n_features)
            Initial guesses for solving X ~= WH.
        """
        rng = check_random_state(random_state)
        if init == 'random':
            W = rng.rand(X.shape[0], n_components)
            H = rng.rand(n_components, X.shape[1])
        elif init in {'nndsvd', 'nndsvda', 'nndsvdar'}:
            model = NMF(n_components=n_components, init=init, random_state=random_state)
            W = model.fit_transform(X)
            H = model.components_
        else:
>           raise ValueError(f"Invalid init parameter: {init}. Choose from 'random', 'nndsvd', 'nndsvda', 'nndsvdar'.")
E           ValueError: Invalid init parameter: None. Choose from 'random', 'nndsvd', 'nndsvda', 'nndsvdar'.

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/temp.py:55: ValueError
____________________ test_nmf_minibatchnmf_equivalence[1.5] ____________________

beta_loss = 1.5

    @pytest.mark.parametrize("beta_loss", [-0.5, 0, 0.5, 1, 1.5, 2, 2.5])
    def test_nmf_minibatchnmf_equivalence(beta_loss):
        # Test that MiniBatchNMF is equivalent to NMF when batch_size = n_samples and
        # forget_factor 0.0 (stopping criterion put aside)
        rng = np.random.mtrand.RandomState(42)
        X = np.abs(rng.randn(48, 5))
    
        nmf = NMF(
            n_components=5,
            beta_loss=beta_loss,
            solver="mu",
            random_state=0,
            tol=0,
        )
        mbnmf = MiniBatchNMF(
            n_components=5,
            beta_loss=beta_loss,
            random_state=0,
            tol=0,
            max_no_improvement=None,
            batch_size=X.shape[0],
            forget_factor=0.0,
        )
>       W = nmf.fit_transform(X)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py:860: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_set_output.py:319: in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:1198: in fit_transform
    W, H, n_iter = self._fit_transform(X, W=W, H=H)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:1247: in _fit_transform
    W, H = self._check_w_h(X, W, H, update_H)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:874: in _check_w_h
    W, H = _initialize_nmf(X, self._n_components, init=self.init, random_state=self.random_state)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:161: in _initialize_nmf
    return _initialize_nmf(X, n_components, init, eps, random_state)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[0.49671415, 0.1382643 , 0.64768854, 1.52302986, 0.23415337],
       [0.23413696, 1.57921282, 0.76743473, 0.469... 0.21645859, 0.04557184, 0.65160035, 2.14394409],
       [0.63391902, 2.02514259, 0.18645431, 0.66178646, 0.85243333]])
n_components = 5, init = None, eps = 1e-06, random_state = 0

    def _initialize_nmf(X, n_components, init=None, eps=1e-06, random_state=None):
        """
        Compute an initial guess for the non-negative rank k matrix approximation
        for a given data matrix X using NMF initialization algorithms.
    
        Parameters:
        - X: array-like of shape (n_samples, n_features)
            The data matrix to be decomposed.
        - n_components: int
            The number of components desired in the approximation.
        - init: {'random', 'nndsvd', 'nndsvda', 'nndsvdar'}, default=None
            Method used to initialize the procedure.
        - eps: float, default=1e-6
            Truncate all values less than this in the output to zero.
        - random_state: int, RandomState instance or None, default=None
            Used for reproducible results.
    
        Returns:
        - W: array-like of shape (n_samples, n_components)
            Initial guesses for solving X ~= WH.
        - H: array-like of shape (n_components, n_features)
            Initial guesses for solving X ~= WH.
        """
        rng = check_random_state(random_state)
        if init == 'random':
            W = rng.rand(X.shape[0], n_components)
            H = rng.rand(n_components, X.shape[1])
        elif init in {'nndsvd', 'nndsvda', 'nndsvdar'}:
            model = NMF(n_components=n_components, init=init, random_state=random_state)
            W = model.fit_transform(X)
            H = model.components_
        else:
>           raise ValueError(f"Invalid init parameter: {init}. Choose from 'random', 'nndsvd', 'nndsvda', 'nndsvdar'.")
E           ValueError: Invalid init parameter: None. Choose from 'random', 'nndsvd', 'nndsvda', 'nndsvdar'.

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/temp.py:55: ValueError
_____________________ test_nmf_minibatchnmf_equivalence[2] _____________________

beta_loss = 2

    @pytest.mark.parametrize("beta_loss", [-0.5, 0, 0.5, 1, 1.5, 2, 2.5])
    def test_nmf_minibatchnmf_equivalence(beta_loss):
        # Test that MiniBatchNMF is equivalent to NMF when batch_size = n_samples and
        # forget_factor 0.0 (stopping criterion put aside)
        rng = np.random.mtrand.RandomState(42)
        X = np.abs(rng.randn(48, 5))
    
        nmf = NMF(
            n_components=5,
            beta_loss=beta_loss,
            solver="mu",
            random_state=0,
            tol=0,
        )
        mbnmf = MiniBatchNMF(
            n_components=5,
            beta_loss=beta_loss,
            random_state=0,
            tol=0,
            max_no_improvement=None,
            batch_size=X.shape[0],
            forget_factor=0.0,
        )
>       W = nmf.fit_transform(X)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py:860: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_set_output.py:319: in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:1198: in fit_transform
    W, H, n_iter = self._fit_transform(X, W=W, H=H)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:1247: in _fit_transform
    W, H = self._check_w_h(X, W, H, update_H)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:874: in _check_w_h
    W, H = _initialize_nmf(X, self._n_components, init=self.init, random_state=self.random_state)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:161: in _initialize_nmf
    return _initialize_nmf(X, n_components, init, eps, random_state)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[0.49671415, 0.1382643 , 0.64768854, 1.52302986, 0.23415337],
       [0.23413696, 1.57921282, 0.76743473, 0.469... 0.21645859, 0.04557184, 0.65160035, 2.14394409],
       [0.63391902, 2.02514259, 0.18645431, 0.66178646, 0.85243333]])
n_components = 5, init = None, eps = 1e-06, random_state = 0

    def _initialize_nmf(X, n_components, init=None, eps=1e-06, random_state=None):
        """
        Compute an initial guess for the non-negative rank k matrix approximation
        for a given data matrix X using NMF initialization algorithms.
    
        Parameters:
        - X: array-like of shape (n_samples, n_features)
            The data matrix to be decomposed.
        - n_components: int
            The number of components desired in the approximation.
        - init: {'random', 'nndsvd', 'nndsvda', 'nndsvdar'}, default=None
            Method used to initialize the procedure.
        - eps: float, default=1e-6
            Truncate all values less than this in the output to zero.
        - random_state: int, RandomState instance or None, default=None
            Used for reproducible results.
    
        Returns:
        - W: array-like of shape (n_samples, n_components)
            Initial guesses for solving X ~= WH.
        - H: array-like of shape (n_components, n_features)
            Initial guesses for solving X ~= WH.
        """
        rng = check_random_state(random_state)
        if init == 'random':
            W = rng.rand(X.shape[0], n_components)
            H = rng.rand(n_components, X.shape[1])
        elif init in {'nndsvd', 'nndsvda', 'nndsvdar'}:
            model = NMF(n_components=n_components, init=init, random_state=random_state)
            W = model.fit_transform(X)
            H = model.components_
        else:
>           raise ValueError(f"Invalid init parameter: {init}. Choose from 'random', 'nndsvd', 'nndsvda', 'nndsvdar'.")
E           ValueError: Invalid init parameter: None. Choose from 'random', 'nndsvd', 'nndsvda', 'nndsvdar'.

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/temp.py:55: ValueError
____________________ test_nmf_minibatchnmf_equivalence[2.5] ____________________

beta_loss = 2.5

    @pytest.mark.parametrize("beta_loss", [-0.5, 0, 0.5, 1, 1.5, 2, 2.5])
    def test_nmf_minibatchnmf_equivalence(beta_loss):
        # Test that MiniBatchNMF is equivalent to NMF when batch_size = n_samples and
        # forget_factor 0.0 (stopping criterion put aside)
        rng = np.random.mtrand.RandomState(42)
        X = np.abs(rng.randn(48, 5))
    
        nmf = NMF(
            n_components=5,
            beta_loss=beta_loss,
            solver="mu",
            random_state=0,
            tol=0,
        )
        mbnmf = MiniBatchNMF(
            n_components=5,
            beta_loss=beta_loss,
            random_state=0,
            tol=0,
            max_no_improvement=None,
            batch_size=X.shape[0],
            forget_factor=0.0,
        )
>       W = nmf.fit_transform(X)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py:860: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_set_output.py:319: in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:1198: in fit_transform
    W, H, n_iter = self._fit_transform(X, W=W, H=H)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:1247: in _fit_transform
    W, H = self._check_w_h(X, W, H, update_H)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:874: in _check_w_h
    W, H = _initialize_nmf(X, self._n_components, init=self.init, random_state=self.random_state)
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/_nmf.py:161: in _initialize_nmf
    return _initialize_nmf(X, n_components, init, eps, random_state)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

X = array([[0.49671415, 0.1382643 , 0.64768854, 1.52302986, 0.23415337],
       [0.23413696, 1.57921282, 0.76743473, 0.469... 0.21645859, 0.04557184, 0.65160035, 2.14394409],
       [0.63391902, 2.02514259, 0.18645431, 0.66178646, 0.85243333]])
n_components = 5, init = None, eps = 1e-06, random_state = 0

    def _initialize_nmf(X, n_components, init=None, eps=1e-06, random_state=None):
        """
        Compute an initial guess for the non-negative rank k matrix approximation
        for a given data matrix X using NMF initialization algorithms.
    
        Parameters:
        - X: array-like of shape (n_samples, n_features)
            The data matrix to be decomposed.
        - n_components: int
            The number of components desired in the approximation.
        - init: {'random', 'nndsvd', 'nndsvda', 'nndsvdar'}, default=None
            Method used to initialize the procedure.
        - eps: float, default=1e-6
            Truncate all values less than this in the output to zero.
        - random_state: int, RandomState instance or None, default=None
            Used for reproducible results.
    
        Returns:
        - W: array-like of shape (n_samples, n_components)
            Initial guesses for solving X ~= WH.
        - H: array-like of shape (n_components, n_features)
            Initial guesses for solving X ~= WH.
        """
        rng = check_random_state(random_state)
        if init == 'random':
            W = rng.rand(X.shape[0], n_components)
            H = rng.rand(n_components, X.shape[1])
        elif init in {'nndsvd', 'nndsvda', 'nndsvdar'}:
            model = NMF(n_components=n_components, init=init, random_state=random_state)
            W = model.fit_transform(X)
            H = model.components_
        else:
>           raise ValueError(f"Invalid init parameter: {init}. Choose from 'random', 'nndsvd', 'nndsvda', 'nndsvdar'.")
E           ValueError: Invalid init parameter: None. Choose from 'random', 'nndsvd', 'nndsvda', 'nndsvdar'.

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/temp.py:55: ValueError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[-0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[0]
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[1]
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[1.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[2]
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[2.5]
============================== 7 failed in 0.66s ===============================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 7 items

../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[-0.5] I: Seeding RNGs with 1961046926
PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[0] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[1] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[2] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[2.5] PASSED

============================== 7 passed in 0.41s ===============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 7 items

../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[-0.5] I: Seeding RNGs with 1077197025
PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[0] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[0.5] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[1] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[2] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/decomposition/tests/test_nmf.py::test_nmf_minibatchnmf_equivalence[2.5] PASSED

============================== 7 passed in 0.42s ===============================
