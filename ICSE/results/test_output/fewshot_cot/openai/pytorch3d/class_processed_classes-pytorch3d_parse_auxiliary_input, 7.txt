output file:
processed_classes-pytorch3d_parse_auxiliary_input, 7.json
function:
_parse_auxiliary_input
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_init_error FAILED [ 46%]', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_extend_list FAILED [ 30%]', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_allempty FAILED [  7%]', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_all_constructions FAILED [  3%]', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_empty', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_extend_list', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_empty FAILED [ 23%]', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_allempty', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_all_constructions', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_init_error', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_list_someempty FAILED [ 57%]', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_list_someempty'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 26 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_all_constructions FAILED [  3%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_allempty FAILED [  7%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_clone_list PASSED [ 11%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_clone_tensor PASSED [ 15%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_detach PASSED [ 19%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_empty FAILED [ 23%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_estimate_normals PASSED [ 26%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_extend_list FAILED [ 30%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_get_bounding_boxes PASSED [ 34%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_get_cloud PASSED [ 38%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_getitem PASSED [ 42%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_init_error FAILED [ 46%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_inside_box PASSED [ 50%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_join_pointclouds_as_batch PASSED [ 53%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_list_someempty FAILED [ 57%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_offset PASSED [ 61%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_padded_to_packed_idx PASSED [ 65%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_scale PASSED [ 69%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_simple PASSED [ 73%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_simple_random_clouds PASSED [ 76%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_split PASSED [ 80%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_subsample PASSED [ 84%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to PASSED [ 88%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_list FAILED [ 92%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_tensor FAILED [ 96%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_update_padded PASSED [100%]

=================================== FAILURES ===================================
____________________ TestPointclouds.test_all_constructions ____________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_all_constructions>

    def test_all_constructions(self):
        public_getters = [
            "points_list",
            "points_packed",
            "packed_to_cloud_idx",
            "cloud_to_packed_first_idx",
            "num_points_per_cloud",
            "points_padded",
            "padded_to_packed_idx",
        ]
        public_normals_getters = ["normals_list", "normals_packed", "normals_padded"]
        public_features_getters = [
            "features_list",
            "features_packed",
            "features_padded",
        ]
    
        lengths = [3, 4, 2]
        max_len = max(lengths)
        C = 4
    
        points_data = [torch.zeros((max_len, 3)).uniform_() for i in lengths]
        normals_data = [torch.zeros((max_len, 3)).uniform_() for i in lengths]
        features_data = [torch.zeros((max_len, C)).uniform_() for i in lengths]
        for length, p, n, f in zip(lengths, points_data, normals_data, features_data):
            p[length:] = 0.0
            n[length:] = 0.0
            f[length:] = 0.0
        points_list = [d[:length] for length, d in zip(lengths, points_data)]
        normals_list = [d[:length] for length, d in zip(lengths, normals_data)]
        features_list = [d[:length] for length, d in zip(lengths, features_data)]
        points_packed = torch.cat(points_data)
        normals_packed = torch.cat(normals_data)
        features_packed = torch.cat(features_data)
        test_cases_inputs = [
            ("list_0_0", points_list, None, None),
            ("list_1_0", points_list, normals_list, None),
            ("list_0_1", points_list, None, features_list),
            ("list_1_1", points_list, normals_list, features_list),
            ("padded_0_0", points_data, None, None),
            ("padded_1_0", points_data, normals_data, None),
            ("padded_0_1", points_data, None, features_data),
            ("padded_1_1", points_data, normals_data, features_data),
            ("emptylist_emptylist_emptylist", [], [], []),
        ]
        false_cases_inputs = [
            ("list_packed", points_list, normals_packed, features_packed, ValueError),
            ("packed_0", points_packed, None, None, ValueError),
        ]
    
        for name, points, normals, features in test_cases_inputs:
            with self.subTest(name=name):
>               p = Pointclouds(points, normals, features)

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:226: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:171: in __init__
    normals_parsed = self._parse_auxiliary_input(normals)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytorch3d.structures.pointclouds.Pointclouds object at 0x76db9af62d30>
aux_input = []

    def _parse_auxiliary_input(self, aux_input: Optional[Union[List[torch.Tensor], torch.Tensor]]) -> Tuple[Optional[List[torch.Tensor]], Optional[torch.Tensor], Optional[int]]:
        """
        Parse auxiliary input (normals or features) to ensure it is in the correct format.
    
        Args:
            aux_input: Either a list of tensors with shape (num_points, C) or a
                       padded tensor of shape (num_clouds, num_points, C).
    
        Returns:
            A tuple containing:
            - A list of tensors with shape (num_points, C) for each cloud.
            - A padded tensor of shape (num_clouds, num_points, C).
            - The number of channels C.
        """
        if aux_input is None:
            return (None, None, None)
        if isinstance(aux_input, list):
>           num_channels = aux_input[0].shape[1]
E           IndexError: list index out of range

/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:197: IndexError
________________________ TestPointclouds.test_allempty _________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_allempty>

    def test_allempty(self):
>       clouds = Pointclouds([], [])

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:171: in __init__
    normals_parsed = self._parse_auxiliary_input(normals)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytorch3d.structures.pointclouds.Pointclouds object at 0x76db80fb7340>
aux_input = []

    def _parse_auxiliary_input(self, aux_input: Optional[Union[List[torch.Tensor], torch.Tensor]]) -> Tuple[Optional[List[torch.Tensor]], Optional[torch.Tensor], Optional[int]]:
        """
        Parse auxiliary input (normals or features) to ensure it is in the correct format.
    
        Args:
            aux_input: Either a list of tensors with shape (num_points, C) or a
                       padded tensor of shape (num_clouds, num_points, C).
    
        Returns:
            A tuple containing:
            - A list of tensors with shape (num_points, C) for each cloud.
            - A padded tensor of shape (num_clouds, num_points, C).
            - The number of channels C.
        """
        if aux_input is None:
            return (None, None, None)
        if isinstance(aux_input, list):
>           num_channels = aux_input[0].shape[1]
E           IndexError: list index out of range

/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:197: IndexError
__________________________ TestPointclouds.test_empty __________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_empty>

    def test_empty(self):
        N, P, C = 10, 100, 2
        device = torch.device("cuda:0")
        points_list = []
        normals_list = []
        features_list = []
        valid = torch.randint(2, size=(N,), dtype=torch.uint8, device=device)
        for n in range(N):
            if valid[n]:
                p = torch.randint(
                    3, high=P, size=(1,), dtype=torch.int32, device=device
                )[0]
                points = torch.rand((p, 3), dtype=torch.float32, device=device)
                normals = torch.rand((p, 3), dtype=torch.float32, device=device)
                features = torch.rand((p, C), dtype=torch.float32, device=device)
            else:
                points = torch.tensor([], dtype=torch.float32, device=device)
                normals = torch.tensor([], dtype=torch.float32, device=device)
                features = torch.tensor([], dtype=torch.int64, device=device)
            points_list.append(points)
            normals_list.append(normals)
            features_list.append(features)
    
        for with_normals in (False, True):
            for with_features in (False, True):
                this_features, this_normals = None, None
                if with_normals:
                    this_normals = normals_list
                if with_features:
                    this_features = features_list
>               clouds = Pointclouds(
                    points=points_list, normals=this_normals, features=this_features
                )

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:359: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:175: in __init__
    features_parsed = self._parse_auxiliary_input(features)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytorch3d.structures.pointclouds.Pointclouds object at 0x76db9a8fd280>
aux_input = [tensor([[0.3264, 0.9967],
        [0.0706, 0.2893],
        [0.5037, 0.1414],
        [0.5756, 0.8315],
        [0.42...[0.9205, 0.0521],
        [0.2885, 0.7266],
        [0.0763, 0.6723],
        [0.9147, 0.6863]], device='cuda:0'), ...]

    def _parse_auxiliary_input(self, aux_input: Optional[Union[List[torch.Tensor], torch.Tensor]]) -> Tuple[Optional[List[torch.Tensor]], Optional[torch.Tensor], Optional[int]]:
        """
        Parse auxiliary input (normals or features) to ensure it is in the correct format.
    
        Args:
            aux_input: Either a list of tensors with shape (num_points, C) or a
                       padded tensor of shape (num_clouds, num_points, C).
    
        Returns:
            A tuple containing:
            - A list of tensors with shape (num_points, C) for each cloud.
            - A padded tensor of shape (num_clouds, num_points, C).
            - The number of channels C.
        """
        if aux_input is None:
            return (None, None, None)
        if isinstance(aux_input, list):
            num_channels = aux_input[0].shape[1]
            for tensor in aux_input:
>               if tensor.shape[1] != num_channels:
E               IndexError: tuple index out of range

/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:199: IndexError
_______________________ TestPointclouds.test_extend_list _______________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_extend_list>

    def test_extend_list(self):
        N = 10
        clouds = self.init_cloud(N, 100, 10)
        for force in (False, True):
            if force:
                # force some computes to happen
                clouds._compute_packed(refresh=True)
                clouds._compute_padded()
                clouds.padded_to_packed_idx()
            new_clouds = clouds.extend(N)
            self.assertEqual(len(clouds) * 10, len(new_clouds))
            for i in range(len(clouds)):
                for n in range(N):
                    self.assertClose(
                        clouds.points_list()[i], new_clouds.points_list()[i * N + n]
                    )
                    self.assertClose(
                        clouds.normals_list()[i], new_clouds.normals_list()[i * N + n]
                    )
                    self.assertClose(
                        clouds.features_list()[i], new_clouds.features_list()[i * N + n]
                    )
                    self.assertTrue(clouds.valid[i] == new_clouds.valid[i * N + n])
            self.assertAllSeparate(
                clouds.points_list()
                + new_clouds.points_list()
                + clouds.normals_list()
                + new_clouds.normals_list()
                + clouds.features_list()
                + new_clouds.features_list()
            )
            self.assertIsNone(new_clouds._points_packed)
            self.assertIsNone(new_clouds._normals_packed)
            self.assertIsNone(new_clouds._features_packed)
            self.assertIsNone(new_clouds._points_padded)
>           self.assertIsNone(new_clouds._normals_padded)
E           AssertionError: tensor([[[0.5246, 0.3515, 0.1484],
E                    [0.6268, 0.1380, 0.5421],
E                    [0.5927, 0.9362, 0.2284],
E                    ...,
E                    [0.0000, 0.0000, 0.0000],
E                    [0.0000, 0.0000, 0.0000],
E                    [0.0000, 0.0000, 0.0000]],
E           
E                   [[0.5246, 0.3515, 0.1484],
E                    [0.6268, 0.1380, 0.5421],
E                    [0.5927, 0.9362, 0.2284],
E                    ...,
E                    [0.0000, 0.0000, 0.0000],
E                    [0.0000, 0.0000, 0.0000],
E                    [0.0000, 0.0000, 0.0000]],
E           
E                   [[0.5246, 0.3515, 0.1484],
E                    [0.6268, 0.1380, 0.5421],
E                    [0.5927, 0.9362, 0.2284],
E                    ...,
E                    [0.0000, 0.0000, 0.0000],
E                    [0.0000, 0.0000, 0.0000],
E                    [0.0000, 0.0000, 0.0000]],
E           
E                   ...,
E           
E                   [[0.3281, 0.5572, 0.7329],
E                    [0.6278, 0.9680, 0.6967],
E                    [0.5365, 0.9877, 0.3343],
E                    ...,
E                    [0.0000, 0.0000, 0.0000],
E                    [0.0000, 0.0000, 0.0000],
E                    [0.0000, 0.0000, 0.0000]],
E           
E                   [[0.3281, 0.5572, 0.7329],
E                    [0.6278, 0.9680, 0.6967],
E                    [0.5365, 0.9877, 0.3343],
E                    ...,
E                    [0.0000, 0.0000, 0.0000],
E                    [0.0000, 0.0000, 0.0000],
E                    [0.0000, 0.0000, 0.0000]],
E           
E                   [[0.3281, 0.5572, 0.7329],
E                    [0.6278, 0.9680, 0.6967],
E                    [0.5365, 0.9877, 0.3343],
E                    ...,
E                    [0.0000, 0.0000, 0.0000],
E                    [0.0000, 0.0000, 0.0000],
E                    [0.0000, 0.0000, 0.0000]]], device='cuda:0') is not None

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:673: AssertionError
_______________________ TestPointclouds.test_init_error ________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_init_error>

    def test_init_error(self):
        # Check if correct errors are raised when verts/faces are on
        # different devices
    
        clouds = self.init_cloud(10, 100, 5)
        points_list = clouds.points_list()  # all tensors on cuda:0
        points_list = [
            p.to("cpu") if random.uniform(0, 1) > 0.5 else p for p in points_list
        ]
        features_list = clouds.features_list()
        normals_list = clouds.normals_list()
    
        with self.assertRaisesRegex(ValueError, "same device"):
            Pointclouds(
                points=points_list, features=features_list, normals=normals_list
            )
    
        points_list = clouds.points_list()
        features_list = [
            f.to("cpu") if random.uniform(0, 1) > 0.2 else f for f in features_list
        ]
        with self.assertRaisesRegex(ValueError, "same device"):
>           Pointclouds(
                points=points_list, features=features_list, normals=normals_list
            )
E           AssertionError: ValueError not raised

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:161: AssertionError
_____________________ TestPointclouds.test_list_someempty ______________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_list_someempty>

    def test_list_someempty(self):
        # We want
        #     point_cloud = Pointclouds(
        #         [pcl.points_packed() for pcl in point_clouds],
        #         features=[pcl.features_packed() for pcl in point_clouds],
        #     )
        # to work if point_clouds is a list of pointclouds with some empty and some not.
        points_list = [torch.rand(30, 3), torch.zeros(0, 3)]
        features_list = [torch.rand(30, 3), None]
>       pcls = Pointclouds(points=points_list, features=features_list)

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:397: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:175: in __init__
    features_parsed = self._parse_auxiliary_input(features)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytorch3d.structures.pointclouds.Pointclouds object at 0x76db80fe5670>
aux_input = [tensor([[0.6057, 0.3725, 0.7980],
        [0.8399, 0.1374, 0.2331],
        [0.9578, 0.3313, 0.3227],
        [0.0162... 0.2469],
        [0.4761, 0.7792, 0.3722],
        [0.2147, 0.3288, 0.1265],
        [0.6783, 0.8870, 0.0293]]), None]

    def _parse_auxiliary_input(self, aux_input: Optional[Union[List[torch.Tensor], torch.Tensor]]) -> Tuple[Optional[List[torch.Tensor]], Optional[torch.Tensor], Optional[int]]:
        """
        Parse auxiliary input (normals or features) to ensure it is in the correct format.
    
        Args:
            aux_input: Either a list of tensors with shape (num_points, C) or a
                       padded tensor of shape (num_clouds, num_points, C).
    
        Returns:
            A tuple containing:
            - A list of tensors with shape (num_points, C) for each cloud.
            - A padded tensor of shape (num_clouds, num_points, C).
            - The number of channels C.
        """
        if aux_input is None:
            return (None, None, None)
        if isinstance(aux_input, list):
            num_channels = aux_input[0].shape[1]
            for tensor in aux_input:
>               if tensor.shape[1] != num_channels:
E               AttributeError: 'NoneType' object has no attribute 'shape'

/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:199: AttributeError
_________________________ TestPointclouds.test_to_list _________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_to_list>

    def test_to_list(self):
        cloud = self.init_cloud(5, 100, 10)
        device = torch.device("cuda:1")
    
>       new_cloud = cloud.to(device)

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:631: in to
    other._points_list = [v.to(device_) for v in other.points_list()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x76db80fb7400>

>   other._points_list = [v.to(device_) for v in other.points_list()]
E   RuntimeError: CUDA error: invalid device ordinal
E   CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E   For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E   Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:631: RuntimeError
________________________ TestPointclouds.test_to_tensor ________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_to_tensor>

    def test_to_tensor(self):
        cloud = self.init_cloud(5, 100, 10, lists_to_tensors=True)
        device = torch.device("cuda:1")
    
>       new_cloud = cloud.to(device)

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:747: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:631: in to
    other._points_list = [v.to(device_) for v in other.points_list()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x76db80faf040>

>   other._points_list = [v.to(device_) for v in other.points_list()]
E   RuntimeError: CUDA error: invalid device ordinal
E   CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E   For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E   Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:631: RuntimeError
=============================== warnings summary ===============================
tests/test_pointclouds.py::TestPointclouds::test_clone_list
  /local/data0/moved_data/pytorch3d/tests/common_testing.py:85: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
    self.assertNotEqual(tensor1.storage().data_ptr(), tensor2.storage().data_ptr())

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_all_constructions
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_allempty
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_empty
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_extend_list
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_init_error
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_list_someempty
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_list
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_tensor
=================== 8 failed, 18 passed, 1 warning in 1.84s ====================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 26 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_all_constructions PASSED [  3%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_allempty PASSED [  7%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_clone_list PASSED [ 11%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_clone_tensor PASSED [ 15%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_detach PASSED [ 19%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_empty PASSED [ 23%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_estimate_normals PASSED [ 26%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_extend_list PASSED [ 30%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_get_bounding_boxes PASSED [ 34%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_get_cloud PASSED [ 38%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_getitem PASSED [ 42%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_init_error PASSED [ 46%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_inside_box PASSED [ 50%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_join_pointclouds_as_batch PASSED [ 53%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_list_someempty PASSED [ 57%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_offset PASSED [ 61%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_padded_to_packed_idx PASSED [ 65%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_scale PASSED [ 69%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_simple PASSED [ 73%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_simple_random_clouds PASSED [ 76%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_split PASSED [ 80%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_subsample PASSED [ 84%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to PASSED [ 88%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_list FAILED [ 92%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_tensor FAILED [ 96%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_update_padded PASSED [100%]

=================================== FAILURES ===================================
_________________________ TestPointclouds.test_to_list _________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_to_list>

    def test_to_list(self):
        cloud = self.init_cloud(5, 100, 10)
        device = torch.device("cuda:1")
    
>       new_cloud = cloud.to(device)

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:801: in to
    other._points_list = [v.to(device_) for v in other.points_list()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x75f5e8fe1d30>

>   other._points_list = [v.to(device_) for v in other.points_list()]
E   RuntimeError: CUDA error: invalid device ordinal
E   CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E   For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E   Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:801: RuntimeError
________________________ TestPointclouds.test_to_tensor ________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_to_tensor>

    def test_to_tensor(self):
        cloud = self.init_cloud(5, 100, 10, lists_to_tensors=True)
        device = torch.device("cuda:1")
    
>       new_cloud = cloud.to(device)

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:747: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:801: in to
    other._points_list = [v.to(device_) for v in other.points_list()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x75f614636cd0>

>   other._points_list = [v.to(device_) for v in other.points_list()]
E   RuntimeError: CUDA error: invalid device ordinal
E   CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E   For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E   Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:801: RuntimeError
=============================== warnings summary ===============================
tests/test_pointclouds.py::TestPointclouds::test_clone_list
  /local/data0/moved_data/pytorch3d/tests/common_testing.py:85: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
    self.assertNotEqual(tensor1.storage().data_ptr(), tensor2.storage().data_ptr())

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_list
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_tensor
=================== 2 failed, 24 passed, 1 warning in 1.80s ====================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 26 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_all_constructions PASSED [  3%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_allempty PASSED [  7%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_clone_list PASSED [ 11%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_clone_tensor PASSED [ 15%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_detach PASSED [ 19%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_empty PASSED [ 23%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_estimate_normals PASSED [ 26%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_extend_list PASSED [ 30%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_get_bounding_boxes PASSED [ 34%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_get_cloud PASSED [ 38%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_getitem PASSED [ 42%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_init_error PASSED [ 46%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_inside_box PASSED [ 50%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_join_pointclouds_as_batch PASSED [ 53%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_list_someempty PASSED [ 57%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_offset PASSED [ 61%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_padded_to_packed_idx PASSED [ 65%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_scale PASSED [ 69%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_simple PASSED [ 73%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_simple_random_clouds PASSED [ 76%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_split PASSED [ 80%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_subsample PASSED [ 84%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to PASSED [ 88%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_list FAILED [ 92%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_tensor FAILED [ 96%]
../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_update_padded PASSED [100%]

=================================== FAILURES ===================================
_________________________ TestPointclouds.test_to_list _________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_to_list>

    def test_to_list(self):
        cloud = self.init_cloud(5, 100, 10)
        device = torch.device("cuda:1")
    
>       new_cloud = cloud.to(device)

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:801: in to
    other._points_list = [v.to(device_) for v in other.points_list()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x755a77af6e80>

>   other._points_list = [v.to(device_) for v in other.points_list()]
E   RuntimeError: CUDA error: invalid device ordinal
E   CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E   For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E   Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:801: RuntimeError
________________________ TestPointclouds.test_to_tensor ________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_to_tensor>

    def test_to_tensor(self):
        cloud = self.init_cloud(5, 100, 10, lists_to_tensors=True)
        device = torch.device("cuda:1")
    
>       new_cloud = cloud.to(device)

/local/data0/moved_data/pytorch3d/tests/test_pointclouds.py:747: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:801: in to
    other._points_list = [v.to(device_) for v in other.points_list()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x755aa353b4c0>

>   other._points_list = [v.to(device_) for v in other.points_list()]
E   RuntimeError: CUDA error: invalid device ordinal
E   CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E   For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E   Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

/local/data0/moved_data/pytorch3d/pytorch3d/structures/pointclouds.py:801: RuntimeError
=============================== warnings summary ===============================
tests/test_pointclouds.py::TestPointclouds::test_clone_list
  /local/data0/moved_data/pytorch3d/tests/common_testing.py:85: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
    self.assertNotEqual(tensor1.storage().data_ptr(), tensor2.storage().data_ptr())

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_list
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_tensor
=================== 2 failed, 24 passed, 1 warning in 1.77s ====================
