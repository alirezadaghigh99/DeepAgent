output file:
processed_pytorch3d_normalize_and_compose_all_layers142.json
function:
_normalize_and_compose_all_layers
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_opaque', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_opaque FAILED', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_transparencies', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_background_color FAILED', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_transparencies FAILED', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_background_color'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 19 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPrecompute::test_crops_h PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPrecompute::test_crops_w PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPrecompute::test_offsets PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPreparPixelsAndColors::test_background_alpha PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPreparPixelsAndColors::test_background_z PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestGetSplatKernelNormalization::test_splat_kernel_normalization PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeOcclusionLayers::test_all_equal PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeOcclusionLayers::test_mid_to_top_level_splatting PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeOcclusionLayers::test_single_layer PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattingColorsAndWeights::test_all_equal PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattingColorsAndWeights::test_random_inputs PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattingColorsAndWeights::test_zero_alpha_zero_weight PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestOffsetSplats::test_offset PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattedColorsAndWeights::test_accumulation_background PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattedColorsAndWeights::test_accumulation_foreground PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattedColorsAndWeights::test_accumulation_middle PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_background_color FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_opaque FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_transparencies FAILED

=================================== FAILURES ===================================
____________ TestNormalizeAndComposeAllLayers.test_background_color ____________

self = <tests.test_splatter_blend.TestNormalizeAndComposeAllLayers testMethod=test_background_color>

    def test_background_color(self):
        # Background should always have alpha=0, and the chosen RGB.
        N, H, W = 2, 3, 4
        # Make a mask with background in the zeroth row of the first image.
        bg_mask = torch.zeros([N, H, W, 1, 1])
        bg_mask[0, :, 0] = 1
    
        bg_color = torch.tensor([0.2, 0.3, 0.4])
    
        color_layers = torch.rand((N, H, W, 4, 3)) * (1 - bg_mask)
        color_weights = torch.rand((N, H, W, 1, 3)) * (1 - bg_mask)
    
>       colors = _normalize_and_compose_all_layers(
            bg_color, color_layers, color_weights
        )

/local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py:587: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/splatter_blend.py:190: in _normalize_and_compose_all_layers
    return _normalize_and_compose_all_layers(background_color, splatted_colors_per_occlusion_layer, splatted_weights_per_occlusion_layer)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

background_color = tensor([0.2000, 0.3000, 0.4000])
splatted_colors_per_occlusion_layer = tensor([[[[[0.0000, 0.0000, 0.0000],
           [0.0000, 0.0000, 0.0000],
           [0.0000, 0.0000, 0.0000],
       ...43],
           [0.7912, 0.7927, 0.9481],
           [0.6640, 0.9529, 0.7057],
           [0.7238, 0.2953, 0.9476]]]]])
splatted_weights_per_occlusion_layer = tensor([[[[[0.0000, 0.0000, 0.0000]],

          [[0.8287, 0.8569, 0.1039]],

          [[0.7831, 0.0504, 0.1771]],

 ...
          [[0.4527, 0.1215, 0.0497]],

          [[0.9366, 0.3634, 0.1093]],

          [[0.7279, 0.2434, 0.0228]]]]])

    def _normalize_and_compose_all_layers(background_color: torch.Tensor, splatted_colors_per_occlusion_layer: torch.Tensor, splatted_weights_per_occlusion_layer: torch.Tensor) -> torch.Tensor:
        """
        Normalize each buffer by its weight and compose them using alpha compositing.
    
        Args:
            background_color: (3) RGB tensor.
            splatted_colors_per_occlusion_layer: (N, H, W, 4, 3) RGBA tensor, last dimension
                corresponds to foreground, surface, and background splatting.
            splatted_weights_per_occlusion_layer: (N, H, W, 1, 3) weight tensor.
    
        Returns:
            output_colors: (N, H, W, 4) RGBA tensor.
        """
        assert background_color.shape == (3,), 'background_color must be a 3-dimensional RGB tensor'
        assert splatted_colors_per_occlusion_layer.dim() == 5, 'splatted_colors_per_occlusion_layer must be a 5-dimensional tensor'
>       assert splatted_weights_per_occlusion_layer.dim() == 4, 'splatted_weights_per_occlusion_layer must be a 4-dimensional tensor'
E       AssertionError: splatted_weights_per_occlusion_layer must be a 4-dimensional tensor

/local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:26: AssertionError
___________ TestNormalizeAndComposeAllLayers.test_compositing_opaque ___________

self = <tests.test_splatter_blend.TestNormalizeAndComposeAllLayers testMethod=test_compositing_opaque>

    def test_compositing_opaque(self):
        # When all colors are opaque, only the foreground layer should be visible.
        N, H, W = 2, 3, 4
        color_layers = torch.rand((N, H, W, 4, 3))
        color_layers[..., 3, :] = 1.0
        color_weights = torch.ones((N, H, W, 1, 3))
    
>       out_colors = _normalize_and_compose_all_layers(
            torch.tensor([0.0, 0.0, 0.0]), color_layers, color_weights
        )

/local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py:605: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/splatter_blend.py:190: in _normalize_and_compose_all_layers
    return _normalize_and_compose_all_layers(background_color, splatted_colors_per_occlusion_layer, splatted_weights_per_occlusion_layer)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

background_color = tensor([0., 0., 0.])
splatted_colors_per_occlusion_layer = tensor([[[[[0.4756, 0.4097, 0.0897],
           [0.5869, 0.3431, 0.1417],
           [0.6003, 0.1263, 0.3741],
       ...58],
           [0.4342, 0.5525, 0.5778],
           [0.9709, 0.4853, 0.4040],
           [1.0000, 1.0000, 1.0000]]]]])
splatted_weights_per_occlusion_layer = tensor([[[[[1., 1., 1.]],

          [[1., 1., 1.]],

          [[1., 1., 1.]],

          [[1., 1., 1.]]],


        ... 1.]]],


         [[[1., 1., 1.]],

          [[1., 1., 1.]],

          [[1., 1., 1.]],

          [[1., 1., 1.]]]]])

    def _normalize_and_compose_all_layers(background_color: torch.Tensor, splatted_colors_per_occlusion_layer: torch.Tensor, splatted_weights_per_occlusion_layer: torch.Tensor) -> torch.Tensor:
        """
        Normalize each buffer by its weight and compose them using alpha compositing.
    
        Args:
            background_color: (3) RGB tensor.
            splatted_colors_per_occlusion_layer: (N, H, W, 4, 3) RGBA tensor, last dimension
                corresponds to foreground, surface, and background splatting.
            splatted_weights_per_occlusion_layer: (N, H, W, 1, 3) weight tensor.
    
        Returns:
            output_colors: (N, H, W, 4) RGBA tensor.
        """
        assert background_color.shape == (3,), 'background_color must be a 3-dimensional RGB tensor'
        assert splatted_colors_per_occlusion_layer.dim() == 5, 'splatted_colors_per_occlusion_layer must be a 5-dimensional tensor'
>       assert splatted_weights_per_occlusion_layer.dim() == 4, 'splatted_weights_per_occlusion_layer must be a 4-dimensional tensor'
E       AssertionError: splatted_weights_per_occlusion_layer must be a 4-dimensional tensor

/local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:26: AssertionError
_______ TestNormalizeAndComposeAllLayers.test_compositing_transparencies _______

self = <tests.test_splatter_blend.TestNormalizeAndComposeAllLayers testMethod=test_compositing_transparencies>

    def test_compositing_transparencies(self):
        # When foreground layer is transparent and surface and bg are semi-transparent,
        # we should return a  mix of the two latter.
        N, H, W = 2, 3, 4
        color_layers = torch.rand((N, H, W, 4, 3))
        color_layers[..., 3, 0] = 0.1  # fg
        color_layers[..., 3, 1] = 0.2  # surface
        color_layers[..., 3, 2] = 0.3  # bg
        color_weights = torch.ones((N, H, W, 1, 3))
    
>       out_colors = _normalize_and_compose_all_layers(
            torch.tensor([0.0, 0.0, 0.0]), color_layers, color_weights
        )

/local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py:620: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/splatter_blend.py:190: in _normalize_and_compose_all_layers
    return _normalize_and_compose_all_layers(background_color, splatted_colors_per_occlusion_layer, splatted_weights_per_occlusion_layer)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

background_color = tensor([0., 0., 0.])
splatted_colors_per_occlusion_layer = tensor([[[[[0.2155, 0.1585, 0.4388],
           [0.6804, 0.3471, 0.5960],
           [0.2576, 0.6549, 0.9879],
       ...71],
           [0.8754, 0.5020, 0.8380],
           [0.9356, 0.1199, 0.5280],
           [0.1000, 0.2000, 0.3000]]]]])
splatted_weights_per_occlusion_layer = tensor([[[[[1., 1., 1.]],

          [[1., 1., 1.]],

          [[1., 1., 1.]],

          [[1., 1., 1.]]],


        ... 1.]]],


         [[[1., 1., 1.]],

          [[1., 1., 1.]],

          [[1., 1., 1.]],

          [[1., 1., 1.]]]]])

    def _normalize_and_compose_all_layers(background_color: torch.Tensor, splatted_colors_per_occlusion_layer: torch.Tensor, splatted_weights_per_occlusion_layer: torch.Tensor) -> torch.Tensor:
        """
        Normalize each buffer by its weight and compose them using alpha compositing.
    
        Args:
            background_color: (3) RGB tensor.
            splatted_colors_per_occlusion_layer: (N, H, W, 4, 3) RGBA tensor, last dimension
                corresponds to foreground, surface, and background splatting.
            splatted_weights_per_occlusion_layer: (N, H, W, 1, 3) weight tensor.
    
        Returns:
            output_colors: (N, H, W, 4) RGBA tensor.
        """
        assert background_color.shape == (3,), 'background_color must be a 3-dimensional RGB tensor'
        assert splatted_colors_per_occlusion_layer.dim() == 5, 'splatted_colors_per_occlusion_layer must be a 5-dimensional tensor'
>       assert splatted_weights_per_occlusion_layer.dim() == 4, 'splatted_weights_per_occlusion_layer must be a 4-dimensional tensor'
E       AssertionError: splatted_weights_per_occlusion_layer must be a 4-dimensional tensor

/local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:26: AssertionError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_background_color
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_opaque
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_transparencies
========================= 3 failed, 16 passed in 1.29s =========================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 19 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPrecompute::test_crops_h PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPrecompute::test_crops_w PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPrecompute::test_offsets PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPreparPixelsAndColors::test_background_alpha PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPreparPixelsAndColors::test_background_z PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestGetSplatKernelNormalization::test_splat_kernel_normalization PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeOcclusionLayers::test_all_equal PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeOcclusionLayers::test_mid_to_top_level_splatting PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeOcclusionLayers::test_single_layer PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattingColorsAndWeights::test_all_equal PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattingColorsAndWeights::test_random_inputs PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattingColorsAndWeights::test_zero_alpha_zero_weight PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestOffsetSplats::test_offset PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattedColorsAndWeights::test_accumulation_background PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattedColorsAndWeights::test_accumulation_foreground PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattedColorsAndWeights::test_accumulation_middle PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_background_color PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_opaque PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_transparencies PASSED

============================== 19 passed in 1.21s ==============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 19 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPrecompute::test_crops_h PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPrecompute::test_crops_w PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPrecompute::test_offsets PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPreparPixelsAndColors::test_background_alpha PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPreparPixelsAndColors::test_background_z PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestGetSplatKernelNormalization::test_splat_kernel_normalization PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeOcclusionLayers::test_all_equal PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeOcclusionLayers::test_mid_to_top_level_splatting PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeOcclusionLayers::test_single_layer PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattingColorsAndWeights::test_all_equal PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattingColorsAndWeights::test_random_inputs PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattingColorsAndWeights::test_zero_alpha_zero_weight PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestOffsetSplats::test_offset PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattedColorsAndWeights::test_accumulation_background PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattedColorsAndWeights::test_accumulation_foreground PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattedColorsAndWeights::test_accumulation_middle PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_background_color PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_opaque PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_transparencies PASSED

============================== 19 passed in 1.21s ==============================
