output file:
processed_classes-lightlyforward26.json
function:
forward
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_neg_temp', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_cuda FAILED [ 50%]', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_1d FAILED [ 40%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_values FAILED [100%]', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding FAILED [ 90%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_cuda', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_neg_temp FAILED [ 80%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda FAILED [ 70%]', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass FAILED [ 30%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_values', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_1d', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank FAILED [ 60%]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/lightly/lightly/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/lightly/lightly
configfile: pyproject.toml
plugins: hydra-core-1.3.2, mock-3.14.0
collecting ... collected 10 items

../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLoss::test__gather_distributed PASSED [ 10%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLoss::test__gather_distributed_dist_not_available PASSED [ 20%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass FAILED [ 30%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_1d FAILED [ 40%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_cuda FAILED [ 50%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank FAILED [ 60%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda FAILED [ 70%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_neg_temp FAILED [ 80%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding FAILED [ 90%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_values FAILED [100%]

=================================== FAILURES ===================================
___________________ TestNTXentLossUnitTest.test_forward_pass ___________________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_forward_pass>

    def test_forward_pass(self):
        loss = NTXentLoss(memory_bank_size=0)
        for bsz in range(1, 20):
            batch_1 = torch.randn((bsz, 32))
            batch_2 = torch.randn((bsz, 32))
    
            # symmetry
>           l1 = loss(batch_1, batch_2)

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[-8.3674e-01,  1.1624e-01, -2.0682e+00,  1.3114e+00, -4.8441e-01,
          1.2606e+00, -5.8830e-01, -1.1055e-...318e-01,
         -9.4476e-04,  8.6418e-02,  2.3784e-01, -4.7533e-01, -6.2786e-01,
          1.0638e+00, -1.8308e+00]])
out1 = tensor([[-0.3073, -0.8513,  0.0259,  0.7875, -2.8155,  0.7270, -1.2349,  0.1742,
         -0.0876, -1.6081,  0.2316,  ... -0.9552, -0.0476, -0.6885,  0.2739,
         -1.3676,  0.7100,  0.4536,  1.5260, -1.5134,  0.7810,  1.1149, -0.9024]])

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1, eps=self.eps)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
_________________ TestNTXentLossUnitTest.test_forward_pass_1d __________________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_forward_pass_1d>

    def test_forward_pass_1d(self):
        loss = NTXentLoss(memory_bank_size=0)
        for bsz in range(1, 20):
            batch_1 = torch.randn((bsz, 1))
            batch_2 = torch.randn((bsz, 1))
    
            # symmetry
>           l1 = loss(batch_1, batch_2)

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[1.3098]]), out1 = tensor([[-0.5774]])

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1, eps=self.eps)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
________________ TestNTXentLossUnitTest.test_forward_pass_cuda _________________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_forward_pass_cuda>

    @unittest.skipUnless(torch.cuda.is_available(), "No cuda")
    def test_forward_pass_cuda(self):
        loss = NTXentLoss(memory_bank_size=0)
        for bsz in range(1, 20):
            batch_1 = torch.randn((bsz, 32)).cuda()
            batch_2 = torch.randn((bsz, 32)).cuda()
    
            # symmetry
>           l1 = loss(batch_1, batch_2)

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[ 0.0049,  0.6404, -0.4875, -1.7878,  0.7698,  0.8394,  1.1500, -0.1800,
         -1.4396,  0.2082, -0.4348,  ...65,  0.5177,
          0.2488,  0.5854, -0.2770, -0.6805,  0.9549,  0.3401, -0.2290, -0.4933]],
       device='cuda:0')
out1 = tensor([[ 1.2350, -0.6886, -1.4655, -0.2299,  0.1243, -1.3722,  2.4353, -0.1153,
          1.0009,  0.5170,  0.2777, -...90, -2.5664,
         -0.4711, -1.8017, -0.3581,  0.6714, -1.6385,  0.4874, -0.2386,  1.4754]],
       device='cuda:0')

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1, eps=self.eps)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
_____________ TestNTXentLossUnitTest.test_forward_pass_memory_bank _____________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_forward_pass_memory_bank>

    def test_forward_pass_memory_bank(self):
        loss = NTXentLoss(memory_bank_size=64)
        for bsz in range(1, 20):
            batch_1 = torch.randn((bsz, 32))
            batch_2 = torch.randn((bsz, 32))
>           l = loss(batch_1, batch_2)

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[-0.7058,  1.4224,  0.8801, -0.4181, -0.2144, -0.8160, -0.6065, -1.4386,
          0.7219, -1.9157,  0.0216,  ... -0.9197,  0.5535, -0.3394, -0.4585,
          1.0464, -0.5692, -1.4570, -1.2027, -0.2019, -0.2517, -0.4732,  0.1942]])
out1 = tensor([[ 0.6741, -0.5545, -0.5960,  0.7439,  0.6562, -0.0086, -0.7401,  1.5533,
          1.1633,  0.3338,  1.6265,  ... -0.6033, -1.0872,  1.5853, -1.4458,
         -0.3538,  1.2336,  0.1151, -0.6854, -0.0386, -0.0070,  1.3389,  0.2707]])

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1, eps=self.eps)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
__________ TestNTXentLossUnitTest.test_forward_pass_memory_bank_cuda ___________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_forward_pass_memory_bank_cuda>

    @unittest.skipUnless(torch.cuda.is_available(), "No cuda")
    def test_forward_pass_memory_bank_cuda(self):
        loss = NTXentLoss(memory_bank_size=64)
        for bsz in range(1, 20):
            batch_1 = torch.randn((bsz, 32)).cuda()
            batch_2 = torch.randn((bsz, 32)).cuda()
>           l = loss(batch_1, batch_2)

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[ 2.3104, -0.9595, -0.4672,  0.0631, -1.2620, -0.4460, -1.6022, -0.3870,
         -0.2538,  0.1895, -0.6202,  ...47, -1.0034,
         -1.0889,  0.6425,  1.8312,  0.6565, -1.7865,  1.2208, -0.0348,  0.8796]],
       device='cuda:0')
out1 = tensor([[ 1.1933,  2.4910, -0.6111,  2.3650,  1.0774,  0.5103, -1.4083, -0.1840,
          0.9272,  1.0471, -0.3994, -...91, -0.1564,
         -1.4102, -0.8089, -0.1351, -0.4030,  0.1767, -1.0182,  0.0421, -1.3955]],
       device='cuda:0')

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1, eps=self.eps)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
______________ TestNTXentLossUnitTest.test_forward_pass_neg_temp _______________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_forward_pass_neg_temp>

    def test_forward_pass_neg_temp(self):
        loss = NTXentLoss(temperature=-1.0, memory_bank_size=0)
        for bsz in range(1, 20):
            batch_1 = torch.randn((bsz, 32))
            batch_2 = torch.randn((bsz, 32))
    
            # symmetry
>           l1 = loss(batch_1, batch_2)

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:162: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[ 0.5242,  0.8955,  0.9990,  0.0810,  0.2942, -1.9608, -0.2731, -1.6803,
          0.1724, -0.0280, -0.1282, -... -0.5057,  0.2028,  0.9693,  0.8449,
          0.1367,  0.0569, -0.6553,  0.1956, -1.0609, -1.1599,  1.1921,  0.0081]])
out1 = tensor([[ 0.0869,  0.0267,  0.4846,  0.7170,  0.4452,  0.4531, -0.6878, -0.2045,
          0.0398, -1.3698, -0.0985, -...  0.9617, -0.8328,  0.4633,  1.3514,
          1.7138, -0.5503, -0.3367, -0.0416,  0.2218, -1.1269,  0.3621,  0.2054]])

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1, eps=self.eps)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
____________ TestNTXentLossUnitTest.test_with_correlated_embedding _____________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_with_correlated_embedding>

    def test_with_correlated_embedding(self):
        for n_samples in [1, 2, 8, 16]:
            for memory_bank_size in [0, 1, 2, 8, 15, 16, 17]:
                for temperature in [0.1, 1, 7]:
                    for gather_distributed in [False, True]:
                        out0 = np.random.random((n_samples, 1))
                        out1 = np.random.random((n_samples, 1))
                        out0 = np.concatenate([out0, 2 * out0], axis=1)
                        out1 = np.concatenate([out1, 2 * out1], axis=1)
                        out0 = torch.FloatTensor(out0)
                        out1 = torch.FloatTensor(out1)
                        out0.requires_grad = True
    
                        with self.subTest(
                            msg=(
                                f"n_samples: {n_samples}, memory_bank_size: {memory_bank_size},"
                                f"temperature: {temperature}, gather_distributed: {gather_distributed}"
                            )
                        ):
                            loss_function = NTXentLoss(
                                temperature=temperature,
                                memory_bank_size=memory_bank_size,
                            )
                            if memory_bank_size > 0:
                                for i in range(int(memory_bank_size / n_samples) + 2):
                                    # fill the memory bank over multiple rounds
                                    loss = float(loss_function(out0, out1))
                                expected_loss = -1 * np.log(1 / (memory_bank_size + 1))
                            else:
>                               loss = float(loss_function(out0, out1))

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[0.3432, 0.6864]], requires_grad=True)
out1 = tensor([[0.9849, 1.9698]])

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1, eps=self.eps)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
___________________ TestNTXentLossUnitTest.test_with_values ____________________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_with_values>

    def test_with_values(self):
        for n_samples in [1, 2, 4]:
            for dimension in [1, 2, 16, 64]:
                for temperature in [0.1, 1, 10]:
                    for gather_distributed in [False, True]:
                        out0 = np.random.normal(0, 1, size=(n_samples, dimension))
                        out1 = np.random.normal(0, 1, size=(n_samples, dimension))
                        with self.subTest(
                            msg=(
                                f"out0.shape={out0.shape}, temperature={temperature}, "
                                f"gather_distributed={gather_distributed}"
                            )
                        ):
                            out0 = torch.FloatTensor(out0)
                            out1 = torch.FloatTensor(out1)
    
                            loss_function = NTXentLoss(
                                temperature=temperature,
                                gather_distributed=gather_distributed,
                            )
>                           l1 = float(loss_function(out0, out1))

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[0.0604]]), out1 = tensor([[-0.5494]])

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1, eps=self.eps)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
=============================== warnings summary ===============================
tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank
tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=64' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_1d
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_cuda
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_neg_temp
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_values
=================== 8 failed, 2 passed, 2 warnings in 2.86s ====================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/lightly/lightly/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/lightly/lightly
configfile: pyproject.toml
plugins: hydra-core-1.3.2, mock-3.14.0
collecting ... collected 10 items

../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLoss::test__gather_distributed PASSED [ 10%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLoss::test__gather_distributed_dist_not_available PASSED [ 20%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass PASSED [ 30%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_1d PASSED [ 40%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_cuda PASSED [ 50%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank PASSED [ 60%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda PASSED [ 70%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_neg_temp PASSED [ 80%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding PASSED [ 90%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_values PASSED [100%]

=============================== warnings summary ===============================
tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank
tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=64' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=1' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=2' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=8' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=15' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=16' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=17' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py: 144 warnings
  /local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:66: DeprecationWarning: __array__ implementation doesn't accept a copy keyword, so passing copy=False failed. __array__ must implement 'dtype' and 'copy' keyword arguments. To learn more, see the migration guide https://numpy.org/devdocs/numpy_2_0_migration_guide.html#adapting-to-changes-in-the-copy-keyword
    out0 = np.array(out0)

tests/loss/test_NTXentLoss.py: 144 warnings
  /local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:67: DeprecationWarning: __array__ implementation doesn't accept a copy keyword, so passing copy=False failed. __array__ must implement 'dtype' and 'copy' keyword arguments. To learn more, see the migration guide https://numpy.org/devdocs/numpy_2_0_migration_guide.html#adapting-to-changes-in-the-copy-keyword
    out1 = np.array(out1)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================= 10 passed, 296 warnings in 2.94s =======================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/lightly/lightly/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/lightly/lightly
configfile: pyproject.toml
plugins: hydra-core-1.3.2, mock-3.14.0
collecting ... collected 10 items

../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLoss::test__gather_distributed PASSED [ 10%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLoss::test__gather_distributed_dist_not_available PASSED [ 20%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass PASSED [ 30%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_1d PASSED [ 40%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_cuda PASSED [ 50%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank PASSED [ 60%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda PASSED [ 70%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_neg_temp PASSED [ 80%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding PASSED [ 90%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_values PASSED [100%]

=============================== warnings summary ===============================
tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank
tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=64' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=1' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=2' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=8' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=15' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=16' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=17' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py: 144 warnings
  /local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:66: DeprecationWarning: __array__ implementation doesn't accept a copy keyword, so passing copy=False failed. __array__ must implement 'dtype' and 'copy' keyword arguments. To learn more, see the migration guide https://numpy.org/devdocs/numpy_2_0_migration_guide.html#adapting-to-changes-in-the-copy-keyword
    out0 = np.array(out0)

tests/loss/test_NTXentLoss.py: 144 warnings
  /local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:67: DeprecationWarning: __array__ implementation doesn't accept a copy keyword, so passing copy=False failed. __array__ must implement 'dtype' and 'copy' keyword arguments. To learn more, see the migration guide https://numpy.org/devdocs/numpy_2_0_migration_guide.html#adapting-to-changes-in-the-copy-keyword
    out1 = np.array(out1)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================= 10 passed, 296 warnings in 3.09s =======================
