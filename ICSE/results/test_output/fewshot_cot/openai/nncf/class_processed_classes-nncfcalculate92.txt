output file:
processed_classes-nncfcalculate92.json
function:
calculate
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[not_frozen-NNCFConv2d] FAILED [ 88%]', '../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[not_frozen-NNCFLinear] FAILED [ 77%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[default-NNCFConv2d]', '../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[not_frozen-NNCFConvTranspose2d] FAILED [100%]', '../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[default-NNCFConvTranspose2d] FAILED [ 33%]', '../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[default-NNCFConv2d] FAILED [ 22%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[default-NNCFLinear]', '../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[frozen-NNCFConvTranspose2d] FAILED [ 66%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[default-NNCFConvTranspose2d]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[frozen-NNCFConvTranspose2d]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[frozen-NNCFConv2d]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[not_frozen-NNCFConv2d]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[not_frozen-NNCFConvTranspose2d]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[frozen-NNCFLinear]', '../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[default-NNCFLinear] FAILED [ 11%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[not_frozen-NNCFLinear]', '../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[frozen-NNCFConv2d] FAILED [ 55%]', '../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[frozen-NNCFLinear] FAILED [ 44%]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/nncf/nncf/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/nncf/nncf/tests/torch
configfile: pytest.ini
plugins: mock-3.14.0, dependency-0.6.0
collecting ... collected 9 items

../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[default-NNCFLinear] FAILED [ 11%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[default-NNCFConv2d] FAILED [ 22%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[default-NNCFConvTranspose2d] FAILED [ 33%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[frozen-NNCFLinear] FAILED [ 44%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[frozen-NNCFConv2d] FAILED [ 55%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[frozen-NNCFConvTranspose2d] FAILED [ 66%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[not_frozen-NNCFLinear] FAILED [ 77%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[not_frozen-NNCFConv2d] FAILED [ 88%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[not_frozen-NNCFConvTranspose2d] FAILED [100%]

=================================== FAILURES ===================================
_____________ TestSparseModules.test_calc_loss[default-NNCFLinear] _____________

self = <tests.torch.sparsity.rb.test_components.TestSparseModules object at 0x70dd80308f10>
module = <class 'nncf.torch.layers.NNCFLinear'>, frozen = None, raising = True

    @pytest.mark.parametrize(
        ("frozen", "raising"), ((None, True), (True, True), (False, False)), ids=("default", "frozen", "not_frozen")
    )
    def test_calc_loss(self, module, frozen, raising):
        model = sparse_model(module, frozen)
        sw = model.sparsifier
        assert sw.frozen is (True if frozen is None else frozen)
        loss = SparseLoss([model.sparsifier])
        try:
>           assert loss() == 0

/local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/dynamic_graph/wrappers.py:145: in wrapped
    return module_call(self, *args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/compression_method_api.py:67: in forward
    return self.calculate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = SparseLoss()

    def calculate(self) -> torch.Tensor:
        if self.disabled:
            return torch.tensor(0.0)
        total_loss = 0.0
        total_sparse_prob = 0.0
        total_params = 0
        for layer in self._sparse_layers:
            if not layer.frozen:
                total_loss += layer.loss
                total_sparse_prob += layer.sparse_prob
                total_params += layer.params
        if len(self._sparse_layers) > 0:
            self.mean_sparse_prob = total_sparse_prob / len(self._sparse_layers)
        if total_params > 0:
            self.current_sparsity = 1 - total_loss / total_params
>       loss_value = ((total_loss / total_params - self.target) / self.p).pow(2)
E       ZeroDivisionError: float division by zero

/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/sparsity/rb/loss.py:39: ZeroDivisionError

During handling of the above exception, another exception occurred:

self = <tests.torch.sparsity.rb.test_components.TestSparseModules object at 0x70dd80308f10>
module = <class 'nncf.torch.layers.NNCFLinear'>, frozen = None, raising = True

    @pytest.mark.parametrize(
        ("frozen", "raising"), ((None, True), (True, True), (False, False)), ids=("default", "frozen", "not_frozen")
    )
    def test_calc_loss(self, module, frozen, raising):
        model = sparse_model(module, frozen)
        sw = model.sparsifier
        assert sw.frozen is (True if frozen is None else frozen)
        loss = SparseLoss([model.sparsifier])
        try:
            assert loss() == 0
        except ZeroDivisionError:
>           pytest.fail("Division by zero")
E           Failed: Division by zero

/local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py:87: Failed
_____________ TestSparseModules.test_calc_loss[default-NNCFConv2d] _____________

self = <tests.torch.sparsity.rb.test_components.TestSparseModules object at 0x70dd80308eb0>
module = <class 'nncf.torch.layers.NNCFConv2d'>, frozen = None, raising = True

    @pytest.mark.parametrize(
        ("frozen", "raising"), ((None, True), (True, True), (False, False)), ids=("default", "frozen", "not_frozen")
    )
    def test_calc_loss(self, module, frozen, raising):
        model = sparse_model(module, frozen)
        sw = model.sparsifier
        assert sw.frozen is (True if frozen is None else frozen)
        loss = SparseLoss([model.sparsifier])
        try:
>           assert loss() == 0

/local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/dynamic_graph/wrappers.py:145: in wrapped
    return module_call(self, *args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/compression_method_api.py:67: in forward
    return self.calculate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = SparseLoss()

    def calculate(self) -> torch.Tensor:
        if self.disabled:
            return torch.tensor(0.0)
        total_loss = 0.0
        total_sparse_prob = 0.0
        total_params = 0
        for layer in self._sparse_layers:
            if not layer.frozen:
                total_loss += layer.loss
                total_sparse_prob += layer.sparse_prob
                total_params += layer.params
        if len(self._sparse_layers) > 0:
            self.mean_sparse_prob = total_sparse_prob / len(self._sparse_layers)
        if total_params > 0:
            self.current_sparsity = 1 - total_loss / total_params
>       loss_value = ((total_loss / total_params - self.target) / self.p).pow(2)
E       ZeroDivisionError: float division by zero

/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/sparsity/rb/loss.py:39: ZeroDivisionError

During handling of the above exception, another exception occurred:

self = <tests.torch.sparsity.rb.test_components.TestSparseModules object at 0x70dd80308eb0>
module = <class 'nncf.torch.layers.NNCFConv2d'>, frozen = None, raising = True

    @pytest.mark.parametrize(
        ("frozen", "raising"), ((None, True), (True, True), (False, False)), ids=("default", "frozen", "not_frozen")
    )
    def test_calc_loss(self, module, frozen, raising):
        model = sparse_model(module, frozen)
        sw = model.sparsifier
        assert sw.frozen is (True if frozen is None else frozen)
        loss = SparseLoss([model.sparsifier])
        try:
            assert loss() == 0
        except ZeroDivisionError:
>           pytest.fail("Division by zero")
E           Failed: Division by zero

/local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py:87: Failed
________ TestSparseModules.test_calc_loss[default-NNCFConvTranspose2d] _________

self = <tests.torch.sparsity.rb.test_components.TestSparseModules object at 0x70dd80308d90>
module = <class 'nncf.torch.layers.NNCFConvTranspose2d'>, frozen = None
raising = True

    @pytest.mark.parametrize(
        ("frozen", "raising"), ((None, True), (True, True), (False, False)), ids=("default", "frozen", "not_frozen")
    )
    def test_calc_loss(self, module, frozen, raising):
        model = sparse_model(module, frozen)
        sw = model.sparsifier
        assert sw.frozen is (True if frozen is None else frozen)
        loss = SparseLoss([model.sparsifier])
        try:
>           assert loss() == 0

/local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/dynamic_graph/wrappers.py:145: in wrapped
    return module_call(self, *args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/compression_method_api.py:67: in forward
    return self.calculate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = SparseLoss()

    def calculate(self) -> torch.Tensor:
        if self.disabled:
            return torch.tensor(0.0)
        total_loss = 0.0
        total_sparse_prob = 0.0
        total_params = 0
        for layer in self._sparse_layers:
            if not layer.frozen:
                total_loss += layer.loss
                total_sparse_prob += layer.sparse_prob
                total_params += layer.params
        if len(self._sparse_layers) > 0:
            self.mean_sparse_prob = total_sparse_prob / len(self._sparse_layers)
        if total_params > 0:
            self.current_sparsity = 1 - total_loss / total_params
>       loss_value = ((total_loss / total_params - self.target) / self.p).pow(2)
E       ZeroDivisionError: float division by zero

/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/sparsity/rb/loss.py:39: ZeroDivisionError

During handling of the above exception, another exception occurred:

self = <tests.torch.sparsity.rb.test_components.TestSparseModules object at 0x70dd80308d90>
module = <class 'nncf.torch.layers.NNCFConvTranspose2d'>, frozen = None
raising = True

    @pytest.mark.parametrize(
        ("frozen", "raising"), ((None, True), (True, True), (False, False)), ids=("default", "frozen", "not_frozen")
    )
    def test_calc_loss(self, module, frozen, raising):
        model = sparse_model(module, frozen)
        sw = model.sparsifier
        assert sw.frozen is (True if frozen is None else frozen)
        loss = SparseLoss([model.sparsifier])
        try:
            assert loss() == 0
        except ZeroDivisionError:
>           pytest.fail("Division by zero")
E           Failed: Division by zero

/local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py:87: Failed
_____________ TestSparseModules.test_calc_loss[frozen-NNCFLinear] ______________

self = <tests.torch.sparsity.rb.test_components.TestSparseModules object at 0x70dd80312370>
module = <class 'nncf.torch.layers.NNCFLinear'>, frozen = True, raising = True

    @pytest.mark.parametrize(
        ("frozen", "raising"), ((None, True), (True, True), (False, False)), ids=("default", "frozen", "not_frozen")
    )
    def test_calc_loss(self, module, frozen, raising):
        model = sparse_model(module, frozen)
        sw = model.sparsifier
        assert sw.frozen is (True if frozen is None else frozen)
        loss = SparseLoss([model.sparsifier])
        try:
>           assert loss() == 0

/local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/dynamic_graph/wrappers.py:145: in wrapped
    return module_call(self, *args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/compression_method_api.py:67: in forward
    return self.calculate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = SparseLoss()

    def calculate(self) -> torch.Tensor:
        if self.disabled:
            return torch.tensor(0.0)
        total_loss = 0.0
        total_sparse_prob = 0.0
        total_params = 0
        for layer in self._sparse_layers:
            if not layer.frozen:
                total_loss += layer.loss
                total_sparse_prob += layer.sparse_prob
                total_params += layer.params
        if len(self._sparse_layers) > 0:
            self.mean_sparse_prob = total_sparse_prob / len(self._sparse_layers)
        if total_params > 0:
            self.current_sparsity = 1 - total_loss / total_params
>       loss_value = ((total_loss / total_params - self.target) / self.p).pow(2)
E       ZeroDivisionError: float division by zero

/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/sparsity/rb/loss.py:39: ZeroDivisionError

During handling of the above exception, another exception occurred:

self = <tests.torch.sparsity.rb.test_components.TestSparseModules object at 0x70dd80312370>
module = <class 'nncf.torch.layers.NNCFLinear'>, frozen = True, raising = True

    @pytest.mark.parametrize(
        ("frozen", "raising"), ((None, True), (True, True), (False, False)), ids=("default", "frozen", "not_frozen")
    )
    def test_calc_loss(self, module, frozen, raising):
        model = sparse_model(module, frozen)
        sw = model.sparsifier
        assert sw.frozen is (True if frozen is None else frozen)
        loss = SparseLoss([model.sparsifier])
        try:
            assert loss() == 0
        except ZeroDivisionError:
>           pytest.fail("Division by zero")
E           Failed: Division by zero

/local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py:87: Failed
_____________ TestSparseModules.test_calc_loss[frozen-NNCFConv2d] ______________

self = <tests.torch.sparsity.rb.test_components.TestSparseModules object at 0x70dd80312430>
module = <class 'nncf.torch.layers.NNCFConv2d'>, frozen = True, raising = True

    @pytest.mark.parametrize(
        ("frozen", "raising"), ((None, True), (True, True), (False, False)), ids=("default", "frozen", "not_frozen")
    )
    def test_calc_loss(self, module, frozen, raising):
        model = sparse_model(module, frozen)
        sw = model.sparsifier
        assert sw.frozen is (True if frozen is None else frozen)
        loss = SparseLoss([model.sparsifier])
        try:
>           assert loss() == 0

/local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/dynamic_graph/wrappers.py:145: in wrapped
    return module_call(self, *args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/compression_method_api.py:67: in forward
    return self.calculate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = SparseLoss()

    def calculate(self) -> torch.Tensor:
        if self.disabled:
            return torch.tensor(0.0)
        total_loss = 0.0
        total_sparse_prob = 0.0
        total_params = 0
        for layer in self._sparse_layers:
            if not layer.frozen:
                total_loss += layer.loss
                total_sparse_prob += layer.sparse_prob
                total_params += layer.params
        if len(self._sparse_layers) > 0:
            self.mean_sparse_prob = total_sparse_prob / len(self._sparse_layers)
        if total_params > 0:
            self.current_sparsity = 1 - total_loss / total_params
>       loss_value = ((total_loss / total_params - self.target) / self.p).pow(2)
E       ZeroDivisionError: float division by zero

/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/sparsity/rb/loss.py:39: ZeroDivisionError

During handling of the above exception, another exception occurred:

self = <tests.torch.sparsity.rb.test_components.TestSparseModules object at 0x70dd80312430>
module = <class 'nncf.torch.layers.NNCFConv2d'>, frozen = True, raising = True

    @pytest.mark.parametrize(
        ("frozen", "raising"), ((None, True), (True, True), (False, False)), ids=("default", "frozen", "not_frozen")
    )
    def test_calc_loss(self, module, frozen, raising):
        model = sparse_model(module, frozen)
        sw = model.sparsifier
        assert sw.frozen is (True if frozen is None else frozen)
        loss = SparseLoss([model.sparsifier])
        try:
            assert loss() == 0
        except ZeroDivisionError:
>           pytest.fail("Division by zero")
E           Failed: Division by zero

/local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py:87: Failed
_________ TestSparseModules.test_calc_loss[frozen-NNCFConvTranspose2d] _________

self = <tests.torch.sparsity.rb.test_components.TestSparseModules object at 0x70dd803124f0>
module = <class 'nncf.torch.layers.NNCFConvTranspose2d'>, frozen = True
raising = True

    @pytest.mark.parametrize(
        ("frozen", "raising"), ((None, True), (True, True), (False, False)), ids=("default", "frozen", "not_frozen")
    )
    def test_calc_loss(self, module, frozen, raising):
        model = sparse_model(module, frozen)
        sw = model.sparsifier
        assert sw.frozen is (True if frozen is None else frozen)
        loss = SparseLoss([model.sparsifier])
        try:
>           assert loss() == 0

/local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/dynamic_graph/wrappers.py:145: in wrapped
    return module_call(self, *args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/compression_method_api.py:67: in forward
    return self.calculate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = SparseLoss()

    def calculate(self) -> torch.Tensor:
        if self.disabled:
            return torch.tensor(0.0)
        total_loss = 0.0
        total_sparse_prob = 0.0
        total_params = 0
        for layer in self._sparse_layers:
            if not layer.frozen:
                total_loss += layer.loss
                total_sparse_prob += layer.sparse_prob
                total_params += layer.params
        if len(self._sparse_layers) > 0:
            self.mean_sparse_prob = total_sparse_prob / len(self._sparse_layers)
        if total_params > 0:
            self.current_sparsity = 1 - total_loss / total_params
>       loss_value = ((total_loss / total_params - self.target) / self.p).pow(2)
E       ZeroDivisionError: float division by zero

/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/sparsity/rb/loss.py:39: ZeroDivisionError

During handling of the above exception, another exception occurred:

self = <tests.torch.sparsity.rb.test_components.TestSparseModules object at 0x70dd803124f0>
module = <class 'nncf.torch.layers.NNCFConvTranspose2d'>, frozen = True
raising = True

    @pytest.mark.parametrize(
        ("frozen", "raising"), ((None, True), (True, True), (False, False)), ids=("default", "frozen", "not_frozen")
    )
    def test_calc_loss(self, module, frozen, raising):
        model = sparse_model(module, frozen)
        sw = model.sparsifier
        assert sw.frozen is (True if frozen is None else frozen)
        loss = SparseLoss([model.sparsifier])
        try:
            assert loss() == 0
        except ZeroDivisionError:
>           pytest.fail("Division by zero")
E           Failed: Division by zero

/local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py:87: Failed
___________ TestSparseModules.test_calc_loss[not_frozen-NNCFLinear] ____________

self = <tests.torch.sparsity.rb.test_components.TestSparseModules object at 0x70dd803125b0>
module = <class 'nncf.torch.layers.NNCFLinear'>, frozen = False, raising = False

    @pytest.mark.parametrize(
        ("frozen", "raising"), ((None, True), (True, True), (False, False)), ids=("default", "frozen", "not_frozen")
    )
    def test_calc_loss(self, module, frozen, raising):
        model = sparse_model(module, frozen)
        sw = model.sparsifier
        assert sw.frozen is (True if frozen is None else frozen)
        loss = SparseLoss([model.sparsifier])
        try:
>           assert loss() == 0

/local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/dynamic_graph/wrappers.py:145: in wrapped
    return module_call(self, *args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/compression_method_api.py:67: in forward
    return self.calculate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = SparseLoss()

    def calculate(self) -> torch.Tensor:
        if self.disabled:
            return torch.tensor(0.0)
        total_loss = 0.0
        total_sparse_prob = 0.0
        total_params = 0
        for layer in self._sparse_layers:
            if not layer.frozen:
>               total_loss += layer.loss
E               TypeError: unsupported operand type(s) for +=: 'float' and 'method'

/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/sparsity/rb/loss.py:32: TypeError
___________ TestSparseModules.test_calc_loss[not_frozen-NNCFConv2d] ____________

self = <tests.torch.sparsity.rb.test_components.TestSparseModules object at 0x70dd80312670>
module = <class 'nncf.torch.layers.NNCFConv2d'>, frozen = False, raising = False

    @pytest.mark.parametrize(
        ("frozen", "raising"), ((None, True), (True, True), (False, False)), ids=("default", "frozen", "not_frozen")
    )
    def test_calc_loss(self, module, frozen, raising):
        model = sparse_model(module, frozen)
        sw = model.sparsifier
        assert sw.frozen is (True if frozen is None else frozen)
        loss = SparseLoss([model.sparsifier])
        try:
>           assert loss() == 0

/local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/dynamic_graph/wrappers.py:145: in wrapped
    return module_call(self, *args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/compression_method_api.py:67: in forward
    return self.calculate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = SparseLoss()

    def calculate(self) -> torch.Tensor:
        if self.disabled:
            return torch.tensor(0.0)
        total_loss = 0.0
        total_sparse_prob = 0.0
        total_params = 0
        for layer in self._sparse_layers:
            if not layer.frozen:
>               total_loss += layer.loss
E               TypeError: unsupported operand type(s) for +=: 'float' and 'method'

/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/sparsity/rb/loss.py:32: TypeError
_______ TestSparseModules.test_calc_loss[not_frozen-NNCFConvTranspose2d] _______

self = <tests.torch.sparsity.rb.test_components.TestSparseModules object at 0x70dd80312730>
module = <class 'nncf.torch.layers.NNCFConvTranspose2d'>, frozen = False
raising = False

    @pytest.mark.parametrize(
        ("frozen", "raising"), ((None, True), (True, True), (False, False)), ids=("default", "frozen", "not_frozen")
    )
    def test_calc_loss(self, module, frozen, raising):
        model = sparse_model(module, frozen)
        sw = model.sparsifier
        assert sw.frozen is (True if frozen is None else frozen)
        loss = SparseLoss([model.sparsifier])
        try:
>           assert loss() == 0

/local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/dynamic_graph/wrappers.py:145: in wrapped
    return module_call(self, *args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/compression_method_api.py:67: in forward
    return self.calculate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = SparseLoss()

    def calculate(self) -> torch.Tensor:
        if self.disabled:
            return torch.tensor(0.0)
        total_loss = 0.0
        total_sparse_prob = 0.0
        total_params = 0
        for layer in self._sparse_layers:
            if not layer.frozen:
>               total_loss += layer.loss
E               TypeError: unsupported operand type(s) for +=: 'float' and 'method'

/local/data0/moved_data/publishablew/nncf/nncf/nncf/torch/sparsity/rb/loss.py:32: TypeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[default-NNCFLinear]
FAILED ../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[default-NNCFConv2d]
FAILED ../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[default-NNCFConvTranspose2d]
FAILED ../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[frozen-NNCFLinear]
FAILED ../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[frozen-NNCFConv2d]
FAILED ../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[frozen-NNCFConvTranspose2d]
FAILED ../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[not_frozen-NNCFLinear]
FAILED ../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[not_frozen-NNCFConv2d]
FAILED ../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[not_frozen-NNCFConvTranspose2d]
============================== 9 failed in 1.82s ===============================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/nncf/nncf/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/nncf/nncf/tests/torch
configfile: pytest.ini
plugins: mock-3.14.0, dependency-0.6.0
collecting ... collected 9 items

../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[default-NNCFLinear] PASSED [ 11%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[default-NNCFConv2d] PASSED [ 22%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[default-NNCFConvTranspose2d] PASSED [ 33%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[frozen-NNCFLinear] PASSED [ 44%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[frozen-NNCFConv2d] PASSED [ 55%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[frozen-NNCFConvTranspose2d] PASSED [ 66%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[not_frozen-NNCFLinear] PASSED [ 77%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[not_frozen-NNCFConv2d] PASSED [ 88%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[not_frozen-NNCFConvTranspose2d] PASSED [100%]

============================== 9 passed in 1.36s ===============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/nncf/nncf/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/nncf/nncf/tests/torch
configfile: pytest.ini
plugins: mock-3.14.0, dependency-0.6.0
collecting ... collected 9 items

../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[default-NNCFLinear] PASSED [ 11%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[default-NNCFConv2d] PASSED [ 22%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[default-NNCFConvTranspose2d] PASSED [ 33%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[frozen-NNCFLinear] PASSED [ 44%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[frozen-NNCFConv2d] PASSED [ 55%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[frozen-NNCFConvTranspose2d] PASSED [ 66%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[not_frozen-NNCFLinear] PASSED [ 77%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[not_frozen-NNCFConv2d] PASSED [ 88%]
../../../../../../local/data0/moved_data/publishablew/nncf/nncf/tests/torch/sparsity/rb/test_components.py::TestSparseModules::test_calc_loss[not_frozen-NNCFConvTranspose2d] PASSED [100%]

============================== 9 passed in 1.66s ===============================
