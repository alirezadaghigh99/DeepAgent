output file:
processed_classes-neurodiffeqinit16.json
function:
__init__
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_fcnn', 'FAILED ../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_resnet', '../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_fcnn FAILED [ 20%]', '../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_resnet FAILED [ 40%]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq
collecting ... collected 5 items

../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_fcnn FAILED [ 20%]
../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_resnet FAILED [ 40%]
../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_monomial_nn PASSED [ 60%]
../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_swish PASSED [ 80%]
../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_APTx FAILED [100%]

=================================== FAILURES ===================================
__________________________________ test_fcnn ___________________________________

    def test_fcnn():
        for _ in range(N_TESTS):
            n_samples = np.random.randint(30, 100)
            n_features_in = np.random.randint(1, 5)
            n_features_out = np.random.randint(1, 5)
            n_hidden_units = np.random.randint(30, 60)
            n_hidden_layers = np.random.randint(0, 4)
            hidden_units = [np.random.randint(1, 10) for _ in range(np.random.randint(2, 4))]
    
>           with pytest.warns(FutureWarning):
E           Failed: DID NOT WARN. No warnings of type (<class 'FutureWarning'>,) were emitted.
E            Emitted warnings: [ DeprecationWarning("Parameters 'n_hidden_units' and 'n_hidden_layers' are deprecated. Please use 'hidden_units' instead.")].

/local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py:35: Failed
_________________________________ test_resnet __________________________________

    def test_resnet():
        for _ in range(N_TESTS):
            n_samples = np.random.randint(30, 100)
            n_features_in = np.random.randint(1, 5)
            n_features_out = np.random.randint(1, 5)
            n_hidden_units = np.random.randint(30, 60)
            n_hidden_layers = np.random.randint(0, 4)
            hidden_units = [np.random.randint(1, 10) for _ in range(np.random.randint(2, 4))]
>           with pytest.warns(FutureWarning):
E           Failed: DID NOT WARN. No warnings of type (<class 'FutureWarning'>,) were emitted.
E            Emitted warnings: [ DeprecationWarning("Parameters 'n_hidden_units' and 'n_hidden_layers' are deprecated. Please use 'hidden_units' instead.")].

/local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py:83: Failed
__________________________________ test_APTx ___________________________________

    def test_APTx():
        x = torch.rand(10, 5)
    
        f = APTx()
        print(list(f.parameters()))
        assert len(list(f.parameters())) == 0
>       assert torch.isclose(f(x),  (1 + torch.nn.Tanh()(x))*x ).all()
E       AssertionError: assert tensor(False, device='cuda:0')
E        +  where tensor(False, device='cuda:0') = <built-in method all of Tensor object at 0x7c77264a1610>()
E        +    where <built-in method all of Tensor object at 0x7c77264a1610> = tensor([[False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False]], device='cuda:0').all
E        +      where tensor([[False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False]], device='cuda:0') = <built-in method isclose of type object at 0x7c783c8d0240>(tensor([[0.2952, 0.0233, 0.2394, 0.8136, 0.1045],\n        [0.3221, 0.8165, 0.4009, 0.3138, 0.5896],\n        [0.0352, 0.5609, 0.8134, 0.2438, 0.3414],\n        [0.7823, 0.4672, 0.5158, 0.3858, 0.4307],\n        [0.8601, 0.0256, 0.5366, 0.4746, 0.2934],\n        [0.5753, 0.7455, 0.3141, 0.7379, 0.0467],\n        [0.4002, 0.3951, 0.4237, 0.3408, 0.7443],\n        [0.0776, 0.0669, 0.1379, 0.3147, 0.1182],\n        [0.4205, 0.2163, 0.1665, 0.0352, 0.2648],\n        [0.0250, 0.6198, 0.0081, 0.1423, 0.1934]], device='cuda:0'), ((1 + tensor([[0.3987, 0.0445, 0.3423, 0.7344, 0.1759],\n        [0.4239, 0.7356, 0.4912, 0.4163, 0.6214],\n        [0.0659, 0.6040, 0.7343, 0.3470, 0.4412],\n        [0.7208, 0.5415, 0.5750, 0.4790, 0.5144],\n        [0.7535, 0.0489, 0.5886, 0.5467, 0.3970],\n        [0.6128, 0.7039, 0.4165, 0.7003, 0.0858],\n        [0.4907, 0.4865, 0.5091, 0.4407, 0.7034],\n        [0.1357, 0.1189, 0.2220, 0.4171, 0.1952],\n        [0.5066, 0.3171, 0.2586, 0.0660, 0.3687],\n        [0.0476, 0.6389, 0.0160, 0.2278, 0.2910]], device='cuda:0')) * tensor([[0.4222, 0.0445, 0.3567, 0.9382, 0.1777],\n        [0.4524, 0.9409, 0.5377, 0.4432, 0.7273],\n        [0.0660, 0.6994, 0.9380, 0.3620, 0.4738],\n        [0.9092, 0.6062, 0.6550, 0.5217, 0.5687],\n        [0.9810, 0.0489, 0.6756, 0.6137, 0.4201],\n        [0.7134, 0.8750, 0.4435, 0.8680, 0.0860],\n        [0.5369, 0.5315, 0.5615, 0.4731, 0.8739],\n        [0.1366, 0.1195, 0.2258, 0.4442, 0.1978],\n        [0.5582, 0.3285, 0.2646, 0.0661, 0.3870],\n        [0.0477, 0.7563, 0.0160, 0.2318, 0.2996]], device='cuda:0')))
E        +        where <built-in method isclose of type object at 0x7c783c8d0240> = torch.isclose
E        +        and   tensor([[0.2952, 0.0233, 0.2394, 0.8136, 0.1045],\n        [0.3221, 0.8165, 0.4009, 0.3138, 0.5896],\n        [0.0352, 0.5609, 0.8134, 0.2438, 0.3414],\n        [0.7823, 0.4672, 0.5158, 0.3858, 0.4307],\n        [0.8601, 0.0256, 0.5366, 0.4746, 0.2934],\n        [0.5753, 0.7455, 0.3141, 0.7379, 0.0467],\n        [0.4002, 0.3951, 0.4237, 0.3408, 0.7443],\n        [0.0776, 0.0669, 0.1379, 0.3147, 0.1182],\n        [0.4205, 0.2163, 0.1665, 0.0352, 0.2648],\n        [0.0250, 0.6198, 0.0081, 0.1423, 0.1934]], device='cuda:0') = APTx()(tensor([[0.4222, 0.0445, 0.3567, 0.9382, 0.1777],\n        [0.4524, 0.9409, 0.5377, 0.4432, 0.7273],\n        [0.0660, 0.6994, 0.9380, 0.3620, 0.4738],\n        [0.9092, 0.6062, 0.6550, 0.5217, 0.5687],\n        [0.9810, 0.0489, 0.6756, 0.6137, 0.4201],\n        [0.7134, 0.8750, 0.4435, 0.8680, 0.0860],\n        [0.5369, 0.5315, 0.5615, 0.4731, 0.8739],\n        [0.1366, 0.1195, 0.2258, 0.4442, 0.1978],\n        [0.5582, 0.3285, 0.2646, 0.0661, 0.3870],\n        [0.0477, 0.7563, 0.0160, 0.2318, 0.2996]], device='cuda:0'))
E        +        and   tensor([[0.3987, 0.0445, 0.3423, 0.7344, 0.1759],\n        [0.4239, 0.7356, 0.4912, 0.4163, 0.6214],\n        [0.0659, 0.6040, 0.7343, 0.3470, 0.4412],\n        [0.7208, 0.5415, 0.5750, 0.4790, 0.5144],\n        [0.7535, 0.0489, 0.5886, 0.5467, 0.3970],\n        [0.6128, 0.7039, 0.4165, 0.7003, 0.0858],\n        [0.4907, 0.4865, 0.5091, 0.4407, 0.7034],\n        [0.1357, 0.1189, 0.2220, 0.4171, 0.1952],\n        [0.5066, 0.3171, 0.2586, 0.0660, 0.3687],\n        [0.0476, 0.6389, 0.0160, 0.2278, 0.2910]], device='cuda:0') = Tanh()(tensor([[0.4222, 0.0445, 0.3567, 0.9382, 0.1777],\n        [0.4524, 0.9409, 0.5377, 0.4432, 0.7273],\n        [0.0660, 0.6994, 0.9380, 0.3620, 0.4738],\n        [0.9092, 0.6062, 0.6550, 0.5217, 0.5687],\n        [0.9810, 0.0489, 0.6756, 0.6137, 0.4201],\n        [0.7134, 0.8750, 0.4435, 0.8680, 0.0860],\n        [0.5369, 0.5315, 0.5615, 0.4731, 0.8739],\n        [0.1366, 0.1195, 0.2258, 0.4442, 0.1978],\n        [0.5582, 0.3285, 0.2646, 0.0661, 0.3870],\n        [0.0477, 0.7563, 0.0160, 0.2318, 0.2996]], device='cuda:0'))
E        +          where Tanh() = <class 'torch.nn.modules.activation.Tanh'>()
E        +            where <class 'torch.nn.modules.activation.Tanh'> = <module 'torch.nn' from '/local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/venv/lib/python3.11/site-packages/torch/nn/__init__.py'>.Tanh
E        +              where <module 'torch.nn' from '/local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/venv/lib/python3.11/site-packages/torch/nn/__init__.py'> = torch.nn

/local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py:160: AssertionError
----------------------------- Captured stdout call -----------------------------
[]
=============================== warnings summary ===============================
tests/test_networks.py::test_fcnn
tests/test_networks.py::test_resnet
  /local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/neurodiffeq/networks.py:28: DeprecationWarning: Parameters 'n_hidden_units' and 'n_hidden_layers' are deprecated. Please use 'hidden_units' instead.
    warn("Parameters 'n_hidden_units' and 'n_hidden_layers' are deprecated. Please use 'hidden_units' instead.", DeprecationWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_fcnn
FAILED ../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_resnet
FAILED ../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_APTx
=================== 3 failed, 2 passed, 2 warnings in 1.96s ====================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq
collecting ... collected 5 items

../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_fcnn PASSED [ 20%]
../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_resnet PASSED [ 40%]
../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_monomial_nn PASSED [ 60%]
../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_swish PASSED [ 80%]
../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_APTx FAILED [100%]

=================================== FAILURES ===================================
__________________________________ test_APTx ___________________________________

    def test_APTx():
        x = torch.rand(10, 5)
    
        f = APTx()
        print(list(f.parameters()))
        assert len(list(f.parameters())) == 0
>       assert torch.isclose(f(x),  (1 + torch.nn.Tanh()(x))*x ).all()
E       AssertionError: assert tensor(False, device='cuda:0')
E        +  where tensor(False, device='cuda:0') = <built-in method all of Tensor object at 0x7b766607cef0>()
E        +    where <built-in method all of Tensor object at 0x7b766607cef0> = tensor([[False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False]], device='cuda:0').all
E        +      where tensor([[False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False]], device='cuda:0') = <built-in method isclose of type object at 0x7b777c2d0240>(tensor([[0.2836, 0.5139, 0.6827, 0.0019, 0.3843],\n        [0.5668, 0.1326, 0.8794, 0.2254, 0.0233],\n        [0.4986, 0.2721, 0.7436, 0.4098, 0.6187],\n        [0.3422, 0.7933, 0.0836, 0.1354, 0.6693],\n        [0.2118, 0.1609, 0.6221, 0.3513, 0.2964],\n        [0.3143, 0.0884, 0.7579, 0.5525, 0.4100],\n        [0.5625, 0.1300, 0.5400, 0.5450, 0.0146],\n        [0.7312, 0.3714, 0.2041, 0.3063, 0.0553],\n        [0.3604, 0.1193, 0.3955, 0.0983, 0.0886],\n        [0.1732, 0.8569, 0.7571, 0.2631, 0.1396]], device='cuda:0'), ((1 + tensor([[0.3874, 0.5737, 0.6730, 0.0037, 0.4778],\n        [0.6077, 0.2149, 0.7611, 0.3272, 0.0445],\n        [0.5634, 0.3761, 0.7030, 0.4983, 0.6383],\n        [0.4419, 0.7256, 0.1450, 0.2186, 0.6660],\n        [0.3121, 0.2515, 0.6402, 0.4499, 0.3998],\n        [0.4167, 0.1522, 0.7097, 0.5987, 0.4984],\n        [0.6050, 0.2114, 0.5908, 0.5940, 0.0285],\n        [0.6971, 0.4670, 0.3033, 0.4093, 0.1001],\n        [0.4578, 0.1967, 0.4869, 0.1670, 0.1525],\n        [0.2668, 0.7522, 0.7094, 0.3670, 0.2241]], device='cuda:0')) * tensor([[0.4088, 0.6531, 0.8161, 0.0037, 0.5201],\n        [0.7052, 0.2183, 0.9987, 0.3397, 0.0446],\n        [0.6379, 0.3955, 0.8733, 0.5470, 0.7553],\n        [0.4746, 0.9194, 0.1460, 0.2222, 0.8035],\n        [0.3229, 0.2571, 0.7586, 0.4846, 0.4234],\n        [0.4437, 0.1534, 0.8866, 0.6911, 0.5472],\n        [0.7009, 0.2147, 0.6789, 0.6838, 0.0285],\n        [0.8617, 0.5063, 0.3132, 0.4348, 0.1005],\n        [0.4945, 0.1993, 0.5320, 0.1686, 0.1537],\n        [0.2734, 0.9781, 0.8859, 0.3849, 0.2280]], device='cuda:0')))
E        +        where <built-in method isclose of type object at 0x7b777c2d0240> = torch.isclose
E        +        and   tensor([[0.2836, 0.5139, 0.6827, 0.0019, 0.3843],\n        [0.5668, 0.1326, 0.8794, 0.2254, 0.0233],\n        [0.4986, 0.2721, 0.7436, 0.4098, 0.6187],\n        [0.3422, 0.7933, 0.0836, 0.1354, 0.6693],\n        [0.2118, 0.1609, 0.6221, 0.3513, 0.2964],\n        [0.3143, 0.0884, 0.7579, 0.5525, 0.4100],\n        [0.5625, 0.1300, 0.5400, 0.5450, 0.0146],\n        [0.7312, 0.3714, 0.2041, 0.3063, 0.0553],\n        [0.3604, 0.1193, 0.3955, 0.0983, 0.0886],\n        [0.1732, 0.8569, 0.7571, 0.2631, 0.1396]], device='cuda:0') = APTx()(tensor([[0.4088, 0.6531, 0.8161, 0.0037, 0.5201],\n        [0.7052, 0.2183, 0.9987, 0.3397, 0.0446],\n        [0.6379, 0.3955, 0.8733, 0.5470, 0.7553],\n        [0.4746, 0.9194, 0.1460, 0.2222, 0.8035],\n        [0.3229, 0.2571, 0.7586, 0.4846, 0.4234],\n        [0.4437, 0.1534, 0.8866, 0.6911, 0.5472],\n        [0.7009, 0.2147, 0.6789, 0.6838, 0.0285],\n        [0.8617, 0.5063, 0.3132, 0.4348, 0.1005],\n        [0.4945, 0.1993, 0.5320, 0.1686, 0.1537],\n        [0.2734, 0.9781, 0.8859, 0.3849, 0.2280]], device='cuda:0'))
E        +        and   tensor([[0.3874, 0.5737, 0.6730, 0.0037, 0.4778],\n        [0.6077, 0.2149, 0.7611, 0.3272, 0.0445],\n        [0.5634, 0.3761, 0.7030, 0.4983, 0.6383],\n        [0.4419, 0.7256, 0.1450, 0.2186, 0.6660],\n        [0.3121, 0.2515, 0.6402, 0.4499, 0.3998],\n        [0.4167, 0.1522, 0.7097, 0.5987, 0.4984],\n        [0.6050, 0.2114, 0.5908, 0.5940, 0.0285],\n        [0.6971, 0.4670, 0.3033, 0.4093, 0.1001],\n        [0.4578, 0.1967, 0.4869, 0.1670, 0.1525],\n        [0.2668, 0.7522, 0.7094, 0.3670, 0.2241]], device='cuda:0') = Tanh()(tensor([[0.4088, 0.6531, 0.8161, 0.0037, 0.5201],\n        [0.7052, 0.2183, 0.9987, 0.3397, 0.0446],\n        [0.6379, 0.3955, 0.8733, 0.5470, 0.7553],\n        [0.4746, 0.9194, 0.1460, 0.2222, 0.8035],\n        [0.3229, 0.2571, 0.7586, 0.4846, 0.4234],\n        [0.4437, 0.1534, 0.8866, 0.6911, 0.5472],\n        [0.7009, 0.2147, 0.6789, 0.6838, 0.0285],\n        [0.8617, 0.5063, 0.3132, 0.4348, 0.1005],\n        [0.4945, 0.1993, 0.5320, 0.1686, 0.1537],\n        [0.2734, 0.9781, 0.8859, 0.3849, 0.2280]], device='cuda:0'))
E        +          where Tanh() = <class 'torch.nn.modules.activation.Tanh'>()
E        +            where <class 'torch.nn.modules.activation.Tanh'> = <module 'torch.nn' from '/local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/venv/lib/python3.11/site-packages/torch/nn/__init__.py'>.Tanh
E        +              where <module 'torch.nn' from '/local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/venv/lib/python3.11/site-packages/torch/nn/__init__.py'> = torch.nn

/local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py:160: AssertionError
----------------------------- Captured stdout call -----------------------------
[]
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_APTx
========================= 1 failed, 4 passed in 2.00s ==========================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq
collecting ... collected 5 items

../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_fcnn PASSED [ 20%]
../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_resnet PASSED [ 40%]
../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_monomial_nn PASSED [ 60%]
../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_swish PASSED [ 80%]
../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_APTx FAILED [100%]

=================================== FAILURES ===================================
__________________________________ test_APTx ___________________________________

    def test_APTx():
        x = torch.rand(10, 5)
    
        f = APTx()
        print(list(f.parameters()))
        assert len(list(f.parameters())) == 0
>       assert torch.isclose(f(x),  (1 + torch.nn.Tanh()(x))*x ).all()
E       AssertionError: assert tensor(False, device='cuda:0')
E        +  where tensor(False, device='cuda:0') = <built-in method all of Tensor object at 0x78d0c3d7cb30>()
E        +    where <built-in method all of Tensor object at 0x78d0c3d7cb30> = tensor([[False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False]], device='cuda:0').all
E        +      where tensor([[False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False],\n        [False, False, False, False, False]], device='cuda:0') = <built-in method isclose of type object at 0x78d1d9ed0240>(tensor([[0.2836, 0.5139, 0.6827, 0.0019, 0.3843],\n        [0.5668, 0.1326, 0.8794, 0.2254, 0.0233],\n        [0.4986, 0.2721, 0.7436, 0.4098, 0.6187],\n        [0.3422, 0.7933, 0.0836, 0.1354, 0.6693],\n        [0.2118, 0.1609, 0.6221, 0.3513, 0.2964],\n        [0.3143, 0.0884, 0.7579, 0.5525, 0.4100],\n        [0.5625, 0.1300, 0.5400, 0.5450, 0.0146],\n        [0.7312, 0.3714, 0.2041, 0.3063, 0.0553],\n        [0.3604, 0.1193, 0.3955, 0.0983, 0.0886],\n        [0.1732, 0.8569, 0.7571, 0.2631, 0.1396]], device='cuda:0'), ((1 + tensor([[0.3874, 0.5737, 0.6730, 0.0037, 0.4778],\n        [0.6077, 0.2149, 0.7611, 0.3272, 0.0445],\n        [0.5634, 0.3761, 0.7030, 0.4983, 0.6383],\n        [0.4419, 0.7256, 0.1450, 0.2186, 0.6660],\n        [0.3121, 0.2515, 0.6402, 0.4499, 0.3998],\n        [0.4167, 0.1522, 0.7097, 0.5987, 0.4984],\n        [0.6050, 0.2114, 0.5908, 0.5940, 0.0285],\n        [0.6971, 0.4670, 0.3033, 0.4093, 0.1001],\n        [0.4578, 0.1967, 0.4869, 0.1670, 0.1525],\n        [0.2668, 0.7522, 0.7094, 0.3670, 0.2241]], device='cuda:0')) * tensor([[0.4088, 0.6531, 0.8161, 0.0037, 0.5201],\n        [0.7052, 0.2183, 0.9987, 0.3397, 0.0446],\n        [0.6379, 0.3955, 0.8733, 0.5470, 0.7553],\n        [0.4746, 0.9194, 0.1460, 0.2222, 0.8035],\n        [0.3229, 0.2571, 0.7586, 0.4846, 0.4234],\n        [0.4437, 0.1534, 0.8866, 0.6911, 0.5472],\n        [0.7009, 0.2147, 0.6789, 0.6838, 0.0285],\n        [0.8617, 0.5063, 0.3132, 0.4348, 0.1005],\n        [0.4945, 0.1993, 0.5320, 0.1686, 0.1537],\n        [0.2734, 0.9781, 0.8859, 0.3849, 0.2280]], device='cuda:0')))
E        +        where <built-in method isclose of type object at 0x78d1d9ed0240> = torch.isclose
E        +        and   tensor([[0.2836, 0.5139, 0.6827, 0.0019, 0.3843],\n        [0.5668, 0.1326, 0.8794, 0.2254, 0.0233],\n        [0.4986, 0.2721, 0.7436, 0.4098, 0.6187],\n        [0.3422, 0.7933, 0.0836, 0.1354, 0.6693],\n        [0.2118, 0.1609, 0.6221, 0.3513, 0.2964],\n        [0.3143, 0.0884, 0.7579, 0.5525, 0.4100],\n        [0.5625, 0.1300, 0.5400, 0.5450, 0.0146],\n        [0.7312, 0.3714, 0.2041, 0.3063, 0.0553],\n        [0.3604, 0.1193, 0.3955, 0.0983, 0.0886],\n        [0.1732, 0.8569, 0.7571, 0.2631, 0.1396]], device='cuda:0') = APTx()(tensor([[0.4088, 0.6531, 0.8161, 0.0037, 0.5201],\n        [0.7052, 0.2183, 0.9987, 0.3397, 0.0446],\n        [0.6379, 0.3955, 0.8733, 0.5470, 0.7553],\n        [0.4746, 0.9194, 0.1460, 0.2222, 0.8035],\n        [0.3229, 0.2571, 0.7586, 0.4846, 0.4234],\n        [0.4437, 0.1534, 0.8866, 0.6911, 0.5472],\n        [0.7009, 0.2147, 0.6789, 0.6838, 0.0285],\n        [0.8617, 0.5063, 0.3132, 0.4348, 0.1005],\n        [0.4945, 0.1993, 0.5320, 0.1686, 0.1537],\n        [0.2734, 0.9781, 0.8859, 0.3849, 0.2280]], device='cuda:0'))
E        +        and   tensor([[0.3874, 0.5737, 0.6730, 0.0037, 0.4778],\n        [0.6077, 0.2149, 0.7611, 0.3272, 0.0445],\n        [0.5634, 0.3761, 0.7030, 0.4983, 0.6383],\n        [0.4419, 0.7256, 0.1450, 0.2186, 0.6660],\n        [0.3121, 0.2515, 0.6402, 0.4499, 0.3998],\n        [0.4167, 0.1522, 0.7097, 0.5987, 0.4984],\n        [0.6050, 0.2114, 0.5908, 0.5940, 0.0285],\n        [0.6971, 0.4670, 0.3033, 0.4093, 0.1001],\n        [0.4578, 0.1967, 0.4869, 0.1670, 0.1525],\n        [0.2668, 0.7522, 0.7094, 0.3670, 0.2241]], device='cuda:0') = Tanh()(tensor([[0.4088, 0.6531, 0.8161, 0.0037, 0.5201],\n        [0.7052, 0.2183, 0.9987, 0.3397, 0.0446],\n        [0.6379, 0.3955, 0.8733, 0.5470, 0.7553],\n        [0.4746, 0.9194, 0.1460, 0.2222, 0.8035],\n        [0.3229, 0.2571, 0.7586, 0.4846, 0.4234],\n        [0.4437, 0.1534, 0.8866, 0.6911, 0.5472],\n        [0.7009, 0.2147, 0.6789, 0.6838, 0.0285],\n        [0.8617, 0.5063, 0.3132, 0.4348, 0.1005],\n        [0.4945, 0.1993, 0.5320, 0.1686, 0.1537],\n        [0.2734, 0.9781, 0.8859, 0.3849, 0.2280]], device='cuda:0'))
E        +          where Tanh() = <class 'torch.nn.modules.activation.Tanh'>()
E        +            where <class 'torch.nn.modules.activation.Tanh'> = <module 'torch.nn' from '/local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/venv/lib/python3.11/site-packages/torch/nn/__init__.py'>.Tanh
E        +              where <module 'torch.nn' from '/local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/venv/lib/python3.11/site-packages/torch/nn/__init__.py'> = torch.nn

/local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py:160: AssertionError
----------------------------- Captured stdout call -----------------------------
[]
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/neurodiffeq/neurodiffeq/tests/test_networks.py::test_APTx
========================= 1 failed, 4 passed in 2.10s ==========================
