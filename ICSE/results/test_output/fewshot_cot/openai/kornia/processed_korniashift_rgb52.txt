output file:
processed_korniashift_rgb52.json
function:
shift_rgb
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_gradcheck[cpu]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_invalid_parameter_shape[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_all_zeros[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_no_shift[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_gradcheck[cpu] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_invalid_parameter_shape[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_all_ones[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_all_ones[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_all_zeros[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_no_shift[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift[cpu-float32] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'cudagraphs', 'tvm', 'onnxrt', 'jit', 'inductor', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 6 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_no_shift[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_all_zeros[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_all_ones[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_invalid_parameter_shape[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_gradcheck[cpu] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift[cpu-float32] FAILED

=================================== FAILURES ===================================
______________ TestRGBShift.test_rgb_shift_no_shift[cpu-float32] _______________

self = <test_shift_rgb.TestRGBShift object at 0x761563d38c10>
device = device(type='cpu'), dtype = torch.float32

    def test_rgb_shift_no_shift(self, device, dtype):
        r_shift, g_shift, b_shift = torch.Tensor([0]), torch.Tensor([0]), torch.Tensor([0])
        image = torch.rand(2, 3, 5, 5, device=device, dtype=dtype)
        expected = image
>       shifted = kornia.enhance.shift_rgb(image, r_shift, g_shift, b_shift)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/shift_rgb.py:6: in shift_rgb
    return shift_rgb(image, r_shift, g_shift, b_shift)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.4770, 0.0944, 0.6858, 0.7394, 0.8457],
          [0.8803, 0.5197, 0.2414, 0.1855, 0.0333],
          [0.0...47, 0.4002],
          [0.6749, 0.1080, 0.3820, 0.5199, 0.3852],
          [0.3159, 0.9253, 0.8119, 0.4088, 0.3471]]]])
r_shift = tensor([0.]), g_shift = tensor([0.]), b_shift = tensor([0.])

    def shift_rgb(image: torch.Tensor, r_shift: torch.Tensor, g_shift: torch.Tensor, b_shift: torch.Tensor) -> torch.Tensor:
        """
        Shift the RGB channels of an image tensor.
    
        Args:
            image (Tensor): Input image tensor of shape (N, C, H, W) where C is 3 (RGB).
            r_shift (Tensor): Shift values for the red channel, shape (N).
            g_shift (Tensor): Shift values for the green channel, shape (N).
            b_shift (Tensor): Shift values for the blue channel, shape (N).
    
        Returns:
            Tensor: Modified image tensor with the same shape as input.
        """
        if not isinstance(image, torch.Tensor):
            raise TypeError('Image must be a torch.Tensor.')
        if image.shape[1] != 3:
            raise ValueError('Image must have 3 channels (RGB).')
        if not (isinstance(r_shift, torch.Tensor) and isinstance(g_shift, torch.Tensor) and isinstance(b_shift, torch.Tensor)):
            raise TypeError('Shift values must be torch.Tensors.')
        if not r_shift.shape[0] == g_shift.shape[0] == b_shift.shape[0] == image.shape[0]:
>           raise ValueError('Shift tensors must have the same batch size as the image.')
E           ValueError: Shift tensors must have the same batch size as the image.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:25: ValueError
______________ TestRGBShift.test_rgb_shift_all_zeros[cpu-float32] ______________

self = <test_shift_rgb.TestRGBShift object at 0x761563d39000>
device = device(type='cpu'), dtype = torch.float32

    def test_rgb_shift_all_zeros(self, device, dtype):
        r_shift, g_shift, b_shift = torch.Tensor([-0.1]), torch.Tensor([-0.1]), torch.Tensor([-0.1])
        image = torch.zeros(2, 3, 5, 5, device=device, dtype=dtype)
        expected = image
>       shifted = kornia.enhance.shift_rgb(image, r_shift, g_shift, b_shift)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/shift_rgb.py:6: in shift_rgb
    return shift_rgb(image, r_shift, g_shift, b_shift)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0.,...0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.]]]])
r_shift = tensor([-0.1000]), g_shift = tensor([-0.1000])
b_shift = tensor([-0.1000])

    def shift_rgb(image: torch.Tensor, r_shift: torch.Tensor, g_shift: torch.Tensor, b_shift: torch.Tensor) -> torch.Tensor:
        """
        Shift the RGB channels of an image tensor.
    
        Args:
            image (Tensor): Input image tensor of shape (N, C, H, W) where C is 3 (RGB).
            r_shift (Tensor): Shift values for the red channel, shape (N).
            g_shift (Tensor): Shift values for the green channel, shape (N).
            b_shift (Tensor): Shift values for the blue channel, shape (N).
    
        Returns:
            Tensor: Modified image tensor with the same shape as input.
        """
        if not isinstance(image, torch.Tensor):
            raise TypeError('Image must be a torch.Tensor.')
        if image.shape[1] != 3:
            raise ValueError('Image must have 3 channels (RGB).')
        if not (isinstance(r_shift, torch.Tensor) and isinstance(g_shift, torch.Tensor) and isinstance(b_shift, torch.Tensor)):
            raise TypeError('Shift values must be torch.Tensors.')
        if not r_shift.shape[0] == g_shift.shape[0] == b_shift.shape[0] == image.shape[0]:
>           raise ValueError('Shift tensors must have the same batch size as the image.')
E           ValueError: Shift tensors must have the same batch size as the image.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:25: ValueError
______________ TestRGBShift.test_rgb_shift_all_ones[cpu-float32] _______________

self = <test_shift_rgb.TestRGBShift object at 0x761563d39330>
device = device(type='cpu'), dtype = torch.float32

    def test_rgb_shift_all_ones(self, device, dtype):
        r_shift, g_shift, b_shift = torch.Tensor([1]), torch.Tensor([1]), torch.Tensor([1])
        image = torch.rand(2, 3, 5, 5, device=device, dtype=dtype)
        expected = torch.ones(2, 3, 5, 5, device=device, dtype=dtype)
>       shifted = kornia.enhance.shift_rgb(image, r_shift, g_shift, b_shift)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/shift_rgb.py:6: in shift_rgb
    return shift_rgb(image, r_shift, g_shift, b_shift)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.6475, 0.4366, 0.3614, 0.2716, 0.1487],
          [0.0548, 0.1792, 0.6199, 0.7247, 0.5443],
          [0.5...32, 0.3999],
          [0.7654, 0.0437, 0.0254, 0.1061, 0.5357],
          [0.8152, 0.9627, 0.9864, 0.7822, 0.4818]]]])
r_shift = tensor([1.]), g_shift = tensor([1.]), b_shift = tensor([1.])

    def shift_rgb(image: torch.Tensor, r_shift: torch.Tensor, g_shift: torch.Tensor, b_shift: torch.Tensor) -> torch.Tensor:
        """
        Shift the RGB channels of an image tensor.
    
        Args:
            image (Tensor): Input image tensor of shape (N, C, H, W) where C is 3 (RGB).
            r_shift (Tensor): Shift values for the red channel, shape (N).
            g_shift (Tensor): Shift values for the green channel, shape (N).
            b_shift (Tensor): Shift values for the blue channel, shape (N).
    
        Returns:
            Tensor: Modified image tensor with the same shape as input.
        """
        if not isinstance(image, torch.Tensor):
            raise TypeError('Image must be a torch.Tensor.')
        if image.shape[1] != 3:
            raise ValueError('Image must have 3 channels (RGB).')
        if not (isinstance(r_shift, torch.Tensor) and isinstance(g_shift, torch.Tensor) and isinstance(b_shift, torch.Tensor)):
            raise TypeError('Shift values must be torch.Tensors.')
        if not r_shift.shape[0] == g_shift.shape[0] == b_shift.shape[0] == image.shape[0]:
>           raise ValueError('Shift tensors must have the same batch size as the image.')
E           ValueError: Shift tensors must have the same batch size as the image.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:25: ValueError
_______ TestRGBShift.test_rgb_shift_invalid_parameter_shape[cpu-float32] _______

self = <test_shift_rgb.TestRGBShift object at 0x761563d39660>
device = device(type='cpu'), dtype = torch.float32

    def test_rgb_shift_invalid_parameter_shape(self, device, dtype):
        r_shift, g_shift, b_shift = torch.Tensor([0.5]), torch.Tensor([0.5]), torch.Tensor([0.5])
        image = torch.randn(3, 3, device=device, dtype=dtype)
        with pytest.raises(TypeError):
>           kornia.enhance.shift_rgb(image, r_shift, g_shift, b_shift)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/shift_rgb.py:6: in shift_rgb
    return shift_rgb(image, r_shift, g_shift, b_shift)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[ 1.0322, -0.9091,  1.7631],
        [-0.4912, -0.9997, -0.2407],
        [-2.2216,  2.9683, -1.1627]])
r_shift = tensor([0.5000]), g_shift = tensor([0.5000])
b_shift = tensor([0.5000])

    def shift_rgb(image: torch.Tensor, r_shift: torch.Tensor, g_shift: torch.Tensor, b_shift: torch.Tensor) -> torch.Tensor:
        """
        Shift the RGB channels of an image tensor.
    
        Args:
            image (Tensor): Input image tensor of shape (N, C, H, W) where C is 3 (RGB).
            r_shift (Tensor): Shift values for the red channel, shape (N).
            g_shift (Tensor): Shift values for the green channel, shape (N).
            b_shift (Tensor): Shift values for the blue channel, shape (N).
    
        Returns:
            Tensor: Modified image tensor with the same shape as input.
        """
        if not isinstance(image, torch.Tensor):
            raise TypeError('Image must be a torch.Tensor.')
        if image.shape[1] != 3:
            raise ValueError('Image must have 3 channels (RGB).')
        if not (isinstance(r_shift, torch.Tensor) and isinstance(g_shift, torch.Tensor) and isinstance(b_shift, torch.Tensor)):
            raise TypeError('Shift values must be torch.Tensors.')
        if not r_shift.shape[0] == g_shift.shape[0] == b_shift.shape[0] == image.shape[0]:
>           raise ValueError('Shift tensors must have the same batch size as the image.')
E           ValueError: Shift tensors must have the same batch size as the image.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:25: ValueError
__________________ TestRGBShift.test_rgb_shift_gradcheck[cpu] __________________

self = <test_shift_rgb.TestRGBShift object at 0x761563d39960>
device = device(type='cpu')

    def test_rgb_shift_gradcheck(self, device):
        r_shift, g_shift, b_shift = torch.Tensor([0.4]), torch.Tensor([0.5]), torch.Tensor([0.2])
        image = torch.randn(2, 3, 5, 5, device=device, dtype=torch.float64)
>       self.gradcheck(kornia.enhance.shift_rgb, (image, r_shift, g_shift, b_shift))

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/shift_rgb.py:6: in shift_rgb
    return shift_rgb(image, r_shift, g_shift, b_shift)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[-0.1941, -1.4151, -0.2948, -0.4091,  1.6451],
          [ 2.0911, -0.8418, -0.2623,  0.6689,  0.1170],
    ...,  0.0080],
          [ 1.9256,  3.1606,  0.3571, -1.9406, -0.3228]]]],
       dtype=torch.float64, requires_grad=True)
r_shift = tensor([0.4000], dtype=torch.float64, requires_grad=True)
g_shift = tensor([0.5000], dtype=torch.float64, requires_grad=True)
b_shift = tensor([0.2000], dtype=torch.float64, requires_grad=True)

    def shift_rgb(image: torch.Tensor, r_shift: torch.Tensor, g_shift: torch.Tensor, b_shift: torch.Tensor) -> torch.Tensor:
        """
        Shift the RGB channels of an image tensor.
    
        Args:
            image (Tensor): Input image tensor of shape (N, C, H, W) where C is 3 (RGB).
            r_shift (Tensor): Shift values for the red channel, shape (N).
            g_shift (Tensor): Shift values for the green channel, shape (N).
            b_shift (Tensor): Shift values for the blue channel, shape (N).
    
        Returns:
            Tensor: Modified image tensor with the same shape as input.
        """
        if not isinstance(image, torch.Tensor):
            raise TypeError('Image must be a torch.Tensor.')
        if image.shape[1] != 3:
            raise ValueError('Image must have 3 channels (RGB).')
        if not (isinstance(r_shift, torch.Tensor) and isinstance(g_shift, torch.Tensor) and isinstance(b_shift, torch.Tensor)):
            raise TypeError('Shift values must be torch.Tensors.')
        if not r_shift.shape[0] == g_shift.shape[0] == b_shift.shape[0] == image.shape[0]:
>           raise ValueError('Shift tensors must have the same batch size as the image.')
E           ValueError: Shift tensors must have the same batch size as the image.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:25: ValueError
___________________ TestRGBShift.test_rgb_shift[cpu-float32] ___________________

self = <test_shift_rgb.TestRGBShift object at 0x761563d39c60>
device = device(type='cpu'), dtype = torch.float32

    def test_rgb_shift(self, device, dtype):
        r_shift, g_shift, b_shift = torch.Tensor([0.1]), torch.Tensor([0.3]), torch.Tensor([-0.3])
        image = torch.tensor(
            [[[[0.2, 0.0]], [[0.3, 0.5]], [[0.4, 0.7]]], [[[0.2, 0.7]], [[0.0, 0.8]], [[0.2, 0.3]]]],
            device=device,
            dtype=dtype,
        )
>       shifted = kornia.enhance.shift_rgb(image, r_shift, g_shift, b_shift)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/shift_rgb.py:6: in shift_rgb
    return shift_rgb(image, r_shift, g_shift, b_shift)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.2000, 0.0000]],

         [[0.3000, 0.5000]],

         [[0.4000, 0.7000]]],


        [[[0.2000, 0.7000]],

         [[0.0000, 0.8000]],

         [[0.2000, 0.3000]]]])
r_shift = tensor([0.1000]), g_shift = tensor([0.3000])
b_shift = tensor([-0.3000])

    def shift_rgb(image: torch.Tensor, r_shift: torch.Tensor, g_shift: torch.Tensor, b_shift: torch.Tensor) -> torch.Tensor:
        """
        Shift the RGB channels of an image tensor.
    
        Args:
            image (Tensor): Input image tensor of shape (N, C, H, W) where C is 3 (RGB).
            r_shift (Tensor): Shift values for the red channel, shape (N).
            g_shift (Tensor): Shift values for the green channel, shape (N).
            b_shift (Tensor): Shift values for the blue channel, shape (N).
    
        Returns:
            Tensor: Modified image tensor with the same shape as input.
        """
        if not isinstance(image, torch.Tensor):
            raise TypeError('Image must be a torch.Tensor.')
        if image.shape[1] != 3:
            raise ValueError('Image must have 3 channels (RGB).')
        if not (isinstance(r_shift, torch.Tensor) and isinstance(g_shift, torch.Tensor) and isinstance(b_shift, torch.Tensor)):
            raise TypeError('Shift values must be torch.Tensors.')
        if not r_shift.shape[0] == g_shift.shape[0] == b_shift.shape[0] == image.shape[0]:
>           raise ValueError('Shift tensors must have the same batch size as the image.')
E           ValueError: Shift tensors must have the same batch size as the image.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:25: ValueError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_no_shift[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_all_zeros[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_all_ones[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_invalid_parameter_shape[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_gradcheck[cpu]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift[cpu-float32]
============================== 6 failed in 0.31s ===============================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'jit', 'openxla', 'inductor', 'tvm', 'onnxrt', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 6 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_no_shift[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_all_zeros[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_all_ones[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_invalid_parameter_shape[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift[cpu-float32] PASSED

============================== 6 passed in 0.17s ===============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'tvm', 'inductor', 'openxla', 'onnxrt', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 6 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_no_shift[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_all_zeros[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_all_ones[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_invalid_parameter_shape[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_shift_rgb.py::TestRGBShift::test_rgb_shift[cpu-float32] PASSED

============================== 6 passed in 0.14s ===============================
