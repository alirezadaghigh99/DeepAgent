output file:
processed_korniascale_intrinsics186.json
function:
scale_intrinsics
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-9]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-9] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_scale_double[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_scale_double[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_smoke_tensor[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_smoke_tensor[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-4]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'cudagraphs', 'tvm', 'onnxrt', 'openxla', None, 'inductor'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 8 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_smoke_float[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_smoke_tensor[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-9] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_scale_double[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_gradcheck[cpu] PASSED

=================================== FAILURES ===================================
______________ TestScaleIntrinsics.test_smoke_tensor[cpu-float32] ______________

self = <test_projection.TestScaleIntrinsics object at 0x7c5ed33365c0>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke_tensor(self, device, dtype):
        scale_factor = torch.tensor(1.0)
        camera_matrix = torch.rand(1, 3, 3, device=device, dtype=dtype)
>       camera_matrix_scale = epi.scale_intrinsics(camera_matrix, scale_factor)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/projection.py:54: in scale_intrinsics
    return scale_intrinsics(camera_matrix, scale_factor)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

camera_matrix = tensor([[[0.0285, 0.4152, 0.3680],
         [0.8852, 0.8779, 0.7854],
         [0.4628, 0.8360, 0.2498]]])
scale_factor = tensor(1.)

    def scale_intrinsics(camera_matrix: torch.Tensor, scale_factor: Union[float, torch.Tensor]) -> torch.Tensor:
        """
        Scales the focal length and center of projection in the camera matrix by the given scale factor.
    
        Args:
            camera_matrix (torch.Tensor): A tensor of shape (B, 3, 3) containing intrinsic parameters.
            scale_factor (Union[float, torch.Tensor]): A scale factor to adjust the focal length and center of projection.
    
        Returns:
            torch.Tensor: The scaled camera matrix with the same shape as the input (B, 3, 3).
        """
        if camera_matrix.shape[-2:] != (3, 3):
            raise ValueError('camera_matrix must have shape (B, 3, 3)')
        if not isinstance(scale_factor, (float, torch.Tensor)):
            raise TypeError('scale_factor must be a float or a torch.Tensor')
        if isinstance(scale_factor, torch.Tensor) and scale_factor.shape not in [(1,), (camera_matrix.shape[0], 1, 1)]:
>           raise ValueError('scale_factor tensor must be broadcastable to shape (B, 1, 1)')
E           ValueError: scale_factor tensor must be broadcastable to shape (B, 1, 1)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:27: ValueError
________________ TestScaleIntrinsics.test_shape[cpu-float32-2] _________________

self = <test_projection.TestScaleIntrinsics object at 0x7c5ed33368f0>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 4, 9])
    def test_shape(self, batch_size, device, dtype):
        B: int = batch_size
        scale_factor = torch.rand(B, device=device, dtype=dtype)
        camera_matrix = torch.rand(B, 3, 3, device=device, dtype=dtype)
>       camera_matrix_scale = epi.scale_intrinsics(camera_matrix, scale_factor)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/projection.py:54: in scale_intrinsics
    return scale_intrinsics(camera_matrix, scale_factor)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

camera_matrix = tensor([[[0.5278, 0.2940, 0.9806],
         [0.4653, 0.9331, 0.9219],
         [0.6410, 0.7902, 0.3075]],

        [[0.5815, 0.1884, 0.1126],
         [0.6233, 0.8041, 0.6401],
         [0.8532, 0.2995, 0.1878]]])
scale_factor = tensor([0.6143, 0.6705])

    def scale_intrinsics(camera_matrix: torch.Tensor, scale_factor: Union[float, torch.Tensor]) -> torch.Tensor:
        """
        Scales the focal length and center of projection in the camera matrix by the given scale factor.
    
        Args:
            camera_matrix (torch.Tensor): A tensor of shape (B, 3, 3) containing intrinsic parameters.
            scale_factor (Union[float, torch.Tensor]): A scale factor to adjust the focal length and center of projection.
    
        Returns:
            torch.Tensor: The scaled camera matrix with the same shape as the input (B, 3, 3).
        """
        if camera_matrix.shape[-2:] != (3, 3):
            raise ValueError('camera_matrix must have shape (B, 3, 3)')
        if not isinstance(scale_factor, (float, torch.Tensor)):
            raise TypeError('scale_factor must be a float or a torch.Tensor')
        if isinstance(scale_factor, torch.Tensor) and scale_factor.shape not in [(1,), (camera_matrix.shape[0], 1, 1)]:
>           raise ValueError('scale_factor tensor must be broadcastable to shape (B, 1, 1)')
E           ValueError: scale_factor tensor must be broadcastable to shape (B, 1, 1)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:27: ValueError
________________ TestScaleIntrinsics.test_shape[cpu-float32-4] _________________

self = <test_projection.TestScaleIntrinsics object at 0x7c5ed33360e0>
batch_size = 4, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 4, 9])
    def test_shape(self, batch_size, device, dtype):
        B: int = batch_size
        scale_factor = torch.rand(B, device=device, dtype=dtype)
        camera_matrix = torch.rand(B, 3, 3, device=device, dtype=dtype)
>       camera_matrix_scale = epi.scale_intrinsics(camera_matrix, scale_factor)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/projection.py:54: in scale_intrinsics
    return scale_intrinsics(camera_matrix, scale_factor)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

camera_matrix = tensor([[[0.5351, 0.4445, 0.6842],
         [0.0783, 0.7023, 0.8654],
         [0.1075, 0.2827, 0.5800]],

        [[0..., 0.8782]],

        [[0.8138, 0.9438, 0.0606],
         [0.1830, 0.4402, 0.7314],
         [0.2228, 0.2547, 0.3283]]])
scale_factor = tensor([0.1121, 0.3208, 0.4180, 0.5340])

    def scale_intrinsics(camera_matrix: torch.Tensor, scale_factor: Union[float, torch.Tensor]) -> torch.Tensor:
        """
        Scales the focal length and center of projection in the camera matrix by the given scale factor.
    
        Args:
            camera_matrix (torch.Tensor): A tensor of shape (B, 3, 3) containing intrinsic parameters.
            scale_factor (Union[float, torch.Tensor]): A scale factor to adjust the focal length and center of projection.
    
        Returns:
            torch.Tensor: The scaled camera matrix with the same shape as the input (B, 3, 3).
        """
        if camera_matrix.shape[-2:] != (3, 3):
            raise ValueError('camera_matrix must have shape (B, 3, 3)')
        if not isinstance(scale_factor, (float, torch.Tensor)):
            raise TypeError('scale_factor must be a float or a torch.Tensor')
        if isinstance(scale_factor, torch.Tensor) and scale_factor.shape not in [(1,), (camera_matrix.shape[0], 1, 1)]:
>           raise ValueError('scale_factor tensor must be broadcastable to shape (B, 1, 1)')
E           ValueError: scale_factor tensor must be broadcastable to shape (B, 1, 1)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:27: ValueError
________________ TestScaleIntrinsics.test_shape[cpu-float32-9] _________________

self = <test_projection.TestScaleIntrinsics object at 0x7c5ed3336bf0>
batch_size = 9, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 4, 9])
    def test_shape(self, batch_size, device, dtype):
        B: int = batch_size
        scale_factor = torch.rand(B, device=device, dtype=dtype)
        camera_matrix = torch.rand(B, 3, 3, device=device, dtype=dtype)
>       camera_matrix_scale = epi.scale_intrinsics(camera_matrix, scale_factor)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/projection.py:54: in scale_intrinsics
    return scale_intrinsics(camera_matrix, scale_factor)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

camera_matrix = tensor([[[0.0713, 0.5619, 0.1962],
         [0.8910, 0.1604, 0.0519],
         [0.6025, 0.2419, 0.1925]],

        [[0..., 0.0716]],

        [[0.3338, 0.9835, 0.6949],
         [0.8639, 0.7589, 0.4516],
         [0.4207, 0.0567, 0.7343]]])
scale_factor = tensor([0.8924, 0.9302, 0.0532, 0.1962, 0.2640, 0.1610, 0.7268, 0.0303, 0.6477])

    def scale_intrinsics(camera_matrix: torch.Tensor, scale_factor: Union[float, torch.Tensor]) -> torch.Tensor:
        """
        Scales the focal length and center of projection in the camera matrix by the given scale factor.
    
        Args:
            camera_matrix (torch.Tensor): A tensor of shape (B, 3, 3) containing intrinsic parameters.
            scale_factor (Union[float, torch.Tensor]): A scale factor to adjust the focal length and center of projection.
    
        Returns:
            torch.Tensor: The scaled camera matrix with the same shape as the input (B, 3, 3).
        """
        if camera_matrix.shape[-2:] != (3, 3):
            raise ValueError('camera_matrix must have shape (B, 3, 3)')
        if not isinstance(scale_factor, (float, torch.Tensor)):
            raise TypeError('scale_factor must be a float or a torch.Tensor')
        if isinstance(scale_factor, torch.Tensor) and scale_factor.shape not in [(1,), (camera_matrix.shape[0], 1, 1)]:
>           raise ValueError('scale_factor tensor must be broadcastable to shape (B, 1, 1)')
E           ValueError: scale_factor tensor must be broadcastable to shape (B, 1, 1)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:27: ValueError
______________ TestScaleIntrinsics.test_scale_double[cpu-float32] ______________

self = <test_projection.TestScaleIntrinsics object at 0x7c5ed3336ec0>
device = device(type='cpu'), dtype = torch.float32

    def test_scale_double(self, device, dtype):
        scale_factor = torch.tensor(0.5)
        camera_matrix = torch.tensor(
            [[[100.0, 0.0, 50.0], [0.0, 100.0, 50.0], [0.0, 0.0, 1.0]]], device=device, dtype=dtype
        )
    
        camera_matrix_expected = torch.tensor(
            [[[50.0, 0.0, 25.0], [0.0, 50.0, 25.0], [0.0, 0.0, 1.0]]], device=device, dtype=dtype
        )
    
>       camera_matrix_scale = epi.scale_intrinsics(camera_matrix, scale_factor)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/projection.py:54: in scale_intrinsics
    return scale_intrinsics(camera_matrix, scale_factor)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

camera_matrix = tensor([[[100.,   0.,  50.],
         [  0., 100.,  50.],
         [  0.,   0.,   1.]]])
scale_factor = tensor(0.5000)

    def scale_intrinsics(camera_matrix: torch.Tensor, scale_factor: Union[float, torch.Tensor]) -> torch.Tensor:
        """
        Scales the focal length and center of projection in the camera matrix by the given scale factor.
    
        Args:
            camera_matrix (torch.Tensor): A tensor of shape (B, 3, 3) containing intrinsic parameters.
            scale_factor (Union[float, torch.Tensor]): A scale factor to adjust the focal length and center of projection.
    
        Returns:
            torch.Tensor: The scaled camera matrix with the same shape as the input (B, 3, 3).
        """
        if camera_matrix.shape[-2:] != (3, 3):
            raise ValueError('camera_matrix must have shape (B, 3, 3)')
        if not isinstance(scale_factor, (float, torch.Tensor)):
            raise TypeError('scale_factor must be a float or a torch.Tensor')
        if isinstance(scale_factor, torch.Tensor) and scale_factor.shape not in [(1,), (camera_matrix.shape[0], 1, 1)]:
>           raise ValueError('scale_factor tensor must be broadcastable to shape (B, 1, 1)')
E           ValueError: scale_factor tensor must be broadcastable to shape (B, 1, 1)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:27: ValueError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_smoke_tensor[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-9]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_scale_double[cpu-float32]
========================= 5 failed, 3 passed in 0.23s ==========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'jit', 'openxla', 'tvm', 'inductor', 'onnxrt', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 8 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_smoke_float[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_smoke_tensor[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-9] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_scale_double[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_gradcheck[cpu] PASSED

============================== 8 passed in 0.16s ===============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'inductor', 'cudagraphs', 'onnxrt', 'openxla', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 8 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_smoke_float[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_smoke_tensor[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_shape[cpu-float32-9] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_scale_double[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics::test_gradcheck[cpu] PASSED

============================== 8 passed in 0.17s ===============================
