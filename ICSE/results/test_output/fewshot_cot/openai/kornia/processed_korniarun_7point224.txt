output file:
processed_korniarun_7point224.json
function:
run_7point
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'onnxrt', 'inductor', 'jit', 'openxla', 'tvm', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 16 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XFAIL
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] PASSED

=================================== FAILURES ===================================
_____________ TestFindFundamental.test_shape_7point[cpu-float32-1] _____________

self = <test_fundamental.TestFindFundamental object at 0x79a12ff23cd0>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:171: in find_fundamental
    result = run_7point(points1, points2)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:62: in run_7point
    return run_7point(points1, points2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.4402, 0.7507],
         [0.5130, 0.3086],
         [0.9603, 0.4059],
         [0.1052, 0.6140],
         [0.3510, 0.0515],
         [0.1802, 0.0540],
         [0.4840, 0.4578]]])
points2 = tensor([[[0.3909, 0.4732],
         [0.6458, 0.5912],
         [0.7622, 0.3725],
         [0.4559, 0.2254],
         [0.8802, 0.2293],
         [0.9054, 0.8434],
         [0.5081, 0.6627]]])

    def run_7point(points1, points2):
        """
        Compute the fundamental matrix using the 7-point algorithm.
    
        Args:
            points1 (torch.Tensor): Tensor of shape (B, 7, 2) representing the first set of points.
            points2 (torch.Tensor): Tensor of shape (B, 7, 2) representing the second set of points.
    
        Returns:
            torch.Tensor: Tensor of shape (B, 3*m, 3) containing the computed fundamental matrices,
                          where m can be 1, 2, or 3.
        """
        assert points1.shape == points2.shape, 'Input point sets must have the same shape.'
        assert points1.shape[1:] == (7, 2), 'Each point set must have shape (7, 2).'
        B = points1.shape[0]
    
        def normalize_points(points):
            mean = points.mean(dim=1, keepdim=True)
            std = points.std(dim=1, keepdim=True)
            norm_points = (points - mean) / std
            T = torch.eye(3).unsqueeze(0).repeat(B, 1, 1)
            T[:, 0, 0] = 1 / std[:, 0, 0]
            T[:, 1, 1] = 1 / std[:, 0, 1]
            T[:, 0, 2] = -mean[:, 0, 0] / std[:, 0, 0]
            T[:, 1, 2] = -mean[:, 0, 1] / std[:, 0, 1]
            return (norm_points, T)
        norm_points1, T1 = normalize_points(points1)
        norm_points2, T2 = normalize_points(points2)
        A = torch.stack([norm_points2[:, :, 0] * norm_points1[:, :, 0], norm_points2[:, :, 0] * norm_points1[:, :, 1], norm_points2[:, :, 0], norm_points2[:, :, 1] * norm_points1[:, :, 0], norm_points2[:, :, 1] * norm_points1[:, :, 1], norm_points2[:, :, 1], norm_points1[:, :, 0], norm_points1[:, :, 1], torch.ones_like(norm_points1[:, :, 0])], dim=-1)
        U, S, Vt = torch.svd(A)
>       F1 = Vt[:, -1].view(B, 3, 3)
E       RuntimeError: shape '[1, 3, 3]' is invalid for input of size 7

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:42: RuntimeError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-2] _____________

self = <test_fundamental.TestFindFundamental object at 0x79a12ff23c10>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:171: in find_fundamental
    result = run_7point(points1, points2)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:62: in run_7point
    return run_7point(points1, points2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.3506, 0.9374],
         [0.5954, 0.7335],
         [0.8541, 0.8364],
         [0.1659, 0.7015],
         [... 0.7315],
         [0.7136, 0.8034],
         [0.1980, 0.8372],
         [0.0778, 0.6850],
         [0.3784, 0.0193]]])
points2 = tensor([[[0.3276, 0.9920],
         [0.6373, 0.9809],
         [0.8308, 0.0118],
         [0.4285, 0.2602],
         [... 0.4382],
         [0.6116, 0.4985],
         [0.5753, 0.2512],
         [0.0789, 0.2315],
         [0.9713, 0.3109]]])

    def run_7point(points1, points2):
        """
        Compute the fundamental matrix using the 7-point algorithm.
    
        Args:
            points1 (torch.Tensor): Tensor of shape (B, 7, 2) representing the first set of points.
            points2 (torch.Tensor): Tensor of shape (B, 7, 2) representing the second set of points.
    
        Returns:
            torch.Tensor: Tensor of shape (B, 3*m, 3) containing the computed fundamental matrices,
                          where m can be 1, 2, or 3.
        """
        assert points1.shape == points2.shape, 'Input point sets must have the same shape.'
        assert points1.shape[1:] == (7, 2), 'Each point set must have shape (7, 2).'
        B = points1.shape[0]
    
        def normalize_points(points):
            mean = points.mean(dim=1, keepdim=True)
            std = points.std(dim=1, keepdim=True)
            norm_points = (points - mean) / std
            T = torch.eye(3).unsqueeze(0).repeat(B, 1, 1)
            T[:, 0, 0] = 1 / std[:, 0, 0]
            T[:, 1, 1] = 1 / std[:, 0, 1]
            T[:, 0, 2] = -mean[:, 0, 0] / std[:, 0, 0]
            T[:, 1, 2] = -mean[:, 0, 1] / std[:, 0, 1]
            return (norm_points, T)
        norm_points1, T1 = normalize_points(points1)
        norm_points2, T2 = normalize_points(points2)
        A = torch.stack([norm_points2[:, :, 0] * norm_points1[:, :, 0], norm_points2[:, :, 0] * norm_points1[:, :, 1], norm_points2[:, :, 0], norm_points2[:, :, 1] * norm_points1[:, :, 0], norm_points2[:, :, 1] * norm_points1[:, :, 1], norm_points2[:, :, 1], norm_points1[:, :, 0], norm_points1[:, :, 1], torch.ones_like(norm_points1[:, :, 0])], dim=-1)
        U, S, Vt = torch.svd(A)
>       F1 = Vt[:, -1].view(B, 3, 3)
E       RuntimeError: shape '[2, 3, 3]' is invalid for input of size 14

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:42: RuntimeError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-3] _____________

self = <test_fundamental.TestFindFundamental object at 0x79a12ff23f10>
batch_size = 3, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:171: in find_fundamental
    result = run_7point(points1, points2)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:62: in run_7point
    return run_7point(points1, points2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.2294, 0.2902],
         [0.6720, 0.7655],
         [0.4768, 0.2522],
         [0.9281, 0.8407],
         [... 0.9935],
         [0.2720, 0.3042],
         [0.5672, 0.4502],
         [0.3523, 0.7761],
         [0.9020, 0.1913]]])
points2 = tensor([[[0.9170, 0.6591],
         [0.6559, 0.7294],
         [0.5501, 0.8987],
         [0.0587, 0.8859],
         [... 0.4385],
         [0.4628, 0.6911],
         [0.9560, 0.8019],
         [0.0411, 0.2083],
         [0.9010, 0.9201]]])

    def run_7point(points1, points2):
        """
        Compute the fundamental matrix using the 7-point algorithm.
    
        Args:
            points1 (torch.Tensor): Tensor of shape (B, 7, 2) representing the first set of points.
            points2 (torch.Tensor): Tensor of shape (B, 7, 2) representing the second set of points.
    
        Returns:
            torch.Tensor: Tensor of shape (B, 3*m, 3) containing the computed fundamental matrices,
                          where m can be 1, 2, or 3.
        """
        assert points1.shape == points2.shape, 'Input point sets must have the same shape.'
        assert points1.shape[1:] == (7, 2), 'Each point set must have shape (7, 2).'
        B = points1.shape[0]
    
        def normalize_points(points):
            mean = points.mean(dim=1, keepdim=True)
            std = points.std(dim=1, keepdim=True)
            norm_points = (points - mean) / std
            T = torch.eye(3).unsqueeze(0).repeat(B, 1, 1)
            T[:, 0, 0] = 1 / std[:, 0, 0]
            T[:, 1, 1] = 1 / std[:, 0, 1]
            T[:, 0, 2] = -mean[:, 0, 0] / std[:, 0, 0]
            T[:, 1, 2] = -mean[:, 0, 1] / std[:, 0, 1]
            return (norm_points, T)
        norm_points1, T1 = normalize_points(points1)
        norm_points2, T2 = normalize_points(points2)
        A = torch.stack([norm_points2[:, :, 0] * norm_points1[:, :, 0], norm_points2[:, :, 0] * norm_points1[:, :, 1], norm_points2[:, :, 0], norm_points2[:, :, 1] * norm_points1[:, :, 0], norm_points2[:, :, 1] * norm_points1[:, :, 1], norm_points2[:, :, 1], norm_points1[:, :, 0], norm_points1[:, :, 1], torch.ones_like(norm_points1[:, :, 0])], dim=-1)
        U, S, Vt = torch.svd(A)
>       F1 = Vt[:, -1].view(B, 3, 3)
E       RuntimeError: shape '[3, 3, 3]' is invalid for input of size 21

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:42: RuntimeError
_____________ TestFindFundamental.test_7point_opencv[cpu-float32] ______________

self = <test_fundamental.TestFindFundamental object at 0x79a12ff5c550>
device = device(type='cpu'), dtype = torch.float32

    def test_7point_opencv(self, device, dtype):
        points1 = torch.tensor(
            [
                [
                    [0.8569, 0.5982],
                    [0.0059, 0.9649],
                    [0.1968, 0.8846],
                    [0.6084, 0.3467],
                    [0.9633, 0.5274],
                    [0.8941, 0.8939],
                    [0.0863, 0.5133],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        points2 = torch.tensor(
            [
                [
                    [0.0928, 0.3013],
                    [0.0989, 0.9649],
                    [0.0341, 0.4827],
                    [0.8294, 0.4469],
                    [0.2230, 0.2998],
                    [0.1722, 0.8182],
                    [0.5264, 0.8869],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        # generated with OpenCV using above points
        # Fm_expected shape is 9x3
        # import cv2
        # Fm_expected, _ = cv2.findFundamentalMat(
        #   points1.detach().numpy().reshape(-1, 1, 2),
        #   points2.detach().numpy().reshape(-1, 1, 2), cv2.FM_7POINT)
    
        Fm_expected = torch.tensor(
            [
                [
                    [
                        [-2.87490907, 5.41934672, 0.73871396],
                        [0.34010174, 3.70371623, -4.65517276],
                        [-0.1809933, -0.56577107, 1.0],
                    ],
                    [
                        [0.14465888, 0.68711702, -0.65570944],
                        [0.53424758, 0.7988479, -0.75446946],
                        [-0.48201197, -1.05375511, 1.0],
                    ],
                    [
                        [-0.0901827, 1.05515785, -0.54726062],
                        [0.51914823, 1.02476892, -1.05783979],
                        [-0.45860077, -1.01580301, 1.0],
                    ],
                ]
            ],
            device=device,
            dtype=dtype,
        )
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:171: in find_fundamental
    result = run_7point(points1, points2)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:62: in run_7point
    return run_7point(points1, points2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.8569, 0.5982],
         [0.0059, 0.9649],
         [0.1968, 0.8846],
         [0.6084, 0.3467],
         [0.9633, 0.5274],
         [0.8941, 0.8939],
         [0.0863, 0.5133]]])
points2 = tensor([[[0.0928, 0.3013],
         [0.0989, 0.9649],
         [0.0341, 0.4827],
         [0.8294, 0.4469],
         [0.2230, 0.2998],
         [0.1722, 0.8182],
         [0.5264, 0.8869]]])

    def run_7point(points1, points2):
        """
        Compute the fundamental matrix using the 7-point algorithm.
    
        Args:
            points1 (torch.Tensor): Tensor of shape (B, 7, 2) representing the first set of points.
            points2 (torch.Tensor): Tensor of shape (B, 7, 2) representing the second set of points.
    
        Returns:
            torch.Tensor: Tensor of shape (B, 3*m, 3) containing the computed fundamental matrices,
                          where m can be 1, 2, or 3.
        """
        assert points1.shape == points2.shape, 'Input point sets must have the same shape.'
        assert points1.shape[1:] == (7, 2), 'Each point set must have shape (7, 2).'
        B = points1.shape[0]
    
        def normalize_points(points):
            mean = points.mean(dim=1, keepdim=True)
            std = points.std(dim=1, keepdim=True)
            norm_points = (points - mean) / std
            T = torch.eye(3).unsqueeze(0).repeat(B, 1, 1)
            T[:, 0, 0] = 1 / std[:, 0, 0]
            T[:, 1, 1] = 1 / std[:, 0, 1]
            T[:, 0, 2] = -mean[:, 0, 0] / std[:, 0, 0]
            T[:, 1, 2] = -mean[:, 0, 1] / std[:, 0, 1]
            return (norm_points, T)
        norm_points1, T1 = normalize_points(points1)
        norm_points2, T2 = normalize_points(points2)
        A = torch.stack([norm_points2[:, :, 0] * norm_points1[:, :, 0], norm_points2[:, :, 0] * norm_points1[:, :, 1], norm_points2[:, :, 0], norm_points2[:, :, 1] * norm_points1[:, :, 0], norm_points2[:, :, 1] * norm_points1[:, :, 1], norm_points2[:, :, 1], norm_points1[:, :, 0], norm_points1[:, :, 1], torch.ones_like(norm_points1[:, :, 0])], dim=-1)
        U, S, Vt = torch.svd(A)
>       F1 = Vt[:, -1].view(B, 3, 3)
E       RuntimeError: shape '[1, 3, 3]' is invalid for input of size 7

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:42: RuntimeError
________ TestFindFundamental.test_synthetic_sampson_7point[cpu-float32] ________

self = <test_fundamental.TestFindFundamental object at 0x79a12ff5c880>
device = device(type='cpu'), dtype = torch.float32

    def test_synthetic_sampson_7point(self, device, dtype):
        scene: Dict[str, torch.Tensor] = generate_two_view_random_scene(device, dtype)
        x1 = scene["x1"][:, :7, :]
        x2 = scene["x2"][:, :7, :]
>       F_est = epi.find_fundamental(x1, x2, None, "7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:171: in find_fundamental
    result = run_7point(points1, points2)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:62: in run_7point
    return run_7point(points1, points2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[ 43.0709,  21.8223],
         [131.0810,  23.9362],
         [ 63.9362,  23.8817],
         [ 26.7833,  21.1843],
         [100.6945,  22.6644],
         [ 57.9334,  22.8089],
         [ 55.6321,  22.4899]]])
points2 = tensor([[[77.7429, 22.3213],
         [54.8327, 26.3811],
         [50.2354, 23.7314],
         [57.6765, 21.5098],
         [79.1083, 25.1828],
         [72.4255, 23.3519],
         [76.6234, 23.1412]]])

    def run_7point(points1, points2):
        """
        Compute the fundamental matrix using the 7-point algorithm.
    
        Args:
            points1 (torch.Tensor): Tensor of shape (B, 7, 2) representing the first set of points.
            points2 (torch.Tensor): Tensor of shape (B, 7, 2) representing the second set of points.
    
        Returns:
            torch.Tensor: Tensor of shape (B, 3*m, 3) containing the computed fundamental matrices,
                          where m can be 1, 2, or 3.
        """
        assert points1.shape == points2.shape, 'Input point sets must have the same shape.'
        assert points1.shape[1:] == (7, 2), 'Each point set must have shape (7, 2).'
        B = points1.shape[0]
    
        def normalize_points(points):
            mean = points.mean(dim=1, keepdim=True)
            std = points.std(dim=1, keepdim=True)
            norm_points = (points - mean) / std
            T = torch.eye(3).unsqueeze(0).repeat(B, 1, 1)
            T[:, 0, 0] = 1 / std[:, 0, 0]
            T[:, 1, 1] = 1 / std[:, 0, 1]
            T[:, 0, 2] = -mean[:, 0, 0] / std[:, 0, 0]
            T[:, 1, 2] = -mean[:, 0, 1] / std[:, 0, 1]
            return (norm_points, T)
        norm_points1, T1 = normalize_points(points1)
        norm_points2, T2 = normalize_points(points2)
        A = torch.stack([norm_points2[:, :, 0] * norm_points1[:, :, 0], norm_points2[:, :, 0] * norm_points1[:, :, 1], norm_points2[:, :, 0], norm_points2[:, :, 1] * norm_points1[:, :, 0], norm_points2[:, :, 1] * norm_points1[:, :, 1], norm_points2[:, :, 1], norm_points1[:, :, 0], norm_points1[:, :, 1], torch.ones_like(norm_points1[:, :, 0])], dim=-1)
        U, S, Vt = torch.svd(A)
>       F1 = Vt[:, -1].view(B, 3, 3)
E       RuntimeError: shape '[1, 3, 3]' is invalid for input of size 7

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:42: RuntimeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32]
=================== 5 failed, 10 passed, 1 xfailed in 0.40s ====================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'tvm', 'openxla', 'cudagraphs', 'jit', 'onnxrt', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 16 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XPASS
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] PASSED

======================== 15 passed, 1 xpassed in 0.22s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'jit', None, 'openxla', 'onnxrt', 'cudagraphs', 'inductor'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 16 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XPASS
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] PASSED

======================== 15 passed, 1 xpassed in 0.22s =========================
