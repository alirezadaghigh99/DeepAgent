output file:
processed_korniadraw_rectangle105.json
function:
draw_rectangle
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'openxla', 'cudagraphs', 'tvm', 'onnxrt', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 52 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] FAILED

=================================== FAILURES ===================================
__________________ TestDrawRectangle.test_smoke[cpu-color0-4] __________________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff131cf0>
device = device(type='cpu'), batch = 4, color = tensor([1.])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
        draw_rectangle(black_image, points, color=color)
    
        target = torch.zeros(batch, 1, 3, 3, device=device)
        target[:, :, 1, 1] = color
    
>       assert torch.all(black_image == target)
E       AssertionError: assert tensor(False)
E        +  where tensor(False) = <built-in method all of type object at 0x7ea7e42bf1c0>(tensor([[[[0....., 0., 0.]]]]) == tensor([[[[0....., 0., 0.]]]])
E        +    where <built-in method all of type object at 0x7ea7e42bf1c0> = torch.all
E           
E           Full diff:
E             tensor([[[[0., 0., 0.],
E           -           [0., 1., 0.],
E           ?                ^
E           +           [0., 0., 0.],
E           ?                ^...
E           
E           ...Full output truncated (25 lines hidden), use '-vv' to show)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:301: AssertionError
_________________ TestDrawRectangle.test_smoke[cpu-color0-17] __________________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff131ba0>
device = device(type='cpu'), batch = 17, color = tensor([1.])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
        draw_rectangle(black_image, points, color=color)
    
        target = torch.zeros(batch, 1, 3, 3, device=device)
        target[:, :, 1, 1] = color
    
>       assert torch.all(black_image == target)
E       AssertionError: assert tensor(False)
E        +  where tensor(False) = <built-in method all of type object at 0x7ea7e42bf1c0>(tensor([[[[0....., 0., 0.]]]]) == tensor([[[[0....., 0., 0.]]]])
E        +    where <built-in method all of type object at 0x7ea7e42bf1c0> = torch.all
E           
E           Full diff:
E             tensor([[[[0., 0., 0.],
E           -           [0., 1., 0.],
E           ?                ^
E           +           [0., 0., 0.],
E           ?                ^...
E           
E           ...Full output truncated (129 lines hidden), use '-vv' to show)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:301: AssertionError
__________________ TestDrawRectangle.test_smoke[cpu-color1-4] __________________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff131ed0>
device = device(type='cpu'), batch = 4, color = tensor([0.5000])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
        draw_rectangle(black_image, points, color=color)
    
        target = torch.zeros(batch, 1, 3, 3, device=device)
        target[:, :, 1, 1] = color
    
>       assert torch.all(black_image == target)
E       AssertionError: assert tensor(False)
E        +  where tensor(False) = <built-in method all of type object at 0x7ea7e42bf1c0>(tensor([[[[0....., 0., 0.]]]]) == tensor([[[[0....0, 0.0000]]]])
E        +    where <built-in method all of type object at 0x7ea7e42bf1c0> = torch.all
E           
E           Full diff:
E           - tensor([[[[0.0000, 0.0000, 0.0000],
E           ?              ----    ----    ----
E           + tensor([[[[0., 0., 0.],
E           -           [0.0000, 0.5000, 0.0000],
E           ?              ----    ----    ----...
E           
E           ...Full output truncated (37 lines hidden), use '-vv' to show)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:301: AssertionError
_________________ TestDrawRectangle.test_smoke[cpu-color1-17] __________________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff131f90>
device = device(type='cpu'), batch = 17, color = tensor([0.5000])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
        draw_rectangle(black_image, points, color=color)
    
        target = torch.zeros(batch, 1, 3, 3, device=device)
        target[:, :, 1, 1] = color
    
>       assert torch.all(black_image == target)
E       AssertionError: assert tensor(False)
E        +  where tensor(False) = <built-in method all of type object at 0x7ea7e42bf1c0>(tensor([[[[0....., 0., 0.]]]]) == tensor([[[[0....0, 0.0000]]]])
E        +    where <built-in method all of type object at 0x7ea7e42bf1c0> = torch.all
E           
E           Full diff:
E           - tensor([[[[0.0000, 0.0000, 0.0000],
E           ?              ----    ----    ----
E           + tensor([[[[0., 0., 0.],
E           -           [0.0000, 0.5000, 0.0000],
E           ?              ----    ----    ----...
E           
E           ...Full output truncated (180 lines hidden), use '-vv' to show)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:301: AssertionError
____________ TestDrawRectangle.test_fill_and_edges[cpu-7-12-True-8] ____________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff132ce0>
device = device(type='cpu'), batch = 8, fill = True, height = 12, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-12-True-11] ____________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff132200>
device = device(type='cpu'), batch = 11, fill = True, height = 12, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

  ...],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-12-False-8] ____________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff132830>
device = device(type='cpu'), batch = 8, fill = False, height = 12, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-12-False-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff132860>
device = device(type='cpu'), batch = 11, fill = False, height = 12, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

  ...],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-106-True-8] ____________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff132920>
device = device(type='cpu'), batch = 8, fill = True, height = 106, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,...0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-106-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff1329e0>
device = device(type='cpu'), batch = 11, fill = True, height = 106, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,...0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-106-False-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff132aa0>
device = device(type='cpu'), batch = 8, fill = False, height = 106, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,...0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-7-106-False-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff132b60>
device = device(type='cpu'), batch = 11, fill = False, height = 106, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,...0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-298-True-8] ____________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff132c20>
device = device(type='cpu'), batch = 8, fill = True, height = 298, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,...0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-298-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff132470>
device = device(type='cpu'), batch = 11, fill = True, height = 298, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,...0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-298-False-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff1337f0>
device = device(type='cpu'), batch = 8, fill = False, height = 298, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,...0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-7-298-False-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff1338b0>
device = device(type='cpu'), batch = 11, fill = False, height = 298, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,...0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-123-12-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff133970>
device = device(type='cpu'), batch = 8, fill = True, height = 12, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0,...0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-12-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff133a30>
device = device(type='cpu'), batch = 11, fill = True, height = 12, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0,...0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-12-False-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff133af0>
device = device(type='cpu'), batch = 8, fill = False, height = 12, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0,...0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-12-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff133bb0>
device = device(type='cpu'), batch = 11, fill = False, height = 12, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0,...0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-106-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff133c70>
device = device(type='cpu'), batch = 8, fill = True, height = 106, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0,...0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-106-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff133d30>
device = device(type='cpu'), batch = 11, fill = True, height = 106, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0,...0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-106-False-8] __________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff133df0>
device = device(type='cpu'), batch = 8, fill = False, height = 106, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0,...0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
_________ TestDrawRectangle.test_fill_and_edges[cpu-123-106-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff133eb0>
device = device(type='cpu'), batch = 11, fill = False, height = 106, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0,...0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-298-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff133f70>
device = device(type='cpu'), batch = 8, fill = True, height = 298, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0,...0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-298-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff168070>
device = device(type='cpu'), batch = 11, fill = True, height = 298, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0,...0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-298-False-8] __________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff168130>
device = device(type='cpu'), batch = 8, fill = False, height = 298, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0,...0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
_________ TestDrawRectangle.test_fill_and_edges[cpu-123-298-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff1681f0>
device = device(type='cpu'), batch = 11, fill = False, height = 298, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0,...0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-537-12-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff1682b0>
device = device(type='cpu'), batch = 8, fill = True, height = 12, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0,...0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-12-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff168370>
device = device(type='cpu'), batch = 11, fill = True, height = 12, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0,...0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-12-False-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff168430>
device = device(type='cpu'), batch = 8, fill = False, height = 12, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0,...0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-12-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff1684f0>
device = device(type='cpu'), batch = 11, fill = False, height = 12, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0,...0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-106-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff1685b0>
device = device(type='cpu'), batch = 8, fill = True, height = 106, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0,...0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-106-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff168670>
device = device(type='cpu'), batch = 11, fill = True, height = 106, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0,...0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-106-False-8] __________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff168730>
device = device(type='cpu'), batch = 8, fill = False, height = 106, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0,...0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
_________ TestDrawRectangle.test_fill_and_edges[cpu-537-106-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff1687f0>
device = device(type='cpu'), batch = 11, fill = False, height = 106, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0,...0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-298-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff1688b0>
device = device(type='cpu'), batch = 8, fill = True, height = 298, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0,...0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-298-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff168970>
device = device(type='cpu'), batch = 11, fill = True, height = 298, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0,...0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
>                   image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-298-False-8] __________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff168a30>
device = device(type='cpu'), batch = 8, fill = False, height = 298, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0,...0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
_________ TestDrawRectangle.test_fill_and_edges[cpu-537-298-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff168af0>
device = device(type='cpu'), batch = 11, fill = False, height = 298, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0,...0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]]])
color = tensor([[[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]],

        [[1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-5-4] _______________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff169060>
device = device(type='cpu'), batch = 4, N = 5, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
        draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)
    
        for b in range(batch):
            for n in range(N):
                if fill:
>                   assert (
                        random_w_rectangle[
                            b,
                            :,
                            points_list[b][n][1] : points_list[b][n][3] + 1,
                            points_list[b][n][0] : points_list[b][n][2] + 1,
                        ].sum()
                        == (points_list[b][n][3] - points_list[b][n][1] + 1)
                        * (points_list[b][n][2] - points_list[b][n][0] + 1)
                        * 3
                    )
E                   assert tensor(252.9564) == ((((18 - 11) + 1) * ((15 - 5) + 1)) * 3)
E                    +  where tensor(252.9564) = <built-in method sum of Tensor object at 0x7ea6ff0d01d0>()
E                    +    where <built-in method sum of Tensor object at 0x7ea6ff0d01d0> = tensor([[[1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 0.1364],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 0.5231],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 0.0900],\n         [0.6638, 0.0914, 0.5949, 0.7257, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000]],\n\n        [[1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 0.5560],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 0.3601],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000...      [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 0.0070],\n         [0.8818, 0.6865, 0.5247, 0.1642, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000]],\n\n        [[1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 0.9115],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 0.8449],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 0.3972],\n         [0.2728, 0.8629, 0.1777, 0.4839, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000]]]).sum

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:346: AssertionError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-5-6] _______________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff168fa0>
device = device(type='cpu'), batch = 6, N = 5, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
        draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)
    
        for b in range(batch):
            for n in range(N):
                if fill:
>                   assert (
                        random_w_rectangle[
                            b,
                            :,
                            points_list[b][n][1] : points_list[b][n][3] + 1,
                            points_list[b][n][0] : points_list[b][n][2] + 1,
                        ].sum()
                        == (points_list[b][n][3] - points_list[b][n][1] + 1)
                        * (points_list[b][n][2] - points_list[b][n][0] + 1)
                        * 3
                    )
E                   assert tensor(196.6004) == ((((16 - 10) + 1) * ((16 - 7) + 1)) * 3)
E                    +  where tensor(196.6004) = <built-in method sum of Tensor object at 0x7ea6ff0d1fd0>()
E                    +    where <built-in method sum of Tensor object at 0x7ea6ff0d1fd0> = tensor([[[1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 0.2218],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 0.5016],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 0.9955],\n         [1.0000, 1.0000, 1.0000, 0.6791, 0.0260, 0.5716, 0.4555, 1.0000,\n          0.9918, 0.5373]],\n\n        [[1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 0.2190],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 0.5623],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 0.5529],\n         [1.0000, 1.0000, 1.0000, 0.2240, 0.9047, 0.2370, 0.2044, 1.0000,\n          0.3260, 0.8773]],\n\n        [[1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 0.8615],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 0.1698],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 0.5411],\n         [1.0000, 1.0000, 1.0000, 0.7205, 0.0173, 0.6557, 0.2784, 1.0000,\n          0.8266, 0.4417]]]).sum

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:346: AssertionError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-12-4] ______________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff168e80>
device = device(type='cpu'), batch = 4, N = 12, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
        draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)
    
        for b in range(batch):
            for n in range(N):
                if fill:
>                   assert (
                        random_w_rectangle[
                            b,
                            :,
                            points_list[b][n][1] : points_list[b][n][3] + 1,
                            points_list[b][n][0] : points_list[b][n][2] + 1,
                        ].sum()
                        == (points_list[b][n][3] - points_list[b][n][1] + 1)
                        * (points_list[b][n][2] - points_list[b][n][0] + 1)
                        * 3
                    )
E                   assert tensor(106.2957) == ((((13 - 2) + 1) * ((15 - 13) + 1)) * 3)
E                    +  where tensor(106.2957) = <built-in method sum of Tensor object at 0x7ea6ff1bf5b0>()
E                    +    where <built-in method sum of Tensor object at 0x7ea6ff1bf5b0> = tensor([[[1.0000, 1.0000, 0.6974],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000]],\n\n        [[1.0000, 1.0000, 0.3745],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000]],\n\n        [[1.0000, 1.0000, 0.2238],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000],\n         [1.0000, 1.0000, 1.0000]]]).sum

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:346: AssertionError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-12-6] ______________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff169390>
device = device(type='cpu'), batch = 6, N = 12, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
        draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)
    
        for b in range(batch):
            for n in range(N):
                if fill:
>                   assert (
                        random_w_rectangle[
                            b,
                            :,
                            points_list[b][n][1] : points_list[b][n][3] + 1,
                            points_list[b][n][0] : points_list[b][n][2] + 1,
                        ].sum()
                        == (points_list[b][n][3] - points_list[b][n][1] + 1)
                        * (points_list[b][n][2] - points_list[b][n][0] + 1)
                        * 3
                    )
E                   assert tensor(164.3300) == ((((19 - 16) + 1) * ((17 - 2) + 1)) * 3)
E                    +  where tensor(164.3300) = <built-in method sum of Tensor object at 0x7ea6ff1fa840>()
E                    +    where <built-in method sum of Tensor object at 0x7ea6ff1fa840> = tensor([[[1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.7409],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.6999],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.3190],\n         [0.8522, 0.7862, 0.4541, 0.8943, 0.3237, 0.0925, 0.3295, 0.7266,\n          0.9248, 0.5935, 0.6788, 0.4436, 0.9513, 0.5568, 0.6108, 0.1132]],\n\n        [[1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.1441],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.2815],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.0331],\n         [0.0990, 0.6300, 0.1719, 0.1486, 0.0562, 0.2521, 0.5001, 0.6672,\n          0.8271, 0.5169, 0.9051, 0.9328, 0.2711, 0.6040, 0.2402, 0.7723]],\n\n        [[1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.4505],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.3974],\n         [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,\n          1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.2690],\n         [0.0805, 0.4961, 0.7170, 0.5820, 0.6043, 0.4646, 0.6876, 0.7999,\n          0.7650, 0.6471, 0.5521, 0.2802, 0.8510, 0.6649, 0.5693, 0.3068]]]).sum

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:346: AssertionError
______________ TestDrawRectangle.test_n_rectangles[cpu-False-5-4] ______________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff169450>
device = device(type='cpu'), batch = 4, N = 5, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.1427, 0.6177, 0.2063,  ..., 0.7994, 0.7498, 0.9990],
          [0.4787, 0.6505, 0.3664,  ..., 0.8684, 0.6...12, 0.7950, 0.5153,  ..., 0.6494, 0.6897, 0.3743],
          [0.4300, 0.7762, 0.8139,  ..., 0.4022, 0.8133, 0.1223]]]])
rectangle = tensor([[[ 7, 13, 16, 16],
         [18,  5, 19, 16],
         [13, 16, 15, 17],
         [ 7, 18,  8, 19],
         [... 14, 18],
         [15,  0, 18, 14],
         [ 8,  7, 10, 17],
         [14, 17, 16, 19],
         [ 8,  7, 11, 19]]])
color = tensor([[[1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.]],

 ...,

        [[1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
                    image[b, :, y1:y2, x1] = rect_color.view(C, 1)
                    image[b, :, y1:y2, x2 - 1] = rect_color.view(C, 1)
>                   image[b, :, y1, x1:x2] = rect_color.view(C)
E                   RuntimeError: The expanded size of the tensor (9) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 9].  Tensor sizes: [3]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:43: RuntimeError
______________ TestDrawRectangle.test_n_rectangles[cpu-False-5-6] ______________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff169510>
device = device(type='cpu'), batch = 6, N = 5, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.3053, 0.1009, 0.6135,  ..., 0.7932, 0.9620, 0.9506],
          [0.0218, 0.4978, 0.0909,  ..., 0.8455, 0.2...21, 0.4126, 0.5374,  ..., 0.8479, 0.3490, 0.1365],
          [0.3154, 0.0291, 0.1155,  ..., 0.9357, 0.2928, 0.3981]]]])
rectangle = tensor([[[14,  8, 16, 16],
         [ 3, 10,  5, 17],
         [13, 12, 14, 16],
         [ 8, 13, 13, 14],
         [... 19, 12],
         [ 5,  8, 14, 17],
         [16, 14, 18, 19],
         [ 2,  1,  8,  4],
         [12,  9, 17, 11]]])
color = tensor([[[1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.]],

 ...,

        [[1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
                    image[b, :, y1:y2, x1] = rect_color.view(C, 1)
                    image[b, :, y1:y2, x2 - 1] = rect_color.view(C, 1)
>                   image[b, :, y1, x1:x2] = rect_color.view(C)
E                   RuntimeError: The expanded size of the tensor (2) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 2].  Tensor sizes: [3]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:43: RuntimeError
_____________ TestDrawRectangle.test_n_rectangles[cpu-False-12-4] ______________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff1695d0>
device = device(type='cpu'), batch = 4, N = 12, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.7445, 0.1601, 0.9067,  ..., 0.8514, 0.4279, 0.0988],
          [0.2622, 0.6186, 0.1642,  ..., 0.9767, 0.2...67, 0.8284, 0.8041,  ..., 0.2742, 0.2823, 0.3937],
          [0.9101, 0.3288, 0.4431,  ..., 0.0882, 0.9223, 0.6448]]]])
rectangle = tensor([[[ 3,  7,  9, 11],
         [18,  0, 19,  1],
         [12,  7, 15, 17],
         [ 4, 17,  8, 19],
         [... 13, 16],
         [13, 10, 14, 13],
         [13,  7, 17, 17],
         [10, 15, 14, 17],
         [ 2, 17, 13, 19]]])
color = tensor([[[1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
   ...],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
                    image[b, :, y1:y2, x1] = rect_color.view(C, 1)
                    image[b, :, y1:y2, x2 - 1] = rect_color.view(C, 1)
>                   image[b, :, y1, x1:x2] = rect_color.view(C)
E                   RuntimeError: The expanded size of the tensor (6) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 6].  Tensor sizes: [3]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:43: RuntimeError
_____________ TestDrawRectangle.test_n_rectangles[cpu-False-12-6] ______________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff169690>
device = device(type='cpu'), batch = 6, N = 12, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.9370, 0.5609, 0.1582,  ..., 0.9535, 0.8166, 0.4101],
          [0.6811, 0.7324, 0.4861,  ..., 0.0783, 0.9...91, 0.3524, 0.7179,  ..., 0.1214, 0.8613, 0.8131],
          [0.6751, 0.5026, 0.2807,  ..., 0.2060, 0.4645, 0.3124]]]])
rectangle = tensor([[[14,  5, 16, 13],
         [ 5,  0,  8,  8],
         [18, 18, 19, 19],
         [ 4,  3,  7,  4],
         [...  8, 13],
         [17, 10, 19, 19],
         [ 4, 11, 11, 13],
         [ 8,  5, 17,  6],
         [18, 11, 19, 17]]])
color = tensor([[[1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
   ...],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.],
         [1., 1., 1.]]])
fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
                    image[b, :, y1:y2, x1] = rect_color.view(C, 1)
                    image[b, :, y1:y2, x2 - 1] = rect_color.view(C, 1)
>                   image[b, :, y1, x1:x2] = rect_color.view(C)
E                   RuntimeError: The expanded size of the tensor (2) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 2].  Tensor sizes: [3]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:43: RuntimeError
_____________ TestDrawRectangle.test_color_background[cpu-color0] ______________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff169990>
device = device(type='cpu'), color = tensor([0.5000, 0.3000, 0.1500])

    @pytest.mark.parametrize("color", (torch.tensor([0.5, 0.3, 0.15]), torch.tensor([0.23, 0.33, 0.8])))
    def test_color_background(self, device, color):
        image = torch.zeros(1, 3, 40, 40, device=device)
        image[:, 0, :, :] = color[0]
        image[:, 1, :, :] = color[1]
        image[:, 2, :, :] = color[2]
        image_w_rectangle = image.clone()
        p1 = (1, 5)
        p2 = (30, 39)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
>       draw_rectangle(image_w_rectangle, points, color=torch.tensor([1.0]))

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:394: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],
          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5...00, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],
          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500]]]])
rectangle = tensor([[[ 5,  1, 39, 30]]]), color = tensor([[[1.]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
_____________ TestDrawRectangle.test_color_background[cpu-color1] ______________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff169900>
device = device(type='cpu'), color = tensor([0.2300, 0.3300, 0.8000])

    @pytest.mark.parametrize("color", (torch.tensor([0.5, 0.3, 0.15]), torch.tensor([0.23, 0.33, 0.8])))
    def test_color_background(self, device, color):
        image = torch.zeros(1, 3, 40, 40, device=device)
        image[:, 0, :, :] = color[0]
        image[:, 1, :, :] = color[1]
        image[:, 2, :, :] = color[2]
        image_w_rectangle = image.clone()
        p1 = (1, 5)
        p2 = (30, 39)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
>       draw_rectangle(image_w_rectangle, points, color=torch.tensor([1.0]))

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:394: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],
          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2...00, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],
          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000]]]])
rectangle = tensor([[[ 5,  1, 39, 30]]]), color = tensor([[[1.]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
>                   image[b, :, y1:y2, x1] = rect_color.view(C, 1)
E                   RuntimeError: shape '[3, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
_____________ TestDrawRectangle.test_color_foreground[cpu-color0] ______________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff169db0>
device = device(type='cpu'), color = tensor([0.3400, 0.6300, 0.1600])

    @pytest.mark.parametrize("color", (torch.tensor([0.34, 0.63, 0.16]), torch.tensor([0.29, 0.13, 0.48])))
    def test_color_foreground(self, device, color):
        image = torch.zeros(1, 3, 50, 40, device=device)
        image_w_rectangle = image.clone()
        p1 = (10, 4)
        p2 = (11, 40)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
>       draw_rectangle(image_w_rectangle, points, color=color)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 4, 10, 40, 11]]])
color = tensor([[[0.3400, 0.6300, 0.1600]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
                    image[b, :, y1:y2, x1] = rect_color.view(C, 1)
                    image[b, :, y1:y2, x2 - 1] = rect_color.view(C, 1)
>                   image[b, :, y1, x1:x2] = rect_color.view(C)
E                   RuntimeError: The expanded size of the tensor (36) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 36].  Tensor sizes: [3]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:43: RuntimeError
_____________ TestDrawRectangle.test_color_foreground[cpu-color1] ______________

self = <test_draw.TestDrawRectangle object at 0x7ea6ff169d20>
device = device(type='cpu'), color = tensor([0.2900, 0.1300, 0.4800])

    @pytest.mark.parametrize("color", (torch.tensor([0.34, 0.63, 0.16]), torch.tensor([0.29, 0.13, 0.48])))
    def test_color_foreground(self, device, color):
        image = torch.zeros(1, 3, 50, 40, device=device)
        image_w_rectangle = image.clone()
        p1 = (10, 4)
        p2 = (11, 40)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
>       draw_rectangle(image_w_rectangle, points, color=color)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 4, 10, 40, 11]]])
color = tensor([[[0.2900, 0.1300, 0.4800]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws rectangles on a batch of image tensors.
    
        Args:
            image (torch.Tensor): Tensor of shape (B, C, H, W).
            rectangle (torch.Tensor): Tensor of shape (B, N, 4).
            color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.
            fill (bool): Whether to fill the rectangles. Defaults to False.
    
        Returns:
            torch.Tensor: The modified image tensor with rectangles drawn.
        """
        B, C, H, W = image.shape
        B_rect, N, num_points = rectangle.shape
        assert B == B_rect, 'Batch size of image and rectangle tensors must match.'
        assert num_points == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = torch.as_tensor(color, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1).expand(B, N, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            assert color.shape == (B, N, C), 'Color tensor shape must be (B, N, C) if 3D.'
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n].int()
                rect_color = color[b, n]
                if fill:
                    image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)
                else:
                    image[b, :, y1:y2, x1] = rect_color.view(C, 1)
                    image[b, :, y1:y2, x2 - 1] = rect_color.view(C, 1)
>                   image[b, :, y1, x1:x2] = rect_color.view(C)
E                   RuntimeError: The expanded size of the tensor (36) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 36].  Tensor sizes: [3]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:43: RuntimeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1]
============================== 52 failed in 1.42s ==============================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'openxla', 'tvm', 'cudagraphs', 'jit', 'onnxrt', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 52 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] PASSED

============================== 52 passed in 0.30s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'inductor', 'jit', 'tvm', 'openxla', 'cudagraphs', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 52 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] PASSED

============================== 52 passed in 0.28s ==============================
