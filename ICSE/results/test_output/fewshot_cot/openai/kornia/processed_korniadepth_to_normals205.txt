output file:
processed_korniadepth_to_normals205.json
function:
depth_to_normals
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes_broadcast[cpu-float32-5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_gradcheck[cpu]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_simple_normalized[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_simple[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes_broadcast[cpu-float32-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes_broadcast[cpu-float32-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes_broadcast[cpu-float32-4]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes_broadcast[cpu-float32-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_simple[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_gradcheck[cpu] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes_broadcast[cpu-float32-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_simple_normalized[cpu-float32] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'onnxrt', 'openxla', 'jit', 'inductor', 'cudagraphs', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 10 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes[cpu-float32-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes[cpu-float32-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes_broadcast[cpu-float32-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes_broadcast[cpu-float32-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes_broadcast[cpu-float32-5] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_simple[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_simple_normalized[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_gradcheck[cpu] FAILED

=================================== FAILURES ===================================
___________ TestDepthToNormals.test_shapes_broadcast[cpu-float32-2] ____________

self = <tests.geometry.test_depth.TestDepthToNormals object at 0x7abd23522a70>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [2, 4, 5])
    def test_shapes_broadcast(self, batch_size, device, dtype):
        depth = torch.rand(batch_size, 1, 3, 4, device=device, dtype=dtype)
        camera_matrix = torch.rand(1, 3, 3, device=device, dtype=dtype)
    
>       points3d = kornia.geometry.depth.depth_to_normals(depth, camera_matrix)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/depth.py:108: in depth_to_normals
    return depth_to_normals(depth, camera_matrix, normalize_points)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

depth = tensor([[[[0.9300, 0.0885, 0.8179, 0.6920],
          [0.2249, 0.2745, 0.1276, 0.7735],
          [0.0550, 0.9516, 0.0...83, 0.9099, 0.5778, 0.7128],
          [0.7067, 0.8743, 0.2066, 0.1814],
          [0.1991, 0.4462, 0.3171, 0.7267]]]])
camera_matrix = tensor([[[0.2242, 0.1270, 0.6508],
         [0.6488, 0.6724, 0.6498],
         [0.7827, 0.4335, 0.6843]]])
normalize_points = False

    def depth_to_normals(depth, camera_matrix, normalize_points=False):
        """
        Computes the surface normals per pixel from a depth image.
    
        Args:
            depth (torch.Tensor): A tensor of shape (B, 1, H, W) containing depth values.
            camera_matrix (torch.Tensor): A tensor of shape (B, 3, 3) representing the camera intrinsics.
            normalize_points (bool): Whether to normalize the point cloud.
    
        Returns:
            torch.Tensor: A tensor with a normal vector per pixel of shape (B, 3, H, W).
    
        Raises:
            TypeError: If `depth` or `camera_matrix` is not a Tensor.
            ValueError: If `depth` does not have the shape (B, 1, H, W) or `camera_matrix` does not have the shape (B, 3, 3).
        """
        if not isinstance(depth, torch.Tensor):
            raise TypeError('depth must be a torch.Tensor')
        if not isinstance(camera_matrix, torch.Tensor):
            raise TypeError('camera_matrix must be a torch.Tensor')
        if depth.ndim != 4 or depth.shape[1] != 1:
            raise ValueError('depth must have shape (B, 1, H, W)')
        if camera_matrix.ndim != 3 or camera_matrix.shape[1:] != (3, 3):
            raise ValueError('camera_matrix must have shape (B, 3, 3)')
        B, _, H, W = depth.shape
        y, x = torch.meshgrid(torch.arange(H, device=depth.device), torch.arange(W, device=depth.device))
        y, x = (y.float(), x.float())
        camera_matrix_inv = torch.inverse(camera_matrix)
        points = torch.stack((x, y, torch.ones_like(x)), dim=0).unsqueeze(0).repeat(B, 1, 1, 1)
        points = points.view(B, 3, -1)
>       points = torch.bmm(camera_matrix_inv, points)
E       RuntimeError: Expected size for first two dimensions of batch2 tensor to be: [1, 3] but got: [2, 3].

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/temp.py:45: RuntimeError
___________ TestDepthToNormals.test_shapes_broadcast[cpu-float32-4] ____________

self = <tests.geometry.test_depth.TestDepthToNormals object at 0x7abd235229b0>
batch_size = 4, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [2, 4, 5])
    def test_shapes_broadcast(self, batch_size, device, dtype):
        depth = torch.rand(batch_size, 1, 3, 4, device=device, dtype=dtype)
        camera_matrix = torch.rand(1, 3, 3, device=device, dtype=dtype)
    
>       points3d = kornia.geometry.depth.depth_to_normals(depth, camera_matrix)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/depth.py:108: in depth_to_normals
    return depth_to_normals(depth, camera_matrix, normalize_points)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

depth = tensor([[[[0.0293, 0.4707, 0.6471, 0.5242],
          [0.6855, 0.9722, 0.8581, 0.5499],
          [0.2891, 0.7937, 0.0...73, 0.7033, 0.5798, 0.0197],
          [0.7940, 0.7854, 0.8264, 0.9999],
          [0.5796, 0.2268, 0.3784, 0.2133]]]])
camera_matrix = tensor([[[0.5423, 0.3212, 0.2910],
         [0.5896, 0.5050, 0.0414],
         [0.2034, 0.7564, 0.7331]]])
normalize_points = False

    def depth_to_normals(depth, camera_matrix, normalize_points=False):
        """
        Computes the surface normals per pixel from a depth image.
    
        Args:
            depth (torch.Tensor): A tensor of shape (B, 1, H, W) containing depth values.
            camera_matrix (torch.Tensor): A tensor of shape (B, 3, 3) representing the camera intrinsics.
            normalize_points (bool): Whether to normalize the point cloud.
    
        Returns:
            torch.Tensor: A tensor with a normal vector per pixel of shape (B, 3, H, W).
    
        Raises:
            TypeError: If `depth` or `camera_matrix` is not a Tensor.
            ValueError: If `depth` does not have the shape (B, 1, H, W) or `camera_matrix` does not have the shape (B, 3, 3).
        """
        if not isinstance(depth, torch.Tensor):
            raise TypeError('depth must be a torch.Tensor')
        if not isinstance(camera_matrix, torch.Tensor):
            raise TypeError('camera_matrix must be a torch.Tensor')
        if depth.ndim != 4 or depth.shape[1] != 1:
            raise ValueError('depth must have shape (B, 1, H, W)')
        if camera_matrix.ndim != 3 or camera_matrix.shape[1:] != (3, 3):
            raise ValueError('camera_matrix must have shape (B, 3, 3)')
        B, _, H, W = depth.shape
        y, x = torch.meshgrid(torch.arange(H, device=depth.device), torch.arange(W, device=depth.device))
        y, x = (y.float(), x.float())
        camera_matrix_inv = torch.inverse(camera_matrix)
        points = torch.stack((x, y, torch.ones_like(x)), dim=0).unsqueeze(0).repeat(B, 1, 1, 1)
        points = points.view(B, 3, -1)
>       points = torch.bmm(camera_matrix_inv, points)
E       RuntimeError: Expected size for first two dimensions of batch2 tensor to be: [1, 3] but got: [4, 3].

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/temp.py:45: RuntimeError
___________ TestDepthToNormals.test_shapes_broadcast[cpu-float32-5] ____________

self = <tests.geometry.test_depth.TestDepthToNormals object at 0x7abd23522cb0>
batch_size = 5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [2, 4, 5])
    def test_shapes_broadcast(self, batch_size, device, dtype):
        depth = torch.rand(batch_size, 1, 3, 4, device=device, dtype=dtype)
        camera_matrix = torch.rand(1, 3, 3, device=device, dtype=dtype)
    
>       points3d = kornia.geometry.depth.depth_to_normals(depth, camera_matrix)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/depth.py:108: in depth_to_normals
    return depth_to_normals(depth, camera_matrix, normalize_points)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

depth = tensor([[[[0.0071, 0.8058, 0.2682, 0.1793],
          [0.7102, 0.0938, 0.4321, 0.6469],
          [0.9743, 0.5786, 0.1...57, 0.9110, 0.3088, 0.8148],
          [0.7888, 0.5695, 0.3895, 0.8712],
          [0.7793, 0.2262, 0.0949, 0.7055]]]])
camera_matrix = tensor([[[0.4245, 0.6313, 0.5243],
         [0.4428, 0.0773, 0.3410],
         [0.7244, 0.2516, 0.8373]]])
normalize_points = False

    def depth_to_normals(depth, camera_matrix, normalize_points=False):
        """
        Computes the surface normals per pixel from a depth image.
    
        Args:
            depth (torch.Tensor): A tensor of shape (B, 1, H, W) containing depth values.
            camera_matrix (torch.Tensor): A tensor of shape (B, 3, 3) representing the camera intrinsics.
            normalize_points (bool): Whether to normalize the point cloud.
    
        Returns:
            torch.Tensor: A tensor with a normal vector per pixel of shape (B, 3, H, W).
    
        Raises:
            TypeError: If `depth` or `camera_matrix` is not a Tensor.
            ValueError: If `depth` does not have the shape (B, 1, H, W) or `camera_matrix` does not have the shape (B, 3, 3).
        """
        if not isinstance(depth, torch.Tensor):
            raise TypeError('depth must be a torch.Tensor')
        if not isinstance(camera_matrix, torch.Tensor):
            raise TypeError('camera_matrix must be a torch.Tensor')
        if depth.ndim != 4 or depth.shape[1] != 1:
            raise ValueError('depth must have shape (B, 1, H, W)')
        if camera_matrix.ndim != 3 or camera_matrix.shape[1:] != (3, 3):
            raise ValueError('camera_matrix must have shape (B, 3, 3)')
        B, _, H, W = depth.shape
        y, x = torch.meshgrid(torch.arange(H, device=depth.device), torch.arange(W, device=depth.device))
        y, x = (y.float(), x.float())
        camera_matrix_inv = torch.inverse(camera_matrix)
        points = torch.stack((x, y, torch.ones_like(x)), dim=0).unsqueeze(0).repeat(B, 1, 1, 1)
        points = points.view(B, 3, -1)
>       points = torch.bmm(camera_matrix_inv, points)
E       RuntimeError: Expected size for first two dimensions of batch2 tensor to be: [1, 3] but got: [5, 3].

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/temp.py:45: RuntimeError
_________________ TestDepthToNormals.test_simple[cpu-float32] __________________

self = <tests.geometry.test_depth.TestDepthToNormals object at 0x7abd23522f80>
device = device(type='cpu'), dtype = torch.float32

    def test_simple(self, device, dtype):
        # this is for default normalize_points=False
        depth = 2 * torch.tensor(
            [[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]], device=device, dtype=dtype
        )
    
        camera_matrix = torch.tensor([[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]], device=device, dtype=dtype)
    
        normals_expected = torch.tensor(
            [
                [
                    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
                    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
                    [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        normals = kornia.geometry.depth.depth_to_normals(depth, camera_matrix)  # default is normalize_points=False
>       self.assert_close(normals, normals_expected, rtol=1e-3, atol=1e-3)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[[0., 0., nan],
          [0., 0., nan],
          [0., 0., nan],
          [nan, nan, nan]],

         [[0.,..., nan, nan]],

         [[1., 1., nan],
          [1., 1., nan],
          [1., 1., nan],
          [nan, nan, nan]]]])
expected = tensor([[[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]],

         [[0., 0., 0...     [0., 0., 0.]],

         [[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]]]])
rtol = 0.001, atol = 0.001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 18 / 36 (50.0%)
E       Greatest absolute difference: nan at index (0, 0, 0, 2) (up to 0.001 allowed)
E       Greatest relative difference: nan at index (0, 0, 0, 2) (up to 0.001 allowed)

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
____________ TestDepthToNormals.test_simple_normalized[cpu-float32] ____________

self = <tests.geometry.test_depth.TestDepthToNormals object at 0x7abd235232b0>
device = device(type='cpu'), dtype = torch.float32

    def test_simple_normalized(self, device, dtype):
        # this is for default normalize_points=False
        depth = 2 * torch.tensor(
            [[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]], device=device, dtype=dtype
        )
    
        camera_matrix = torch.tensor([[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]], device=device, dtype=dtype)
    
        normals_expected = torch.tensor(
            [
                [
                    [
                        [0.3432, 0.4861, 0.7628],
                        [0.2873, 0.4260, 0.6672],
                        [0.2284, 0.3683, 0.5596],
                        [0.1695, 0.2980, 0.4496],
                    ],
                    [
                        [0.3432, 0.2873, 0.2363],
                        [0.4861, 0.4260, 0.3785],
                        [0.8079, 0.7261, 0.6529],
                        [0.8948, 0.8237, 0.7543],
                    ],
                    [
                        [0.8743, 0.8253, 0.6019],
                        [0.8253, 0.7981, 0.6415],
                        [0.5432, 0.5807, 0.5105],
                        [0.4129, 0.4824, 0.4784],
                    ],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        normals = kornia.geometry.depth.depth_to_normals(depth, camera_matrix, normalize_points=True)
>       self.assert_close(normals, normals_expected, rtol=1e-3, atol=1e-3)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[[0.3574, 0.7740,    nan],
          [0.2993, 0.6786,    nan],
          [0.2082, 0.5292,    nan],
          ...   nan],
          [0.5579, 0.2811,    nan],
          [0.3743, 0.1583,    nan],
          [   nan,    nan,    nan]]]])
expected = tensor([[[[0.3432, 0.4861, 0.7628],
          [0.2873, 0.4260, 0.6672],
          [0.2284, 0.3683, 0.5596],
          ...0.6019],
          [0.8253, 0.7981, 0.6415],
          [0.5432, 0.5807, 0.5105],
          [0.4129, 0.4824, 0.4784]]]])
rtol = 0.001, atol = 0.001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 36 / 36 (100.0%)
E       Greatest absolute difference: nan at index (0, 0, 0, 2) (up to 0.001 allowed)
E       Greatest relative difference: nan at index (0, 0, 0, 2) (up to 0.001 allowed)

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
____________________ TestDepthToNormals.test_gradcheck[cpu] ____________________

self = <tests.geometry.test_depth.TestDepthToNormals object at 0x7abd23523580>
device = device(type='cpu')

    def test_gradcheck(self, device):
        # generate input data
        depth = torch.rand(1, 1, 3, 4, device=device, dtype=torch.float64)
    
        camera_matrix = torch.rand(1, 3, 3, device=device, dtype=torch.float64)
    
        # evaluate function gradient
>       self.gradcheck(kornia.geometry.depth.depth_to_normals, (depth, camera_matrix))

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:226: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/depth.py:108: in depth_to_normals
    return depth_to_normals(depth, camera_matrix, normalize_points)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

depth = tensor([[[[0.2263, 0.6606, 0.4859, 0.7181],
          [0.5418, 0.2637, 0.1359, 0.4530],
          [0.3131, 0.3188, 0.5234, 0.7065]]]], dtype=torch.float64,
       requires_grad=True)
camera_matrix = tensor([[[0.4781, 0.5332, 0.7698],
         [0.3408, 0.7635, 0.1902],
         [0.9798, 0.5155, 0.3174]]], dtype=torch.float64, requires_grad=True)
normalize_points = False

    def depth_to_normals(depth, camera_matrix, normalize_points=False):
        """
        Computes the surface normals per pixel from a depth image.
    
        Args:
            depth (torch.Tensor): A tensor of shape (B, 1, H, W) containing depth values.
            camera_matrix (torch.Tensor): A tensor of shape (B, 3, 3) representing the camera intrinsics.
            normalize_points (bool): Whether to normalize the point cloud.
    
        Returns:
            torch.Tensor: A tensor with a normal vector per pixel of shape (B, 3, H, W).
    
        Raises:
            TypeError: If `depth` or `camera_matrix` is not a Tensor.
            ValueError: If `depth` does not have the shape (B, 1, H, W) or `camera_matrix` does not have the shape (B, 3, 3).
        """
        if not isinstance(depth, torch.Tensor):
            raise TypeError('depth must be a torch.Tensor')
        if not isinstance(camera_matrix, torch.Tensor):
            raise TypeError('camera_matrix must be a torch.Tensor')
        if depth.ndim != 4 or depth.shape[1] != 1:
            raise ValueError('depth must have shape (B, 1, H, W)')
        if camera_matrix.ndim != 3 or camera_matrix.shape[1:] != (3, 3):
            raise ValueError('camera_matrix must have shape (B, 3, 3)')
        B, _, H, W = depth.shape
        y, x = torch.meshgrid(torch.arange(H, device=depth.device), torch.arange(W, device=depth.device))
        y, x = (y.float(), x.float())
        camera_matrix_inv = torch.inverse(camera_matrix)
        points = torch.stack((x, y, torch.ones_like(x)), dim=0).unsqueeze(0).repeat(B, 1, 1, 1)
        points = points.view(B, 3, -1)
>       points = torch.bmm(camera_matrix_inv, points)
E       RuntimeError: expected scalar type Double but found Float

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/temp.py:45: RuntimeError
=============================== warnings summary ===============================
tests/geometry/test_depth.py::TestDepthToNormals::test_smoke[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/functional.py:534: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3595.)
    return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes_broadcast[cpu-float32-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes_broadcast[cpu-float32-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes_broadcast[cpu-float32-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_simple[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_simple_normalized[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_gradcheck[cpu]
==================== 6 failed, 4 passed, 1 warning in 0.39s ====================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'onnxrt', None, 'inductor', 'openxla', 'cudagraphs', 'jit'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 10 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes[cpu-float32-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes[cpu-float32-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes_broadcast[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes_broadcast[cpu-float32-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes_broadcast[cpu-float32-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_simple[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_simple_normalized[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_gradcheck[cpu] PASSED

=============================== warnings summary ===============================
tests/geometry/test_depth.py: 15 warnings
  /local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/depth.py:192: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    xyz: Tensor = depth_to_3d(depth, camera_matrix, normalize_points)  # Bx3xHxW

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================= 10 passed, 15 warnings in 0.20s ========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'cudagraphs', 'inductor', 'tvm', 'onnxrt', 'openxla', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 10 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes[cpu-float32-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes[cpu-float32-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes_broadcast[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes_broadcast[cpu-float32-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_shapes_broadcast[cpu-float32-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_simple[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_simple_normalized[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthToNormals::test_gradcheck[cpu] PASSED

=============================== warnings summary ===============================
tests/geometry/test_depth.py: 15 warnings
  /local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/depth.py:192: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    xyz: Tensor = depth_to_3d(depth, camera_matrix, normalize_points)  # Bx3xHxW

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================= 10 passed, 15 warnings in 0.20s ========================
