output file:
processed_korniamatch_fginn195.json
function:
match_fginn
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'jit', 'tvm', 'openxla', 'onnxrt', 'cudagraphs', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 12 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_jit[cpu-float32] SKIPPED

=================================== FAILURES ===================================
_________________ TestMatchFGINN.test_shape_one_way[cpu-2-4-4] _________________

self = <test_matching.TestMatchFGINN object at 0x74c908937520>, num_desc1 = 2
num_desc2 = 4, dim = 4, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_one_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.8033, 0.2910, 0.4160, 0.6627],
        [0.2193, 0.0022, 0.7342, 0.3736]])
desc2 = tensor([[0.6502, 0.7520, 0.8320, 0.0081],
        [0.3791, 0.0273, 0.8945, 0.4889],
        [0.8294, 0.5684, 0.8940, 0.6468],
        [0.7445, 0.6694, 0.3164, 0.3959]])
lafs1 = tensor([[[[0.1790, 0.7406, 0.0890],
          [0.9019, 0.4156, 0.7726]],

         [[0.7641, 0.3658, 0.3536],
          [0.4621, 0.5292, 0.9830]]]])
lafs2 = tensor([[[[0.8985, 0.5807, 0.9191],
          [0.3729, 0.3386, 0.2113]],

         [[0.2432, 0.2869, 0.9965],
        ...0825],
          [0.8732, 0.1179, 0.1569]],

         [[0.3316, 0.0106, 0.2215],
          [0.9210, 0.4592, 0.6857]]]])
th = 0.9, spatial_th = 1000, mutual = False
dm = tensor([[0.9151, 0.7132, 0.5535, 0.4772],
        [0.9440, 0.2552, 0.8905, 0.9466]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for matching.
            spatial_th (float): Spatial distance threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and indices of matches.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
________________ TestMatchFGINN.test_shape_one_way[cpu-2-5-128] ________________

self = <test_matching.TestMatchFGINN object at 0x74c908937460>, num_desc1 = 2
num_desc2 = 5, dim = 128, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_one_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[4.6556e-01, 9.6188e-02, 1.7735e-01, 4.0425e-01, 5.9128e-01, 8.1235e-01,
         2.7264e-01, 2.3193e-01, 7.27...01,
         9.0314e-01, 6.7304e-01, 1.1758e-01, 1.9384e-01, 9.6681e-01, 4.8066e-01,
         5.1874e-01, 6.4427e-01]])
desc2 = tensor([[4.0669e-01, 9.8612e-01, 2.6956e-01, 1.0673e-01, 2.6206e-01, 2.5135e-01,
         8.4061e-01, 2.1356e-01, 2.02...01,
         8.1945e-01, 7.2189e-01, 7.6125e-01, 6.2615e-01, 3.8478e-01, 1.7966e-01,
         4.0475e-02, 7.2819e-01]])
lafs1 = tensor([[[[0.6998, 0.6713, 0.8157],
          [0.7150, 0.9438, 0.6586]],

         [[0.0983, 0.9206, 0.8100],
          [0.8240, 0.4778, 0.3359]]]])
lafs2 = tensor([[[[0.2054, 0.5347, 0.2512],
          [0.2803, 0.2388, 0.1005]],

         [[0.5263, 0.2747, 0.0283],
        ...4212],
          [0.3413, 0.1806, 0.8428]],

         [[0.0592, 0.5994, 0.5982],
          [0.0932, 0.8896, 0.5584]]]])
th = 0.9, spatial_th = 1000, mutual = False
dm = tensor([[4.8982, 4.5447, 5.0398, 4.5745, 4.7134],
        [4.8048, 4.4601, 4.6649, 4.1999, 4.8465]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for matching.
            spatial_th (float): Spatial distance threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and indices of matches.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
________________ TestMatchFGINN.test_shape_one_way[cpu-6-2-32] _________________

self = <test_matching.TestMatchFGINN object at 0x74c9089377f0>, num_desc1 = 6
num_desc2 = 2, dim = 32, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_one_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.5554, 0.5670, 0.2727, 0.0699, 0.8972, 0.1828, 0.5305, 0.6828, 0.1287,
         0.8894, 0.3826, 0.6444, 0.44...291, 0.7125, 0.0811, 0.0175, 0.2749, 0.2773, 0.8176, 0.3711, 0.1838,
         0.5971, 0.8732, 0.8012, 0.0308, 0.4356]])
desc2 = tensor([[0.7811, 0.6131, 0.2955, 0.1722, 0.8897, 0.9229, 0.5831, 0.1618, 0.6953,
         0.9765, 0.4353, 0.0133, 0.00...810, 0.2186, 0.4468, 0.8726, 0.7874, 0.0164, 0.6759, 0.4558, 0.2303,
         0.2814, 0.8590, 0.9692, 0.7565, 0.3029]])
lafs1 = tensor([[[[0.3196, 0.9055, 0.1506],
          [0.3147, 0.6044, 0.1209]],

         [[0.9142, 0.5503, 0.3517],
        ...0497],
          [0.7165, 0.9588, 0.6346]],

         [[0.9841, 0.7159, 0.0075],
          [0.1835, 0.3050, 0.0422]]]])
lafs2 = tensor([[[[0.0447, 0.0568, 0.7390],
          [0.1031, 0.2182, 0.2654]],

         [[0.6542, 0.9346, 0.2257],
          [0.9374, 0.8143, 0.2854]]]])
th = 0.9, spatial_th = 1000, mutual = False
dm = tensor([[2.0779, 2.4659],
        [2.4828, 2.2739],
        [2.5662, 2.6586],
        [2.4777, 2.2390],
        [2.5901, 2.0642],
        [2.4115, 2.4033]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for matching.
            spatial_th (float): Spatial distance threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and indices of matches.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
_________________ TestMatchFGINN.test_shape_two_way[cpu-2-4-4] _________________

self = <test_matching.TestMatchFGINN object at 0x74c908937af0>, num_desc1 = 2
num_desc2 = 4, dim = 4, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_two_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000, mutual=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.5943, 0.4013, 0.1843, 0.3041],
        [0.5273, 0.7240, 0.6059, 0.3130]])
desc2 = tensor([[0.8554, 0.3688, 0.0316, 0.7074],
        [0.3207, 0.8500, 0.2594, 0.3311],
        [0.9616, 0.3577, 0.1492, 0.0023],
        [0.9209, 0.2539, 0.0554, 0.7981]])
lafs1 = tensor([[[[0.8524, 0.4099, 0.3814],
          [0.1624, 0.0627, 0.4377]],

         [[0.7309, 0.6321, 0.8788],
          [0.9883, 0.8555, 0.2503]]]])
lafs2 = tensor([[[[0.3543, 0.7225, 0.6405],
          [0.0849, 0.0978, 0.0107]],

         [[0.0805, 0.9996, 0.1424],
        ...8922],
          [0.7604, 0.8169, 0.8200]],

         [[0.1360, 0.1223, 0.0861],
          [0.7070, 0.2015, 0.8844]]]])
th = 0.9, spatial_th = 1000, mutual = True
dm = tensor([[0.5052, 0.5315, 0.4787, 0.6237],
        [0.8480, 0.4230, 0.7924, 0.9562]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for matching.
            spatial_th (float): Spatial distance threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and indices of matches.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
________________ TestMatchFGINN.test_shape_two_way[cpu-2-5-128] ________________

self = <test_matching.TestMatchFGINN object at 0x74c908937a60>, num_desc1 = 2
num_desc2 = 5, dim = 128, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_two_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000, mutual=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.4520, 0.8544, 0.9980, 0.8204, 0.6197, 0.4051, 0.6083, 0.8654, 0.6846,
         0.2478, 0.3012, 0.8033, 0.74...32, 0.2936,
         0.4039, 0.9213, 0.0020, 0.8961, 0.9812, 0.1047, 0.6735, 0.5014, 0.7628,
         0.9286, 0.6275]])
desc2 = tensor([[4.7164e-01, 5.1161e-01, 3.7666e-01, 2.9298e-01, 3.4063e-01, 6.0306e-01,
         7.6262e-01, 4.3063e-01, 4.26...01,
         7.4402e-01, 3.8586e-01, 4.4637e-01, 1.5640e-01, 7.1839e-02, 1.6102e-01,
         8.8286e-01, 7.1108e-01]])
lafs1 = tensor([[[[0.6283, 0.7373, 0.6112],
          [0.5766, 0.5406, 0.5293]],

         [[0.6175, 0.2067, 0.2368],
          [0.0946, 0.1544, 0.5109]]]])
lafs2 = tensor([[[[0.6729, 0.9130, 0.3149],
          [0.9812, 0.6125, 0.6369]],

         [[0.7931, 0.1583, 0.1171],
        ...7006],
          [0.3709, 0.2500, 0.6247]],

         [[0.9167, 0.7088, 0.0815],
          [0.0806, 0.8609, 0.0526]]]])
th = 0.9, spatial_th = 1000, mutual = True
dm = tensor([[4.5891, 4.5317, 4.5807, 4.4658, 4.9869],
        [4.7100, 4.4912, 4.7460, 4.3536, 4.3868]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for matching.
            spatial_th (float): Spatial distance threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and indices of matches.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
________________ TestMatchFGINN.test_shape_two_way[cpu-6-2-32] _________________

self = <test_matching.TestMatchFGINN object at 0x74c908937df0>, num_desc1 = 6
num_desc2 = 2, dim = 32, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_two_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000, mutual=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.5808, 0.8087, 0.1832, 0.2051, 0.1714, 0.6003, 0.4949, 0.5279, 0.5402,
         0.1701, 0.9661, 0.8236, 0.83...574, 0.7823, 0.4168, 0.0632, 0.3010, 0.2828, 0.8515, 0.2769, 0.7643,
         0.3763, 0.9095, 0.3196, 0.0638, 0.1883]])
desc2 = tensor([[0.5617, 0.2112, 0.5306, 0.4843, 0.2550, 0.0787, 0.4348, 0.9822, 0.6409,
         0.9097, 0.2731, 0.5602, 0.38...198, 0.9314, 0.7364, 0.2071, 0.7511, 0.3803, 0.4459, 0.6577, 0.8955,
         0.7212, 0.5914, 0.1817, 0.6997, 0.7883]])
lafs1 = tensor([[[[0.6380, 0.8545, 0.3626],
          [0.7386, 0.5463, 0.1993]],

         [[0.1347, 0.3130, 0.7708],
        ...2295],
          [0.0409, 0.3003, 0.7171]],

         [[0.4049, 0.2949, 0.7098],
          [0.3971, 0.5232, 0.1324]]]])
lafs2 = tensor([[[[0.9068, 0.5013, 0.0653],
          [0.1541, 0.9796, 0.8301]],

         [[0.7306, 0.2438, 0.5767],
          [0.3551, 0.1050, 0.5109]]]])
th = 0.9, spatial_th = 1000, mutual = True
dm = tensor([[2.5041, 1.3854],
        [2.4339, 2.1372],
        [2.1881, 1.8301],
        [2.2281, 2.2704],
        [3.0092, 2.3533],
        [2.0685, 2.2274]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for matching.
            spatial_th (float): Spatial distance threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and indices of matches.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
__________________ TestMatchFGINN.test_matching1[cpu-float32] __________________

self = <test_matching.TestMatchFGINN object at 0x74c908968100>
device = device(type='cpu'), dtype = torch.float32

    def test_matching1(self, device, dtype):
        desc1 = torch.tensor([[0, 0.0], [1, 1.001], [2, 2], [3, 3.0], [5, 5.0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0], [3, 3.0], [2.3, 2.4], [1, 1.001], [0, 0.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8, 0.01)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:266: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.0000, 0.0000],
        [1.0000, 1.0010],
        [2.0000, 2.0000],
        [3.0000, 3.0000],
        [5.0000, 5.0000]])
desc2 = tensor([[5.0000, 5.0000],
        [3.0000, 3.0000],
        [2.3000, 2.4000],
        [1.0000, 1.0010],
        [0.0000, 0.0000]])
lafs1 = tensor([[[[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]],

         [[1.0000, 0.0000, 1.0000],
       ...00],
          [-0.0000, 1.0000, 3.0000]],

         [[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]]]])
lafs2 = tensor([[[[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 3.0000],
       ...00],
          [-0.0000, 1.0000, 1.0010]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
th = 0.8, spatial_th = 0.01, mutual = False
dm = tensor([[7.0711, 4.2426, 3.3242, 1.4149, 0.0000],
        [5.6561, 2.8277, 1.9098, 0.0000, 1.4149],
        [4.2426, 1..., 1.4135, 2.8284],
        [2.8284, 0.0000, 0.9220, 2.8277, 4.2426],
        [0.0000, 2.8284, 3.7483, 5.6561, 7.0711]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for matching.
            spatial_th (float): Spatial distance threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and indices of matches.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
_______________ TestMatchFGINN.test_matching_mutual[cpu-float32] _______________

self = <test_matching.TestMatchFGINN object at 0x74c908968430>
device = device(type='cpu'), dtype = torch.float32

    def test_matching_mutual(self, device, dtype):
        desc1 = torch.tensor([[0, 0.1], [1, 1.001], [2, 2], [3, 3.0], [5, 5.0], [0.0, 0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0], [3, 3.0], [2.3, 2.4], [1, 1.001], [0, 0.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8, 2.0, mutual=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:282: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.0000, 0.1000],
        [1.0000, 1.0010],
        [2.0000, 2.0000],
        [3.0000, 3.0000],
        [5.0000, 5.0000],
        [0.0000, 0.0000]])
desc2 = tensor([[5.0000, 5.0000],
        [3.0000, 3.0000],
        [2.3000, 2.4000],
        [1.0000, 1.0010],
        [0.0000, 0.0000]])
lafs1 = tensor([[[[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.1000]],

         [[1.0000, 0.0000, 1.0000],
       ...00],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
lafs2 = tensor([[[[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 3.0000],
       ...00],
          [-0.0000, 1.0000, 1.0010]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
th = 0.8, spatial_th = 2.0, mutual = True
dm = tensor([[7.0007, 4.1725, 3.2527, 1.3460, 0.1000],
        [5.6561, 2.8277, 1.9098, 0.0000, 1.4149],
        [4.2426, 1..., 2.8277, 4.2426],
        [0.0000, 2.8284, 3.7483, 5.6561, 7.0711],
        [7.0711, 4.2426, 3.3242, 1.4149, 0.0000]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for matching.
            spatial_th (float): Spatial distance threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and indices of matches.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
___________________ TestMatchFGINN.test_nomatch[cpu-float32] ___________________

self = <test_matching.TestMatchFGINN object at 0x74c908968760>
device = device(type='cpu'), dtype = torch.float32

    def test_nomatch(self, device, dtype):
        desc1 = torch.tensor([[0, 0.0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:298: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0., 0.]]), desc2 = tensor([[5., 5.]])
lafs1 = tensor([[[[1., 0., 0.],
          [-0., 1., 0.]]]])
lafs2 = tensor([[[[1., 0., 5.],
          [-0., 1., 5.]]]]), th = 0.8
spatial_th = 10.0, mutual = False, dm = tensor([[7.0711]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for matching.
            spatial_th (float): Spatial distance threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and indices of matches.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
__________________ TestMatchFGINN.test_matching2[cpu-float32] __________________

self = <test_matching.TestMatchFGINN object at 0x74c908968a90>
device = device(type='cpu'), dtype = torch.float32

    def test_matching2(self, device, dtype):
        desc1 = torch.tensor([[0, 0.0], [1, 1.001], [2, 2], [3, 3.0], [5, 5.0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0], [3, 3.0], [2.3, 2.4], [1, 1.001], [0, 0.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8, 2.0)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:308: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.0000, 0.0000],
        [1.0000, 1.0010],
        [2.0000, 2.0000],
        [3.0000, 3.0000],
        [5.0000, 5.0000]])
desc2 = tensor([[5.0000, 5.0000],
        [3.0000, 3.0000],
        [2.3000, 2.4000],
        [1.0000, 1.0010],
        [0.0000, 0.0000]])
lafs1 = tensor([[[[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]],

         [[1.0000, 0.0000, 1.0000],
       ...00],
          [-0.0000, 1.0000, 3.0000]],

         [[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]]]])
lafs2 = tensor([[[[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 3.0000],
       ...00],
          [-0.0000, 1.0000, 1.0010]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
th = 0.8, spatial_th = 2.0, mutual = False
dm = tensor([[7.0711, 4.2426, 3.3242, 1.4149, 0.0000],
        [5.6561, 2.8277, 1.9098, 0.0000, 1.4149],
        [4.2426, 1..., 1.4135, 2.8284],
        [2.8284, 0.0000, 0.9220, 2.8277, 4.2426],
        [0.0000, 2.8284, 3.7483, 5.6561, 7.0711]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for matching.
            spatial_th (float): Spatial distance threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and indices of matches.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
______________________ TestMatchFGINN.test_gradcheck[cpu] ______________________

self = <test_matching.TestMatchFGINN object at 0x74c908968d60>
device = device(type='cpu')

    def test_gradcheck(self, device):
        desc1 = torch.rand(5, 8, device=device, dtype=torch.float64)
        desc2 = torch.rand(7, 8, device=device, dtype=torch.float64)
        center1 = torch.rand(1, 5, 2, device=device, dtype=torch.float64)
        center2 = torch.rand(1, 7, 2, device=device, dtype=torch.float64)
        lafs1 = laf_from_center_scale_ori(center1)
        lafs2 = laf_from_center_scale_ori(center2)
>       self.gradcheck(match_fginn, (desc1, desc2, lafs1, lafs2, 0.8, 0.05), nondet_tol=1e-4)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:325: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.2380, 0.7838, 0.8908, 0.7702, 0.2034, 0.2513, 0.7392, 0.9624],
        [0.9855, 0.5353, 0.2427, 0.5384, 0.0...     [0.7336, 0.6929, 0.7775, 0.9257, 0.2019, 0.4430, 0.7334, 0.7250]],
       dtype=torch.float64, requires_grad=True)
desc2 = tensor([[0.9266, 0.4801, 0.2702, 0.8739, 0.9067, 0.3039, 0.8115, 0.4121],
        [0.7534, 0.5966, 0.8199, 0.3066, 0.6...     [0.2324, 0.5720, 0.2312, 0.2816, 0.7940, 0.2930, 0.2727, 0.1782]],
       dtype=torch.float64, requires_grad=True)
lafs1 = tensor([[[[1.0000, 0.0000, 0.6972],
          [-0.0000, 1.0000, 0.4630]],

         [[1.0000, 0.0000, 0.6834],
       ...     [[1.0000, 0.0000, 0.6476],
          [-0.0000, 1.0000, 0.4038]]]], dtype=torch.float64,
       requires_grad=True)
lafs2 = tensor([[[[1.0000, 0.0000, 0.1849],
          [-0.0000, 1.0000, 0.6615]],

         [[1.0000, 0.0000, 0.6203],
       ...     [[1.0000, 0.0000, 0.7882],
          [-0.0000, 1.0000, 0.2272]]]], dtype=torch.float64,
       requires_grad=True)
th = 0.8, spatial_th = 0.05, mutual = False
dm = tensor([[1.3296, 1.0750, 1.4959, 0.9259, 0.8577, 0.7109, 1.3791],
        [1.0789, 1.2152, 1.1597, 1.1548, 1.2445, 1.0...       [0.9811, 0.8950, 1.2975, 1.0507, 0.7251, 0.8607, 1.3650]],
       dtype=torch.float64, grad_fn=<CdistBackward0>)

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        """
        Finds nearest neighbors in desc2 for each vector in desc1.
    
        Args:
            desc1 (Tensor): Descriptors from the first set, shape (N1, D).
            desc2 (Tensor): Descriptors from the second set, shape (N2, D).
            lafs1 (Tensor): Local affine frames for desc1, shape (N1, 2, 3).
            lafs2 (Tensor): Local affine frames for desc2, shape (N2, 2, 3).
            th (float): Distance threshold for matching.
            spatial_th (float): Spatial distance threshold for matching.
            mutual (bool): If True, perform mutual nearest neighbor check.
            dm (Optional[Tensor]): Precomputed distance matrix, shape (N1, N2).
    
        Returns:
            Tuple[Tensor, Tensor]: Descriptor distances and indices of matches.
        """
        if dm is None:
            dm = torch.cdist(desc1, desc2)
        min_dist, min_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[:, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:35: IndexError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu]
======================== 11 failed, 1 skipped in 0.62s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'tvm', 'openxla', 'inductor', 'onnxrt', 'cudagraphs', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 12 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_jit[cpu-float32] SKIPPED

======================== 11 passed, 1 skipped in 0.18s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'cudagraphs', 'openxla', 'tvm', 'inductor', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 12 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_jit[cpu-float32] SKIPPED

======================== 11 passed, 1 skipped in 0.18s =========================
