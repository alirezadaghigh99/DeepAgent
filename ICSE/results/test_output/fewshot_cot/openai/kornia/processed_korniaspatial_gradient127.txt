output file:
processed_korniaspatial_gradient127.json
function:
spatial_gradient
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep_norm[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-diff] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-diff]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-sobel]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_norm[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_module[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-1]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-diff]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-sobel]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-sobel]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-1]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-sobel] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_noncontiguous[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_gradcheck[cpu]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-1]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_norm[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-diff]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-sobel]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_module[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_noncontiguous[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_gradcheck[cpu] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-2]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-diff] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-diff]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-sobel] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-diff] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-2]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-2]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-sobel] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-sobel] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-2]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep_norm[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-2]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-diff] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep[cpu-float32] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'cudagraphs', 'tvm', 'inductor', 'openxla', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 34 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_exception FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_norm[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep_norm[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_noncontiguous[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_gradcheck[cpu] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_module[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-sobel] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-diff] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-sobel] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-diff] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-sobel] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-diff] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-sobel] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-diff] FAILED

=================================== FAILURES ===================================
__________ TestSpatialGradient.test_smoke[cpu-float32-True-1-sobel-1] __________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb373a830>, batch_size = 1
mode = 'sobel', order = 1, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        sobel_kernel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        diff_kernel_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        diff_kernel_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
        if mode == 'sobel':
            kernel_x, kernel_y = (sobel_kernel_x, sobel_kernel_y)
        else:
            kernel_x, kernel_y = (diff_kernel_x, diff_kernel_y)
        B, C, H, W = image.shape
        grad_x = F.conv2d(image.view(B * C, 1, H, W), kernel_x, padding=1, groups=1)
        grad_y = F.conv2d(image.view(B * C, 1, H, W), kernel_y, padding=1, groups=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0]
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-1-sobel-2] __________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb373a5c0>, batch_size = 2
mode = 'sobel', order = 1, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        sobel_kernel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        diff_kernel_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        diff_kernel_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
        if mode == 'sobel':
            kernel_x, kernel_y = (sobel_kernel_x, sobel_kernel_y)
        else:
            kernel_x, kernel_y = (diff_kernel_x, diff_kernel_y)
        B, C, H, W = image.shape
        grad_x = F.conv2d(image.view(B * C, 1, H, W), kernel_x, padding=1, groups=1)
        grad_y = F.conv2d(image.view(B * C, 1, H, W), kernel_y, padding=1, groups=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0]
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-1-diff-1] ___________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb373a680>, batch_size = 1
mode = 'diff', order = 1, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        sobel_kernel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        diff_kernel_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        diff_kernel_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
        if mode == 'sobel':
            kernel_x, kernel_y = (sobel_kernel_x, sobel_kernel_y)
        else:
            kernel_x, kernel_y = (diff_kernel_x, diff_kernel_y)
        B, C, H, W = image.shape
        grad_x = F.conv2d(image.view(B * C, 1, H, W), kernel_x, padding=1, groups=1)
        grad_y = F.conv2d(image.view(B * C, 1, H, W), kernel_y, padding=1, groups=1)
>       grad_x = grad_x.view(B, C, H, W)
E       RuntimeError: shape '[1, 3, 4, 4]' is invalid for input of size 72

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:40: RuntimeError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-1-diff-2] ___________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb373a740>, batch_size = 2
mode = 'diff', order = 1, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        sobel_kernel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        diff_kernel_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        diff_kernel_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
        if mode == 'sobel':
            kernel_x, kernel_y = (sobel_kernel_x, sobel_kernel_y)
        else:
            kernel_x, kernel_y = (diff_kernel_x, diff_kernel_y)
        B, C, H, W = image.shape
        grad_x = F.conv2d(image.view(B * C, 1, H, W), kernel_x, padding=1, groups=1)
        grad_y = F.conv2d(image.view(B * C, 1, H, W), kernel_y, padding=1, groups=1)
>       grad_x = grad_x.view(B, C, H, W)
E       RuntimeError: shape '[2, 3, 4, 4]' is invalid for input of size 144

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:40: RuntimeError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-2-sobel-1] __________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb373a440>, batch_size = 1
mode = 'sobel', order = 2, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 2, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:28: ValueError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-2-sobel-2] __________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb373ad70>, batch_size = 2
mode = 'sobel', order = 2, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 2, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:28: ValueError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-2-diff-1] ___________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb373ae30>, batch_size = 1
mode = 'diff', order = 2, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 2, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:28: ValueError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-2-diff-2] ___________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb373aef0>, batch_size = 2
mode = 'diff', order = 2, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 2, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:28: ValueError
__________ TestSpatialGradient.test_smoke[cpu-float32-False-1-diff-1] __________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb373b130>, batch_size = 1
mode = 'diff', order = 1, normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 1, normalized = False

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        sobel_kernel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        diff_kernel_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        diff_kernel_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
        if mode == 'sobel':
            kernel_x, kernel_y = (sobel_kernel_x, sobel_kernel_y)
        else:
            kernel_x, kernel_y = (diff_kernel_x, diff_kernel_y)
        B, C, H, W = image.shape
        grad_x = F.conv2d(image.view(B * C, 1, H, W), kernel_x, padding=1, groups=1)
        grad_y = F.conv2d(image.view(B * C, 1, H, W), kernel_y, padding=1, groups=1)
>       grad_x = grad_x.view(B, C, H, W)
E       RuntimeError: shape '[1, 3, 4, 4]' is invalid for input of size 72

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:40: RuntimeError
__________ TestSpatialGradient.test_smoke[cpu-float32-False-1-diff-2] __________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb373b1f0>, batch_size = 2
mode = 'diff', order = 1, normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 1, normalized = False

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        sobel_kernel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        diff_kernel_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        diff_kernel_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
        if mode == 'sobel':
            kernel_x, kernel_y = (sobel_kernel_x, sobel_kernel_y)
        else:
            kernel_x, kernel_y = (diff_kernel_x, diff_kernel_y)
        B, C, H, W = image.shape
        grad_x = F.conv2d(image.view(B * C, 1, H, W), kernel_x, padding=1, groups=1)
        grad_y = F.conv2d(image.view(B * C, 1, H, W), kernel_y, padding=1, groups=1)
>       grad_x = grad_x.view(B, C, H, W)
E       RuntimeError: shape '[2, 3, 4, 4]' is invalid for input of size 144

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:40: RuntimeError
_________ TestSpatialGradient.test_smoke[cpu-float32-False-2-sobel-1] __________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb373b2b0>, batch_size = 1
mode = 'sobel', order = 2, normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 2, normalized = False

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:28: ValueError
_________ TestSpatialGradient.test_smoke[cpu-float32-False-2-sobel-2] __________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb373b370>, batch_size = 2
mode = 'sobel', order = 2, normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 2, normalized = False

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:28: ValueError
__________ TestSpatialGradient.test_smoke[cpu-float32-False-2-diff-1] __________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb373b430>, batch_size = 1
mode = 'diff', order = 2, normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 2, normalized = False

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:28: ValueError
__________ TestSpatialGradient.test_smoke[cpu-float32-False-2-diff-2] __________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb373b4f0>, batch_size = 2
mode = 'diff', order = 2, normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 2, normalized = False

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:28: ValueError
_____________ TestSpatialGradient.test_cardinality[cpu-float32-1] ______________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb373b880>, batch_size = 1
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    def test_cardinality(self, batch_size, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       assert SpatialGradient()(inp).shape == (batch_size, 3, 2, 4, 4)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        sobel_kernel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        diff_kernel_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        diff_kernel_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
        if mode == 'sobel':
            kernel_x, kernel_y = (sobel_kernel_x, sobel_kernel_y)
        else:
            kernel_x, kernel_y = (diff_kernel_x, diff_kernel_y)
        B, C, H, W = image.shape
        grad_x = F.conv2d(image.view(B * C, 1, H, W), kernel_x, padding=1, groups=1)
        grad_y = F.conv2d(image.view(B * C, 1, H, W), kernel_y, padding=1, groups=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0]
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
_____________ TestSpatialGradient.test_cardinality[cpu-float32-2] ______________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb373b7c0>, batch_size = 2
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    def test_cardinality(self, batch_size, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       assert SpatialGradient()(inp).shape == (batch_size, 3, 2, 4, 4)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        sobel_kernel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        diff_kernel_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        diff_kernel_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
        if mode == 'sobel':
            kernel_x, kernel_y = (sobel_kernel_x, sobel_kernel_y)
        else:
            kernel_x, kernel_y = (diff_kernel_x, diff_kernel_y)
        B, C, H, W = image.shape
        grad_x = F.conv2d(image.view(B * C, 1, H, W), kernel_x, padding=1, groups=1)
        grad_y = F.conv2d(image.view(B * C, 1, H, W), kernel_y, padding=1, groups=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0]
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
______________________ TestSpatialGradient.test_exception ______________________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb373bb50>

    def test_exception(self):
        with pytest.raises(TypeError) as errinfo:
>           spatial_gradient(1)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = 1, mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
>       sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
E       AttributeError: 'int' object has no attribute 'dtype'

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:29: AttributeError
_______________ TestSpatialGradient.test_edges_norm[cpu-float32] _______________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb37681c0>
device = device(type='cpu'), dtype = torch.float32

    def test_edges_norm(self, device, dtype):
        inp = torch.tensor(
            [
                [
                    [
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.0, 0.0, 1.0, 0.0, 0.0],
                        [0.0, 1.0, 1.0, 1.0, 0.0],
                        [0.0, 0.0, 1.0, 0.0, 0.0],
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected = (
            torch.tensor(
                [
                    [
                        [
                            [
                                [0.0, 1.0, 0.0, -1.0, 0.0],
                                [1.0, 3.0, 0.0, -3.0, -1.0],
                                [2.0, 4.0, 0.0, -4.0, -2.0],
                                [1.0, 3.0, 0.0, -3.0, -1.0],
                                [0.0, 1.0, 0.0, -1.0, 0.0],
                            ],
                            [
                                [0.0, 1.0, 2.0, 1.0, 0.0],
                                [1.0, 3.0, 4.0, 3.0, 1.0],
                                [0.0, 0.0, 0.0, 0.0, 0],
                                [-1.0, -3.0, -4.0, -3.0, -1],
                                [0.0, -1.0, -2.0, -1.0, 0.0],
                            ],
                        ]
                    ]
                ],
                device=device,
                dtype=dtype,
            )
            / 8.0
        )
    
>       edges = spatial_gradient(inp, normalized=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0., 0.],
          [0., 0., 1., 0., 0.],
          [0., 1., 1., 1., 0.],
          [0., 0., 1., 0., 0.],
          [0., 0., 0., 0., 0.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        sobel_kernel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        diff_kernel_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        diff_kernel_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
        if mode == 'sobel':
            kernel_x, kernel_y = (sobel_kernel_x, sobel_kernel_y)
        else:
            kernel_x, kernel_y = (diff_kernel_x, diff_kernel_y)
        B, C, H, W = image.shape
        grad_x = F.conv2d(image.view(B * C, 1, H, W), kernel_x, padding=1, groups=1)
        grad_y = F.conv2d(image.view(B * C, 1, H, W), kernel_y, padding=1, groups=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0]
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
_______________ TestSpatialGradient.test_edges_sep[cpu-float32] ________________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb37684f0>
device = device(type='cpu'), dtype = torch.float32

    def test_edges_sep(self, device, dtype):
        inp = torch.tensor(
            [
                [
                    [
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.0, 0.0, 1.0, 0.0, 0.0],
                        [0.0, 1.0, 1.0, 1.0, 0.0],
                        [0.0, 0.0, 1.0, 0.0, 0.0],
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected = torch.tensor(
            [
                [
                    [
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 1.0, 0.0, -1.0, 0.0],
                            [1.0, 1.0, 0.0, -1.0, -1.0],
                            [0.0, 1.0, 0.0, -1.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 1.0, 0.0, 0.0],
                            [0.0, 1.0, 1.0, 1.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, -1.0, -1.0, -1.0, 0.0],
                            [0.0, 0.0, -1.0, 0.0, 0.0],
                        ],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       edges = spatial_gradient(inp, "diff", normalized=False)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:169: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0., 0.],
          [0., 0., 1., 0., 0.],
          [0., 1., 1., 1., 0.],
          [0., 0., 1., 0., 0.],
          [0., 0., 0., 0., 0.]]]])
mode = 'diff', order = 1, normalized = False

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        sobel_kernel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        diff_kernel_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        diff_kernel_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
        if mode == 'sobel':
            kernel_x, kernel_y = (sobel_kernel_x, sobel_kernel_y)
        else:
            kernel_x, kernel_y = (diff_kernel_x, diff_kernel_y)
        B, C, H, W = image.shape
        grad_x = F.conv2d(image.view(B * C, 1, H, W), kernel_x, padding=1, groups=1)
        grad_y = F.conv2d(image.view(B * C, 1, H, W), kernel_y, padding=1, groups=1)
>       grad_x = grad_x.view(B, C, H, W)
E       RuntimeError: shape '[1, 1, 5, 5]' is invalid for input of size 35

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:40: RuntimeError
_____________ TestSpatialGradient.test_edges_sep_norm[cpu-float32] _____________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb3768820>
device = device(type='cpu'), dtype = torch.float32

    def test_edges_sep_norm(self, device, dtype):
        inp = torch.tensor(
            [
                [
                    [
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.0, 0.0, 1.0, 0.0, 0.0],
                        [0.0, 1.0, 1.0, 1.0, 0.0],
                        [0.0, 0.0, 1.0, 0.0, 0.0],
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected = (
            torch.tensor(
                [
                    [
                        [
                            [
                                [0.0, 0.0, 0.0, 0.0, 0.0],
                                [0.0, 1.0, 0.0, -1.0, 0.0],
                                [1.0, 1.0, 0.0, -1.0, -1.0],
                                [0.0, 1.0, 0.0, -1.0, 0.0],
                                [0.0, 0.0, 0.0, 0.0, 0.0],
                            ],
                            [
                                [0.0, 0.0, 1.0, 0.0, 0.0],
                                [0.0, 1.0, 1.0, 1.0, 0.0],
                                [0.0, 0.0, 0.0, 0.0, 0.0],
                                [0.0, -1.0, -1.0, -1.0, 0.0],
                                [0.0, 0.0, -1.0, 0.0, 0.0],
                            ],
                        ]
                    ]
                ],
                device=device,
                dtype=dtype,
            )
            / 2.0
        )
    
>       edges = spatial_gradient(inp, "diff", normalized=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0., 0., 0.],
          [0., 0., 1., 0., 0.],
          [0., 1., 1., 1., 0.],
          [0., 0., 1., 0., 0.],
          [0., 0., 0., 0., 0.]]]])
mode = 'diff', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        sobel_kernel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        diff_kernel_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        diff_kernel_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
        if mode == 'sobel':
            kernel_x, kernel_y = (sobel_kernel_x, sobel_kernel_y)
        else:
            kernel_x, kernel_y = (diff_kernel_x, diff_kernel_y)
        B, C, H, W = image.shape
        grad_x = F.conv2d(image.view(B * C, 1, H, W), kernel_x, padding=1, groups=1)
        grad_y = F.conv2d(image.view(B * C, 1, H, W), kernel_y, padding=1, groups=1)
>       grad_x = grad_x.view(B, C, H, W)
E       RuntimeError: shape '[1, 1, 5, 5]' is invalid for input of size 35

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:40: RuntimeError
_____________ TestSpatialGradient.test_noncontiguous[cpu-float32] ______________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb3768b50>
device = device(type='cpu'), dtype = torch.float32

    def test_noncontiguous(self, device, dtype):
        batch_size = 3
        inp = torch.rand(3, 5, 5, device=device, dtype=dtype).expand(batch_size, -1, -1, -1)
    
>       actual = spatial_gradient(inp)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:224: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.6265, 0.6123, 0.1855, 0.2218, 0.4682],
          [0.2507, 0.2635, 0.2970, 0.5994, 0.7485],
          [0.9...54, 0.9826],
          [0.6249, 0.5852, 0.3572, 0.9444, 0.9852],
          [0.8204, 0.1015, 0.6601, 0.8950, 0.7730]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        sobel_kernel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        diff_kernel_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        diff_kernel_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
        if mode == 'sobel':
            kernel_x, kernel_y = (sobel_kernel_x, sobel_kernel_y)
        else:
            kernel_x, kernel_y = (diff_kernel_x, diff_kernel_y)
        B, C, H, W = image.shape
>       grad_x = F.conv2d(image.view(B * C, 1, H, W), kernel_x, padding=1, groups=1)
E       RuntimeError: view size is not compatible with input tensor's size and stride (at least one dimension spans across two contiguous subspaces). Use .reshape(...) instead.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:38: RuntimeError
___________________ TestSpatialGradient.test_gradcheck[cpu] ____________________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb3768e20>
device = device(type='cpu')

    def test_gradcheck(self, device):
        batch_size, channels, height, width = 1, 1, 3, 4
        img = torch.rand(batch_size, channels, height, width, device=device, dtype=torch.float64)
>       self.gradcheck(spatial_gradient, (img,))

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.2430, 0.4065, 0.1470, 0.5667],
          [0.9780, 0.7748, 0.5798, 0.1786],
          [0.0157, 0.1014, 0.3000, 0.1124]]]], dtype=torch.float64,
       requires_grad=True)
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        sobel_kernel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        diff_kernel_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        diff_kernel_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
        if mode == 'sobel':
            kernel_x, kernel_y = (sobel_kernel_x, sobel_kernel_y)
        else:
            kernel_x, kernel_y = (diff_kernel_x, diff_kernel_y)
        B, C, H, W = image.shape
        grad_x = F.conv2d(image.view(B * C, 1, H, W), kernel_x, padding=1, groups=1)
        grad_y = F.conv2d(image.view(B * C, 1, H, W), kernel_y, padding=1, groups=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0]
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
_________________ TestSpatialGradient.test_module[cpu-float32] _________________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb373bc40>
device = device(type='cpu'), dtype = torch.float32

    def test_module(self, device, dtype):
        img = torch.rand(2, 3, 4, 5, device=device, dtype=dtype)
        op = spatial_gradient
        op_module = SpatialGradient()
>       expected = op(img)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.6489, 0.5250, 0.2866, 0.7691, 0.4547],
          [0.7999, 0.6379, 0.8659, 0.2399, 0.6279],
          [0.6...17, 0.6048],
          [0.4906, 0.9718, 0.0385, 0.6932, 0.0508],
          [0.7384, 0.4230, 0.2678, 0.1215, 0.0589]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        sobel_kernel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        diff_kernel_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        diff_kernel_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
        if mode == 'sobel':
            kernel_x, kernel_y = (sobel_kernel_x, sobel_kernel_y)
        else:
            kernel_x, kernel_y = (diff_kernel_x, diff_kernel_y)
        B, C, H, W = image.shape
        grad_x = F.conv2d(image.view(B * C, 1, H, W), kernel_x, padding=1, groups=1)
        grad_y = F.conv2d(image.view(B * C, 1, H, W), kernel_y, padding=1, groups=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0]
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
_______ TestSpatialGradient.test_dynamo[cpu-float32-inductor-1-1-sobel] ________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb3769390>, batch_size = 1
order = 1, mode = 'sobel', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7fbd88b231c0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        sobel_kernel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        diff_kernel_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        diff_kernel_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
        if mode == 'sobel':
            kernel_x, kernel_y = (sobel_kernel_x, sobel_kernel_y)
        else:
            kernel_x, kernel_y = (diff_kernel_x, diff_kernel_y)
        B, C, H, W = image.shape
        grad_x = F.conv2d(image.view(B * C, 1, H, W), kernel_x, padding=1, groups=1)
        grad_y = F.conv2d(image.view(B * C, 1, H, W), kernel_y, padding=1, groups=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0]
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
________ TestSpatialGradient.test_dynamo[cpu-float32-inductor-1-1-diff] ________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb37692d0>, batch_size = 1
order = 1, mode = 'diff', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7fbd88b231c0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'diff', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        sobel_kernel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        diff_kernel_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        diff_kernel_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
        if mode == 'sobel':
            kernel_x, kernel_y = (sobel_kernel_x, sobel_kernel_y)
        else:
            kernel_x, kernel_y = (diff_kernel_x, diff_kernel_y)
        B, C, H, W = image.shape
        grad_x = F.conv2d(image.view(B * C, 1, H, W), kernel_x, padding=1, groups=1)
        grad_y = F.conv2d(image.view(B * C, 1, H, W), kernel_y, padding=1, groups=1)
>       grad_x = grad_x.view(B, C, H, W)
E       RuntimeError: shape '[1, 3, 10, 10]' is invalid for input of size 360

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:40: RuntimeError
_______ TestSpatialGradient.test_dynamo[cpu-float32-inductor-1-2-sobel] ________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb37691b0>, batch_size = 1
order = 2, mode = 'sobel', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7fbd88b231c0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'sobel', order = 2, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:28: ValueError
________ TestSpatialGradient.test_dynamo[cpu-float32-inductor-1-2-diff] ________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb37696c0>, batch_size = 1
order = 2, mode = 'diff', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7fbd88b231c0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'diff', order = 2, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:28: ValueError
_______ TestSpatialGradient.test_dynamo[cpu-float32-inductor-2-1-sobel] ________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb3769780>, batch_size = 2
order = 1, mode = 'sobel', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7fbd88b231c0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        sobel_kernel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        diff_kernel_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        diff_kernel_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
        if mode == 'sobel':
            kernel_x, kernel_y = (sobel_kernel_x, sobel_kernel_y)
        else:
            kernel_x, kernel_y = (diff_kernel_x, diff_kernel_y)
        B, C, H, W = image.shape
        grad_x = F.conv2d(image.view(B * C, 1, H, W), kernel_x, padding=1, groups=1)
        grad_y = F.conv2d(image.view(B * C, 1, H, W), kernel_y, padding=1, groups=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0]
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
________ TestSpatialGradient.test_dynamo[cpu-float32-inductor-2-1-diff] ________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb3769840>, batch_size = 2
order = 1, mode = 'diff', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7fbd88b231c0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'diff', order = 1, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
            raise ValueError('Currently, only first-order derivatives are supported.')
        sobel_kernel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        sobel_kernel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)
        diff_kernel_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        diff_kernel_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)
        if mode == 'sobel':
            kernel_x, kernel_y = (sobel_kernel_x, sobel_kernel_y)
        else:
            kernel_x, kernel_y = (diff_kernel_x, diff_kernel_y)
        B, C, H, W = image.shape
        grad_x = F.conv2d(image.view(B * C, 1, H, W), kernel_x, padding=1, groups=1)
        grad_y = F.conv2d(image.view(B * C, 1, H, W), kernel_y, padding=1, groups=1)
>       grad_x = grad_x.view(B, C, H, W)
E       RuntimeError: shape '[2, 3, 10, 10]' is invalid for input of size 720

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:40: RuntimeError
_______ TestSpatialGradient.test_dynamo[cpu-float32-inductor-2-2-sobel] ________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb3769900>, batch_size = 2
order = 2, mode = 'sobel', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7fbd88b231c0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'sobel', order = 2, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:28: ValueError
________ TestSpatialGradient.test_dynamo[cpu-float32-inductor-2-2-diff] ________

self = <test_sobel.TestSpatialGradient object at 0x7fbcb37699c0>, batch_size = 2
order = 2, mode = 'diff', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7fbd88b231c0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'diff', order = 2, normalized = True

    def spatial_gradient(image: torch.Tensor, mode: str='sobel', order: int=1, normalized: bool=False) -> torch.Tensor:
        """
        Computes the first-order image derivative in both x and y directions using a Sobel operator or simple difference.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (B, C, H, W).
            mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.
            order (int): Order of the derivatives. Currently, only first-order is supported. Defaults to 1.
            normalized (bool): Whether to normalize the output. Defaults to False.
    
        Returns:
            torch.Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).
        """
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        if order != 1:
>           raise ValueError('Currently, only first-order derivatives are supported.')
E           ValueError: Currently, only first-order derivatives are supported.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:28: ValueError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_exception
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_norm[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep_norm[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_noncontiguous[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_gradcheck[cpu]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_module[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-sobel]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-diff]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-sobel]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-diff]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-sobel]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-diff]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-sobel]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-diff]
========================= 31 failed, 3 passed in 1.70s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'cudagraphs', 'onnxrt', 'inductor', 'tvm', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 34 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_exception PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_norm[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep_norm[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_noncontiguous[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_module[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-sobel] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-diff] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-sobel] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-diff] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-sobel] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-diff] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-sobel] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-diff] PASSED

============================== 34 passed in 2.65s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'onnxrt', 'jit', 'tvm', 'cudagraphs', 'openxla', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 34 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_exception PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_norm[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep_norm[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_noncontiguous[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_module[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-sobel] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-diff] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-sobel] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-diff] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-sobel] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-diff] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-sobel] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-diff] PASSED

============================== 34 passed in 2.63s ==============================
