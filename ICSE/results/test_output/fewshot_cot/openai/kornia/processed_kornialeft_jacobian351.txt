output file:
processed_kornialeft_jacobian351.json
function:
left_jacobian
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-None]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-5]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-None] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-2]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'jit', 'cudagraphs', 'inductor', 'onnxrt', None, 'tvm'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 4 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-None] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-5] FAILED

=================================== FAILURES ===================================
_________________ TestSo3.test_left_jacobian[cpu-float32-None] _________________

self = <test_so3.TestSo3 object at 0x7eed9f96bf10>, device = device(type='cpu')
dtype = torch.float32, batch_size = None

    @pytest.mark.parametrize("batch_size", (None, 1, 2, 5))
    def test_left_jacobian(self, device, dtype, batch_size):
        vec = self._make_rand_data(device, dtype, batch_size, dims=3)
        Jl = So3.left_jacobian(vec)
        I = torch.eye(3, device=device, dtype=dtype).expand_as(Jl)  # noqa: E741
>       self.assert_close(vec[..., None], Jl @ vec[..., None])

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py:261: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[0.8188],
        [0.4247],
        [0.1156]])
expected = tensor([[[0.8188],
         [0.4247],
         [0.1156]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: The values for attribute 'shape' do not match: torch.Size([3, 1]) != torch.Size([1, 3, 1]).

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
__________________ TestSo3.test_left_jacobian[cpu-float32-2] ___________________

self = <test_so3.TestSo3 object at 0x7eed9f97c370>, device = device(type='cpu')
dtype = torch.float32, batch_size = 2

    @pytest.mark.parametrize("batch_size", (None, 1, 2, 5))
    def test_left_jacobian(self, device, dtype, batch_size):
        vec = self._make_rand_data(device, dtype, batch_size, dims=3)
>       Jl = So3.left_jacobian(vec)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py:259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/liegroup/so3.py:350: in left_jacobian
    return left_jacobian(vec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vec = tensor([[0.2871, 0.6592, 0.9790],
        [0.6949, 0.3397, 0.8841]])

    def left_jacobian(vec: torch.Tensor) -> torch.Tensor:
        """
        Compute the left Jacobian of SO(3) for a batch of vectors.
    
        Args:
            vec (Tensor): A tensor of shape (B, 3) where B is the batch size.
    
        Returns:
            Tensor: A tensor of shape (B, 3, 3) representing the left Jacobian matrix for each vector.
        """
        assert vec.shape[-1] == 3, 'Input tensor must have shape (B, 3)'
        theta = torch.norm(vec, dim=-1, keepdim=True)
        small_angle_mask = theta < 1e-06
    
        def skew_symmetric(v):
            zero = torch.zeros_like(v[..., 0])
            return torch.stack([zero, -v[..., 2], v[..., 1], v[..., 2], zero, -v[..., 0], -v[..., 1], v[..., 0], zero], dim=-1).reshape(-1, 3, 3)
        skew_vec = skew_symmetric(vec)
        theta_sq = theta ** 2
        sin_theta = torch.sin(theta)
        cos_theta = torch.cos(theta)
        J_small = torch.eye(3, device=vec.device).unsqueeze(0) + 0.5 * skew_vec
>       J_large = torch.eye(3, device=vec.device).unsqueeze(0) + (1 - cos_theta) / theta_sq * skew_vec + (theta - sin_theta) / (theta_sq * theta) * torch.bmm(skew_vec, skew_vec)
E       RuntimeError: The size of tensor a (2) must match the size of tensor b (3) at non-singleton dimension 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/liegroup/temp.py:33: RuntimeError
__________________ TestSo3.test_left_jacobian[cpu-float32-5] ___________________

self = <test_so3.TestSo3 object at 0x7eed9f97c430>, device = device(type='cpu')
dtype = torch.float32, batch_size = 5

    @pytest.mark.parametrize("batch_size", (None, 1, 2, 5))
    def test_left_jacobian(self, device, dtype, batch_size):
        vec = self._make_rand_data(device, dtype, batch_size, dims=3)
>       Jl = So3.left_jacobian(vec)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py:259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/liegroup/so3.py:350: in left_jacobian
    return left_jacobian(vec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vec = tensor([[0.7761, 0.2522, 0.8721],
        [0.0558, 0.4053, 0.5588],
        [0.9997, 0.5920, 0.5522],
        [0.2706, 0.3125, 0.0819],
        [0.2554, 0.6988, 0.1161]])

    def left_jacobian(vec: torch.Tensor) -> torch.Tensor:
        """
        Compute the left Jacobian of SO(3) for a batch of vectors.
    
        Args:
            vec (Tensor): A tensor of shape (B, 3) where B is the batch size.
    
        Returns:
            Tensor: A tensor of shape (B, 3, 3) representing the left Jacobian matrix for each vector.
        """
        assert vec.shape[-1] == 3, 'Input tensor must have shape (B, 3)'
        theta = torch.norm(vec, dim=-1, keepdim=True)
        small_angle_mask = theta < 1e-06
    
        def skew_symmetric(v):
            zero = torch.zeros_like(v[..., 0])
            return torch.stack([zero, -v[..., 2], v[..., 1], v[..., 2], zero, -v[..., 0], -v[..., 1], v[..., 0], zero], dim=-1).reshape(-1, 3, 3)
        skew_vec = skew_symmetric(vec)
        theta_sq = theta ** 2
        sin_theta = torch.sin(theta)
        cos_theta = torch.cos(theta)
        J_small = torch.eye(3, device=vec.device).unsqueeze(0) + 0.5 * skew_vec
>       J_large = torch.eye(3, device=vec.device).unsqueeze(0) + (1 - cos_theta) / theta_sq * skew_vec + (theta - sin_theta) / (theta_sq * theta) * torch.bmm(skew_vec, skew_vec)
E       RuntimeError: The size of tensor a (5) must match the size of tensor b (3) at non-singleton dimension 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/liegroup/temp.py:33: RuntimeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-None]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-5]
========================= 3 failed, 1 passed in 0.37s ==========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'inductor', 'tvm', 'openxla', 'cudagraphs', 'onnxrt', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 4 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-None] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-5] PASSED

============================== 4 passed in 0.16s ===============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'openxla', 'onnxrt', 'tvm', 'jit', 'inductor', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 4 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-None] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-5] PASSED

============================== 4 passed in 0.17s ===============================
