output file:
processed_korniafind_homography_lines_dlt114.json
function:
find_homography_lines_dlt
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-5]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_nocrash[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-5]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_gradcheck[cpu] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_smoke2[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-2]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_gradcheck[cpu]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_smoke2[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_nocrash[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-5] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'onnxrt', 'tvm', 'inductor', 'cudagraphs', 'openxla', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 19 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_smoke2[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_nocrash[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape[cpu-float32-1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape[cpu-float32-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape[cpu-float32-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape_noweights[cpu-float32-1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape_noweights[cpu-float32-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape_noweights[cpu-float32-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_points_noweights[cpu-float32-1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_points_noweights[cpu-float32-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_points_noweights[cpu-float32-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-5] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-5] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_gradcheck[cpu] FAILED

=================================== FAILURES ===================================
___________ TestFindHomographyFromLinesDLT.test_smoke2[cpu-float32] ____________

self = <tests.geometry.test_homography.TestFindHomographyFromLinesDLT object at 0x73819c31add0>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke2(self, device, dtype):
        points1st = torch.rand(4, 2, device=device, dtype=dtype)
        points1end = torch.rand(4, 2, device=device, dtype=dtype)
        points2st = torch.rand(4, 2, device=device, dtype=dtype)
        points2end = torch.rand(4, 2, device=device, dtype=dtype)
        ls1 = torch.stack([points1st, points1end], dim=1)
        ls2 = torch.stack([points2st, points2end], dim=1)
>       H = find_homography_lines_dlt(ls1, ls2, None)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/homography.py:211: in find_homography_lines_dlt
    return find_homography_lines_dlt(ls1, ls2, weights)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ls1 = tensor([[[0.2975, 0.0398],
         [0.8135, 0.8352]],

        [[0.0322, 0.5076],
         [0.8258, 0.8297]],

        [[0.1313, 0.7697],
         [0.1211, 0.0280]],

        [[0.0437, 0.4077],
         [0.4793, 0.0488]]])
ls2 = tensor([[[0.6748, 0.7481],
         [0.5280, 0.2821]],

        [[0.8512, 0.9998],
         [0.4637, 0.1620]],

        [[0.5963, 0.6321],
         [0.7411, 0.0140]],

        [[0.8143, 0.8067],
         [0.0799, 0.2511]]])
weights = None

    def find_homography_lines_dlt(ls1, ls2, weights=None):
        """
        Computes the homography matrix using the DLT formulation for line correspondences.
    
        Args:
            ls1 (torch.Tensor): Tensor of shape (B, N, 2, 2) representing the first set of line segments.
            ls2 (torch.Tensor): Tensor of shape (B, N, 2, 2) representing the second set of line segments.
            weights (torch.Tensor, optional): Tensor of shape (B, N) representing weights for each line correspondence.
    
        Returns:
            torch.Tensor: Homography matrix of shape (B, 3, 3).
        """
>       B, N, _, _ = ls1.shape
E       ValueError: not enough values to unpack (expected 4, got 3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/temp.py:25: ValueError
___________ TestFindHomographyFromLinesDLT.test_nocrash[cpu-float32] ___________

self = <tests.geometry.test_homography.TestFindHomographyFromLinesDLT object at 0x73819c31b100>
device = device(type='cpu'), dtype = torch.float32

    def test_nocrash(self, device, dtype):
        points1st = torch.rand(1, 4, 2, device=device, dtype=dtype)
        points1end = torch.rand(1, 4, 2, device=device, dtype=dtype)
        points2st = torch.rand(1, 4, 2, device=device, dtype=dtype)
        points2end = torch.rand(1, 4, 2, device=device, dtype=dtype)
        weights = torch.ones(1, 4, device=device, dtype=dtype)
        points1st[0, 0, 0] = float("nan")
        ls1 = torch.stack([points1st, points1end], dim=2)
        ls2 = torch.stack([points2st, points2end], dim=2)
>       H = find_homography_lines_dlt(ls1, ls2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py:282: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/homography.py:211: in find_homography_lines_dlt
    return find_homography_lines_dlt(ls1, ls2, weights)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ls1 = tensor([[[[   nan, 0.3929],
          [0.6115, 0.7712]],

         [[0.6439, 0.6410],
          [0.2968, 0.1332]],

         [[0.7200, 0.6356],
          [0.9355, 0.8610]],

         [[0.3633, 0.9443],
          [0.5325, 0.2802]]]])
ls2 = tensor([[[[0.4867, 0.3865],
          [0.8373, 0.8923]],

         [[0.2956, 0.8390],
          [0.0210, 0.1552]],

         [[0.8422, 0.8532],
          [0.5286, 0.3186]],

         [[0.1550, 0.0412],
          [0.2717, 0.8090]]]])
weights = tensor([[1., 1., 1., 1.]])

    def find_homography_lines_dlt(ls1, ls2, weights=None):
        """
        Computes the homography matrix using the DLT formulation for line correspondences.
    
        Args:
            ls1 (torch.Tensor): Tensor of shape (B, N, 2, 2) representing the first set of line segments.
            ls2 (torch.Tensor): Tensor of shape (B, N, 2, 2) representing the second set of line segments.
            weights (torch.Tensor, optional): Tensor of shape (B, N) representing weights for each line correspondence.
    
        Returns:
            torch.Tensor: Homography matrix of shape (B, 3, 3).
        """
        B, N, _, _ = ls1.shape
        H = torch.zeros((B, 3, 3), dtype=ls1.dtype, device=ls1.device)
        for b in range(B):
            A = []
            for n in range(N):
                x1, y1 = ls1[b, n, 0]
                x2, y2 = ls1[b, n, 1]
                x1_prime, y1_prime = ls2[b, n, 0]
                x2_prime, y2_prime = ls2[b, n, 1]
                l1 = torch.tensor([y2 - y1, x1 - x2, x2 * y1 - x1 * y2], device=ls1.device)
                l2 = torch.tensor([y2_prime - y1_prime, x1_prime - x2_prime, x2_prime * y1_prime - x1_prime * y2_prime], device=ls1.device)
                A.append(torch.outer(l2, l1).flatten())
            A = torch.stack(A)
            if weights is not None:
                W = torch.diag(weights[b])
                A = W @ A
>           _, _, V = torch.svd(A)
E           torch._C._LinAlgError: linalg.svd: The algorithm failed to converge because the input matrix contained non-finite values.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/temp.py:41: _LinAlgError
_______ TestFindHomographyFromLinesDLT.test_clean_points[cpu-float32-1] ________

self = <tests.geometry.test_homography.TestFindHomographyFromLinesDLT object at 0x73819c34c7c0>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_clean_points(self, batch_size, device, dtype):
        # generate input data
        points_src_st = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
        points_src_end = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
    
        H = kornia.eye_like(3, points_src_st)
        H = H * 0.3 * torch.rand_like(H)
        H = H / H[:, 2:3, 2:3]
        points_dst_st = kornia.geometry.transform_points(H, points_src_st)
        points_dst_end = kornia.geometry.transform_points(H, points_src_end)
    
        ls1 = torch.stack([points_src_st, points_src_end], axis=2)
        ls2 = torch.stack([points_dst_st, points_dst_end], axis=2)
        # compute transform from source to target
        dst_homo_src = find_homography_lines_dlt(ls1, ls2, None)
        rtol = 1e-3
        atol = 1e-4
        if dtype not in (torch.float32, torch.float64):
            rtol = 5e-3
            atol = 1e-3
>       self.assert_close(
            kornia.geometry.transform_points(dst_homo_src, points_src_st), points_dst_st, rtol=rtol, atol=atol
        )

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py:347: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[-0.1681, -0.5311],
         [-0.2060, -0.7548],
         [-0.2800, -1.1924],
         [-0.2467, -0.9954],
  ...,
         [-0.1697, -0.5405],
         [-0.1614, -0.4912],
         [-0.1877, -0.6469],
         [-0.1991, -0.7142]]])
expected = tensor([[[0.2614, 0.4697],
         [0.4247, 0.2763],
         [0.0584, 0.2309],
         [0.1270, 0.2625],
         [... 0.0464],
         [0.3858, 0.4241],
         [0.5101, 0.4345],
         [0.3064, 0.3659],
         [0.0489, 0.3943]]])
rtol = 0.001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 20 / 20 (100.0%)
E       Greatest absolute difference: 2.715329885482788 at index (0, 5, 1) (up to 0.0001 allowed)
E       Greatest relative difference: 58.56600570678711 at index (0, 5, 1) (up to 0.001 allowed)

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
_______ TestFindHomographyFromLinesDLT.test_clean_points[cpu-float32-2] ________

self = <tests.geometry.test_homography.TestFindHomographyFromLinesDLT object at 0x73819c34c700>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_clean_points(self, batch_size, device, dtype):
        # generate input data
        points_src_st = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
        points_src_end = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
    
        H = kornia.eye_like(3, points_src_st)
        H = H * 0.3 * torch.rand_like(H)
        H = H / H[:, 2:3, 2:3]
        points_dst_st = kornia.geometry.transform_points(H, points_src_st)
        points_dst_end = kornia.geometry.transform_points(H, points_src_end)
    
        ls1 = torch.stack([points_src_st, points_src_end], axis=2)
        ls2 = torch.stack([points_dst_st, points_dst_end], axis=2)
        # compute transform from source to target
        dst_homo_src = find_homography_lines_dlt(ls1, ls2, None)
        rtol = 1e-3
        atol = 1e-4
        if dtype not in (torch.float32, torch.float64):
            rtol = 5e-3
            atol = 1e-3
>       self.assert_close(
            kornia.geometry.transform_points(dst_homo_src, points_src_st), points_dst_st, rtol=rtol, atol=atol
        )

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py:347: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[ 0.0214, -0.0498],
         [ 0.0320, -0.0923],
         [ 0.0147, -0.0228],
         [ 0.0143, -0.0210],
  ...,
         [ 3.3367, -3.4404],
         [-0.4651, -0.0143],
         [-1.7380,  1.1329],
         [-2.0872,  1.4475]]])
expected = tensor([[[0.7552, 0.0065],
         [0.7728, 0.0035],
         [0.3596, 0.0141],
         [0.2713, 0.0153],
         [... 0.0859],
         [0.1422, 0.5000],
         [0.2210, 0.2600],
         [0.0843, 0.1114],
         [0.1742, 0.5330]]])
rtol = 0.001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 40 / 40 (100.0%)
E       Greatest absolute difference: 3.940377712249756 at index (1, 6, 1) (up to 0.0001 allowed)
E       Greatest relative difference: 139.98355102539062 at index (0, 9, 1) (up to 0.001 allowed)

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
_______ TestFindHomographyFromLinesDLT.test_clean_points[cpu-float32-5] ________

self = <tests.geometry.test_homography.TestFindHomographyFromLinesDLT object at 0x73819c34ca00>
batch_size = 5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_clean_points(self, batch_size, device, dtype):
        # generate input data
        points_src_st = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
        points_src_end = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
    
        H = kornia.eye_like(3, points_src_st)
        H = H * 0.3 * torch.rand_like(H)
        H = H / H[:, 2:3, 2:3]
        points_dst_st = kornia.geometry.transform_points(H, points_src_st)
        points_dst_end = kornia.geometry.transform_points(H, points_src_end)
    
        ls1 = torch.stack([points_src_st, points_src_end], axis=2)
        ls2 = torch.stack([points_dst_st, points_dst_end], axis=2)
        # compute transform from source to target
        dst_homo_src = find_homography_lines_dlt(ls1, ls2, None)
        rtol = 1e-3
        atol = 1e-4
        if dtype not in (torch.float32, torch.float64):
            rtol = 5e-3
            atol = 1e-3
>       self.assert_close(
            kornia.geometry.transform_points(dst_homo_src, points_src_st), points_dst_st, rtol=rtol, atol=atol
        )

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py:347: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[ 1.2270e-01, -2.1549e-01],
         [ 1.1039e-01, -1.3936e-01],
         [ 1.3135e-01, -2.6899e-01],
       ...e+01],
         [-1.6497e+01,  1.5419e+01],
         [-4.2730e+02,  2.9645e+02],
         [-3.4935e+01,  2.8033e+01]]])
expected = tensor([[[4.7449e-01, 7.4928e-02],
         [6.0855e-01, 1.1820e-01],
         [5.3113e-01, 6.1586e-02],
         [1.5...6.5899e+00],
         [1.2500e+01, 1.5733e+00],
         [7.8466e+00, 1.2162e+01],
         [1.0749e+01, 7.7393e+00]]])
rtol = 0.001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 100 / 100 (100.0%)
E       Greatest absolute difference: 435.1458435058594 at index (4, 8, 0) (up to 0.0001 allowed)
E       Greatest relative difference: 3256.7568359375 at index (0, 7, 1) (up to 0.001 allowed)

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
_____ TestFindHomographyFromLinesDLT.test_clean_points_iter[cpu-float32-1] _____

self = <tests.geometry.test_homography.TestFindHomographyFromLinesDLT object at 0x73819c34cd90>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_clean_points_iter(self, batch_size, device, dtype):
        # generate input data
        points_src_st = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
        points_src_end = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
    
        H = kornia.eye_like(3, points_src_st)
        H = H * 0.3 * torch.rand_like(H)
        H = H / H[:, 2:3, 2:3]
        points_dst_st = kornia.geometry.transform_points(H, points_src_st)
        points_dst_end = kornia.geometry.transform_points(H, points_src_end)
    
        ls1 = torch.stack([points_src_st, points_src_end], axis=2)
        ls2 = torch.stack([points_dst_st, points_dst_end], axis=2)
        # compute transform from source to target
        dst_homo_src = find_homography_lines_dlt_iterated(ls1, ls2, None, 5)
        rtol = 1e-3
        atol = 1e-4
        if dtype not in (torch.float32, torch.float64):
            rtol = 5e-3
            atol = 1e-3
>       self.assert_close(
            kornia.geometry.transform_points(dst_homo_src, points_src_st), points_dst_st, rtol=rtol, atol=atol
        )

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py:372: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[-0.1355, -0.9220],
         [-0.0745, -0.7525],
         [-0.1479, -0.9566],
         [-0.2109, -1.1316],
  ...,
         [-0.1446, -0.9473],
         [-0.3604, -1.5475],
         [-0.3933, -1.6389],
         [-0.1557, -0.9783]]])
expected = tensor([[[0.1565, 0.5349],
         [0.1611, 0.8387],
         [0.0101, 0.8244],
         [0.2221, 0.0967],
         [... 0.6870],
         [0.1726, 0.4615],
         [0.1469, 0.0116],
         [0.0803, 0.2060],
         [0.2303, 0.2798]]])
rtol = 0.001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 20 / 20 (100.0%)
E       Greatest absolute difference: 1.8448987007141113 at index (0, 8, 1) (up to 0.0001 allowed)
E       Greatest relative difference: 134.97389221191406 at index (0, 7, 1) (up to 0.001 allowed)

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
_____ TestFindHomographyFromLinesDLT.test_clean_points_iter[cpu-float32-2] _____

self = <tests.geometry.test_homography.TestFindHomographyFromLinesDLT object at 0x73819c34ccd0>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_clean_points_iter(self, batch_size, device, dtype):
        # generate input data
        points_src_st = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
        points_src_end = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
    
        H = kornia.eye_like(3, points_src_st)
        H = H * 0.3 * torch.rand_like(H)
        H = H / H[:, 2:3, 2:3]
        points_dst_st = kornia.geometry.transform_points(H, points_src_st)
        points_dst_end = kornia.geometry.transform_points(H, points_src_end)
    
        ls1 = torch.stack([points_src_st, points_src_end], axis=2)
        ls2 = torch.stack([points_dst_st, points_dst_end], axis=2)
        # compute transform from source to target
        dst_homo_src = find_homography_lines_dlt_iterated(ls1, ls2, None, 5)
        rtol = 1e-3
        atol = 1e-4
        if dtype not in (torch.float32, torch.float64):
            rtol = 5e-3
            atol = 1e-3
>       self.assert_close(
            kornia.geometry.transform_points(dst_homo_src, points_src_st), points_dst_st, rtol=rtol, atol=atol
        )

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py:372: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[-0.8070,  0.3399],
         [ 4.2367, -1.0415],
         [ 2.3394, -0.5218],
         [-0.8760,  0.3588],
  ...,
         [-4.8277, -2.9114],
         [-4.1178, -2.1400],
         [-6.0222, -4.2092],
         [-3.3802, -1.3386]]])
expected = tensor([[[0.5462, 0.0064],
         [0.2259, 0.0626],
         [0.3154, 0.1046],
         [0.5930, 0.0166],
         [... 1.6369],
         [0.1610, 2.3851],
         [1.6146, 2.0472],
         [2.3061, 0.2901],
         [3.2183, 1.8937]]])
rtol = 0.001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 40 / 40 (100.0%)
E       Greatest absolute difference: 22.238637924194336 at index (0, 6, 0) (up to 0.0001 allowed)
E       Greatest relative difference: 131.36370849609375 at index (1, 4, 1) (up to 0.001 allowed)

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
_____ TestFindHomographyFromLinesDLT.test_clean_points_iter[cpu-float32-5] _____

self = <tests.geometry.test_homography.TestFindHomographyFromLinesDLT object at 0x73819c34cfd0>
batch_size = 5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_clean_points_iter(self, batch_size, device, dtype):
        # generate input data
        points_src_st = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
        points_src_end = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
    
        H = kornia.eye_like(3, points_src_st)
        H = H * 0.3 * torch.rand_like(H)
        H = H / H[:, 2:3, 2:3]
        points_dst_st = kornia.geometry.transform_points(H, points_src_st)
        points_dst_end = kornia.geometry.transform_points(H, points_src_end)
    
        ls1 = torch.stack([points_src_st, points_src_end], axis=2)
        ls2 = torch.stack([points_dst_st, points_dst_end], axis=2)
        # compute transform from source to target
        dst_homo_src = find_homography_lines_dlt_iterated(ls1, ls2, None, 5)
        rtol = 1e-3
        atol = 1e-4
        if dtype not in (torch.float32, torch.float64):
            rtol = 5e-3
            atol = 1e-3
>       self.assert_close(
            kornia.geometry.transform_points(dst_homo_src, points_src_st), points_dst_st, rtol=rtol, atol=atol
        )

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py:372: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[ 5.1151e+00, -6.0464e+00],
         [ 2.1670e+01, -2.6382e+01],
         [ 3.9410e+01, -4.8173e+01],
       ...e+00],
         [-3.8505e+00, -3.0847e+00],
         [-2.7514e+00, -2.3971e+00],
         [-3.7089e+00, -2.9961e+00]]])
expected = tensor([[[1.7071e+00, 4.7913e+00],
         [1.2796e+00, 1.5794e+00],
         [4.8737e+00, 3.1452e+00],
         [3.5...4.0034e+00],
         [2.9117e+00, 9.9405e-01],
         [2.4341e+00, 3.9502e+00],
         [1.9340e+00, 2.9352e+00]]])
rtol = 0.001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 100 / 100 (100.0%)
E       Greatest absolute difference: 130.9705352783203 at index (3, 3, 0) (up to 0.0001 allowed)
E       Greatest relative difference: 1710.12744140625 at index (3, 3, 0) (up to 0.001 allowed)

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
______________ TestFindHomographyFromLinesDLT.test_gradcheck[cpu] ______________

self = <tests.geometry.test_homography.TestFindHomographyFromLinesDLT object at 0x73819c31aef0>
device = device(type='cpu')

    @pytest.mark.grad()
    def test_gradcheck(self, device):
        points_src_st = torch.rand(1, 10, 2, device=device, dtype=torch.float64, requires_grad=True)
        points_src_end = torch.rand(1, 10, 2, device=device, dtype=torch.float64, requires_grad=True)
    
        points_dst_st = torch.rand_like(points_src_st)
        points_dst_end = torch.rand_like(points_src_end)
        weights = torch.ones_like(points_src_st)[..., 0]
        ls1 = torch.stack([points_src_st, points_src_end], axis=2)
        ls2 = torch.stack([points_dst_st, points_dst_end], axis=2)
    
>       self.gradcheck(find_homography_lines_dlt, (ls1, ls2, weights), rtol=1e-6, atol=1e-6)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py:387: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2081: in _gradcheck_helper
    _gradcheck_real_imag(
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:1491: in _gradcheck_real_imag
    gradcheck_fn(
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:1925: in _fast_gradcheck
    _check_analytical_numerical_equal(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

all_analytical = [[tensor(0., dtype=torch.float64), tensor(0., dtype=torch.float64), tensor(0.0057, dtype=torch.float64)]]
all_numerical = [[tensor(-0.1643, dtype=torch.float64)], [tensor(-0.0351, dtype=torch.float64)], [tensor(0.0057, dtype=torch.float64)]]
complex_indices = None
tupled_inputs = (tensor([[[[0.6842, 0.1516],
          [0.9010, 0.2585]],

         [[0.8469, 0.6002],
          [0.2081, 0.8365]],

 ...equires_grad=True), tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]], dtype=torch.float64,
       requires_grad=True))
outputs = (tensor([[[-0.2766, -0.0601, -0.3221],
         [-0.2803, -0.1710, -0.4311],
         [-0.3886, -0.1884, -0.5796]]], dtype=torch.float64,
       grad_fn=<CopySlices>),)
func = <function find_homography_lines_dlt at 0x7382097fd360>
all_v = [tensor([0.1221, 0.2567, 0.2039, 0.3529, 0.3928, 0.4205, 0.4353, 0.3401, 0.3420],
       dtype=torch.float64)]
all_u = [tensor([0.0748, 0.2441, 0.0938, 0.1128, 0.2202, 0.1280, 0.0201, 0.2718, 0.2000,
        0.1196, 0.0237, 0.1372, 0.046... tensor([0.4585, 0.1582, 0.0953, 0.2457, 0.4603, 0.2261, 0.2524, 0.0384, 0.6044,
        0.0423], dtype=torch.float64)]
rtol = 1e-06, atol = 1e-06, eps = 1e-06, test_imag = False

    def _check_analytical_numerical_equal(
        all_analytical,
        all_numerical,
        complex_indices,
        tupled_inputs,
        outputs,
        func,
        all_v,
        all_u,
        rtol,
        atol,
        eps,
        test_imag,
        *,
        is_forward_ad=False,
    ):
        for i, all_numerical_for_input_i in enumerate(all_numerical):
            for j, n in enumerate(all_numerical_for_input_i):
                # Forward AD generates the transpose of what this function expects
                if is_forward_ad:
                    a = all_analytical[i][j]
                else:
                    a = all_analytical[j][i]
                n = n.to(device=a.device)
                updated_atol = _adjusted_atol(atol, all_u[i], all_v[j] if all_v else None)
                if not _allclose_with_type_promotion(a, n.to(a.device), rtol, updated_atol):
                    jacobians_str = _run_slow_mode_and_get_error(
                        func, tupled_inputs, outputs, i, j, rtol, atol, eps, is_forward_ad
                    )
>                   raise GradcheckError(
                        _get_notallclose_msg(
                            a, n, j, i, complex_indices, test_imag, is_forward_ad
                        )
                        + jacobians_str
                    )
E                   torch.autograd.gradcheck.GradcheckError: Jacobian mismatch for output 0 with respect to input 0,
E                   numerical:tensor(-0.1643, dtype=torch.float64)
E                   analytical:tensor(0., dtype=torch.float64)
E                   
E                   The above quantities relating the numerical and analytical jacobians are computed 
E                   in fast mode. See: https://github.com/pytorch/pytorch/issues/53876 for more background 
E                   about fast mode. Below, we recompute numerical and analytical jacobians in slow mode:
E                   
E                   Numerical:
E                    tensor([[-6.3129e-02, -2.5585e-02, -6.8051e-02, -3.5613e-03,  6.3878e-02,
E                             5.6580e-02, -4.5377e-02,  3.9778e-02,  2.8897e-02],
E                           [ 2.5602e-01,  1.4312e-03,  2.3069e-01,  8.0336e-02, -1.4926e-01,
E                            -1.9837e-02,  3.5535e-02, -2.9069e-01, -1.5997e-01],
E                           [ 1.3927e-02,  7.3882e-03,  6.0566e-03, -1.1871e-03, -3.0991e-02,
E                            -4.2741e-02,  5.1892e-02, -3.1711e-03, -3.0396e-03],
E                           [-1.5623e-01,  3.5475e-02, -1.0496e-01, -7.0705e-02,  8.2558e-02,
E                            -8.2307e-03, -4.8748e-02,  2.1645e-01,  1.0752e-01],
E                           [-1.9966e-01, -8.5851e-02, -2.4467e-01,  8.7488e-03,  1.6504e-01,
E                             1.3306e-01, -4.8987e-02,  1.2182e-01,  8.1535e-02],
E                           [-4.8625e-01, -2.1916e-01, -6.1457e-01,  2.3587e-02,  4.1646e-01,
E                             3.1136e-01, -9.3017e-02,  3.1835e-01,  1.8939e-01],
E                           [-2.7637e-01, -1.1646e-01, -3.1737e-01,  5.6456e-03,  2.3589e-01,
E                             2.3090e-01, -1.3828e-01,  1.4078e-01,  1.2327e-01],
E                           [-8.0067e-01, -3.2776e-01, -9.0486e-01,  1.5328e-02,  6.6741e-01,
E                             6.7256e-01, -4.1324e-01,  3.9157e-01,  3.6429e-01],
E                           [ 7.2306e-01,  3.1954e-01,  9.0424e-01,  5.0717e-02, -6.4725e-01,
E                            -4.3967e-01,  1.7819e-01, -5.1591e-01, -3.3913e-01],
E                           [-2.1522e+00, -9.7848e-01, -2.7019e+00, -8.4691e-02,  1.9645e+00,
E                             1.4023e+00, -5.8785e-01,  1.4977e+00,  9.5600e-01],
E                           [-9.3496e-01, -4.1556e-01, -1.1704e+00, -5.8884e-02,  8.3975e-01,
E                             5.7616e-01, -2.3402e-01,  6.6361e-01,  4.3324e-01],
E                           [ 2.4123e+00,  1.0964e+00,  3.0287e+00,  9.4718e-02, -2.2009e+00,
E                            -1.5699e+00,  6.5639e-01, -1.6790e+00, -1.0715e+00],
E                           [ 3.6244e-01,  1.7193e-01,  4.6512e-01, -8.3748e-02, -3.1885e-01,
E                            -2.6262e-01,  6.0927e-02, -2.1566e-01, -9.0161e-02],
E                           [ 1.1293e-01,  5.3847e-02,  1.4448e-01, -1.9600e-02, -1.0147e-01,
E                            -8.2211e-02,  2.3744e-02, -6.9183e-02, -3.2648e-02],
E                           [ 3.9358e-01,  1.8694e-01,  5.1435e-01, -2.2775e-01, -3.1548e-01,
E                            -3.0122e-01, -6.5480e-03, -1.8835e-01, -1.9893e-04],
E                           [ 1.6064e-01,  7.6014e-02,  2.0995e-01, -9.3120e-02, -1.2807e-01,
E                            -1.2182e-01, -4.0661e-03, -7.7009e-02, -4.9309e-05],
E                           [ 1.0650e-01,  6.9066e-02,  1.3756e-01, -2.1418e-02, -1.7704e-01,
E                            -1.7488e-01,  1.4162e-01, -9.1129e-02, -7.1354e-03],
E                           [-1.1806e-01, -1.0792e-02, -1.8624e-01, -1.6577e-02, -8.8589e-02,
E                            -2.1316e-01,  3.4060e-01,  9.4263e-02,  9.4624e-02],
E                           [-3.7400e-01, -1.9625e-01, -4.7438e-01,  2.8239e-02,  4.3537e-01,
E                             3.7786e-01, -2.3764e-01,  2.7417e-01,  1.0959e-01],
E                           [ 8.2161e-01,  3.4531e-01,  1.0721e+00, -1.3640e-03, -5.9087e-01,
E                            -3.2071e-01, -8.8050e-02, -5.7568e-01, -3.6409e-01],
E                           [ 3.1904e-01,  5.0516e-01,  7.8558e-01, -1.2794e-01, -3.4536e-01,
E                            -3.3796e-01, -2.7212e-02, -7.4205e-02, -1.8370e-01],
E                           [-5.0861e-02, -8.3063e-02, -1.2786e-01,  2.1341e-02,  5.5665e-02,
E                             5.5076e-02,  4.7337e-03,  1.0815e-02,  2.9540e-02],
E                           [-1.1139e-01, -1.0769e-01, -1.9672e-01,  2.0912e-02,  1.1578e-01,
E                             1.0534e-01, -2.7069e-02,  4.8653e-02,  5.3367e-02],
E                           [ 1.7681e-02,  1.9555e-02,  3.3765e-02, -4.2397e-03, -1.8981e-02,
E                            -1.7908e-02,  3.9396e-03, -6.7323e-03, -8.7143e-03],
E                           [-3.3972e-01, -2.0620e-01, -5.1049e-01, -3.5574e-05,  2.3980e-01,
E                             1.2110e-01,  1.1873e-01,  1.7794e-01,  1.6897e-01],
E                           [ 6.1400e-02,  1.3691e-02,  3.0752e-02,  6.9662e-03, -9.0302e-02,
E                            -1.0903e-01,  1.4071e-01, -3.5598e-02, -2.6235e-02],
E                           [ 3.7331e-01,  2.1606e-01,  5.7162e-01,  1.8172e-02, -2.1802e-01,
E                            -5.3749e-02, -2.2182e-01, -2.0759e-01, -2.0651e-01],
E                           [-8.7683e-02, -2.1404e-02, -7.8579e-02, -2.1157e-02,  7.3259e-02,
E                             5.6330e-02, -6.0045e-02,  5.8801e-02,  5.5615e-02],
E                           [ 2.4139e-01,  1.3953e-02,  8.4386e-02,  1.6189e-01, -1.5368e-01,
E                            -1.0063e-01,  2.6340e-01, -7.5301e-02, -2.7382e-01],
E                           [ 3.1990e-01,  6.5514e-02,  2.0786e-01,  1.4448e-01, -2.3610e-01,
E                            -1.6731e-01,  2.6974e-01, -1.3074e-01, -2.8916e-01],
E                           [ 1.6520e-02,  9.3698e-02,  1.9463e-01, -1.4755e-01, -8.8138e-02,
E                            -1.0283e-01, -1.1505e-01, -6.9778e-02,  1.4792e-01],
E                           [-2.0639e-02,  5.9401e-02,  1.1589e-01, -1.2784e-01, -4.4501e-02,
E                            -6.8775e-02, -9.7603e-02, -3.7602e-02,  1.4307e-01],
E                           [ 1.8940e-01,  7.1225e-02,  2.0338e-01,  7.6207e-03, -1.6541e-01,
E                            -1.3572e-01,  9.1839e-02, -1.2342e-01, -8.6219e-02],
E                           [ 2.8903e-01,  1.1538e-01,  3.1908e-01,  7.2530e-03, -2.5585e-01,
E                            -2.1079e-01,  1.3444e-01, -1.8586e-01, -1.2822e-01],
E                           [-1.0301e+00, -4.4471e-01, -1.1946e+00, -3.4470e-03,  9.2261e-01,
E                             7.4995e-01, -4.1765e-01,  6.5798e-01,  4.3951e-01],
E                           [-1.1139e+00, -4.8183e-01, -1.2916e+00, -3.1580e-03,  9.9878e-01,
E                             8.1345e-01, -4.5410e-01,  7.1034e-01,  4.7485e-01],
E                           [ 5.4994e-01, -5.4056e-02,  6.3583e-01,  9.4724e-02, -6.9085e-01,
E                            -2.9518e-01,  2.8966e-01, -6.8842e-01, -2.0319e-01],
E                           [ 9.0175e-01, -8.8628e-02,  1.0426e+00,  1.5532e-01, -1.1328e+00,
E                            -4.8402e-01,  4.7496e-01, -1.1288e+00, -3.3318e-01],
E                           [-1.7579e-01,  1.7520e-02, -2.0294e-01, -3.0445e-02,  2.2080e-01,
E                             9.4318e-02, -9.2916e-02,  2.2017e-01,  6.5056e-02],
E                           [-2.8783e-01,  2.8678e-02, -3.3228e-01, -4.9846e-02,  3.6152e-01,
E                             1.5443e-01, -1.5213e-01,  3.6049e-01,  1.0652e-01]],
E                          dtype=torch.float64)
E                   Analytical:
E                   tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.]], dtype=torch.float64)
E                   
E                   The max per-element difference (slow mode) is: 3.0287198825029726.

/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:1854: GradcheckError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_smoke2[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_nocrash[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_gradcheck[cpu]
========================= 9 failed, 10 passed in 0.63s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'cudagraphs', 'inductor', 'openxla', 'tvm', 'onnxrt', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 19 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_smoke2[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_nocrash[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape[cpu-float32-1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape[cpu-float32-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape[cpu-float32-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape_noweights[cpu-float32-1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape_noweights[cpu-float32-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape_noweights[cpu-float32-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_points_noweights[cpu-float32-1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_points_noweights[cpu-float32-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_points_noweights[cpu-float32-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_gradcheck[cpu] PASSED

=============================== warnings summary ===============================
tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_nocrash[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/homography.py:309: RuntimeWarning: SVD did not converge
    warnings.warn("SVD did not converge", RuntimeWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 19 passed, 1 warning in 0.22s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'openxla', 'jit', 'tvm', 'inductor', 'onnxrt', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 19 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_smoke2[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_nocrash[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape[cpu-float32-1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape[cpu-float32-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape[cpu-float32-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape_noweights[cpu-float32-1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape_noweights[cpu-float32-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape_noweights[cpu-float32-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_points_noweights[cpu-float32-1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_points_noweights[cpu-float32-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_points_noweights[cpu-float32-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_gradcheck[cpu] PASSED

=============================== warnings summary ===============================
tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_nocrash[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/homography.py:309: RuntimeWarning: SVD did not converge
    warnings.warn("SVD did not converge", RuntimeWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 19 passed, 1 warning in 0.23s =========================
