output file:
processed_korniafind_fundamental110.json
function:
find_fundamental
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'onnxrt', 'jit', 'inductor', 'tvm', 'cudagraphs', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 16 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XFAIL
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] FAILED

=================================== FAILURES ===================================
_________________ TestFindFundamental.test_smoke[cpu-float32] __________________

self = <test_fundamental.TestFindFundamental object at 0x76175412ec80>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke(self, device, dtype):
        points1 = torch.rand(1, 8, 2, device=device, dtype=dtype)
        points2 = torch.rand(1, 8, 2, device=device, dtype=dtype)
        weights = torch.ones(1, 8, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:32: in find_fundamental
    points1_normalized, T1 = _normalize_points(points1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points = tensor([[[0.8259, 0.8779],
         [0.1510, 0.6861],
         [0.9516, 0.7602],
         [0.8327, 0.8030],
         [0.5840, 0.5377],
         [0.4136, 0.4355],
         [0.0580, 0.9092],
         [0.5727, 0.8392]]])

    def _normalize_points(points: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Normalize the points for numerical stability.
    
        Args:
            points (torch.Tensor): Points to be normalized.
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]: Normalized points and the transformation matrix.
        """
        centroid = points.mean(dim=1, keepdim=True)
        dists = torch.norm(points - centroid, dim=2)
        mean_dist = dists.mean(dim=1, keepdim=True)
>       scale = torch.sqrt(2.0) / mean_dist
E       TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not float

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:55: TypeError
_______________ TestFindFundamental.test_shape[cpu-float32-1-8] ________________

self = <test_fundamental.TestFindFundamental object at 0x76175412f130>
batch_size = 1, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 9), (3, 10)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = torch.ones(B, N, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:32: in find_fundamental
    points1_normalized, T1 = _normalize_points(points1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points = tensor([[[0.7879, 0.7667],
         [0.4295, 0.5249],
         [0.1441, 0.9196],
         [0.8646, 0.1411],
         [0.1146, 0.4264],
         [0.1255, 0.8551],
         [0.3024, 0.5640],
         [0.8215, 0.6516]]])

    def _normalize_points(points: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Normalize the points for numerical stability.
    
        Args:
            points (torch.Tensor): Points to be normalized.
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]: Normalized points and the transformation matrix.
        """
        centroid = points.mean(dim=1, keepdim=True)
        dists = torch.norm(points - centroid, dim=2)
        mean_dist = dists.mean(dim=1, keepdim=True)
>       scale = torch.sqrt(2.0) / mean_dist
E       TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not float

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:55: TypeError
_______________ TestFindFundamental.test_shape[cpu-float32-2-9] ________________

self = <test_fundamental.TestFindFundamental object at 0x76175412f070>
batch_size = 2, num_points = 9, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 9), (3, 10)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = torch.ones(B, N, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:32: in find_fundamental
    points1_normalized, T1 = _normalize_points(points1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points = tensor([[[0.3228, 0.4780],
         [0.8583, 0.7505],
         [0.0788, 0.2167],
         [0.1474, 0.9480],
         [... 0.8990],
         [0.3214, 0.8802],
         [0.3658, 0.3598],
         [0.6874, 0.9350],
         [0.4312, 0.2847]]])

    def _normalize_points(points: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Normalize the points for numerical stability.
    
        Args:
            points (torch.Tensor): Points to be normalized.
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]: Normalized points and the transformation matrix.
        """
        centroid = points.mean(dim=1, keepdim=True)
        dists = torch.norm(points - centroid, dim=2)
        mean_dist = dists.mean(dim=1, keepdim=True)
>       scale = torch.sqrt(2.0) / mean_dist
E       TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not float

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:55: TypeError
_______________ TestFindFundamental.test_shape[cpu-float32-3-10] _______________

self = <test_fundamental.TestFindFundamental object at 0x76175412f3d0>
batch_size = 3, num_points = 10, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 9), (3, 10)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = torch.ones(B, N, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:32: in find_fundamental
    points1_normalized, T1 = _normalize_points(points1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points = tensor([[[0.2396, 0.2906],
         [0.8130, 0.5576],
         [0.6936, 0.0825],
         [0.8023, 0.8356],
         [... 0.0746],
         [0.2824, 0.1418],
         [0.8210, 0.3253],
         [0.6225, 0.8813],
         [0.9197, 0.8329]]])

    def _normalize_points(points: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Normalize the points for numerical stability.
    
        Args:
            points (torch.Tensor): Points to be normalized.
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]: Normalized points and the transformation matrix.
        """
        centroid = points.mean(dim=1, keepdim=True)
        dists = torch.norm(points - centroid, dim=2)
        mean_dist = dists.mean(dim=1, keepdim=True)
>       scale = torch.sqrt(2.0) / mean_dist
E       TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not float

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:55: TypeError
__________ TestFindFundamental.test_shape_noweights[cpu-float32-1-8] ___________

self = <test_fundamental.TestFindFundamental object at 0x76175412f760>
batch_size = 1, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 8), (3, 10)])
    def test_shape_noweights(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = None
>       F_mat = epi.find_fundamental(points1, points2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.5351, 0.7009],
         [0.8429, 0.8837],
         [0.7991, 0.6037],
         [0.5828, 0.8011],
         [0.3870, 0.6330],
         [0.1680, 0.1238],
         [0.0342, 0.0610],
         [0.6904, 0.3651]]])
points2 = tensor([[[0.7180, 0.6818],
         [0.5183, 0.1268],
         [0.4484, 0.0703],
         [0.3255, 0.0234],
         [0.6432, 0.3403],
         [0.1616, 0.0363],
         [0.4408, 0.0805],
         [0.4370, 0.4812]]])
weights = None, method = '8POINT'

    def find_fundamental(points1: torch.Tensor, points2: torch.Tensor, weights: torch.Tensor, method: str) -> torch.Tensor:
        """
        Compute the fundamental matrix from two sets of points in two images.
    
        Args:
            points1 (torch.Tensor): A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2 (torch.Tensor): A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights (torch.Tensor): Tensor containing the weights per point correspondence with a shape of (B, N).
            method (str): The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            torch.Tensor: The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError(f"Invalid method '{method}'. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        assert points2.shape == (B, N, 2), 'points2 must have the same shape as points1'
>       assert weights.shape == (B, N), 'weights must have shape (B, N)'
E       AttributeError: 'NoneType' object has no attribute 'shape'

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:31: AttributeError
__________ TestFindFundamental.test_shape_noweights[cpu-float32-2-8] ___________

self = <test_fundamental.TestFindFundamental object at 0x76175412f6a0>
batch_size = 2, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 8), (3, 10)])
    def test_shape_noweights(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = None
>       F_mat = epi.find_fundamental(points1, points2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.8060, 0.0351],
         [0.8333, 0.4660],
         [0.2864, 0.6403],
         [0.6020, 0.7793],
         [... 0.7484],
         [0.9272, 0.0559],
         [0.4066, 0.4334],
         [0.5876, 0.2830],
         [0.5332, 0.8748]]])
points2 = tensor([[[0.3558, 0.9352],
         [0.8090, 0.4896],
         [0.2930, 0.5775],
         [0.4096, 0.4866],
         [... 0.0641],
         [0.0112, 0.7392],
         [0.8656, 0.0146],
         [0.0645, 0.0181],
         [0.7600, 0.2704]]])
weights = None, method = '8POINT'

    def find_fundamental(points1: torch.Tensor, points2: torch.Tensor, weights: torch.Tensor, method: str) -> torch.Tensor:
        """
        Compute the fundamental matrix from two sets of points in two images.
    
        Args:
            points1 (torch.Tensor): A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2 (torch.Tensor): A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights (torch.Tensor): Tensor containing the weights per point correspondence with a shape of (B, N).
            method (str): The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            torch.Tensor: The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError(f"Invalid method '{method}'. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        assert points2.shape == (B, N, 2), 'points2 must have the same shape as points1'
>       assert weights.shape == (B, N), 'weights must have shape (B, N)'
E       AttributeError: 'NoneType' object has no attribute 'shape'

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:31: AttributeError
__________ TestFindFundamental.test_shape_noweights[cpu-float32-3-10] __________

self = <test_fundamental.TestFindFundamental object at 0x76175412fa00>
batch_size = 3, num_points = 10, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 8), (3, 10)])
    def test_shape_noweights(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = None
>       F_mat = epi.find_fundamental(points1, points2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.9449, 0.9595],
         [0.4036, 0.4397],
         [0.6387, 0.2641],
         [0.8955, 0.7902],
         [... 0.6431],
         [0.7089, 0.0938],
         [0.3207, 0.3637],
         [0.9847, 0.5473],
         [0.8592, 0.4890]]])
points2 = tensor([[[0.7270, 0.1880],
         [0.8565, 0.8240],
         [0.8414, 0.2165],
         [0.9926, 0.8710],
         [... 0.1069],
         [0.2752, 0.0888],
         [0.2922, 0.1526],
         [0.8442, 0.2587],
         [0.4083, 0.2105]]])
weights = None, method = '8POINT'

    def find_fundamental(points1: torch.Tensor, points2: torch.Tensor, weights: torch.Tensor, method: str) -> torch.Tensor:
        """
        Compute the fundamental matrix from two sets of points in two images.
    
        Args:
            points1 (torch.Tensor): A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2 (torch.Tensor): A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights (torch.Tensor): Tensor containing the weights per point correspondence with a shape of (B, N).
            method (str): The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            torch.Tensor: The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError(f"Invalid method '{method}'. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        assert points2.shape == (B, N, 2), 'points2 must have the same shape as points1'
>       assert weights.shape == (B, N), 'weights must have shape (B, N)'
E       AttributeError: 'NoneType' object has no attribute 'shape'

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:31: AttributeError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-1] _____________

self = <test_fundamental.TestFindFundamental object at 0x76175412fd90>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.7263, 0.6170],
         [0.0887, 0.7283],
         [0.9440, 0.5895],
         [0.0194, 0.5533],
         [0.2462, 0.0088],
         [0.3149, 0.5163],
         [0.3032, 0.7792]]])
points2 = tensor([[[0.9128, 0.9271],
         [0.6122, 0.6306],
         [0.4003, 0.7852],
         [0.0623, 0.8580],
         [0.2299, 0.9799],
         [0.5737, 0.7824],
         [0.0615, 0.5523]]])
weights = None, method = '7POINT'

    def find_fundamental(points1: torch.Tensor, points2: torch.Tensor, weights: torch.Tensor, method: str) -> torch.Tensor:
        """
        Compute the fundamental matrix from two sets of points in two images.
    
        Args:
            points1 (torch.Tensor): A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2 (torch.Tensor): A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights (torch.Tensor): Tensor containing the weights per point correspondence with a shape of (B, N).
            method (str): The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            torch.Tensor: The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError(f"Invalid method '{method}'. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        assert points2.shape == (B, N, 2), 'points2 must have the same shape as points1'
>       assert weights.shape == (B, N), 'weights must have shape (B, N)'
E       AttributeError: 'NoneType' object has no attribute 'shape'

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:31: AttributeError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-2] _____________

self = <test_fundamental.TestFindFundamental object at 0x76175412fcd0>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.3194, 0.8105],
         [0.8917, 0.5029],
         [0.0722, 0.2588],
         [0.8024, 0.0612],
         [... 0.2622],
         [0.2497, 0.0295],
         [0.8470, 0.4505],
         [0.4067, 0.8396],
         [0.8596, 0.1207]]])
points2 = tensor([[[0.7156, 0.8795],
         [0.2997, 0.3565],
         [0.6194, 0.9972],
         [0.8844, 0.2416],
         [... 0.5882],
         [0.6638, 0.2149],
         [0.1080, 0.9207],
         [0.7933, 0.4620],
         [0.2610, 0.5313]]])
weights = None, method = '7POINT'

    def find_fundamental(points1: torch.Tensor, points2: torch.Tensor, weights: torch.Tensor, method: str) -> torch.Tensor:
        """
        Compute the fundamental matrix from two sets of points in two images.
    
        Args:
            points1 (torch.Tensor): A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2 (torch.Tensor): A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights (torch.Tensor): Tensor containing the weights per point correspondence with a shape of (B, N).
            method (str): The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            torch.Tensor: The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError(f"Invalid method '{method}'. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        assert points2.shape == (B, N, 2), 'points2 must have the same shape as points1'
>       assert weights.shape == (B, N), 'weights must have shape (B, N)'
E       AttributeError: 'NoneType' object has no attribute 'shape'

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:31: AttributeError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-3] _____________

self = <test_fundamental.TestFindFundamental object at 0x76175412ffd0>
batch_size = 3, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.7283, 0.0013],
         [0.2817, 0.7917],
         [0.8668, 0.6989],
         [0.7882, 0.8943],
         [... 0.0048],
         [0.5581, 0.2579],
         [0.7441, 0.8393],
         [0.6469, 0.4340],
         [0.7591, 0.6500]]])
points2 = tensor([[[0.2998, 0.5113],
         [0.2382, 0.7864],
         [0.9552, 0.5480],
         [0.9695, 0.4811],
         [... 0.4138],
         [0.7554, 0.3205],
         [0.8376, 0.7989],
         [0.5601, 0.5232],
         [0.7063, 0.0035]]])
weights = None, method = '7POINT'

    def find_fundamental(points1: torch.Tensor, points2: torch.Tensor, weights: torch.Tensor, method: str) -> torch.Tensor:
        """
        Compute the fundamental matrix from two sets of points in two images.
    
        Args:
            points1 (torch.Tensor): A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2 (torch.Tensor): A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights (torch.Tensor): Tensor containing the weights per point correspondence with a shape of (B, N).
            method (str): The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            torch.Tensor: The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError(f"Invalid method '{method}'. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        assert points2.shape == (B, N, 2), 'points2 must have the same shape as points1'
>       assert weights.shape == (B, N), 'weights must have shape (B, N)'
E       AttributeError: 'NoneType' object has no attribute 'shape'

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:31: AttributeError
_______________ TestFindFundamental.test_opencv_svd[cpu-float32] _______________

self = <test_fundamental.TestFindFundamental object at 0x7617541642e0>
device = device(type='cpu'), dtype = torch.float32

    def test_opencv_svd(self, device, dtype):
        points1 = torch.tensor(
            [
                [
                    [0.8569, 0.5982],
                    [0.0059, 0.9649],
                    [0.1968, 0.8846],
                    [0.6084, 0.3467],
                    [0.9633, 0.5274],
                    [0.8941, 0.8939],
                    [0.0863, 0.5133],
                    [0.2645, 0.8882],
                    [0.2411, 0.3045],
                    [0.8199, 0.4107],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        points2 = torch.tensor(
            [
                [
                    [0.0928, 0.3013],
                    [0.0989, 0.9649],
                    [0.0341, 0.4827],
                    [0.8294, 0.4469],
                    [0.2230, 0.2998],
                    [0.1722, 0.8182],
                    [0.5264, 0.8869],
                    [0.8908, 0.1233],
                    [0.2338, 0.7663],
                    [0.4466, 0.5696],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        weights = torch.ones(1, 10, device=device, dtype=dtype)
    
        # generated with OpenCV using above points
        # import cv2
        # Fm_expected, _ = cv2.findFundamentalMat(
        #   points1.detach().numpy().reshape(-1, 1, 2),
        #   points2.detach().numpy().reshape(-1, 1, 2), cv2.FM_8POINT)
    
        Fm_expected = torch.tensor(
            [
                [
                    [-0.47408533, 0.22033807, -0.00346677],
                    [0.54935973, 1.31080955, -1.25028275],
                    [-0.36690215, -1.08143769, 1.0],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       F_mat = epi.find_fundamental(points1, points2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:32: in find_fundamental
    points1_normalized, T1 = _normalize_points(points1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points = tensor([[[0.8569, 0.5982],
         [0.0059, 0.9649],
         [0.1968, 0.8846],
         [0.6084, 0.3467],
         [... 0.8939],
         [0.0863, 0.5133],
         [0.2645, 0.8882],
         [0.2411, 0.3045],
         [0.8199, 0.4107]]])

    def _normalize_points(points: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Normalize the points for numerical stability.
    
        Args:
            points (torch.Tensor): Points to be normalized.
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]: Normalized points and the transformation matrix.
        """
        centroid = points.mean(dim=1, keepdim=True)
        dists = torch.norm(points - centroid, dim=2)
        mean_dist = dists.mean(dim=1, keepdim=True)
>       scale = torch.sqrt(2.0) / mean_dist
E       TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not float

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:55: TypeError
_____________ TestFindFundamental.test_7point_opencv[cpu-float32] ______________

self = <test_fundamental.TestFindFundamental object at 0x761754164610>
device = device(type='cpu'), dtype = torch.float32

    def test_7point_opencv(self, device, dtype):
        points1 = torch.tensor(
            [
                [
                    [0.8569, 0.5982],
                    [0.0059, 0.9649],
                    [0.1968, 0.8846],
                    [0.6084, 0.3467],
                    [0.9633, 0.5274],
                    [0.8941, 0.8939],
                    [0.0863, 0.5133],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        points2 = torch.tensor(
            [
                [
                    [0.0928, 0.3013],
                    [0.0989, 0.9649],
                    [0.0341, 0.4827],
                    [0.8294, 0.4469],
                    [0.2230, 0.2998],
                    [0.1722, 0.8182],
                    [0.5264, 0.8869],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        # generated with OpenCV using above points
        # Fm_expected shape is 9x3
        # import cv2
        # Fm_expected, _ = cv2.findFundamentalMat(
        #   points1.detach().numpy().reshape(-1, 1, 2),
        #   points2.detach().numpy().reshape(-1, 1, 2), cv2.FM_7POINT)
    
        Fm_expected = torch.tensor(
            [
                [
                    [
                        [-2.87490907, 5.41934672, 0.73871396],
                        [0.34010174, 3.70371623, -4.65517276],
                        [-0.1809933, -0.56577107, 1.0],
                    ],
                    [
                        [0.14465888, 0.68711702, -0.65570944],
                        [0.53424758, 0.7988479, -0.75446946],
                        [-0.48201197, -1.05375511, 1.0],
                    ],
                    [
                        [-0.0901827, 1.05515785, -0.54726062],
                        [0.51914823, 1.02476892, -1.05783979],
                        [-0.45860077, -1.01580301, 1.0],
                    ],
                ]
            ],
            device=device,
            dtype=dtype,
        )
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.8569, 0.5982],
         [0.0059, 0.9649],
         [0.1968, 0.8846],
         [0.6084, 0.3467],
         [0.9633, 0.5274],
         [0.8941, 0.8939],
         [0.0863, 0.5133]]])
points2 = tensor([[[0.0928, 0.3013],
         [0.0989, 0.9649],
         [0.0341, 0.4827],
         [0.8294, 0.4469],
         [0.2230, 0.2998],
         [0.1722, 0.8182],
         [0.5264, 0.8869]]])
weights = None, method = '7POINT'

    def find_fundamental(points1: torch.Tensor, points2: torch.Tensor, weights: torch.Tensor, method: str) -> torch.Tensor:
        """
        Compute the fundamental matrix from two sets of points in two images.
    
        Args:
            points1 (torch.Tensor): A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2 (torch.Tensor): A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights (torch.Tensor): Tensor containing the weights per point correspondence with a shape of (B, N).
            method (str): The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            torch.Tensor: The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError(f"Invalid method '{method}'. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        assert points2.shape == (B, N, 2), 'points2 must have the same shape as points1'
>       assert weights.shape == (B, N), 'weights must have shape (B, N)'
E       AttributeError: 'NoneType' object has no attribute 'shape'

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:31: AttributeError
________ TestFindFundamental.test_synthetic_sampson_7point[cpu-float32] ________

self = <test_fundamental.TestFindFundamental object at 0x761754164940>
device = device(type='cpu'), dtype = torch.float32

    def test_synthetic_sampson_7point(self, device, dtype):
        scene: Dict[str, torch.Tensor] = generate_two_view_random_scene(device, dtype)
        x1 = scene["x1"][:, :7, :]
        x2 = scene["x2"][:, :7, :]
>       F_est = epi.find_fundamental(x1, x2, None, "7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[ 3.9025, 47.9019],
         [ 7.3409, 59.3088],
         [11.2272, 53.4759],
         [ 9.7635, 25.3748],
         [11.7882, 48.8607],
         [ 8.9780, 37.5768],
         [ 5.1570, 34.3901]]])
points2 = tensor([[[57.0174, 40.1454],
         [41.2166, 45.8753],
         [39.4026, 49.9035],
         [28.1182, 43.1241],
         [49.0896, 58.1140],
         [45.8906, 49.5598],
         [34.8772, 37.1933]]])
weights = None, method = '7POINT'

    def find_fundamental(points1: torch.Tensor, points2: torch.Tensor, weights: torch.Tensor, method: str) -> torch.Tensor:
        """
        Compute the fundamental matrix from two sets of points in two images.
    
        Args:
            points1 (torch.Tensor): A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2 (torch.Tensor): A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights (torch.Tensor): Tensor containing the weights per point correspondence with a shape of (B, N).
            method (str): The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            torch.Tensor: The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError(f"Invalid method '{method}'. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        assert points2.shape == (B, N, 2), 'points2 must have the same shape as points1'
>       assert weights.shape == (B, N), 'weights must have shape (B, N)'
E       AttributeError: 'NoneType' object has no attribute 'shape'

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:31: AttributeError
___________ TestFindFundamental.test_synthetic_sampson[cpu-float32] ____________

self = <test_fundamental.TestFindFundamental object at 0x761754164760>
device = device(type='cpu'), dtype = torch.float32

    def test_synthetic_sampson(self, device, dtype):
        scene: Dict[str, torch.Tensor] = generate_two_view_random_scene(device, dtype)
    
        x1 = scene["x1"]
        x2 = scene["x2"]
    
        weights = torch.ones_like(x1)[..., 0]
>       F_est = epi.find_fundamental(x1, x2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:32: in find_fundamental
    points1_normalized, T1 = _normalize_points(points1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points = tensor([[[ 75.8807, 201.3059],
         [112.8913, 191.9299],
         [109.5006, 200.0207],
         [ 55.1464, 226.9...   [ 55.6464, 176.6210],
         [ 77.4744, 172.9291],
         [ 49.1302, 192.9192],
         [ 90.2800, 252.4132]]])

    def _normalize_points(points: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Normalize the points for numerical stability.
    
        Args:
            points (torch.Tensor): Points to be normalized.
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]: Normalized points and the transformation matrix.
        """
        centroid = points.mean(dim=1, keepdim=True)
        dists = torch.norm(points - centroid, dim=2)
        mean_dist = dists.mean(dim=1, keepdim=True)
>       scale = torch.sqrt(2.0) / mean_dist
E       TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not float

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:55: TypeError
___________________ TestFindFundamental.test_gradcheck[cpu] ____________________

self = <test_fundamental.TestFindFundamental object at 0x761754164f10>
device = device(type='cpu')

    def test_gradcheck(self, device):
        points1 = torch.rand(1, 10, 2, device=device, dtype=torch.float64, requires_grad=True)
        points2 = torch.rand(1, 10, 2, device=device, dtype=torch.float64)
        weights = torch.ones(1, 10, device=device, dtype=torch.float64)
>       self.gradcheck(epi.find_fundamental, (points1, points2, weights))

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:32: in find_fundamental
    points1_normalized, T1 = _normalize_points(points1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points = tensor([[[0.0146, 0.4266],
         [0.1561, 0.5615],
         [0.3547, 0.0348],
         [0.3587, 0.1610],
         [...     [0.3516, 0.0878],
         [0.7977, 0.1002],
         [0.3220, 0.4849]]], dtype=torch.float64, requires_grad=True)

    def _normalize_points(points: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Normalize the points for numerical stability.
    
        Args:
            points (torch.Tensor): Points to be normalized.
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]: Normalized points and the transformation matrix.
        """
        centroid = points.mean(dim=1, keepdim=True)
        dists = torch.norm(points - centroid, dim=2)
        mean_dist = dists.mean(dim=1, keepdim=True)
>       scale = torch.sqrt(2.0) / mean_dist
E       TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not float

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:55: TypeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu]
======================== 15 failed, 1 xfailed in 0.65s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'tvm', 'inductor', 'cudagraphs', 'openxla', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 16 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XPASS
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] PASSED

======================== 15 passed, 1 xpassed in 0.22s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'jit', 'tvm', 'cudagraphs', 'inductor', 'onnxrt', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 16 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XPASS
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] PASSED

======================== 15 passed, 1 xpassed in 0.22s =========================
