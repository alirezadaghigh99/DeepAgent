output file:
processed_classes-korniaapply_transform53.json
function:
apply_transform
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness_tuple[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tuple[cpu-float32] FAILED [ 70%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_sequential[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle[cpu-float32-3] FAILED [ 17%]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_same_on_batch[cpu-float32] FAILED [ 29%]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tensor[cpu-float32] FAILED [ 64%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tensor[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle_batch[cpu-float32] FAILED [ 23%]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast[cpu-float32] FAILED [ 47%]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness_tuple[cpu-float32] FAILED [ 41%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_same_on_batch[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness[cpu-float32] FAILED [ 35%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation[cpu-float32] FAILED [ 58%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle_batch[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle[cpu-float32-3]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_sequential[cpu-float32] FAILED [ 88%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast_list[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue_list[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast_list[cpu-float32] FAILED [ 52%]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue_list[cpu-float32] FAILED [ 82%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tuple[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue[cpu-float32] FAILED [ 76%]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python3
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'tvm', 'openxla', 'inductor', 'onnxrt', 'jit', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 17 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_smoke XFAIL [  5%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle[cpu-float32-1] FAILED [ 11%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle[cpu-float32-3] FAILED [ 17%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle_batch[cpu-float32] FAILED [ 23%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_same_on_batch[cpu-float32] FAILED [ 29%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness[cpu-float32] FAILED [ 35%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness_tuple[cpu-float32] FAILED [ 41%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast[cpu-float32] FAILED [ 47%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast_list[cpu-float32] FAILED [ 52%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation[cpu-float32] FAILED [ 58%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tensor[cpu-float32] FAILED [ 64%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tuple[cpu-float32] FAILED [ 70%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue[cpu-float32] FAILED [ 76%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue_list[cpu-float32] FAILED [ 82%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_sequential[cpu-float32] FAILED [ 88%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jitter_batch_sequential[cpu-float32] FAILED [ 94%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_gradcheck[cpu] SKIPPED [100%]

=================================== FAILURES ===================================
_______________ TestColorJiggle.test_color_jiggle[cpu-float32-1] _______________

self = <test_augmentation.TestColorJiggle object at 0x7ddffd0890c0>
device = device(type='cpu'), dtype = torch.float32, C = 1

    @pytest.mark.parametrize("C", [1, 3])
    def test_color_jiggle(self, device, dtype, C):
        f = ColorJiggle()
    
        input = torch.rand(C, 5, 5, device=device, dtype=dtype).unsqueeze(0)  # 3 x 5 x 5
        expected = input
    
        expected_transform = torch.eye(3, device=device, dtype=dtype).unsqueeze(0)  # 3 x 3
    
>       self.assert_close(f(input), expected, low_tolerance=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1224: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:238: in forward
    output = self.apply_func(in_tensor, params, flags)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/base.py:129: in apply_func
    output = self.transform_inputs(in_tensor, params, flags, trans_matrix)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:297: in transform_inputs
    output = self.apply_transform(in_tensor, params, flags, transform=transform)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ColorJiggle(brightness=0.0, contrast=0.0, saturation=0.0, hue=0.0, p=1.0, p_batch=1.0, same_on_batch=False)
input = tensor([[[[0.4963, 0.7682, 0.0885, 0.1320, 0.3074],
          [0.6341, 0.4901, 0.8964, 0.4556, 0.6323],
          [0.3...89, 0.2939],
          [0.5185, 0.6977, 0.8000, 0.1610, 0.2823],
          [0.6816, 0.9152, 0.3971, 0.8742, 0.4194]]]])
params = {'batch_prob': tensor([1.]), 'brightness_factor': tensor([1.]), 'contrast_factor': tensor([1.]), 'forward_input_shape': tensor([1, 1, 5, 5]), ...}
flags = {}
transform = tensor([[[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]]])

    def apply_transform(self, input: Tensor, params: Dict[str, Tensor], flags: Dict[str, Any], transform: Optional[Tensor]=None) -> Tensor:
        transformations = {'brightness': lambda img, factor: adjust_brightness(img, factor) if factor != 1.0 else img, 'contrast': lambda img, factor: adjust_contrast(img, factor) if factor != 1.0 else img, 'saturation': lambda img, factor: adjust_saturation(img, factor) if factor != 1.0 else img, 'hue': lambda img, factor: adjust_hue(img, factor) if factor != 0.0 else img}
        order = params.get('order', ['brightness', 'contrast', 'saturation', 'hue'])
        for transform_name in order:
            factor = params.get(transform_name, 1.0)
>           input = transformations[transform_name](input, factor)
E           KeyError: tensor(0)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/intensity/color_jiggle.py:68: KeyError
_______________ TestColorJiggle.test_color_jiggle[cpu-float32-3] _______________

self = <test_augmentation.TestColorJiggle object at 0x7ddffd089060>
device = device(type='cpu'), dtype = torch.float32, C = 3

    @pytest.mark.parametrize("C", [1, 3])
    def test_color_jiggle(self, device, dtype, C):
        f = ColorJiggle()
    
        input = torch.rand(C, 5, 5, device=device, dtype=dtype).unsqueeze(0)  # 3 x 5 x 5
        expected = input
    
        expected_transform = torch.eye(3, device=device, dtype=dtype).unsqueeze(0)  # 3 x 3
    
>       self.assert_close(f(input), expected, low_tolerance=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1224: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:238: in forward
    output = self.apply_func(in_tensor, params, flags)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/base.py:129: in apply_func
    output = self.transform_inputs(in_tensor, params, flags, trans_matrix)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:297: in transform_inputs
    output = self.apply_transform(in_tensor, params, flags, transform=transform)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ColorJiggle(brightness=0.0, contrast=0.0, saturation=0.0, hue=0.0, p=1.0, p_batch=1.0, same_on_batch=False)
input = tensor([[[[0.1759, 0.2698, 0.1507, 0.0317, 0.2081],
          [0.9298, 0.7231, 0.7423, 0.5263, 0.2437],
          [0.5...57, 0.7497],
          [0.6047, 0.1100, 0.2121, 0.9704, 0.8369],
          [0.2820, 0.3742, 0.0237, 0.4910, 0.1235]]]])
params = {'batch_prob': tensor([1.]), 'brightness_factor': tensor([1.]), 'contrast_factor': tensor([1.]), 'forward_input_shape': tensor([1, 3, 5, 5]), ...}
flags = {}
transform = tensor([[[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]]])

    def apply_transform(self, input: Tensor, params: Dict[str, Tensor], flags: Dict[str, Any], transform: Optional[Tensor]=None) -> Tensor:
        transformations = {'brightness': lambda img, factor: adjust_brightness(img, factor) if factor != 1.0 else img, 'contrast': lambda img, factor: adjust_contrast(img, factor) if factor != 1.0 else img, 'saturation': lambda img, factor: adjust_saturation(img, factor) if factor != 1.0 else img, 'hue': lambda img, factor: adjust_hue(img, factor) if factor != 0.0 else img}
        order = params.get('order', ['brightness', 'contrast', 'saturation', 'hue'])
        for transform_name in order:
            factor = params.get(transform_name, 1.0)
>           input = transformations[transform_name](input, factor)
E           KeyError: tensor(0)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/intensity/color_jiggle.py:68: KeyError
_____________ TestColorJiggle.test_color_jiggle_batch[cpu-float32] _____________

self = <test_augmentation.TestColorJiggle object at 0x7ddffd0894b0>
device = device(type='cpu'), dtype = torch.float32

    def test_color_jiggle_batch(self, device, dtype):
        f = ColorJiggle()
    
        input = torch.rand(2, 3, 5, 5, device=device, dtype=dtype)  # 2 x 3 x 5 x 5
        expected = input
    
        expected_transform = torch.eye(3, device=device, dtype=dtype).unsqueeze(0).expand((2, 3, 3))  # 2 x 3 x 3
    
>       self.assert_close(f(input), expected, low_tolerance=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1235: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:238: in forward
    output = self.apply_func(in_tensor, params, flags)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/base.py:129: in apply_func
    output = self.transform_inputs(in_tensor, params, flags, trans_matrix)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:297: in transform_inputs
    output = self.apply_transform(in_tensor, params, flags, transform=transform)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ColorJiggle(brightness=0.0, contrast=0.0, saturation=0.0, hue=0.0, p=1.0, p_batch=1.0, same_on_batch=False)
input = tensor([[[[0.8426, 0.0784, 0.3756, 0.5226, 0.5730],
          [0.6186, 0.6962, 0.5300, 0.2560, 0.7366],
          [0.0...35, 0.3538],
          [0.2032, 0.3151, 0.0044, 0.7257, 0.2599],
          [0.1663, 0.2119, 0.7875, 0.7648, 0.8838]]]])
params = {'batch_prob': tensor([1., 1.]), 'brightness_factor': tensor([1., 1.]), 'contrast_factor': tensor([1., 1.]), 'forward_input_shape': tensor([2, 3, 5, 5]), ...}
flags = {}
transform = tensor([[[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]],

        [[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]]])

    def apply_transform(self, input: Tensor, params: Dict[str, Tensor], flags: Dict[str, Any], transform: Optional[Tensor]=None) -> Tensor:
        transformations = {'brightness': lambda img, factor: adjust_brightness(img, factor) if factor != 1.0 else img, 'contrast': lambda img, factor: adjust_contrast(img, factor) if factor != 1.0 else img, 'saturation': lambda img, factor: adjust_saturation(img, factor) if factor != 1.0 else img, 'hue': lambda img, factor: adjust_hue(img, factor) if factor != 0.0 else img}
        order = params.get('order', ['brightness', 'contrast', 'saturation', 'hue'])
        for transform_name in order:
            factor = params.get(transform_name, 1.0)
>           input = transformations[transform_name](input, factor)
E           KeyError: tensor(3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/intensity/color_jiggle.py:68: KeyError
_______________ TestColorJiggle.test_same_on_batch[cpu-float32] ________________

self = <test_augmentation.TestColorJiggle object at 0x7ddffd0892a0>
device = device(type='cpu'), dtype = torch.float32

    def test_same_on_batch(self, device, dtype):
        f = ColorJiggle(brightness=0.5, contrast=0.5, saturation=0.5, hue=0.1, same_on_batch=True)
        input = torch.eye(3).unsqueeze(dim=0).unsqueeze(dim=0).repeat(2, 3, 1, 1)
>       res = f(input)

/local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1241: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:238: in forward
    output = self.apply_func(in_tensor, params, flags)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/base.py:129: in apply_func
    output = self.transform_inputs(in_tensor, params, flags, trans_matrix)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:297: in transform_inputs
    output = self.apply_transform(in_tensor, params, flags, transform=transform)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ColorJiggle(brightness=0.5, contrast=0.5, saturation=0.5, hue=0.1, p=1.0, p_batch=1.0, same_on_batch=True)
input = tensor([[[[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0...     [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]]]])
params = {'batch_prob': tensor([1., 1.]), 'brightness_factor': tensor([0.5542, 0.5542]), 'contrast_factor': tensor([1.4384, 1.4384]), 'forward_input_shape': tensor([2, 3, 3, 3]), ...}
flags = {}
transform = tensor([[[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]],

        [[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]]])

    def apply_transform(self, input: Tensor, params: Dict[str, Tensor], flags: Dict[str, Any], transform: Optional[Tensor]=None) -> Tensor:
        transformations = {'brightness': lambda img, factor: adjust_brightness(img, factor) if factor != 1.0 else img, 'contrast': lambda img, factor: adjust_contrast(img, factor) if factor != 1.0 else img, 'saturation': lambda img, factor: adjust_saturation(img, factor) if factor != 1.0 else img, 'hue': lambda img, factor: adjust_hue(img, factor) if factor != 0.0 else img}
        order = params.get('order', ['brightness', 'contrast', 'saturation', 'hue'])
        for transform_name in order:
            factor = params.get(transform_name, 1.0)
>           input = transformations[transform_name](input, factor)
E           KeyError: tensor(2)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/intensity/color_jiggle.py:68: KeyError
_____________ TestColorJiggle.test_random_brightness[cpu-float32] ______________

self = <test_augmentation.TestColorJiggle object at 0x7ddffd089960>
device = device(type='cpu'), dtype = torch.float32

    def test_random_brightness(self, device, dtype):
        torch.manual_seed(42)
        f = ColorJiggle(brightness=0.2)
    
        input = torch.tensor(
            [[[[0.1, 0.2, 0.3], [0.6, 0.5, 0.4], [0.7, 0.8, 1.0]]]],
            device=device,
            dtype=dtype,
        )  # 1 x 1 x 3 x 3
        input = input.repeat(2, 3, 1, 1)  # 2 x 3 x 3
    
        expected = self._get_expected_brightness(device, dtype)
    
>       self.assert_close(f(input), expected, low_tolerance=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1299: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:238: in forward
    output = self.apply_func(in_tensor, params, flags)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/base.py:129: in apply_func
    output = self.transform_inputs(in_tensor, params, flags, trans_matrix)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:297: in transform_inputs
    output = self.apply_transform(in_tensor, params, flags, transform=transform)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ColorJiggle(brightness=0.2, contrast=0.0, saturation=0.0, hue=0.0, p=1.0, p_batch=1.0, same_on_batch=False)
input = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...0000]],

         [[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]]]])
params = {'batch_prob': tensor([1., 1.]), 'brightness_factor': tensor([1.1529, 1.1660]), 'contrast_factor': tensor([1., 1.]), 'forward_input_shape': tensor([2, 3, 3, 3]), ...}
flags = {}
transform = tensor([[[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]],

        [[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]]])

    def apply_transform(self, input: Tensor, params: Dict[str, Tensor], flags: Dict[str, Any], transform: Optional[Tensor]=None) -> Tensor:
        transformations = {'brightness': lambda img, factor: adjust_brightness(img, factor) if factor != 1.0 else img, 'contrast': lambda img, factor: adjust_contrast(img, factor) if factor != 1.0 else img, 'saturation': lambda img, factor: adjust_saturation(img, factor) if factor != 1.0 else img, 'hue': lambda img, factor: adjust_hue(img, factor) if factor != 0.0 else img}
        order = params.get('order', ['brightness', 'contrast', 'saturation', 'hue'])
        for transform_name in order:
            factor = params.get(transform_name, 1.0)
>           input = transformations[transform_name](input, factor)
E           KeyError: tensor(2)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/intensity/color_jiggle.py:68: KeyError
__________ TestColorJiggle.test_random_brightness_tuple[cpu-float32] ___________

self = <test_augmentation.TestColorJiggle object at 0x7ddffd089c90>
device = device(type='cpu'), dtype = torch.float32

    def test_random_brightness_tuple(self, device, dtype):
        torch.manual_seed(42)
        f = ColorJiggle(brightness=(0.8, 1.2))
    
        input = torch.tensor(
            [[[[0.1, 0.2, 0.3], [0.6, 0.5, 0.4], [0.7, 0.8, 1.0]]]],
            device=device,
            dtype=dtype,
        )  # 1 x 1 x 3 x 3
        input = input.repeat(2, 3, 1, 1)  # 2 x 3 x 3
    
        expected = self._get_expected_brightness(device, dtype)
    
>       self.assert_close(f(input), expected, low_tolerance=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:238: in forward
    output = self.apply_func(in_tensor, params, flags)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/base.py:129: in apply_func
    output = self.transform_inputs(in_tensor, params, flags, trans_matrix)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:297: in transform_inputs
    output = self.apply_transform(in_tensor, params, flags, transform=transform)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ColorJiggle(brightness=(0.8, 1.2), contrast=0.0, saturation=0.0, hue=0.0, p=1.0, p_batch=1.0, same_on_batch=False)
input = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...0000]],

         [[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]]]])
params = {'batch_prob': tensor([1., 1.]), 'brightness_factor': tensor([1.1529, 1.1660]), 'contrast_factor': tensor([1., 1.]), 'forward_input_shape': tensor([2, 3, 3, 3]), ...}
flags = {}
transform = tensor([[[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]],

        [[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]]])

    def apply_transform(self, input: Tensor, params: Dict[str, Tensor], flags: Dict[str, Any], transform: Optional[Tensor]=None) -> Tensor:
        transformations = {'brightness': lambda img, factor: adjust_brightness(img, factor) if factor != 1.0 else img, 'contrast': lambda img, factor: adjust_contrast(img, factor) if factor != 1.0 else img, 'saturation': lambda img, factor: adjust_saturation(img, factor) if factor != 1.0 else img, 'hue': lambda img, factor: adjust_hue(img, factor) if factor != 0.0 else img}
        order = params.get('order', ['brightness', 'contrast', 'saturation', 'hue'])
        for transform_name in order:
            factor = params.get(transform_name, 1.0)
>           input = transformations[transform_name](input, factor)
E           KeyError: tensor(2)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/intensity/color_jiggle.py:68: KeyError
______________ TestColorJiggle.test_random_contrast[cpu-float32] _______________

self = <test_augmentation.TestColorJiggle object at 0x7ddffd089fc0>
device = device(type='cpu'), dtype = torch.float32

    def test_random_contrast(self, device, dtype):
        torch.manual_seed(42)
        f = ColorJiggle(contrast=0.2)
    
        input = torch.tensor(
            [[[[0.1, 0.2, 0.3], [0.6, 0.5, 0.4], [0.7, 0.8, 1.0]]]],
            device=device,
            dtype=dtype,
        )  # 1 x 1 x 3 x 3
        input = input.repeat(2, 3, 1, 1)  # 2 x 3 x 3
    
        expected = self._get_expected_contrast(device, dtype)
    
>       self.assert_close(f(input), expected, low_tolerance=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:238: in forward
    output = self.apply_func(in_tensor, params, flags)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/base.py:129: in apply_func
    output = self.transform_inputs(in_tensor, params, flags, trans_matrix)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:297: in transform_inputs
    output = self.apply_transform(in_tensor, params, flags, transform=transform)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ColorJiggle(brightness=0.0, contrast=0.2, saturation=0.0, hue=0.0, p=1.0, p_batch=1.0, same_on_batch=False)
input = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...0000]],

         [[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]]]])
params = {'batch_prob': tensor([1., 1.]), 'brightness_factor': tensor([1., 1.]), 'contrast_factor': tensor([0.9531, 1.1837]), 'forward_input_shape': tensor([2, 3, 3, 3]), ...}
flags = {}
transform = tensor([[[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]],

        [[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]]])

    def apply_transform(self, input: Tensor, params: Dict[str, Tensor], flags: Dict[str, Any], transform: Optional[Tensor]=None) -> Tensor:
        transformations = {'brightness': lambda img, factor: adjust_brightness(img, factor) if factor != 1.0 else img, 'contrast': lambda img, factor: adjust_contrast(img, factor) if factor != 1.0 else img, 'saturation': lambda img, factor: adjust_saturation(img, factor) if factor != 1.0 else img, 'hue': lambda img, factor: adjust_hue(img, factor) if factor != 0.0 else img}
        order = params.get('order', ['brightness', 'contrast', 'saturation', 'hue'])
        for transform_name in order:
            factor = params.get(transform_name, 1.0)
>           input = transformations[transform_name](input, factor)
E           KeyError: tensor(2)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/intensity/color_jiggle.py:68: KeyError
____________ TestColorJiggle.test_random_contrast_list[cpu-float32] ____________

self = <test_augmentation.TestColorJiggle object at 0x7ddffd08a2f0>
device = device(type='cpu'), dtype = torch.float32

    def test_random_contrast_list(self, device, dtype):
        torch.manual_seed(42)
        f = ColorJiggle(contrast=[0.8, 1.2])
    
        input = torch.tensor(
            [[[[0.1, 0.2, 0.3], [0.6, 0.5, 0.4], [0.7, 0.8, 1.0]]]],
            device=device,
            dtype=dtype,
        )  # 1 x 1 x 3 x 3
        input = input.repeat(2, 3, 1, 1)  # 2 x 3 x 3
    
        expected = self._get_expected_contrast(device, dtype)
    
>       self.assert_close(f(input), expected, low_tolerance=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1386: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:238: in forward
    output = self.apply_func(in_tensor, params, flags)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/base.py:129: in apply_func
    output = self.transform_inputs(in_tensor, params, flags, trans_matrix)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:297: in transform_inputs
    output = self.apply_transform(in_tensor, params, flags, transform=transform)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ColorJiggle(brightness=0.0, contrast=[0.8, 1.2], saturation=0.0, hue=0.0, p=1.0, p_batch=1.0, same_on_batch=False)
input = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...0000]],

         [[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]]]])
params = {'batch_prob': tensor([1., 1.]), 'brightness_factor': tensor([1., 1.]), 'contrast_factor': tensor([0.9531, 1.1837]), 'forward_input_shape': tensor([2, 3, 3, 3]), ...}
flags = {}
transform = tensor([[[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]],

        [[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]]])

    def apply_transform(self, input: Tensor, params: Dict[str, Tensor], flags: Dict[str, Any], transform: Optional[Tensor]=None) -> Tensor:
        transformations = {'brightness': lambda img, factor: adjust_brightness(img, factor) if factor != 1.0 else img, 'contrast': lambda img, factor: adjust_contrast(img, factor) if factor != 1.0 else img, 'saturation': lambda img, factor: adjust_saturation(img, factor) if factor != 1.0 else img, 'hue': lambda img, factor: adjust_hue(img, factor) if factor != 0.0 else img}
        order = params.get('order', ['brightness', 'contrast', 'saturation', 'hue'])
        for transform_name in order:
            factor = params.get(transform_name, 1.0)
>           input = transformations[transform_name](input, factor)
E           KeyError: tensor(2)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/intensity/color_jiggle.py:68: KeyError
_____________ TestColorJiggle.test_random_saturation[cpu-float32] ______________

self = <test_augmentation.TestColorJiggle object at 0x7ddffd08a620>
device = device(type='cpu'), dtype = torch.float32

    def test_random_saturation(self, device, dtype):
        torch.manual_seed(42)
        f = ColorJiggle(saturation=0.2)
    
        input = torch.tensor(
            [
                [
                    [[0.1, 0.2, 0.3], [0.6, 0.5, 0.4], [0.7, 0.8, 1.0]],
                    [[1.0, 0.5, 0.6], [0.6, 0.3, 0.2], [0.8, 0.1, 0.2]],
                    [[0.6, 0.8, 0.7], [0.9, 0.3, 0.2], [0.8, 0.4, 0.5]],
                ]
            ],
            device=device,
            dtype=dtype,
        )  # 1 x 1 x 3 x 3
        input = input.repeat(2, 1, 1, 1)  # 2 x 3 x 3
    
        expected = self._get_expected_saturation(device, dtype)
>       self.assert_close(f(input), expected, low_tolerance=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1448: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:238: in forward
    output = self.apply_func(in_tensor, params, flags)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/base.py:129: in apply_func
    output = self.transform_inputs(in_tensor, params, flags, trans_matrix)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:297: in transform_inputs
    output = self.apply_transform(in_tensor, params, flags, transform=transform)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ColorJiggle(brightness=0.0, contrast=0.0, saturation=0.2, hue=0.0, p=1.0, p_batch=1.0, same_on_batch=False)
input = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...2000]],

         [[0.6000, 0.8000, 0.7000],
          [0.9000, 0.3000, 0.2000],
          [0.8000, 0.4000, 0.5000]]]])
params = {'batch_prob': tensor([1., 1.]), 'brightness_factor': tensor([1., 1.]), 'contrast_factor': tensor([1., 1.]), 'forward_input_shape': tensor([2, 3, 3, 3]), ...}
flags = {}
transform = tensor([[[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]],

        [[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]]])

    def apply_transform(self, input: Tensor, params: Dict[str, Tensor], flags: Dict[str, Any], transform: Optional[Tensor]=None) -> Tensor:
        transformations = {'brightness': lambda img, factor: adjust_brightness(img, factor) if factor != 1.0 else img, 'contrast': lambda img, factor: adjust_contrast(img, factor) if factor != 1.0 else img, 'saturation': lambda img, factor: adjust_saturation(img, factor) if factor != 1.0 else img, 'hue': lambda img, factor: adjust_hue(img, factor) if factor != 0.0 else img}
        order = params.get('order', ['brightness', 'contrast', 'saturation', 'hue'])
        for transform_name in order:
            factor = params.get(transform_name, 1.0)
>           input = transformations[transform_name](input, factor)
E           KeyError: tensor(2)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/intensity/color_jiggle.py:68: KeyError
__________ TestColorJiggle.test_random_saturation_tensor[cpu-float32] __________

self = <test_augmentation.TestColorJiggle object at 0x7ddffd08a950>
device = device(type='cpu'), dtype = torch.float32

    def test_random_saturation_tensor(self, device, dtype):
        torch.manual_seed(42)
        f = ColorJiggle(saturation=torch.tensor(0.2))
    
        input = torch.tensor(
            [
                [
                    [[0.1, 0.2, 0.3], [0.6, 0.5, 0.4], [0.7, 0.8, 1.0]],
                    [[1.0, 0.5, 0.6], [0.6, 0.3, 0.2], [0.8, 0.1, 0.2]],
                    [[0.6, 0.8, 0.7], [0.9, 0.3, 0.2], [0.8, 0.4, 0.5]],
                ]
            ],
            device=device,
            dtype=dtype,
        )  # 1 x 1 x 3 x 3
        input = input.repeat(2, 1, 1, 1)  # 2 x 3 x 3
    
        expected = self._get_expected_saturation(device, dtype)
    
>       self.assert_close(f(input), expected, low_tolerance=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1469: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:238: in forward
    output = self.apply_func(in_tensor, params, flags)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/base.py:129: in apply_func
    output = self.transform_inputs(in_tensor, params, flags, trans_matrix)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:297: in transform_inputs
    output = self.apply_transform(in_tensor, params, flags, transform=transform)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ColorJiggle(brightness=0.0, contrast=0.0, saturation=0.20000000298023224, hue=0.0, p=1.0, p_batch=1.0, same_on_batch=False)
input = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...2000]],

         [[0.6000, 0.8000, 0.7000],
          [0.9000, 0.3000, 0.2000],
          [0.8000, 0.4000, 0.5000]]]])
params = {'batch_prob': tensor([1., 1.]), 'brightness_factor': tensor([1., 1.]), 'contrast_factor': tensor([1., 1.]), 'forward_input_shape': tensor([2, 3, 3, 3]), ...}
flags = {}
transform = tensor([[[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]],

        [[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]]])

    def apply_transform(self, input: Tensor, params: Dict[str, Tensor], flags: Dict[str, Any], transform: Optional[Tensor]=None) -> Tensor:
        transformations = {'brightness': lambda img, factor: adjust_brightness(img, factor) if factor != 1.0 else img, 'contrast': lambda img, factor: adjust_contrast(img, factor) if factor != 1.0 else img, 'saturation': lambda img, factor: adjust_saturation(img, factor) if factor != 1.0 else img, 'hue': lambda img, factor: adjust_hue(img, factor) if factor != 0.0 else img}
        order = params.get('order', ['brightness', 'contrast', 'saturation', 'hue'])
        for transform_name in order:
            factor = params.get(transform_name, 1.0)
>           input = transformations[transform_name](input, factor)
E           KeyError: tensor(2)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/intensity/color_jiggle.py:68: KeyError
__________ TestColorJiggle.test_random_saturation_tuple[cpu-float32] ___________

self = <test_augmentation.TestColorJiggle object at 0x7ddffd08ac80>
device = device(type='cpu'), dtype = torch.float32

    def test_random_saturation_tuple(self, device, dtype):
        torch.manual_seed(42)
        f = ColorJiggle(saturation=(0.8, 1.2))
    
        input = torch.tensor(
            [
                [
                    [[0.1, 0.2, 0.3], [0.6, 0.5, 0.4], [0.7, 0.8, 1.0]],
                    [[1.0, 0.5, 0.6], [0.6, 0.3, 0.2], [0.8, 0.1, 0.2]],
                    [[0.6, 0.8, 0.7], [0.9, 0.3, 0.2], [0.8, 0.4, 0.5]],
                ]
            ],
            device=device,
            dtype=dtype,
        )  # 1 x 1 x 3 x 3
        input = input.repeat(2, 1, 1, 1)  # 2 x 3 x 3
    
        expected = self._get_expected_saturation(device, dtype)
    
>       self.assert_close(f(input), expected, low_tolerance=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1490: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:238: in forward
    output = self.apply_func(in_tensor, params, flags)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/base.py:129: in apply_func
    output = self.transform_inputs(in_tensor, params, flags, trans_matrix)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:297: in transform_inputs
    output = self.apply_transform(in_tensor, params, flags, transform=transform)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ColorJiggle(brightness=0.0, contrast=0.0, saturation=(0.8, 1.2), hue=0.0, p=1.0, p_batch=1.0, same_on_batch=False)
input = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...2000]],

         [[0.6000, 0.8000, 0.7000],
          [0.9000, 0.3000, 0.2000],
          [0.8000, 0.4000, 0.5000]]]])
params = {'batch_prob': tensor([1., 1.]), 'brightness_factor': tensor([1., 1.]), 'contrast_factor': tensor([1., 1.]), 'forward_input_shape': tensor([2, 3, 3, 3]), ...}
flags = {}
transform = tensor([[[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]],

        [[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]]])

    def apply_transform(self, input: Tensor, params: Dict[str, Tensor], flags: Dict[str, Any], transform: Optional[Tensor]=None) -> Tensor:
        transformations = {'brightness': lambda img, factor: adjust_brightness(img, factor) if factor != 1.0 else img, 'contrast': lambda img, factor: adjust_contrast(img, factor) if factor != 1.0 else img, 'saturation': lambda img, factor: adjust_saturation(img, factor) if factor != 1.0 else img, 'hue': lambda img, factor: adjust_hue(img, factor) if factor != 0.0 else img}
        order = params.get('order', ['brightness', 'contrast', 'saturation', 'hue'])
        for transform_name in order:
            factor = params.get(transform_name, 1.0)
>           input = transformations[transform_name](input, factor)
E           KeyError: tensor(2)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/intensity/color_jiggle.py:68: KeyError
_________________ TestColorJiggle.test_random_hue[cpu-float32] _________________

self = <test_augmentation.TestColorJiggle object at 0x7ddffd08afb0>
device = device(type='cpu'), dtype = torch.float32

    def test_random_hue(self, device, dtype):
        torch.manual_seed(42)
        f = ColorJiggle(hue=0.1 / pi.item())
    
        input = torch.tensor(
            [
                [
                    [[0.1, 0.2, 0.3], [0.6, 0.5, 0.4], [0.7, 0.8, 1.0]],
                    [[1.0, 0.5, 0.6], [0.6, 0.3, 0.2], [0.8, 0.1, 0.2]],
                    [[0.6, 0.8, 0.7], [0.9, 0.3, 0.2], [0.8, 0.4, 0.5]],
                ]
            ],
            device=device,
            dtype=dtype,
        )  # 1 x 1 x 3 x 3
        input = input.repeat(2, 1, 1, 1)  # 2 x 3 x 3
    
        expected = self._get_expected_hue(device, dtype)
    
>       self.assert_close(f(input), expected, low_tolerance=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1553: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:238: in forward
    output = self.apply_func(in_tensor, params, flags)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/base.py:129: in apply_func
    output = self.transform_inputs(in_tensor, params, flags, trans_matrix)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:297: in transform_inputs
    output = self.apply_transform(in_tensor, params, flags, transform=transform)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ColorJiggle(brightness=0.0, contrast=0.0, saturation=0.0, hue=0.03183098773260114, p=1.0, p_batch=1.0, same_on_batch=False)
input = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...2000]],

         [[0.6000, 0.8000, 0.7000],
          [0.9000, 0.3000, 0.2000],
          [0.8000, 0.4000, 0.5000]]]])
params = {'batch_prob': tensor([1., 1.]), 'brightness_factor': tensor([1., 1.]), 'contrast_factor': tensor([1., 1.]), 'forward_input_shape': tensor([2, 3, 3, 3]), ...}
flags = {}
transform = tensor([[[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]],

        [[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]]])

    def apply_transform(self, input: Tensor, params: Dict[str, Tensor], flags: Dict[str, Any], transform: Optional[Tensor]=None) -> Tensor:
        transformations = {'brightness': lambda img, factor: adjust_brightness(img, factor) if factor != 1.0 else img, 'contrast': lambda img, factor: adjust_contrast(img, factor) if factor != 1.0 else img, 'saturation': lambda img, factor: adjust_saturation(img, factor) if factor != 1.0 else img, 'hue': lambda img, factor: adjust_hue(img, factor) if factor != 0.0 else img}
        order = params.get('order', ['brightness', 'contrast', 'saturation', 'hue'])
        for transform_name in order:
            factor = params.get(transform_name, 1.0)
>           input = transformations[transform_name](input, factor)
E           KeyError: tensor(2)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/intensity/color_jiggle.py:68: KeyError
______________ TestColorJiggle.test_random_hue_list[cpu-float32] _______________

self = <test_augmentation.TestColorJiggle object at 0x7ddffd08b2e0>
device = device(type='cpu'), dtype = torch.float32

    def test_random_hue_list(self, device, dtype):
        torch.manual_seed(42)
        f = ColorJiggle(hue=[-0.1 / pi, 0.1 / pi])
    
        input = torch.tensor(
            [
                [
                    [[0.1, 0.2, 0.3], [0.6, 0.5, 0.4], [0.7, 0.8, 1.0]],
                    [[1.0, 0.5, 0.6], [0.6, 0.3, 0.2], [0.8, 0.1, 0.2]],
                    [[0.6, 0.8, 0.7], [0.9, 0.3, 0.2], [0.8, 0.4, 0.5]],
                ]
            ],
            device=device,
            dtype=dtype,
        )  # 1 x 1 x 3 x 3
        input = input.repeat(2, 1, 1, 1)  # 2 x 3 x 3
    
        expected = self._get_expected_hue(device, dtype)
    
>       self.assert_close(f(input), expected, low_tolerance=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1574: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:238: in forward
    output = self.apply_func(in_tensor, params, flags)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/base.py:129: in apply_func
    output = self.transform_inputs(in_tensor, params, flags, trans_matrix)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:297: in transform_inputs
    output = self.apply_transform(in_tensor, params, flags, transform=transform)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ColorJiggle(brightness=0.0, contrast=0.0, saturation=0.0, hue=[tensor(-0.0318), tensor(0.0318)], p=1.0, p_batch=1.0, same_on_batch=False)
input = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...2000]],

         [[0.6000, 0.8000, 0.7000],
          [0.9000, 0.3000, 0.2000],
          [0.8000, 0.4000, 0.5000]]]])
params = {'batch_prob': tensor([1., 1.]), 'brightness_factor': tensor([1., 1.]), 'contrast_factor': tensor([1., 1.]), 'forward_input_shape': tensor([2, 3, 3, 3]), ...}
flags = {}
transform = tensor([[[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]],

        [[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]]])

    def apply_transform(self, input: Tensor, params: Dict[str, Tensor], flags: Dict[str, Any], transform: Optional[Tensor]=None) -> Tensor:
        transformations = {'brightness': lambda img, factor: adjust_brightness(img, factor) if factor != 1.0 else img, 'contrast': lambda img, factor: adjust_contrast(img, factor) if factor != 1.0 else img, 'saturation': lambda img, factor: adjust_saturation(img, factor) if factor != 1.0 else img, 'hue': lambda img, factor: adjust_hue(img, factor) if factor != 0.0 else img}
        order = params.get('order', ['brightness', 'contrast', 'saturation', 'hue'])
        for transform_name in order:
            factor = params.get(transform_name, 1.0)
>           input = transformations[transform_name](input, factor)
E           KeyError: tensor(2)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/intensity/color_jiggle.py:68: KeyError
_________________ TestColorJiggle.test_sequential[cpu-float32] _________________

self = <test_augmentation.TestColorJiggle object at 0x7ddffd08b610>
device = device(type='cpu'), dtype = torch.float32

    def test_sequential(self, device, dtype):
        if dtype == torch.float16:
            pytest.skip("not work for half-precision")
    
        f = AugmentationSequential(ColorJiggle(), ColorJiggle())
    
        input = torch.rand(3, 5, 5, device=device, dtype=dtype).unsqueeze(0)  # 1 x 3 x 5 x 5
    
        expected = input
    
        expected_transform = torch.eye(3, device=device, dtype=dtype).unsqueeze(0)  # 3 x 3
    
>       self.assert_close(f(input), expected)

/local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1588: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/container/augment.py:496: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/container/augment.py:447: in forward
    outputs = self.transform_op.transform(  # type: ignore
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/container/ops.py:136: in transform
    outputs.append(op.transform(inp, module, param=param, extra_args=extra_arg))
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/container/ops.py:186: in transform
    input = module(input, params=cls.get_instance_module_param(param), data_keys=[DataKey.INPUT], **extra_args)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:280: in __call__
    _output_image = super().__call__(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:238: in forward
    output = self.apply_func(in_tensor, params, flags)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/base.py:129: in apply_func
    output = self.transform_inputs(in_tensor, params, flags, trans_matrix)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:297: in transform_inputs
    output = self.apply_transform(in_tensor, params, flags, transform=transform)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ColorJiggle(brightness=0.0, contrast=0.0, saturation=0.0, hue=0.0, p=1.0, p_batch=1.0, same_on_batch=False)
input = tensor([[[[0.5936, 0.8694, 0.5677, 0.7411, 0.4294],
          [0.8854, 0.5739, 0.2666, 0.6274, 0.2696],
          [0.4...41, 0.1088],
          [0.1637, 0.7025, 0.6790, 0.9155, 0.2418],
          [0.1591, 0.7653, 0.2979, 0.8035, 0.3813]]]])
params = {'batch_prob': tensor([1.]), 'brightness_factor': tensor([1.]), 'contrast_factor': tensor([1.]), 'data_keys': [<DataKey.IMAGE: 0>], ...}
flags = {'data_keys': [<DataKey.IMAGE: 0>]}
transform = tensor([[[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]]])

    def apply_transform(self, input: Tensor, params: Dict[str, Tensor], flags: Dict[str, Any], transform: Optional[Tensor]=None) -> Tensor:
        transformations = {'brightness': lambda img, factor: adjust_brightness(img, factor) if factor != 1.0 else img, 'contrast': lambda img, factor: adjust_contrast(img, factor) if factor != 1.0 else img, 'saturation': lambda img, factor: adjust_saturation(img, factor) if factor != 1.0 else img, 'hue': lambda img, factor: adjust_hue(img, factor) if factor != 0.0 else img}
        order = params.get('order', ['brightness', 'contrast', 'saturation', 'hue'])
        for transform_name in order:
            factor = params.get(transform_name, 1.0)
>           input = transformations[transform_name](input, factor)
E           KeyError: tensor(3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/intensity/color_jiggle.py:68: KeyError
_______ TestColorJiggle.test_color_jitter_batch_sequential[cpu-float32] ________

self = <test_augmentation.TestColorJiggle object at 0x7ddffd08b940>
device = device(type='cpu'), dtype = torch.float32

    def test_color_jitter_batch_sequential(self, device, dtype):
        if dtype == torch.float16:
            pytest.skip("not work for half-precision")
    
        f = AugmentationSequential(ColorJiggle(), ColorJiggle())
    
        input = torch.rand(2, 3, 5, 5, device=device, dtype=dtype)  # 2 x 3 x 5 x 5
        expected = input
    
        expected_transform = torch.eye(3, device=device, dtype=dtype).unsqueeze(0).expand((2, 3, 3))  # 2 x 3 x 3
    
>       self.assert_close(f(input), expected, low_tolerance=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1602: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/container/augment.py:496: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/container/augment.py:447: in forward
    outputs = self.transform_op.transform(  # type: ignore
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/container/ops.py:136: in transform
    outputs.append(op.transform(inp, module, param=param, extra_args=extra_arg))
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/container/ops.py:186: in transform
    input = module(input, params=cls.get_instance_module_param(param), data_keys=[DataKey.INPUT], **extra_args)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:280: in __call__
    _output_image = super().__call__(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:238: in forward
    output = self.apply_func(in_tensor, params, flags)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/base.py:129: in apply_func
    output = self.transform_inputs(in_tensor, params, flags, trans_matrix)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/base.py:297: in transform_inputs
    output = self.apply_transform(in_tensor, params, flags, transform=transform)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = ColorJiggle(brightness=0.0, contrast=0.0, saturation=0.0, hue=0.0, p=1.0, p_batch=1.0, same_on_batch=False)
input = tensor([[[[0.2137, 0.6249, 0.4340, 0.1371, 0.5117],
          [0.1585, 0.0758, 0.2247, 0.0624, 0.1816],
          [0.9...16, 0.0323],
          [0.7047, 0.2545, 0.3994, 0.2122, 0.4089],
          [0.1481, 0.1733, 0.6659, 0.3514, 0.8087]]]])
params = {'batch_prob': tensor([1., 1.]), 'brightness_factor': tensor([1., 1.]), 'contrast_factor': tensor([1., 1.]), 'data_keys': [<DataKey.IMAGE: 0>], ...}
flags = {'data_keys': [<DataKey.IMAGE: 0>]}
transform = tensor([[[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]],

        [[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]]])

    def apply_transform(self, input: Tensor, params: Dict[str, Tensor], flags: Dict[str, Any], transform: Optional[Tensor]=None) -> Tensor:
        transformations = {'brightness': lambda img, factor: adjust_brightness(img, factor) if factor != 1.0 else img, 'contrast': lambda img, factor: adjust_contrast(img, factor) if factor != 1.0 else img, 'saturation': lambda img, factor: adjust_saturation(img, factor) if factor != 1.0 else img, 'hue': lambda img, factor: adjust_hue(img, factor) if factor != 0.0 else img}
        order = params.get('order', ['brightness', 'contrast', 'saturation', 'hue'])
        for transform_name in order:
            factor = params.get(transform_name, 1.0)
>           input = transformations[transform_name](input, factor)
E           KeyError: tensor(3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/augmentation/_2d/intensity/color_jiggle.py:68: KeyError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle[cpu-float32-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle[cpu-float32-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle_batch[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_same_on_batch[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness_tuple[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast_list[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tensor[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tuple[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue_list[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_sequential[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jitter_batch_sequential[cpu-float32]
=================== 15 failed, 1 skipped, 1 xfailed in 2.54s ===================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python3
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'openxla', 'jit', 'cudagraphs', 'inductor', 'tvm', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 17 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_smoke XFAIL [  5%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle[cpu-float32-1] PASSED [ 11%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle[cpu-float32-3] PASSED [ 17%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle_batch[cpu-float32] PASSED [ 23%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_same_on_batch[cpu-float32] PASSED [ 29%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness[cpu-float32] PASSED [ 35%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness_tuple[cpu-float32] PASSED [ 41%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast[cpu-float32] PASSED [ 47%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast_list[cpu-float32] PASSED [ 52%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation[cpu-float32] PASSED [ 58%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tensor[cpu-float32] PASSED [ 64%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tuple[cpu-float32] PASSED [ 70%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue[cpu-float32] PASSED [ 76%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue_list[cpu-float32] PASSED [ 82%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_sequential[cpu-float32] PASSED [ 88%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jitter_batch_sequential[cpu-float32] PASSED [ 94%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_gradcheck[cpu] SKIPPED [100%]

=================== 15 passed, 1 skipped, 1 xfailed in 0.41s ===================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python3
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'jit', 'onnxrt', 'openxla', 'cudagraphs', 'tvm', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 17 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_smoke XFAIL [  5%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle[cpu-float32-1] PASSED [ 11%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle[cpu-float32-3] PASSED [ 17%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle_batch[cpu-float32] PASSED [ 23%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_same_on_batch[cpu-float32] PASSED [ 29%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness[cpu-float32] PASSED [ 35%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness_tuple[cpu-float32] PASSED [ 41%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast[cpu-float32] PASSED [ 47%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast_list[cpu-float32] PASSED [ 52%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation[cpu-float32] PASSED [ 58%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tensor[cpu-float32] PASSED [ 64%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tuple[cpu-float32] PASSED [ 70%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue[cpu-float32] PASSED [ 76%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue_list[cpu-float32] PASSED [ 82%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_sequential[cpu-float32] PASSED [ 88%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jitter_batch_sequential[cpu-float32] PASSED [ 94%]
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_gradcheck[cpu] SKIPPED [100%]

=================== 15 passed, 1 skipped, 1 xfailed in 0.41s ===================
