output file:
processed_korniargb_to_yuv420128.json
function:
rgb_to_yuv420
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_forth_and_back[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_white[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_module[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_forth_and_back[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_red[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_gradcheck[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_white[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_gray[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape3]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_smoke[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_gradcheck[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_gray[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_black[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_red[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_module[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape4] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape1]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_blue[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_smoke[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_black[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_blue[cpu-float32] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'onnxrt', 'tvm', 'cudagraphs', 'openxla', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 16 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_smoke[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape0] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape3] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_exception[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_white[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_black[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_gray[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_red[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_blue[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_forth_and_back[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_gradcheck[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_jit[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_module[cpu-float32] FAILED

=================================== FAILURES ===================================
___________________ TestRgbToYuv420.test_smoke[cpu-float32] ____________________

self = <test_yuv.TestRgbToYuv420 object at 0x7dd6b9d29f60>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke(self, device, dtype):
        C, H, W = 3, 4, 6
        img = torch.rand(C, H, W, device=device, dtype=dtype)
>       assert isinstance(kornia.color.rgb_to_yuv420(img)[0], torch.Tensor)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0.4228, 0.9551, 0.5004, 0.9050, 0.6077, 0.7985],
         [0.6363, 0.5579, 0.6584, 0.3195, 0.6093, 0.1079],
...         [0.6503, 0.0428, 0.2736, 0.0965, 0.4357, 0.2549],
         [0.3145, 0.7149, 0.7380, 0.6038, 0.8100, 0.6496]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W) and values in range (0, 1).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
>       _, _, H, W = image.shape
E       ValueError: not enough values to unpack (expected 4, got 3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:23: ValueError
_____________ TestRgbToYuv420.test_cardinality[cpu-float32-shape0] _____________

self = <test_yuv.TestRgbToYuv420 object at 0x7dd6b9d2a410>
device = device(type='cpu'), dtype = torch.float32, shape = (1, 3, 4, 4)

    @pytest.mark.parametrize("shape", [(1, 3, 4, 4), (2, 3, 2, 4), (3, 3, 4, 2), (3, 2, 2), (3, 3, 3, 4, 4)])
    def test_cardinality(self, device, dtype, shape):
        img = torch.ones(shape, device=device, dtype=dtype)
        shapey = list(shape)
        shapey[-3] = 1
        shapeuv = list(shape)
        shapeuv[-3] = 2
        shapeuv[-2] /= 2
        shapeuv[-1] /= 2
>       assert kornia.color.rgb_to_yuv420(img)[0].shape == tuple(shapey)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.]],

    ...]],

         [[1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.]]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W) and values in range (0, 1).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        _, _, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        original_shape = image.shape
        image = image.view(-1, 3, H, W)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([1], [1]))
        yuv = yuv.permute(0, 3, 1, 2)
        Y = yuv[..., 0:1]
        U = yuv[..., 1:2]
        V = yuv[..., 2:3]
        U_subsampled = U[..., ::2, ::2]
        V_subsampled = V[..., ::2, ::2]
        UV = torch.cat((U_subsampled, V_subsampled), dim=-1)
>       Y = Y.permute(0, 3, 1, 2).reshape(original_shape[:-3] + (1, H, W))
E       RuntimeError: shape '[1, 1, 4, 4]' is invalid for input of size 12

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:37: RuntimeError
_____________ TestRgbToYuv420.test_cardinality[cpu-float32-shape1] _____________

self = <test_yuv.TestRgbToYuv420 object at 0x7dd6b9d2a350>
device = device(type='cpu'), dtype = torch.float32, shape = (2, 3, 2, 4)

    @pytest.mark.parametrize("shape", [(1, 3, 4, 4), (2, 3, 2, 4), (3, 3, 4, 2), (3, 2, 2), (3, 3, 3, 4, 4)])
    def test_cardinality(self, device, dtype, shape):
        img = torch.ones(shape, device=device, dtype=dtype)
        shapey = list(shape)
        shapey[-3] = 1
        shapeuv = list(shape)
        shapeuv[-3] = 2
        shapeuv[-2] /= 2
        shapeuv[-1] /= 2
>       assert kornia.color.rgb_to_yuv420(img)[0].shape == tuple(shapey)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1.],
          [1., 1., 1., 1.]],

         [[1., 1., 1., 1.],
          [1., 1., 1., 1.]],

  ...,

         [[1., 1., 1., 1.],
          [1., 1., 1., 1.]],

         [[1., 1., 1., 1.],
          [1., 1., 1., 1.]]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W) and values in range (0, 1).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        _, _, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        original_shape = image.shape
        image = image.view(-1, 3, H, W)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([1], [1]))
        yuv = yuv.permute(0, 3, 1, 2)
        Y = yuv[..., 0:1]
        U = yuv[..., 1:2]
        V = yuv[..., 2:3]
        U_subsampled = U[..., ::2, ::2]
        V_subsampled = V[..., ::2, ::2]
        UV = torch.cat((U_subsampled, V_subsampled), dim=-1)
>       Y = Y.permute(0, 3, 1, 2).reshape(original_shape[:-3] + (1, H, W))
E       RuntimeError: shape '[2, 1, 2, 4]' is invalid for input of size 12

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:37: RuntimeError
_____________ TestRgbToYuv420.test_cardinality[cpu-float32-shape2] _____________

self = <test_yuv.TestRgbToYuv420 object at 0x7dd6b9d2a710>
device = device(type='cpu'), dtype = torch.float32, shape = (3, 3, 4, 2)

    @pytest.mark.parametrize("shape", [(1, 3, 4, 4), (2, 3, 2, 4), (3, 3, 4, 2), (3, 2, 2), (3, 3, 3, 4, 4)])
    def test_cardinality(self, device, dtype, shape):
        img = torch.ones(shape, device=device, dtype=dtype)
        shapey = list(shape)
        shapey[-3] = 1
        shapeuv = list(shape)
        shapeuv[-3] = 2
        shapeuv[-2] /= 2
        shapeuv[-1] /= 2
>       assert kornia.color.rgb_to_yuv420(img)[0].shape == tuple(shapey)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1.],
          [1., 1.],
          [1., 1.],
          [1., 1.]],

         [[1., 1.],
          [1., 1...     [1., 1.],
          [1., 1.]],

         [[1., 1.],
          [1., 1.],
          [1., 1.],
          [1., 1.]]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W) and values in range (0, 1).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        _, _, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        original_shape = image.shape
        image = image.view(-1, 3, H, W)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([1], [1]))
        yuv = yuv.permute(0, 3, 1, 2)
        Y = yuv[..., 0:1]
        U = yuv[..., 1:2]
        V = yuv[..., 2:3]
        U_subsampled = U[..., ::2, ::2]
        V_subsampled = V[..., ::2, ::2]
        UV = torch.cat((U_subsampled, V_subsampled), dim=-1)
>       Y = Y.permute(0, 3, 1, 2).reshape(original_shape[:-3] + (1, H, W))
E       RuntimeError: shape '[3, 1, 4, 2]' is invalid for input of size 36

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:37: RuntimeError
_____________ TestRgbToYuv420.test_cardinality[cpu-float32-shape3] _____________

self = <test_yuv.TestRgbToYuv420 object at 0x7dd6b9d2a7d0>
device = device(type='cpu'), dtype = torch.float32, shape = (3, 2, 2)

    @pytest.mark.parametrize("shape", [(1, 3, 4, 4), (2, 3, 2, 4), (3, 3, 4, 2), (3, 2, 2), (3, 3, 3, 4, 4)])
    def test_cardinality(self, device, dtype, shape):
        img = torch.ones(shape, device=device, dtype=dtype)
        shapey = list(shape)
        shapey[-3] = 1
        shapeuv = list(shape)
        shapeuv[-3] = 2
        shapeuv[-2] /= 2
        shapeuv[-1] /= 2
>       assert kornia.color.rgb_to_yuv420(img)[0].shape == tuple(shapey)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[1., 1.],
         [1., 1.]],

        [[1., 1.],
         [1., 1.]],

        [[1., 1.],
         [1., 1.]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W) and values in range (0, 1).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
>       _, _, H, W = image.shape
E       ValueError: not enough values to unpack (expected 4, got 3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:23: ValueError
_____________ TestRgbToYuv420.test_cardinality[cpu-float32-shape4] _____________

self = <test_yuv.TestRgbToYuv420 object at 0x7dd6b9d2a890>
device = device(type='cpu'), dtype = torch.float32, shape = (3, 3, 3, 4, 4)

    @pytest.mark.parametrize("shape", [(1, 3, 4, 4), (2, 3, 2, 4), (3, 3, 4, 2), (3, 2, 2), (3, 3, 3, 4, 4)])
    def test_cardinality(self, device, dtype, shape):
        img = torch.ones(shape, device=device, dtype=dtype)
        shapey = list(shape)
        shapey[-3] = 1
        shapeuv = list(shape)
        shapeuv[-3] = 2
        shapeuv[-2] /= 2
        shapeuv[-1] /= 2
>       assert kornia.color.rgb_to_yuv420(img)[0].shape == tuple(shapey)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[[1., 1., 1., 1.],
           [1., 1., 1., 1.],
           [1., 1., 1., 1.],
           [1., 1., 1., 1.]],

...          [[1., 1., 1., 1.],
           [1., 1., 1., 1.],
           [1., 1., 1., 1.],
           [1., 1., 1., 1.]]]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W) and values in range (0, 1).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
>       _, _, H, W = image.shape
E       ValueError: too many values to unpack (expected 4)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:23: ValueError
_________________ TestRgbToYuv420.test_exception[cpu-float32] __________________

self = <test_yuv.TestRgbToYuv420 object at 0x7dd6b9d2aa40>
device = device(type='cpu'), dtype = torch.float32

    def test_exception(self, device, dtype):
        with pytest.raises(TypeError):
>           assert kornia.color.rgb_to_yuv420([0.0])

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = [0.0]

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W) and values in range (0, 1).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
>       if image.dim() < 3 or image.size(-3) != 3:
E       AttributeError: 'list' object has no attribute 'dim'

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:21: AttributeError
_________________ TestRgbToYuv420.test_unit_white[cpu-float32] _________________

self = <test_yuv.TestRgbToYuv420 object at 0x7dd6b9d2ad70>
device = device(type='cpu'), dtype = torch.float32

    def test_unit_white(self, device, dtype):  # skipcq: PYL-R0201
        rgb = (
            torch.tensor(
                [[[255, 255], [255, 255]], [[255, 255], [255, 255]], [[255, 255], [255, 255]]],
                device=device,
                dtype=torch.uint8,
            ).type(dtype)
            / 255.0
        )
        refy = torch.tensor([[[255, 255], [255, 255]]], device=device, dtype=torch.uint8)
        refuv = torch.tensor([[[0]], [[0]]], device=device, dtype=torch.int8)
    
>       resy = (kornia.color.rgb_to_yuv420(rgb)[0] * 255.0).round().type(torch.uint8)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[1., 1.],
         [1., 1.]],

        [[1., 1.],
         [1., 1.]],

        [[1., 1.],
         [1., 1.]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W) and values in range (0, 1).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
>       _, _, H, W = image.shape
E       ValueError: not enough values to unpack (expected 4, got 3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:23: ValueError
_________________ TestRgbToYuv420.test_unit_black[cpu-float32] _________________

self = <test_yuv.TestRgbToYuv420 object at 0x7dd6b9d2b0a0>
device = device(type='cpu'), dtype = torch.float32

    def test_unit_black(self, device, dtype):  # skipcq: PYL-R0201
        rgb = (
            torch.tensor([[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]], device=device, dtype=torch.uint8).type(
                dtype
            )
            / 255.0
        )
        refy = torch.tensor([[[0, 0], [0, 0]]], device=device, dtype=torch.uint8)
        refuv = torch.tensor([[[0]], [[0]]], device=device, dtype=torch.int8)
    
>       resy = (kornia.color.rgb_to_yuv420(rgb)[0] * 255.0).round().type(torch.uint8)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0.],
         [0., 0.]],

        [[0., 0.],
         [0., 0.]],

        [[0., 0.],
         [0., 0.]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W) and values in range (0, 1).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
>       _, _, H, W = image.shape
E       ValueError: not enough values to unpack (expected 4, got 3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:23: ValueError
_________________ TestRgbToYuv420.test_unit_gray[cpu-float32] __________________

self = <test_yuv.TestRgbToYuv420 object at 0x7dd6b9d2b3d0>
device = device(type='cpu'), dtype = torch.float32

    def test_unit_gray(self, device, dtype):  # skipcq: PYL-R0201
        rgb = (
            torch.tensor(
                [[[127, 127], [127, 127]], [[127, 127], [127, 127]], [[127, 127], [127, 127]]],
                device=device,
                dtype=torch.uint8,
            ).type(dtype)
            / 255.0
        )
        refy = torch.tensor([[[127, 127], [127, 127]]], device=device, dtype=torch.uint8)
        refuv = torch.tensor([[[0]], [[0]]], device=device, dtype=torch.int8)
    
>       resy = (kornia.color.rgb_to_yuv420(rgb)[0] * 255.0).round().type(torch.uint8)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0.4980, 0.4980],
         [0.4980, 0.4980]],

        [[0.4980, 0.4980],
         [0.4980, 0.4980]],

        [[0.4980, 0.4980],
         [0.4980, 0.4980]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W) and values in range (0, 1).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
>       _, _, H, W = image.shape
E       ValueError: not enough values to unpack (expected 4, got 3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:23: ValueError
__________________ TestRgbToYuv420.test_unit_red[cpu-float32] __________________

self = <test_yuv.TestRgbToYuv420 object at 0x7dd6b9d2b700>
device = device(type='cpu'), dtype = torch.float32

    def test_unit_red(self, device, dtype):  # skipcq: PYL-R0201
        rgb = (
            torch.tensor(
                [[[255, 255], [255, 255]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]], device=device, dtype=torch.uint8
            ).type(dtype)
            / 255.0
        )
        refy = torch.tensor([[[76, 76], [76, 76]]], device=device, dtype=torch.uint8)
        refuv = torch.tensor([[[-37]], [[127]]], device=device, dtype=torch.int8)
    
>       resy = (kornia.color.rgb_to_yuv420(rgb)[0] * 255.0).round().type(torch.uint8)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[1., 1.],
         [1., 1.]],

        [[0., 0.],
         [0., 0.]],

        [[0., 0.],
         [0., 0.]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W) and values in range (0, 1).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
>       _, _, H, W = image.shape
E       ValueError: not enough values to unpack (expected 4, got 3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:23: ValueError
_________________ TestRgbToYuv420.test_unit_blue[cpu-float32] __________________

self = <test_yuv.TestRgbToYuv420 object at 0x7dd6b9d2ba30>
device = device(type='cpu'), dtype = torch.float32

    def test_unit_blue(self, device, dtype):  # skipcq: PYL-R0201
        rgb = (
            torch.tensor(
                [[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[255, 255], [255, 255]]], device=device, dtype=torch.uint8
            ).type(dtype)
            / 255.0
        )
        refy = torch.tensor([[[29, 29], [29, 29]]], device=device, dtype=torch.uint8)
        refuv = torch.tensor([[[111]], [[-25]]], device=device, dtype=torch.int8)
    
>       resy = (kornia.color.rgb_to_yuv420(rgb)[0] * 255.0).type(torch.uint8)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0.],
         [0., 0.]],

        [[0., 0.],
         [0., 0.]],

        [[1., 1.],
         [1., 1.]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W) and values in range (0, 1).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
>       _, _, H, W = image.shape
E       ValueError: not enough values to unpack (expected 4, got 3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:23: ValueError
_______________ TestRgbToYuv420.test_forth_and_back[cpu-float32] _______________

self = <test_yuv.TestRgbToYuv420 object at 0x7dd6b9d2bd60>
device = device(type='cpu'), dtype = torch.float32

    def test_forth_and_back(self, device, dtype):  # skipcq: PYL-R0201
        data = torch.rand(3, 4, 5, device=device, dtype=dtype).repeat_interleave(2, dim=2).repeat_interleave(2, dim=1)
    
        yuv = kornia.color.rgb_to_yuv420
        rgb = kornia.color.yuv420_to_rgb
>       (a, b) = yuv(data)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0.3112, 0.3112, 0.1433, 0.1433, 0.3327, 0.3327, 0.2795, 0.2795,
          0.2573, 0.2573],
         [0.3112,...0.2246, 0.2246],
         [0.4259, 0.4259, 0.1671, 0.1671, 0.3073, 0.3073, 0.1291, 0.1291,
          0.2246, 0.2246]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W) and values in range (0, 1).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
>       _, _, H, W = image.shape
E       ValueError: not enough values to unpack (expected 4, got 3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:23: ValueError
_________________ TestRgbToYuv420.test_gradcheck[cpu-float32] __________________

self = <test_yuv.TestRgbToYuv420 object at 0x7dd6b9d600d0>
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.grad()
    def test_gradcheck(self, device, dtype):
        B, C, H, W = 2, 3, 4, 4
        img = torch.rand(B, C, H, W, device=device, dtype=torch.float64, requires_grad=True)
>       assert gradcheck(kornia.color.rgb_to_yuv420, (img,), raise_exception=True, fast_mode=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:206: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.1889, 0.4188, 0.4637, 0.8626],
          [0.0768, 0.0981, 0.8472, 0.2027],
          [0.5417, 0.1687, 0.2...1, 0.7888, 0.7674],
          [0.6487, 0.3985, 0.6996, 0.9060]]]], dtype=torch.float64,
       grad_fn=<ViewBackward0>)

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W) and values in range (0, 1).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        _, _, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        original_shape = image.shape
        image = image.view(-1, 3, H, W)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([1], [1]))
        yuv = yuv.permute(0, 3, 1, 2)
        Y = yuv[..., 0:1]
        U = yuv[..., 1:2]
        V = yuv[..., 2:3]
        U_subsampled = U[..., ::2, ::2]
        V_subsampled = V[..., ::2, ::2]
        UV = torch.cat((U_subsampled, V_subsampled), dim=-1)
>       Y = Y.permute(0, 3, 1, 2).reshape(original_shape[:-3] + (1, H, W))
E       RuntimeError: shape '[2, 1, 4, 4]' is invalid for input of size 24

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:37: RuntimeError
____________________ TestRgbToYuv420.test_jit[cpu-float32] _____________________

self = <test_yuv.TestRgbToYuv420 object at 0x7dd6b9d60400>
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.jit()
    def test_jit(self, device, dtype):
        B, C, H, W = 2, 3, 4, 4
        img = torch.ones(B, C, H, W, device=device, dtype=dtype)
        op = kornia.color.rgb_to_yuv420
>       op_jit = torch.jit.script(op)

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/_script.py:1429: in script
    ret = _script_impl(
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/_script.py:1202: in _script_impl
    ast = get_jit_def(obj, obj.__name__)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:383: in get_jit_def
    return build_def(
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:444: in build_def
    return Def(Ident(r, def_name), decl, build_stmts(ctx, body))
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:197: in build_stmts
    stmts = [build_stmt(ctx, s) for s in stmts]
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:197: in <listcomp>
    stmts = [build_stmt(ctx, s) for s in stmts]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.jit.frontend.StmtBuilder object at 0x7dd78f989bd0>
ctx = <torch._sources.SourceContext object at 0x7dd6b9df92b0>
node = <ast.ImportFrom object at 0x7dd6b966f400>

    def __call__(self, ctx, node):
        method = getattr(self, "build_" + node.__class__.__name__, None)
        if method is None:
>           raise UnsupportedNodeError(ctx, node)
E           torch.jit.frontend.UnsupportedNodeError: import statements aren't supported:
E             File "/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py", line 44
E           def rgb_to_yuv420(image: Tensor) -> tuple[Tensor, Tensor]:
E               from .temp import rgb_to_yuv420
E               ~~~~ <--- HERE
E               return rgb_to_yuv420(image)

/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:416: UnsupportedNodeError
___________________ TestRgbToYuv420.test_module[cpu-float32] ___________________

self = <test_yuv.TestRgbToYuv420 object at 0x7dd6b9d60730>
device = device(type='cpu'), dtype = torch.float32

    def test_module(self, device, dtype):
        B, C, H, W = 2, 3, 4, 4
        img = torch.ones(B, C, H, W, device=device, dtype=dtype)
        ops = kornia.color.RgbToYuv420().to(device, dtype)
        fcn = kornia.color.rgb_to_yuv420
>       self.assert_close(ops(img)[0], fcn(img)[0])

/local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py:222: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:282: in forward
    return rgb_to_yuv420(yuvinput)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.]],

    ...]],

         [[1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.]]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Convert an RGB image to YUV 420 format.
    
        Args:
            image (torch.Tensor): Input image tensor with shape (*, 3, H, W) and values in range (0, 1).
    
        Returns:
            Tuple[torch.Tensor, torch.Tensor]:
                - Y plane with shape (*, 1, H, W)
                - UV planes with shape (*, 2, H/2, W/2)
        """
        if image.dim() < 3 or image.size(-3) != 3:
            raise ValueError('Input image must have shape (*, 3, H, W)')
        _, _, H, W = image.shape
        if H % 2 != 0 or W % 2 != 0:
            raise ValueError('Height and width of the image must be even numbers')
        rgb_to_yuv_matrix = torch.tensor([[0.299, 0.587, 0.114], [-0.14713, -0.28886, 0.436], [0.615, -0.51499, -0.10001]], dtype=image.dtype, device=image.device)
        original_shape = image.shape
        image = image.view(-1, 3, H, W)
        yuv = torch.tensordot(image, rgb_to_yuv_matrix, dims=([1], [1]))
        yuv = yuv.permute(0, 3, 1, 2)
        Y = yuv[..., 0:1]
        U = yuv[..., 1:2]
        V = yuv[..., 2:3]
        U_subsampled = U[..., ::2, ::2]
        V_subsampled = V[..., ::2, ::2]
        UV = torch.cat((U_subsampled, V_subsampled), dim=-1)
>       Y = Y.permute(0, 3, 1, 2).reshape(original_shape[:-3] + (1, H, W))
E       RuntimeError: shape '[2, 1, 4, 4]' is invalid for input of size 24

/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/temp.py:37: RuntimeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_smoke[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape0]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape3]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_exception[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_white[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_black[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_gray[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_red[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_blue[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_forth_and_back[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_gradcheck[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_jit[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_module[cpu-float32]
============================== 16 failed in 0.70s ==============================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'jit', 'cudagraphs', 'openxla', 'tvm', 'onnxrt', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 16 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_exception[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_white[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_black[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_gray[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_red[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_blue[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_forth_and_back[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_gradcheck[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_jit[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_module[cpu-float32] PASSED

============================== 16 passed in 0.22s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'inductor', 'jit', 'cudagraphs', 'openxla', 'tvm', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 16 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_exception[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_white[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_black[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_gray[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_red[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_blue[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_forth_and_back[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_gradcheck[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_jit[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_module[cpu-float32] PASSED

============================== 16 passed in 0.22s ==============================
