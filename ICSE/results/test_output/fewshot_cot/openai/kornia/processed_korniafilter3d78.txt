output file:
processed_korniafilter3d78.json
function:
filter3d
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-replicate] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-constant] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-circular] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-reflect]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-circular] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-constant]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-False] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_normalized_mean_filter[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-reflect] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-circular]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_even_sized_filter[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-reflect]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_gradcheck[cpu]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-True]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_even_sized_filter[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-replicate]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-constant]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-replicate]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-reflect] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_normalized_mean_filter[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-constant] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_gradcheck[cpu] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter_2batch_2ch[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-False]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-6]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_noncontiguous[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-True] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-replicate] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_noncontiguous[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-circular]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter_2batch_2ch[cpu-float32] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'inductor', 'jit', 'onnxrt', 'openxla', 'tvm', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 22 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-constant] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-reflect] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-replicate] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-circular] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-constant] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-reflect] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-replicate] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-circular] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-3] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-6] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_exception FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter_2batch_2ch[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_normalized_mean_filter[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_even_sized_filter[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_noncontiguous[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_gradcheck[cpu] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_module SKIPPED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-True] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-False] FAILED

=================================== FAILURES ===================================
______________ TestFilter3D.test_smoke[cpu-float32-True-constant] ______________

self = <test_filters.TestFilter3D object at 0x7ee240532200>
border_type = 'constant', normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("border_type", ["constant", "reflect", "replicate", "circular"])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, border_type, normalized, device, dtype):
        if torch_version_le(1, 9, 1) and border_type == "reflect":
            pytest.skip(reason="Reflect border is not implemented for 3D on torch < 1.9.1")
    
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(1, 1, 6, 7, 8, device=device, dtype=dtype)
>       actual = filter3d(data, kernel, border_type, normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., ... 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.]]]]])
kernel = tensor([[[[0.7918, 0.0814, 0.4837],
          [0.0834, 0.2221, 0.0577],
          [0.2135, 0.1767, 0.5726]],

        ...9372]],

         [[0.6113, 0.2081, 0.0206],
          [0.2388, 0.3055, 0.0823],
          [0.0612, 0.0019, 0.1522]]]])
border_type = 'constant', normalized = True

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
______________ TestFilter3D.test_smoke[cpu-float32-True-reflect] _______________

self = <test_filters.TestFilter3D object at 0x7ee240532020>
border_type = 'reflect', normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("border_type", ["constant", "reflect", "replicate", "circular"])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, border_type, normalized, device, dtype):
        if torch_version_le(1, 9, 1) and border_type == "reflect":
            pytest.skip(reason="Reflect border is not implemented for 3D on torch < 1.9.1")
    
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(1, 1, 6, 7, 8, device=device, dtype=dtype)
>       actual = filter3d(data, kernel, border_type, normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., ... 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.]]]]])
kernel = tensor([[[[0.5414, 0.2219, 0.1226],
          [0.9511, 0.8277, 0.6588],
          [0.5912, 0.2287, 0.2153]],

        ...4029]],

         [[0.8750, 0.6432, 0.0600],
          [0.2725, 0.8360, 0.1073],
          [0.5736, 0.6904, 0.8231]]]])
border_type = 'reflect', normalized = True

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
_____________ TestFilter3D.test_smoke[cpu-float32-True-replicate] ______________

self = <test_filters.TestFilter3D object at 0x7ee240532560>
border_type = 'replicate', normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("border_type", ["constant", "reflect", "replicate", "circular"])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, border_type, normalized, device, dtype):
        if torch_version_le(1, 9, 1) and border_type == "reflect":
            pytest.skip(reason="Reflect border is not implemented for 3D on torch < 1.9.1")
    
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(1, 1, 6, 7, 8, device=device, dtype=dtype)
>       actual = filter3d(data, kernel, border_type, normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., ... 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.]]]]])
kernel = tensor([[[[0.9181, 0.6615, 0.3621],
          [0.4883, 0.5791, 0.1866],
          [0.5886, 0.2299, 0.9356]],

        ...1101]],

         [[0.1583, 0.7367, 0.8635],
          [0.5531, 0.0049, 0.6134],
          [0.4400, 0.8568, 0.8091]]]])
border_type = 'replicate', normalized = True

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
______________ TestFilter3D.test_smoke[cpu-float32-True-circular] ______________

self = <test_filters.TestFilter3D object at 0x7ee240532620>
border_type = 'circular', normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("border_type", ["constant", "reflect", "replicate", "circular"])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, border_type, normalized, device, dtype):
        if torch_version_le(1, 9, 1) and border_type == "reflect":
            pytest.skip(reason="Reflect border is not implemented for 3D on torch < 1.9.1")
    
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(1, 1, 6, 7, 8, device=device, dtype=dtype)
>       actual = filter3d(data, kernel, border_type, normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., ... 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.]]]]])
kernel = tensor([[[[0.1826, 0.8931, 0.2499],
          [0.2694, 0.7256, 0.4298],
          [0.8261, 0.5553, 0.5104]],

        ...4715]],

         [[0.7158, 0.9160, 0.2427],
          [0.5217, 0.9481, 0.9567],
          [0.0745, 0.0437, 0.8677]]]])
border_type = 'circular', normalized = True

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
_____________ TestFilter3D.test_smoke[cpu-float32-False-constant] ______________

self = <test_filters.TestFilter3D object at 0x7ee2405326e0>
border_type = 'constant', normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("border_type", ["constant", "reflect", "replicate", "circular"])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, border_type, normalized, device, dtype):
        if torch_version_le(1, 9, 1) and border_type == "reflect":
            pytest.skip(reason="Reflect border is not implemented for 3D on torch < 1.9.1")
    
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(1, 1, 6, 7, 8, device=device, dtype=dtype)
>       actual = filter3d(data, kernel, border_type, normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., ... 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.]]]]])
kernel = tensor([[[[0.9619, 0.1781, 0.6559],
          [0.3612, 0.7075, 0.1278],
          [0.0064, 0.2974, 0.5338]],

        ...3574]],

         [[0.3867, 0.9886, 0.7547],
          [0.8303, 0.8758, 0.5593],
          [0.8046, 0.6867, 0.9157]]]])
border_type = 'constant', normalized = False

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
______________ TestFilter3D.test_smoke[cpu-float32-False-reflect] ______________

self = <test_filters.TestFilter3D object at 0x7ee2405327a0>
border_type = 'reflect', normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("border_type", ["constant", "reflect", "replicate", "circular"])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, border_type, normalized, device, dtype):
        if torch_version_le(1, 9, 1) and border_type == "reflect":
            pytest.skip(reason="Reflect border is not implemented for 3D on torch < 1.9.1")
    
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(1, 1, 6, 7, 8, device=device, dtype=dtype)
>       actual = filter3d(data, kernel, border_type, normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., ... 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.]]]]])
kernel = tensor([[[[0.5996, 0.3136, 0.5256],
          [0.6230, 0.0414, 0.9152],
          [0.9838, 0.7020, 0.6681]],

        ...4061]],

         [[0.1532, 0.3182, 0.8601],
          [0.3246, 0.8441, 0.3239],
          [0.3369, 0.3153, 0.2498]]]])
border_type = 'reflect', normalized = False

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
_____________ TestFilter3D.test_smoke[cpu-float32-False-replicate] _____________

self = <test_filters.TestFilter3D object at 0x7ee240532860>
border_type = 'replicate', normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("border_type", ["constant", "reflect", "replicate", "circular"])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, border_type, normalized, device, dtype):
        if torch_version_le(1, 9, 1) and border_type == "reflect":
            pytest.skip(reason="Reflect border is not implemented for 3D on torch < 1.9.1")
    
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(1, 1, 6, 7, 8, device=device, dtype=dtype)
>       actual = filter3d(data, kernel, border_type, normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., ... 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.]]]]])
kernel = tensor([[[[0.8740, 0.3809, 0.4381],
          [0.0290, 0.8688, 0.7900],
          [0.5877, 0.1469, 0.9650]],

        ...3912]],

         [[0.2853, 0.0147, 0.4522],
          [0.0741, 0.5851, 0.3901],
          [0.6302, 0.3642, 0.6015]]]])
border_type = 'replicate', normalized = False

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
_____________ TestFilter3D.test_smoke[cpu-float32-False-circular] ______________

self = <test_filters.TestFilter3D object at 0x7ee240532920>
border_type = 'circular', normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("border_type", ["constant", "reflect", "replicate", "circular"])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, border_type, normalized, device, dtype):
        if torch_version_le(1, 9, 1) and border_type == "reflect":
            pytest.skip(reason="Reflect border is not implemented for 3D on torch < 1.9.1")
    
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(1, 1, 6, 7, 8, device=device, dtype=dtype)
>       actual = filter3d(data, kernel, border_type, normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., ... 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.]]]]])
kernel = tensor([[[[0.0031, 0.0255, 0.0396],
          [0.3160, 0.4360, 0.7683],
          [0.0775, 0.8435, 0.6192]],

        ...0150]],

         [[0.1959, 0.4822, 0.0076],
          [0.5453, 0.1779, 0.0324],
          [0.5905, 0.4374, 0.9365]]]])
border_type = 'circular', normalized = False

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
_________________ TestFilter3D.test_cardinality[cpu-float32-2] _________________

self = <test_filters.TestFilter3D object at 0x7ee240532cb0>, batch_size = 2
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [2, 3, 6, 8])
    def test_cardinality(self, batch_size, device, dtype):
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(batch_size, 3, 6, 7, 8, device=device, dtype=dtype)
>       assert filter3d(data, kernel).shape == data.shape

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:390: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1....., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.]]]]])
kernel = tensor([[[[0.0872, 0.0824, 0.2632],
          [0.5109, 0.7805, 0.0463],
          [0.4888, 0.1647, 0.7088]],

        ...0765]],

         [[0.3862, 0.6717, 0.5311],
          [0.3535, 0.2150, 0.4964],
          [0.9627, 0.6074, 0.0970]]]])
border_type = 'replicate', normalized = False

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
_________________ TestFilter3D.test_cardinality[cpu-float32-3] _________________

self = <test_filters.TestFilter3D object at 0x7ee240532bf0>, batch_size = 3
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [2, 3, 6, 8])
    def test_cardinality(self, batch_size, device, dtype):
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(batch_size, 3, 6, 7, 8, device=device, dtype=dtype)
>       assert filter3d(data, kernel).shape == data.shape

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:390: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1....., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.]]]]])
kernel = tensor([[[[0.0384, 0.0758, 0.4154],
          [0.2050, 0.6352, 0.5070],
          [0.3767, 0.5681, 0.0234]],

        ...4037]],

         [[0.5845, 0.9536, 0.7004],
          [0.9315, 0.2038, 0.6849],
          [0.4763, 0.1162, 0.1032]]]])
border_type = 'replicate', normalized = False

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
_________________ TestFilter3D.test_cardinality[cpu-float32-6] _________________

self = <test_filters.TestFilter3D object at 0x7ee240532f50>, batch_size = 6
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [2, 3, 6, 8])
    def test_cardinality(self, batch_size, device, dtype):
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(batch_size, 3, 6, 7, 8, device=device, dtype=dtype)
>       assert filter3d(data, kernel).shape == data.shape

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:390: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1....., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.]]]]])
kernel = tensor([[[[0.0186, 0.0695, 0.2347],
          [0.5446, 0.5389, 0.7537],
          [0.7887, 0.1352, 0.4405]],

        ...4530]],

         [[0.8337, 0.4403, 0.8079],
          [0.5925, 0.5911, 0.3778],
          [0.4517, 0.3503, 0.4661]]]])
border_type = 'replicate', normalized = False

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
_________________ TestFilter3D.test_cardinality[cpu-float32-8] _________________

self = <test_filters.TestFilter3D object at 0x7ee240533010>, batch_size = 8
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [2, 3, 6, 8])
    def test_cardinality(self, batch_size, device, dtype):
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(batch_size, 3, 6, 7, 8, device=device, dtype=dtype)
>       assert filter3d(data, kernel).shape == data.shape

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:390: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1....., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.]]]]])
kernel = tensor([[[[0.5044, 0.7754, 0.0541],
          [0.5998, 0.3688, 0.9603],
          [0.5436, 0.0087, 0.7432]],

        ...2517]],

         [[0.7931, 0.9809, 0.8751],
          [0.9435, 0.7754, 0.5258],
          [0.4716, 0.5241, 0.4889]]]])
border_type = 'replicate', normalized = False

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
_________________________ TestFilter3D.test_exception __________________________

self = <test_filters.TestFilter3D object at 0x7ee2405331c0>

    def test_exception(self):
        k = torch.ones(1, 1, 1, 1)
        data = torch.ones(1, 1, 1, 1, 1)
        with pytest.raises(TypeError) as errinfo:
>           filter3d(1, k)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:396: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = 1, kernel = tensor([[[[1.]]]]), border_type = 'replicate'
normalized = False

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
>       if input.dim() != 5:
E       AttributeError: 'int' object has no attribute 'dim'

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:22: AttributeError
__________________ TestFilter3D.test_mean_filter[cpu-float32] __________________

self = <test_filters.TestFilter3D object at 0x7ee2405334c0>
device = device(type='cpu'), dtype = torch.float32

    def test_mean_filter(self, device, dtype):
        kernel = torch.ones(1, 3, 3, 3, device=device, dtype=dtype)
        sample = torch.tensor(
            [
                [
                    [
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 5.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected = torch.tensor(
            [
                [
                    [
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       actual = filter3d(sample, kernel)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:481: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0.,...0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.]]]]])
kernel = tensor([[[[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]],

         [[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]],

         [[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]]]])
border_type = 'replicate', normalized = False

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
____________ TestFilter3D.test_mean_filter_2batch_2ch[cpu-float32] _____________

self = <test_filters.TestFilter3D object at 0x7ee2405337f0>
device = device(type='cpu'), dtype = torch.float32

    def test_mean_filter_2batch_2ch(self, device, dtype):
        kernel = torch.ones(1, 3, 3, 3, device=device, dtype=dtype)
        sample = torch.tensor(
            [
                [
                    [
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 5.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
        sample = sample.expand(2, 2, -1, -1, -1)
    
        expected = torch.tensor(
            [
                [
                    [
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
        expected = expected.expand(2, 2, -1, -1, -1)
    
>       actual = filter3d(sample, kernel)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:552: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0.,...0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.]]]]])
kernel = tensor([[[[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]],

         [[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]],

         [[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]]]])
border_type = 'replicate', normalized = False

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
____________ TestFilter3D.test_normalized_mean_filter[cpu-float32] _____________

self = <test_filters.TestFilter3D object at 0x7ee240533b20>
device = device(type='cpu'), dtype = torch.float32

    def test_normalized_mean_filter(self, device, dtype):
        kernel = torch.ones(1, 3, 3, 3, device=device, dtype=dtype)
        sample = torch.tensor(
            [
                [
                    [
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 5.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
        sample = sample.expand(2, 2, -1, -1, -1)
    
        nv = 5.0 / 27  # normalization value
        expected = torch.tensor(
            [
                [
                    [
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, nv, nv, nv, 0.0],
                            [0.0, nv, nv, nv, 0.0],
                            [0.0, nv, nv, nv, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, nv, nv, nv, 0.0],
                            [0.0, nv, nv, nv, 0.0],
                            [0.0, nv, nv, nv, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, nv, nv, nv, 0.0],
                            [0.0, nv, nv, nv, 0.0],
                            [0.0, nv, nv, nv, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
        expected = expected.expand(2, 2, -1, -1, -1)
    
>       actual = filter3d(sample, kernel, normalized=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:624: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0.,...0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.]]]]])
kernel = tensor([[[[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]],

         [[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]],

         [[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]]]])
border_type = 'replicate', normalized = True

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
_______________ TestFilter3D.test_even_sized_filter[cpu-float32] _______________

self = <test_filters.TestFilter3D object at 0x7ee240533e50>
device = device(type='cpu'), dtype = torch.float32

    def test_even_sized_filter(self, device, dtype):
        kernel = torch.ones(1, 2, 2, 2, device=device, dtype=dtype)
        sample = torch.tensor(
            [
                [
                    [
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 5.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected = torch.tensor(
            [
                [
                    [
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       actual = filter3d(sample, kernel)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:694: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0.,...0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.]]]]])
kernel = tensor([[[[1., 1.],
          [1., 1.]],

         [[1., 1.],
          [1., 1.]]]])
border_type = 'replicate', normalized = False

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
_________________ TestFilter3D.test_noncontiguous[cpu-float32] _________________

self = <test_filters.TestFilter3D object at 0x7ee2405581c0>
device = device(type='cpu'), dtype = torch.float32

    def test_noncontiguous(self, device, dtype):
        batch_size = 3
        inp = torch.rand(3, 5, 5, 5, device=device, dtype=dtype).expand(batch_size, -1, -1, -1, -1)
        kernel = torch.ones(1, 2, 2, 2, device=device, dtype=dtype)
    
>       actual = filter3d(inp, kernel)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:702: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[0.6955, 0.3589, 0.8642, 0.8487, 0.6219],
           [0.4087, 0.4860, 0.6404, 0.0742, 0.7574],
           [... 0.1348],
           [0.7156, 0.6683, 0.8544, 0.0159, 0.9222],
           [0.5812, 0.5423, 0.4201, 0.4789, 0.1680]]]]])
kernel = tensor([[[[1., 1.],
          [1., 1.]],

         [[1., 1.],
          [1., 1.]]]])
border_type = 'replicate', normalized = False

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
_______________________ TestFilter3D.test_gradcheck[cpu] _______________________

self = <test_filters.TestFilter3D object at 0x7ee240558490>
device = device(type='cpu')

    def test_gradcheck(self, device):
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=torch.float64)
        sample = torch.ones(1, 1, 6, 7, 8, device=device, dtype=torch.float64)
    
        # evaluate function gradient
>       self.gradcheck(filter3d, (sample, kernel), nondet_tol=1e-8)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., ..., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.]]]]], dtype=torch.float64,
       requires_grad=True)
kernel = tensor([[[[0.2836, 0.6834, 0.3891],
          [0.1623, 0.5043, 0.0053],
          [0.4281, 0.6078, 0.9934]],

        ...4],
          [0.3511, 0.4979, 0.4166],
          [0.7251, 0.8369, 0.1468]]]], dtype=torch.float64, requires_grad=True)
border_type = 'replicate', normalized = False

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
_____________ TestFilter3D.test_dynamo[cpu-float32-inductor-True] ______________

self = <test_filters.TestFilter3D object at 0x7ee240558ac0>, normalized = True
device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7ee31592b400>, backend='inductor')

    @pytest.mark.parametrize("normalized", [True, False])
    def test_dynamo(self, normalized, device, dtype, torch_optimizer):
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(2, 3, 4, 10, 10, device=device, dtype=dtype)
        op = filter3d
        op_optimized = torch_optimizer(op)
    
>       expected = op(data, kernel, normalized=normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1....., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.]]]]])
kernel = tensor([[[[0.7537, 0.2225, 0.9692],
          [0.2334, 0.3288, 0.4143],
          [0.9577, 0.0740, 0.9170]],

        ...9987]],

         [[0.8039, 0.2314, 0.2740],
          [0.9913, 0.2661, 0.0894],
          [0.1880, 0.9207, 0.1384]]]])
border_type = 'replicate', normalized = True

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
_____________ TestFilter3D.test_dynamo[cpu-float32-inductor-False] _____________

self = <test_filters.TestFilter3D object at 0x7ee240558a30>, normalized = False
device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7ee31592b400>, backend='inductor')

    @pytest.mark.parametrize("normalized", [True, False])
    def test_dynamo(self, normalized, device, dtype, torch_optimizer):
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(2, 3, 4, 10, 10, device=device, dtype=dtype)
        op = filter3d
        op_optimized = torch_optimizer(op)
    
>       expected = op(data, kernel, normalized=normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1....., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.]]]]])
kernel = tensor([[[[0.8618, 0.6362, 0.1435],
          [0.2464, 0.6591, 0.5745],
          [0.9914, 0.2604, 0.5991]],

        ...4196]],

         [[0.5300, 0.8609, 0.9622],
          [0.7231, 0.4986, 0.9295],
          [0.2687, 0.2086, 0.2959]]]])
border_type = 'replicate', normalized = False

    def filter3d(input: torch.Tensor, kernel: torch.Tensor, border_type: str='zeros', normalized: bool=False) -> torch.Tensor:
        """
        Convolve a 3D kernel with a given input tensor.
    
        Args:
            input (torch.Tensor): Input tensor of shape (B, C, D, H, W).
            kernel (torch.Tensor): Kernel tensor to be convolved with the input.
            border_type (str): Padding mode to be applied before convolving. Options are 'zeros', 'reflect', 'replicate', 'circular'.
            normalized (bool): If True, L1 normalize the kernel.
    
        Returns:
            torch.Tensor: Convolved tensor of the same shape as the input (B, C, D, H, W).
        """
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel tensor must have 3 dimensions (D, H, W).')
E           ValueError: Kernel tensor must have 3 dimensions (D, H, W).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:25: ValueError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-constant]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-reflect]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-replicate]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-circular]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-constant]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-reflect]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-replicate]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-circular]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_exception
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter_2batch_2ch[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_normalized_mean_filter[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_even_sized_filter[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_noncontiguous[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_gradcheck[cpu]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-True]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-False]
======================== 21 failed, 1 skipped in 0.74s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'tvm', 'onnxrt', 'openxla', 'inductor', 'cudagraphs', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 22 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-constant] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-reflect] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-replicate] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-circular] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-constant] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-reflect] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-replicate] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-circular] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_exception PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter_2batch_2ch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_normalized_mean_filter[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_even_sized_filter[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_noncontiguous[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_module SKIPPED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-True] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-False] PASSED

======================== 21 passed, 1 skipped in 2.08s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'openxla', 'inductor', 'cudagraphs', 'onnxrt', 'tvm', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 22 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-constant] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-reflect] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-replicate] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-circular] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-constant] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-reflect] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-replicate] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-circular] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_exception PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter_2batch_2ch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_normalized_mean_filter[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_even_sized_filter[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_noncontiguous[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_module SKIPPED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-True] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-False] PASSED

======================== 21 passed, 1 skipped in 2.11s =========================
