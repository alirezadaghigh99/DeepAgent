output file:
processed_deepchemgenerate_global_features59.json
function:
generate_global_features
Error Cases:
2025-02-13 20:47:24.435418: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1739497644.446752 1279604 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
E0000 00:00:1739497644.450499 1279604 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
2025-02-13 20:47:24.462932: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
[20:47:26] WARNING: not removing hydrogen atom without neighbors
[20:47:26] WARNING: not removing hydrogen atom without neighbors
[20:47:26] WARNING: not removing hydrogen atom without neighbors
[20:47:26] WARNING: not removing hydrogen atom without neighbors
[20:47:26] WARNING: not removing hydrogen atom without neighbors
[20:47:26] WARNING: not removing hydrogen atom without neighbors
[20:47:26] WARNING: not removing hydrogen atom without neighbors
[20:47:26] WARNING: not removing hydrogen atom without neighbors

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan_count', 'FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_rdkit_desc_normalized', '../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_rdkit_desc_normalized FAILED', '../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_rdkit_desc FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan_with_invalid_name', '../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan_twice FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan', '../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_invalid_name FAILED', '../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan_count FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan_twice', '../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_hydrogen FAILED', '../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_hydrogen', 'FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_invalid_name', '../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan_with_invalid_name FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_rdkit_desc'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/deepchem/deepchem/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/deepchem/deepchem
configfile: setup.cfg
plugins: flaky-3.8.1
collecting ... collected 8 items

../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_hydrogen FAILED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_invalid_name FAILED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan FAILED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan_count FAILED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan_twice FAILED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan_with_invalid_name FAILED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_rdkit_desc FAILED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_rdkit_desc_normalized FAILED

=================================== FAILURES ===================================
______________ TestGlobalFeatureGenerator.test_generator_hydrogen ______________

self = <deepchem.feat.tests.test_global_feature_generator_dmpnn.TestGlobalFeatureGenerator testMethod=test_generator_hydrogen>

    def test_generator_hydrogen(self):
        """
        Test for generator when provided RDKit mol contains only Hydrogen atoms
        """
>       global_features = generate_global_features(self.mol[1],
                                                   self.feature_generators[2])

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/molecule_featurizers/dmpnn_featurizer.py:222: in generate_global_features
    return generate_global_features(mol, features_generators)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mol = <rdkit.Chem.rdchem.Mol object at 0x7be304716f10>
features_generators = ['morgan', ''], replace_token = 0.0

    def generate_global_features(mol: Chem.Mol, features_generators: List[str], replace_token: float=0.0) -> np.ndarray:
        """
        Generate global features for a given RDKit molecule using specified feature generators.
    
        Args:
            mol (Chem.Mol): RDKit molecule object.
            features_generators (List[str]): List of feature generator names.
            replace_token (float): Value to replace NaNs in the feature array.
    
        Returns:
            np.ndarray: Array of global features.
        """
        global_features = []
        if mol.GetNumHeavyAtoms() == 0:
            mol = Chem.MolFromSmiles('C')
        for generator_name in features_generators:
            if generator_name in GraphConvConstants.FEATURE_GENERATORS:
                generator = GraphConvConstants.FEATURE_GENERATORS[generator_name]
                features = generator(mol)
                global_features.extend(features)
            else:
>               raise ValueError(f"Feature generator '{generator_name}' is not available.")
E               ValueError: Feature generator 'morgan' is not available.

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/molecule_featurizers/temp.py:45: ValueError
____________ TestGlobalFeatureGenerator.test_generator_invalid_name ____________

self = <deepchem.feat.tests.test_global_feature_generator_dmpnn.TestGlobalFeatureGenerator testMethod=test_generator_invalid_name>

    def test_generator_invalid_name(self):
        """
        Test for generator when given name of feature generator is not in the list of available generators
        """
>       global_features = generate_global_features(self.mol[0],
                                                   self.feature_generators[0])

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/molecule_featurizers/dmpnn_featurizer.py:222: in generate_global_features
    return generate_global_features(mol, features_generators)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mol = <rdkit.Chem.rdchem.Mol object at 0x7be3047b9f50>
features_generators = [''], replace_token = 0.0

    def generate_global_features(mol: Chem.Mol, features_generators: List[str], replace_token: float=0.0) -> np.ndarray:
        """
        Generate global features for a given RDKit molecule using specified feature generators.
    
        Args:
            mol (Chem.Mol): RDKit molecule object.
            features_generators (List[str]): List of feature generator names.
            replace_token (float): Value to replace NaNs in the feature array.
    
        Returns:
            np.ndarray: Array of global features.
        """
        global_features = []
        if mol.GetNumHeavyAtoms() == 0:
            mol = Chem.MolFromSmiles('C')
        for generator_name in features_generators:
            if generator_name in GraphConvConstants.FEATURE_GENERATORS:
                generator = GraphConvConstants.FEATURE_GENERATORS[generator_name]
                features = generator(mol)
                global_features.extend(features)
            else:
>               raise ValueError(f"Feature generator '{generator_name}' is not available.")
E               ValueError: Feature generator '' is not available.

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/molecule_featurizers/temp.py:45: ValueError
_______________ TestGlobalFeatureGenerator.test_generator_morgan _______________

self = <deepchem.feat.tests.test_global_feature_generator_dmpnn.TestGlobalFeatureGenerator testMethod=test_generator_morgan>

    def test_generator_morgan(self):
        """
        Test for generator when 'morgan' feature generator is provided
        """
>       global_features = generate_global_features(self.mol[0],
                                                   self.feature_generators[1])

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/molecule_featurizers/dmpnn_featurizer.py:222: in generate_global_features
    return generate_global_features(mol, features_generators)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mol = <rdkit.Chem.rdchem.Mol object at 0x7be3047b9150>
features_generators = ['morgan'], replace_token = 0.0

    def generate_global_features(mol: Chem.Mol, features_generators: List[str], replace_token: float=0.0) -> np.ndarray:
        """
        Generate global features for a given RDKit molecule using specified feature generators.
    
        Args:
            mol (Chem.Mol): RDKit molecule object.
            features_generators (List[str]): List of feature generator names.
            replace_token (float): Value to replace NaNs in the feature array.
    
        Returns:
            np.ndarray: Array of global features.
        """
        global_features = []
        if mol.GetNumHeavyAtoms() == 0:
            mol = Chem.MolFromSmiles('C')
        for generator_name in features_generators:
            if generator_name in GraphConvConstants.FEATURE_GENERATORS:
                generator = GraphConvConstants.FEATURE_GENERATORS[generator_name]
                features = generator(mol)
                global_features.extend(features)
            else:
>               raise ValueError(f"Feature generator '{generator_name}' is not available.")
E               ValueError: Feature generator 'morgan' is not available.

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/molecule_featurizers/temp.py:45: ValueError
____________ TestGlobalFeatureGenerator.test_generator_morgan_count ____________

self = <deepchem.feat.tests.test_global_feature_generator_dmpnn.TestGlobalFeatureGenerator testMethod=test_generator_morgan_count>

    def test_generator_morgan_count(self):
        """
        Test for generator when 'morgan_count' feature generator is provided
        """
>       global_features = generate_global_features(self.mol[2],
                                                   self.feature_generators[4])

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/molecule_featurizers/dmpnn_featurizer.py:222: in generate_global_features
    return generate_global_features(mol, features_generators)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mol = <rdkit.Chem.rdchem.Mol object at 0x7be3047b98c0>
features_generators = ['morgan_count'], replace_token = 0.0

    def generate_global_features(mol: Chem.Mol, features_generators: List[str], replace_token: float=0.0) -> np.ndarray:
        """
        Generate global features for a given RDKit molecule using specified feature generators.
    
        Args:
            mol (Chem.Mol): RDKit molecule object.
            features_generators (List[str]): List of feature generator names.
            replace_token (float): Value to replace NaNs in the feature array.
    
        Returns:
            np.ndarray: Array of global features.
        """
        global_features = []
        if mol.GetNumHeavyAtoms() == 0:
            mol = Chem.MolFromSmiles('C')
        for generator_name in features_generators:
            if generator_name in GraphConvConstants.FEATURE_GENERATORS:
                generator = GraphConvConstants.FEATURE_GENERATORS[generator_name]
                features = generator(mol)
                global_features.extend(features)
            else:
>               raise ValueError(f"Feature generator '{generator_name}' is not available.")
E               ValueError: Feature generator 'morgan_count' is not available.

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/molecule_featurizers/temp.py:45: ValueError
____________ TestGlobalFeatureGenerator.test_generator_morgan_twice ____________

self = <deepchem.feat.tests.test_global_feature_generator_dmpnn.TestGlobalFeatureGenerator testMethod=test_generator_morgan_twice>

    def test_generator_morgan_twice(self):
        """
        Test for generator when names of multiple generators are provided
        """
>       global_features = generate_global_features(self.mol[0],
                                                   self.feature_generators[3])

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/molecule_featurizers/dmpnn_featurizer.py:222: in generate_global_features
    return generate_global_features(mol, features_generators)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mol = <rdkit.Chem.rdchem.Mol object at 0x7be3047b9d20>
features_generators = ['morgan', 'morgan'], replace_token = 0.0

    def generate_global_features(mol: Chem.Mol, features_generators: List[str], replace_token: float=0.0) -> np.ndarray:
        """
        Generate global features for a given RDKit molecule using specified feature generators.
    
        Args:
            mol (Chem.Mol): RDKit molecule object.
            features_generators (List[str]): List of feature generator names.
            replace_token (float): Value to replace NaNs in the feature array.
    
        Returns:
            np.ndarray: Array of global features.
        """
        global_features = []
        if mol.GetNumHeavyAtoms() == 0:
            mol = Chem.MolFromSmiles('C')
        for generator_name in features_generators:
            if generator_name in GraphConvConstants.FEATURE_GENERATORS:
                generator = GraphConvConstants.FEATURE_GENERATORS[generator_name]
                features = generator(mol)
                global_features.extend(features)
            else:
>               raise ValueError(f"Feature generator '{generator_name}' is not available.")
E               ValueError: Feature generator 'morgan' is not available.

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/molecule_featurizers/temp.py:45: ValueError
______ TestGlobalFeatureGenerator.test_generator_morgan_with_invalid_name ______

self = <deepchem.feat.tests.test_global_feature_generator_dmpnn.TestGlobalFeatureGenerator testMethod=test_generator_morgan_with_invalid_name>

    def test_generator_morgan_with_invalid_name(self):
        """
        Test for generator when 'morgan' feature generator and an unavailable generator name is provided
        """
>       global_features = generate_global_features(self.mol[0],
                                                   self.feature_generators[2])

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/molecule_featurizers/dmpnn_featurizer.py:222: in generate_global_features
    return generate_global_features(mol, features_generators)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mol = <rdkit.Chem.rdchem.Mol object at 0x7be3047bb450>
features_generators = ['morgan', ''], replace_token = 0.0

    def generate_global_features(mol: Chem.Mol, features_generators: List[str], replace_token: float=0.0) -> np.ndarray:
        """
        Generate global features for a given RDKit molecule using specified feature generators.
    
        Args:
            mol (Chem.Mol): RDKit molecule object.
            features_generators (List[str]): List of feature generator names.
            replace_token (float): Value to replace NaNs in the feature array.
    
        Returns:
            np.ndarray: Array of global features.
        """
        global_features = []
        if mol.GetNumHeavyAtoms() == 0:
            mol = Chem.MolFromSmiles('C')
        for generator_name in features_generators:
            if generator_name in GraphConvConstants.FEATURE_GENERATORS:
                generator = GraphConvConstants.FEATURE_GENERATORS[generator_name]
                features = generator(mol)
                global_features.extend(features)
            else:
>               raise ValueError(f"Feature generator '{generator_name}' is not available.")
E               ValueError: Feature generator 'morgan' is not available.

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/molecule_featurizers/temp.py:45: ValueError
_____________ TestGlobalFeatureGenerator.test_generator_rdkit_desc _____________

self = <deepchem.feat.tests.test_global_feature_generator_dmpnn.TestGlobalFeatureGenerator testMethod=test_generator_rdkit_desc>

    def test_generator_rdkit_desc(self):
        """
        Test for generator when 'rdkit_desc' feature generator is provided
        """
>       global_features = generate_global_features(self.mol[2],
                                                   self.feature_generators[5])

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/molecule_featurizers/dmpnn_featurizer.py:222: in generate_global_features
    return generate_global_features(mol, features_generators)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mol = <rdkit.Chem.rdchem.Mol object at 0x7be3047bab20>
features_generators = ['rdkit_desc'], replace_token = 0.0

    def generate_global_features(mol: Chem.Mol, features_generators: List[str], replace_token: float=0.0) -> np.ndarray:
        """
        Generate global features for a given RDKit molecule using specified feature generators.
    
        Args:
            mol (Chem.Mol): RDKit molecule object.
            features_generators (List[str]): List of feature generator names.
            replace_token (float): Value to replace NaNs in the feature array.
    
        Returns:
            np.ndarray: Array of global features.
        """
        global_features = []
        if mol.GetNumHeavyAtoms() == 0:
            mol = Chem.MolFromSmiles('C')
        for generator_name in features_generators:
            if generator_name in GraphConvConstants.FEATURE_GENERATORS:
                generator = GraphConvConstants.FEATURE_GENERATORS[generator_name]
                features = generator(mol)
                global_features.extend(features)
            else:
>               raise ValueError(f"Feature generator '{generator_name}' is not available.")
E               ValueError: Feature generator 'rdkit_desc' is not available.

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/molecule_featurizers/temp.py:45: ValueError
_______ TestGlobalFeatureGenerator.test_generator_rdkit_desc_normalized ________

self = <deepchem.feat.tests.test_global_feature_generator_dmpnn.TestGlobalFeatureGenerator testMethod=test_generator_rdkit_desc_normalized>

    def test_generator_rdkit_desc_normalized(self):
        """
        Test for generator when 'rdkit_desc_normalized' feature generator is provided
        """
>       global_features = generate_global_features(self.mol[2],
                                                   self.feature_generators[6])

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/molecule_featurizers/dmpnn_featurizer.py:222: in generate_global_features
    return generate_global_features(mol, features_generators)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mol = <rdkit.Chem.rdchem.Mol object at 0x7be3047bb3e0>
features_generators = ['rdkit_desc_normalized'], replace_token = 0.0

    def generate_global_features(mol: Chem.Mol, features_generators: List[str], replace_token: float=0.0) -> np.ndarray:
        """
        Generate global features for a given RDKit molecule using specified feature generators.
    
        Args:
            mol (Chem.Mol): RDKit molecule object.
            features_generators (List[str]): List of feature generator names.
            replace_token (float): Value to replace NaNs in the feature array.
    
        Returns:
            np.ndarray: Array of global features.
        """
        global_features = []
        if mol.GetNumHeavyAtoms() == 0:
            mol = Chem.MolFromSmiles('C')
        for generator_name in features_generators:
            if generator_name in GraphConvConstants.FEATURE_GENERATORS:
                generator = GraphConvConstants.FEATURE_GENERATORS[generator_name]
                features = generator(mol)
                global_features.extend(features)
            else:
>               raise ValueError(f"Feature generator '{generator_name}' is not available.")
E               ValueError: Feature generator 'rdkit_desc_normalized' is not available.

/local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/molecule_featurizers/temp.py:45: ValueError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_hydrogen
FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_invalid_name
FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan
FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan_count
FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan_twice
FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan_with_invalid_name
FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_rdkit_desc
FAILED ../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_rdkit_desc_normalized
============================== 8 failed in 4.01s ===============================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/deepchem/deepchem/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/deepchem/deepchem
configfile: setup.cfg
plugins: flaky-3.8.1
collecting ... collected 8 items

../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_hydrogen PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_invalid_name PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan_count PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan_twice PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan_with_invalid_name PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_rdkit_desc PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_rdkit_desc_normalized PASSED

============================== 8 passed in 3.95s ===============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/deepchem/deepchem/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/deepchem/deepchem
configfile: setup.cfg
plugins: flaky-3.8.1
collecting ... collected 8 items

../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_hydrogen PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_invalid_name PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan_count PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan_twice PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_morgan_with_invalid_name PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_rdkit_desc PASSED
../../../../../../local/data0/moved_data/publishablew/deepchem/deepchem/deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator::test_generator_rdkit_desc_normalized PASSED

============================== 8 passed in 4.20s ===============================
