output file:
processed_inferencecreate_tiles14.json
function:
create_tiles
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_one_image_and_enforced_grid FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_one_image_and_enforced_grid', '../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images_and_custom_colors FAILED', '../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_two_images', 'FAILED ../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_three_images', 'FAILED ../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images_and_custom_grid', '../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images_and_custom_grid FAILED', '../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_one_image FAILED', '../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_four_images FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_one_image', '../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_three_images FAILED', '../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_two_images FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images_and_custom_colors', 'FAILED ../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_four_images', 'FAILED ../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/inference/inference/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/inference/inference
configfile: pytest.ini
plugins: anyio-4.8.0, requests-mock-1.11.0, timeout-2.3.1, retry-1.6.3, asyncio-0.21.1
asyncio: mode=Mode.STRICT
collecting ... [02/13/25 20:27:03] WARNING  Your inference package version 0.31.1 is out of date! Please upgrade to version    __init__.py:41
                             0.37.1 of inference for the latest features and bug fixes by running `pip install                
                             --upgrade inference`.                                                                            
collected 10 items

../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_generate_color_image PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_one_image FAILED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_one_image_and_enforced_grid FAILED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_two_images FAILED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_three_images FAILED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_four_images FAILED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images FAILED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images_and_custom_grid FAILED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images_and_custom_colors FAILED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images_and_custom_grid_to_small_to_fit_images PASSED

=================================== FAILURES ===================================
_______________________ test_create_tiles_with_one_image _______________________

one_image = array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [253, 223, 188],
     ...[ 70, 146, 142],
        ...,
        [ 68, 146, 135],
        [ 44, 122, 111],
        [ 37, 115, 104]]], dtype=uint8)
single_image_tile = array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [253, 223, 188],
     ...[  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]]], dtype=uint8)

    def test_create_tiles_with_one_image(
        one_image: np.ndarray, single_image_tile: np.ndarray
    ) -> None:
        # when
>       result = create_tiles(images=[one_image])

/local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/inference/inference/inference/core/utils/drawing.py:12: in create_tiles
    return create_tiles(images, grid_size, single_tile_size, tile_scaling, tile_padding_color, tile_margin, tile_margin_color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

images = [array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [253, 223, 188],
    ... 70, 146, 142],
        ...,
        [ 68, 146, 135],
        [ 44, 122, 111],
        [ 37, 115, 104]]], dtype=uint8)]
grid_size = None, tile_size = None, tile_scaling = 'avg'
tile_padding_color = (0, 0, 0), tile_margin = 15
tile_margin_color = (255, 255, 255)

    def create_tiles(images: List[np.ndarray], grid_size: Optional[Tuple[int, int]]=None, tile_size: Optional[Tuple[int, int]]=None, tile_scaling: str='avg', tile_padding_color: Tuple[int, int, int]=(0, 0, 0), tile_margin: int=0, tile_margin_color: Tuple[int, int, int]=(255, 255, 255)) -> np.ndarray:
        """
        Generate image tiles from a list of images.
    
        Args:
            images (List[np.ndarray]): List of images as NumPy arrays.
            grid_size (Tuple[int, int], optional): Grid size (rows, cols). Defaults to None.
            tile_size (Tuple[int, int], optional): Size of each tile (height, width). Defaults to None.
            tile_scaling (str): Scaling method for tiles ("min", "max", "avg"). Defaults to "avg".
            tile_padding_color (Tuple[int, int, int]): Padding color for tiles. Defaults to (0, 0, 0).
            tile_margin (int): Margin between tiles. Defaults to 0.
            tile_margin_color (Tuple[int, int, int]): Margin color. Defaults to (255, 255, 255).
    
        Returns:
            np.ndarray: Generated image tiles as a NumPy array.
        """
        if not images:
            raise ValueError('The list of images is empty.')
        num_images = len(images)
        if grid_size is None:
            grid_rows = grid_cols = int(np.ceil(np.sqrt(num_images)))
        else:
            grid_rows, grid_cols = grid_size
        if num_images > grid_rows * grid_cols:
            raise ValueError('The number of images exceeds the grid size.')
        if tile_size is None:
            if tile_scaling == 'min':
                tile_height = min((img.shape[0] for img in images))
                tile_width = min((img.shape[1] for img in images))
            elif tile_scaling == 'max':
                tile_height = max((img.shape[0] for img in images))
                tile_width = max((img.shape[1] for img in images))
            elif tile_scaling == 'avg':
                tile_height = int(np.mean([img.shape[0] for img in images]))
                tile_width = int(np.mean([img.shape[1] for img in images]))
            else:
                raise ValueError("Invalid tile scaling method. Choose 'min', 'max', or 'avg'.")
        else:
            tile_height, tile_width = tile_size
        canvas_height = grid_rows * (tile_height + tile_margin) - tile_margin
        canvas_width = grid_cols * (tile_width + tile_margin) - tile_margin
        canvas = np.full((canvas_height, canvas_width, 3), tile_margin_color, dtype=np.uint8)
        for idx, img in enumerate(images):
            resized_img = np.full((tile_height, tile_width, 3), tile_padding_color, dtype=np.uint8)
            img_height, img_width = img.shape[:2]
            scale = min(tile_height / img_height, tile_width / img_width)
            new_height, new_width = (int(img_height * scale), int(img_width * scale))
>           resized_img[:new_height, :new_width] = cv2.resize(img, (new_width, new_height))
E           NameError: name 'cv2' is not defined

/local/data0/moved_data/publishablew/inference/inference/inference/core/utils/temp.py:58: NameError
______________ test_create_tiles_with_one_image_and_enforced_grid ______________

one_image = array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [253, 223, 188],
     ...[ 70, 146, 142],
        ...,
        [ 68, 146, 135],
        [ 44, 122, 111],
        [ 37, 115, 104]]], dtype=uint8)
single_image_tile_enforced_grid = array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [  0,   0,   0],
     ...[  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]]], dtype=uint8)

    def test_create_tiles_with_one_image_and_enforced_grid(
        one_image: np.ndarray, single_image_tile_enforced_grid: np.ndarray
    ) -> None:
        # when
>       result = create_tiles(images=[one_image], grid_size=(None, 3))

/local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/inference/inference/inference/core/utils/drawing.py:12: in create_tiles
    return create_tiles(images, grid_size, single_tile_size, tile_scaling, tile_padding_color, tile_margin, tile_margin_color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

images = [array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [253, 223, 188],
    ... 70, 146, 142],
        ...,
        [ 68, 146, 135],
        [ 44, 122, 111],
        [ 37, 115, 104]]], dtype=uint8)]
grid_size = (None, 3), tile_size = None, tile_scaling = 'avg'
tile_padding_color = (0, 0, 0), tile_margin = 15
tile_margin_color = (255, 255, 255)

    def create_tiles(images: List[np.ndarray], grid_size: Optional[Tuple[int, int]]=None, tile_size: Optional[Tuple[int, int]]=None, tile_scaling: str='avg', tile_padding_color: Tuple[int, int, int]=(0, 0, 0), tile_margin: int=0, tile_margin_color: Tuple[int, int, int]=(255, 255, 255)) -> np.ndarray:
        """
        Generate image tiles from a list of images.
    
        Args:
            images (List[np.ndarray]): List of images as NumPy arrays.
            grid_size (Tuple[int, int], optional): Grid size (rows, cols). Defaults to None.
            tile_size (Tuple[int, int], optional): Size of each tile (height, width). Defaults to None.
            tile_scaling (str): Scaling method for tiles ("min", "max", "avg"). Defaults to "avg".
            tile_padding_color (Tuple[int, int, int]): Padding color for tiles. Defaults to (0, 0, 0).
            tile_margin (int): Margin between tiles. Defaults to 0.
            tile_margin_color (Tuple[int, int, int]): Margin color. Defaults to (255, 255, 255).
    
        Returns:
            np.ndarray: Generated image tiles as a NumPy array.
        """
        if not images:
            raise ValueError('The list of images is empty.')
        num_images = len(images)
        if grid_size is None:
            grid_rows = grid_cols = int(np.ceil(np.sqrt(num_images)))
        else:
            grid_rows, grid_cols = grid_size
>       if num_images > grid_rows * grid_cols:
E       TypeError: unsupported operand type(s) for *: 'NoneType' and 'int'

/local/data0/moved_data/publishablew/inference/inference/inference/core/utils/temp.py:34: TypeError
______________________ test_create_tiles_with_two_images _______________________

two_images = [array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [253, 223, 188],
    ... 95,  81,  62],
        ...,
        [170, 164, 165],
        [169, 163, 164],
        [170, 164, 165]]], dtype=uint8)]
two_images_tile = array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [149, 116,  71],
     ...[  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]]], dtype=uint8)

    def test_create_tiles_with_two_images(
        two_images: List[np.ndarray], two_images_tile: np.ndarray
    ) -> None:
        # when
>       result = create_tiles(images=two_images)

/local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/inference/inference/inference/core/utils/drawing.py:12: in create_tiles
    return create_tiles(images, grid_size, single_tile_size, tile_scaling, tile_padding_color, tile_margin, tile_margin_color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

images = [array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [253, 223, 188],
    ... 95,  81,  62],
        ...,
        [170, 164, 165],
        [169, 163, 164],
        [170, 164, 165]]], dtype=uint8)]
grid_size = None, tile_size = None, tile_scaling = 'avg'
tile_padding_color = (0, 0, 0), tile_margin = 15
tile_margin_color = (255, 255, 255)

    def create_tiles(images: List[np.ndarray], grid_size: Optional[Tuple[int, int]]=None, tile_size: Optional[Tuple[int, int]]=None, tile_scaling: str='avg', tile_padding_color: Tuple[int, int, int]=(0, 0, 0), tile_margin: int=0, tile_margin_color: Tuple[int, int, int]=(255, 255, 255)) -> np.ndarray:
        """
        Generate image tiles from a list of images.
    
        Args:
            images (List[np.ndarray]): List of images as NumPy arrays.
            grid_size (Tuple[int, int], optional): Grid size (rows, cols). Defaults to None.
            tile_size (Tuple[int, int], optional): Size of each tile (height, width). Defaults to None.
            tile_scaling (str): Scaling method for tiles ("min", "max", "avg"). Defaults to "avg".
            tile_padding_color (Tuple[int, int, int]): Padding color for tiles. Defaults to (0, 0, 0).
            tile_margin (int): Margin between tiles. Defaults to 0.
            tile_margin_color (Tuple[int, int, int]): Margin color. Defaults to (255, 255, 255).
    
        Returns:
            np.ndarray: Generated image tiles as a NumPy array.
        """
        if not images:
            raise ValueError('The list of images is empty.')
        num_images = len(images)
        if grid_size is None:
            grid_rows = grid_cols = int(np.ceil(np.sqrt(num_images)))
        else:
            grid_rows, grid_cols = grid_size
        if num_images > grid_rows * grid_cols:
            raise ValueError('The number of images exceeds the grid size.')
        if tile_size is None:
            if tile_scaling == 'min':
                tile_height = min((img.shape[0] for img in images))
                tile_width = min((img.shape[1] for img in images))
            elif tile_scaling == 'max':
                tile_height = max((img.shape[0] for img in images))
                tile_width = max((img.shape[1] for img in images))
            elif tile_scaling == 'avg':
                tile_height = int(np.mean([img.shape[0] for img in images]))
                tile_width = int(np.mean([img.shape[1] for img in images]))
            else:
                raise ValueError("Invalid tile scaling method. Choose 'min', 'max', or 'avg'.")
        else:
            tile_height, tile_width = tile_size
        canvas_height = grid_rows * (tile_height + tile_margin) - tile_margin
        canvas_width = grid_cols * (tile_width + tile_margin) - tile_margin
        canvas = np.full((canvas_height, canvas_width, 3), tile_margin_color, dtype=np.uint8)
        for idx, img in enumerate(images):
            resized_img = np.full((tile_height, tile_width, 3), tile_padding_color, dtype=np.uint8)
            img_height, img_width = img.shape[:2]
            scale = min(tile_height / img_height, tile_width / img_width)
            new_height, new_width = (int(img_height * scale), int(img_width * scale))
>           resized_img[:new_height, :new_width] = cv2.resize(img, (new_width, new_height))
E           NameError: name 'cv2' is not defined

/local/data0/moved_data/publishablew/inference/inference/inference/core/utils/temp.py:58: NameError
_____________________ test_create_tiles_with_three_images ______________________

three_images = [array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [253, 223, 188],
    ...181, 134, 102],
        ...,
        [ 85,  76,  73],
        [ 85,  76,  73],
        [ 85,  76,  73]]], dtype=uint8)]
three_images_tile = array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [202, 170, 157],
     ...[  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]]], dtype=uint8)

    def test_create_tiles_with_three_images(
        three_images: List[np.ndarray], three_images_tile: np.ndarray
    ) -> None:
        # when
>       result = create_tiles(images=three_images)

/local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/inference/inference/inference/core/utils/drawing.py:12: in create_tiles
    return create_tiles(images, grid_size, single_tile_size, tile_scaling, tile_padding_color, tile_margin, tile_margin_color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

images = [array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [253, 223, 188],
    ...181, 134, 102],
        ...,
        [ 85,  76,  73],
        [ 85,  76,  73],
        [ 85,  76,  73]]], dtype=uint8)]
grid_size = None, tile_size = None, tile_scaling = 'avg'
tile_padding_color = (0, 0, 0), tile_margin = 15
tile_margin_color = (255, 255, 255)

    def create_tiles(images: List[np.ndarray], grid_size: Optional[Tuple[int, int]]=None, tile_size: Optional[Tuple[int, int]]=None, tile_scaling: str='avg', tile_padding_color: Tuple[int, int, int]=(0, 0, 0), tile_margin: int=0, tile_margin_color: Tuple[int, int, int]=(255, 255, 255)) -> np.ndarray:
        """
        Generate image tiles from a list of images.
    
        Args:
            images (List[np.ndarray]): List of images as NumPy arrays.
            grid_size (Tuple[int, int], optional): Grid size (rows, cols). Defaults to None.
            tile_size (Tuple[int, int], optional): Size of each tile (height, width). Defaults to None.
            tile_scaling (str): Scaling method for tiles ("min", "max", "avg"). Defaults to "avg".
            tile_padding_color (Tuple[int, int, int]): Padding color for tiles. Defaults to (0, 0, 0).
            tile_margin (int): Margin between tiles. Defaults to 0.
            tile_margin_color (Tuple[int, int, int]): Margin color. Defaults to (255, 255, 255).
    
        Returns:
            np.ndarray: Generated image tiles as a NumPy array.
        """
        if not images:
            raise ValueError('The list of images is empty.')
        num_images = len(images)
        if grid_size is None:
            grid_rows = grid_cols = int(np.ceil(np.sqrt(num_images)))
        else:
            grid_rows, grid_cols = grid_size
        if num_images > grid_rows * grid_cols:
            raise ValueError('The number of images exceeds the grid size.')
        if tile_size is None:
            if tile_scaling == 'min':
                tile_height = min((img.shape[0] for img in images))
                tile_width = min((img.shape[1] for img in images))
            elif tile_scaling == 'max':
                tile_height = max((img.shape[0] for img in images))
                tile_width = max((img.shape[1] for img in images))
            elif tile_scaling == 'avg':
                tile_height = int(np.mean([img.shape[0] for img in images]))
                tile_width = int(np.mean([img.shape[1] for img in images]))
            else:
                raise ValueError("Invalid tile scaling method. Choose 'min', 'max', or 'avg'.")
        else:
            tile_height, tile_width = tile_size
        canvas_height = grid_rows * (tile_height + tile_margin) - tile_margin
        canvas_width = grid_cols * (tile_width + tile_margin) - tile_margin
        canvas = np.full((canvas_height, canvas_width, 3), tile_margin_color, dtype=np.uint8)
        for idx, img in enumerate(images):
            resized_img = np.full((tile_height, tile_width, 3), tile_padding_color, dtype=np.uint8)
            img_height, img_width = img.shape[:2]
            scale = min(tile_height / img_height, tile_width / img_width)
            new_height, new_width = (int(img_height * scale), int(img_width * scale))
>           resized_img[:new_height, :new_width] = cv2.resize(img, (new_width, new_height))
E           NameError: name 'cv2' is not defined

/local/data0/moved_data/publishablew/inference/inference/inference/core/utils/temp.py:58: NameError
______________________ test_create_tiles_with_four_images ______________________

four_images = [array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [253, 223, 188],
    ...103,  72,  47],
        ...,
        [ 26,  69, 102],
        [ 30,  68, 102],
        [ 28,  67,  99]]], dtype=uint8)]
four_images_tile = array([[[  0,   0,   0],
        [235, 152,  97],
        [235, 152,  97],
        ...,
        [148, 115,  70],
     ...[186, 138, 104],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0]]], dtype=uint8)

    def test_create_tiles_with_four_images(
        four_images: List[np.ndarray], four_images_tile: np.ndarray
    ) -> None:
        # when
>       result = create_tiles(images=four_images)

/local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/inference/inference/inference/core/utils/drawing.py:12: in create_tiles
    return create_tiles(images, grid_size, single_tile_size, tile_scaling, tile_padding_color, tile_margin, tile_margin_color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

images = [array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [253, 223, 188],
    ...103,  72,  47],
        ...,
        [ 26,  69, 102],
        [ 30,  68, 102],
        [ 28,  67,  99]]], dtype=uint8)]
grid_size = None, tile_size = None, tile_scaling = 'avg'
tile_padding_color = (0, 0, 0), tile_margin = 15
tile_margin_color = (255, 255, 255)

    def create_tiles(images: List[np.ndarray], grid_size: Optional[Tuple[int, int]]=None, tile_size: Optional[Tuple[int, int]]=None, tile_scaling: str='avg', tile_padding_color: Tuple[int, int, int]=(0, 0, 0), tile_margin: int=0, tile_margin_color: Tuple[int, int, int]=(255, 255, 255)) -> np.ndarray:
        """
        Generate image tiles from a list of images.
    
        Args:
            images (List[np.ndarray]): List of images as NumPy arrays.
            grid_size (Tuple[int, int], optional): Grid size (rows, cols). Defaults to None.
            tile_size (Tuple[int, int], optional): Size of each tile (height, width). Defaults to None.
            tile_scaling (str): Scaling method for tiles ("min", "max", "avg"). Defaults to "avg".
            tile_padding_color (Tuple[int, int, int]): Padding color for tiles. Defaults to (0, 0, 0).
            tile_margin (int): Margin between tiles. Defaults to 0.
            tile_margin_color (Tuple[int, int, int]): Margin color. Defaults to (255, 255, 255).
    
        Returns:
            np.ndarray: Generated image tiles as a NumPy array.
        """
        if not images:
            raise ValueError('The list of images is empty.')
        num_images = len(images)
        if grid_size is None:
            grid_rows = grid_cols = int(np.ceil(np.sqrt(num_images)))
        else:
            grid_rows, grid_cols = grid_size
        if num_images > grid_rows * grid_cols:
            raise ValueError('The number of images exceeds the grid size.')
        if tile_size is None:
            if tile_scaling == 'min':
                tile_height = min((img.shape[0] for img in images))
                tile_width = min((img.shape[1] for img in images))
            elif tile_scaling == 'max':
                tile_height = max((img.shape[0] for img in images))
                tile_width = max((img.shape[1] for img in images))
            elif tile_scaling == 'avg':
                tile_height = int(np.mean([img.shape[0] for img in images]))
                tile_width = int(np.mean([img.shape[1] for img in images]))
            else:
                raise ValueError("Invalid tile scaling method. Choose 'min', 'max', or 'avg'.")
        else:
            tile_height, tile_width = tile_size
        canvas_height = grid_rows * (tile_height + tile_margin) - tile_margin
        canvas_width = grid_cols * (tile_width + tile_margin) - tile_margin
        canvas = np.full((canvas_height, canvas_width, 3), tile_margin_color, dtype=np.uint8)
        for idx, img in enumerate(images):
            resized_img = np.full((tile_height, tile_width, 3), tile_padding_color, dtype=np.uint8)
            img_height, img_width = img.shape[:2]
            scale = min(tile_height / img_height, tile_width / img_width)
            new_height, new_width = (int(img_height * scale), int(img_width * scale))
>           resized_img[:new_height, :new_width] = cv2.resize(img, (new_width, new_height))
E           NameError: name 'cv2' is not defined

/local/data0/moved_data/publishablew/inference/inference/inference/core/utils/temp.py:58: NameError
______________________ test_create_tiles_with_all_images _______________________

all_images = [array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [253, 223, 188],
    ... 15,  20,  29],
        ...,
        [  5,   5,   5],
        [  5,   5,   5],
        [  5,   5,   5]]], dtype=uint8)]
all_images_tile = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def test_create_tiles_with_all_images(
        all_images: List[np.ndarray], all_images_tile: np.ndarray
    ) -> None:
        # when
>       result = create_tiles(images=all_images)

/local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/inference/inference/inference/core/utils/drawing.py:12: in create_tiles
    return create_tiles(images, grid_size, single_tile_size, tile_scaling, tile_padding_color, tile_margin, tile_margin_color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

images = [array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [253, 223, 188],
    ... 15,  20,  29],
        ...,
        [  5,   5,   5],
        [  5,   5,   5],
        [  5,   5,   5]]], dtype=uint8)]
grid_size = None, tile_size = None, tile_scaling = 'avg'
tile_padding_color = (0, 0, 0), tile_margin = 15
tile_margin_color = (255, 255, 255)

    def create_tiles(images: List[np.ndarray], grid_size: Optional[Tuple[int, int]]=None, tile_size: Optional[Tuple[int, int]]=None, tile_scaling: str='avg', tile_padding_color: Tuple[int, int, int]=(0, 0, 0), tile_margin: int=0, tile_margin_color: Tuple[int, int, int]=(255, 255, 255)) -> np.ndarray:
        """
        Generate image tiles from a list of images.
    
        Args:
            images (List[np.ndarray]): List of images as NumPy arrays.
            grid_size (Tuple[int, int], optional): Grid size (rows, cols). Defaults to None.
            tile_size (Tuple[int, int], optional): Size of each tile (height, width). Defaults to None.
            tile_scaling (str): Scaling method for tiles ("min", "max", "avg"). Defaults to "avg".
            tile_padding_color (Tuple[int, int, int]): Padding color for tiles. Defaults to (0, 0, 0).
            tile_margin (int): Margin between tiles. Defaults to 0.
            tile_margin_color (Tuple[int, int, int]): Margin color. Defaults to (255, 255, 255).
    
        Returns:
            np.ndarray: Generated image tiles as a NumPy array.
        """
        if not images:
            raise ValueError('The list of images is empty.')
        num_images = len(images)
        if grid_size is None:
            grid_rows = grid_cols = int(np.ceil(np.sqrt(num_images)))
        else:
            grid_rows, grid_cols = grid_size
        if num_images > grid_rows * grid_cols:
            raise ValueError('The number of images exceeds the grid size.')
        if tile_size is None:
            if tile_scaling == 'min':
                tile_height = min((img.shape[0] for img in images))
                tile_width = min((img.shape[1] for img in images))
            elif tile_scaling == 'max':
                tile_height = max((img.shape[0] for img in images))
                tile_width = max((img.shape[1] for img in images))
            elif tile_scaling == 'avg':
                tile_height = int(np.mean([img.shape[0] for img in images]))
                tile_width = int(np.mean([img.shape[1] for img in images]))
            else:
                raise ValueError("Invalid tile scaling method. Choose 'min', 'max', or 'avg'.")
        else:
            tile_height, tile_width = tile_size
        canvas_height = grid_rows * (tile_height + tile_margin) - tile_margin
        canvas_width = grid_cols * (tile_width + tile_margin) - tile_margin
        canvas = np.full((canvas_height, canvas_width, 3), tile_margin_color, dtype=np.uint8)
        for idx, img in enumerate(images):
            resized_img = np.full((tile_height, tile_width, 3), tile_padding_color, dtype=np.uint8)
            img_height, img_width = img.shape[:2]
            scale = min(tile_height / img_height, tile_width / img_width)
            new_height, new_width = (int(img_height * scale), int(img_width * scale))
>           resized_img[:new_height, :new_width] = cv2.resize(img, (new_width, new_height))
E           NameError: name 'cv2' is not defined

/local/data0/moved_data/publishablew/inference/inference/inference/core/utils/temp.py:58: NameError
______________ test_create_tiles_with_all_images_and_custom_grid _______________

all_images = [array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [253, 223, 188],
    ... 15,  20,  29],
        ...,
        [  5,   5,   5],
        [  5,   5,   5],
        [  5,   5,   5]]], dtype=uint8)]
all_images_tile_and_custom_grid = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def test_create_tiles_with_all_images_and_custom_grid(
        all_images: List[np.ndarray], all_images_tile_and_custom_grid: np.ndarray
    ) -> None:
        # when
>       result = create_tiles(images=all_images, grid_size=(3, 3))

/local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/inference/inference/inference/core/utils/drawing.py:12: in create_tiles
    return create_tiles(images, grid_size, single_tile_size, tile_scaling, tile_padding_color, tile_margin, tile_margin_color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

images = [array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [253, 223, 188],
    ... 15,  20,  29],
        ...,
        [  5,   5,   5],
        [  5,   5,   5],
        [  5,   5,   5]]], dtype=uint8)]
grid_size = (3, 3), tile_size = None, tile_scaling = 'avg'
tile_padding_color = (0, 0, 0), tile_margin = 15
tile_margin_color = (255, 255, 255)

    def create_tiles(images: List[np.ndarray], grid_size: Optional[Tuple[int, int]]=None, tile_size: Optional[Tuple[int, int]]=None, tile_scaling: str='avg', tile_padding_color: Tuple[int, int, int]=(0, 0, 0), tile_margin: int=0, tile_margin_color: Tuple[int, int, int]=(255, 255, 255)) -> np.ndarray:
        """
        Generate image tiles from a list of images.
    
        Args:
            images (List[np.ndarray]): List of images as NumPy arrays.
            grid_size (Tuple[int, int], optional): Grid size (rows, cols). Defaults to None.
            tile_size (Tuple[int, int], optional): Size of each tile (height, width). Defaults to None.
            tile_scaling (str): Scaling method for tiles ("min", "max", "avg"). Defaults to "avg".
            tile_padding_color (Tuple[int, int, int]): Padding color for tiles. Defaults to (0, 0, 0).
            tile_margin (int): Margin between tiles. Defaults to 0.
            tile_margin_color (Tuple[int, int, int]): Margin color. Defaults to (255, 255, 255).
    
        Returns:
            np.ndarray: Generated image tiles as a NumPy array.
        """
        if not images:
            raise ValueError('The list of images is empty.')
        num_images = len(images)
        if grid_size is None:
            grid_rows = grid_cols = int(np.ceil(np.sqrt(num_images)))
        else:
            grid_rows, grid_cols = grid_size
        if num_images > grid_rows * grid_cols:
            raise ValueError('The number of images exceeds the grid size.')
        if tile_size is None:
            if tile_scaling == 'min':
                tile_height = min((img.shape[0] for img in images))
                tile_width = min((img.shape[1] for img in images))
            elif tile_scaling == 'max':
                tile_height = max((img.shape[0] for img in images))
                tile_width = max((img.shape[1] for img in images))
            elif tile_scaling == 'avg':
                tile_height = int(np.mean([img.shape[0] for img in images]))
                tile_width = int(np.mean([img.shape[1] for img in images]))
            else:
                raise ValueError("Invalid tile scaling method. Choose 'min', 'max', or 'avg'.")
        else:
            tile_height, tile_width = tile_size
        canvas_height = grid_rows * (tile_height + tile_margin) - tile_margin
        canvas_width = grid_cols * (tile_width + tile_margin) - tile_margin
        canvas = np.full((canvas_height, canvas_width, 3), tile_margin_color, dtype=np.uint8)
        for idx, img in enumerate(images):
            resized_img = np.full((tile_height, tile_width, 3), tile_padding_color, dtype=np.uint8)
            img_height, img_width = img.shape[:2]
            scale = min(tile_height / img_height, tile_width / img_width)
            new_height, new_width = (int(img_height * scale), int(img_width * scale))
>           resized_img[:new_height, :new_width] = cv2.resize(img, (new_width, new_height))
E           NameError: name 'cv2' is not defined

/local/data0/moved_data/publishablew/inference/inference/inference/core/utils/temp.py:58: NameError
_____________ test_create_tiles_with_all_images_and_custom_colors ______________

all_images = [array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [253, 223, 188],
    ... 15,  20,  29],
        ...,
        [  5,   5,   5],
        [  5,   5,   5],
        [  5,   5,   5]]], dtype=uint8)]
all_images_tile_and_custom_colors = array([[[224, 224, 224],
        [224, 224, 224],
        [224, 224, 224],
        ...,
        [224, 224, 224],
     ...[224, 224, 224],
        ...,
        [224, 224, 224],
        [224, 224, 224],
        [224, 224, 224]]], dtype=uint8)

    def test_create_tiles_with_all_images_and_custom_colors(
        all_images: List[np.ndarray], all_images_tile_and_custom_colors: np.ndarray
    ) -> None:
        # when
>       result = create_tiles(
            images=all_images,
            tile_margin_color=(127, 127, 127),
            tile_padding_color=(224, 224, 224),
        )

/local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/inference/inference/inference/core/utils/drawing.py:12: in create_tiles
    return create_tiles(images, grid_size, single_tile_size, tile_scaling, tile_padding_color, tile_margin, tile_margin_color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

images = [array([[[235, 152,  97],
        [235, 152,  97],
        [236, 153,  98],
        ...,
        [253, 223, 188],
    ... 15,  20,  29],
        ...,
        [  5,   5,   5],
        [  5,   5,   5],
        [  5,   5,   5]]], dtype=uint8)]
grid_size = None, tile_size = None, tile_scaling = 'avg'
tile_padding_color = (224, 224, 224), tile_margin = 15
tile_margin_color = (127, 127, 127)

    def create_tiles(images: List[np.ndarray], grid_size: Optional[Tuple[int, int]]=None, tile_size: Optional[Tuple[int, int]]=None, tile_scaling: str='avg', tile_padding_color: Tuple[int, int, int]=(0, 0, 0), tile_margin: int=0, tile_margin_color: Tuple[int, int, int]=(255, 255, 255)) -> np.ndarray:
        """
        Generate image tiles from a list of images.
    
        Args:
            images (List[np.ndarray]): List of images as NumPy arrays.
            grid_size (Tuple[int, int], optional): Grid size (rows, cols). Defaults to None.
            tile_size (Tuple[int, int], optional): Size of each tile (height, width). Defaults to None.
            tile_scaling (str): Scaling method for tiles ("min", "max", "avg"). Defaults to "avg".
            tile_padding_color (Tuple[int, int, int]): Padding color for tiles. Defaults to (0, 0, 0).
            tile_margin (int): Margin between tiles. Defaults to 0.
            tile_margin_color (Tuple[int, int, int]): Margin color. Defaults to (255, 255, 255).
    
        Returns:
            np.ndarray: Generated image tiles as a NumPy array.
        """
        if not images:
            raise ValueError('The list of images is empty.')
        num_images = len(images)
        if grid_size is None:
            grid_rows = grid_cols = int(np.ceil(np.sqrt(num_images)))
        else:
            grid_rows, grid_cols = grid_size
        if num_images > grid_rows * grid_cols:
            raise ValueError('The number of images exceeds the grid size.')
        if tile_size is None:
            if tile_scaling == 'min':
                tile_height = min((img.shape[0] for img in images))
                tile_width = min((img.shape[1] for img in images))
            elif tile_scaling == 'max':
                tile_height = max((img.shape[0] for img in images))
                tile_width = max((img.shape[1] for img in images))
            elif tile_scaling == 'avg':
                tile_height = int(np.mean([img.shape[0] for img in images]))
                tile_width = int(np.mean([img.shape[1] for img in images]))
            else:
                raise ValueError("Invalid tile scaling method. Choose 'min', 'max', or 'avg'.")
        else:
            tile_height, tile_width = tile_size
        canvas_height = grid_rows * (tile_height + tile_margin) - tile_margin
        canvas_width = grid_cols * (tile_width + tile_margin) - tile_margin
        canvas = np.full((canvas_height, canvas_width, 3), tile_margin_color, dtype=np.uint8)
        for idx, img in enumerate(images):
            resized_img = np.full((tile_height, tile_width, 3), tile_padding_color, dtype=np.uint8)
            img_height, img_width = img.shape[:2]
            scale = min(tile_height / img_height, tile_width / img_width)
            new_height, new_width = (int(img_height * scale), int(img_width * scale))
>           resized_img[:new_height, :new_width] = cv2.resize(img, (new_width, new_height))
E           NameError: name 'cv2' is not defined

/local/data0/moved_data/publishablew/inference/inference/inference/core/utils/temp.py:58: NameError
=============================== warnings summary ===============================
../../../../../../local/data0/moved_data/publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/fields.py:1042
  PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../../../../../../local/data0/moved_data/publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/fields.py:1042
  PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'field'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../../../../../../local/data0/moved_data/publishablew/inference/inference/venv/lib/python3.11/site-packages/starlette/formparsers.py:12
  PendingDeprecationWarning: Please use `import python_multipart` instead.

../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/workflows/execution_engine/entities/types.py:1137
../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/workflows/execution_engine/entities/types.py:1150
../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/workflows/execution_engine/entities/types.py:1166
  PydanticDeprecatedSince20: The `dict` method is deprecated; use `model_dump` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/entities/requests/clip.py:29
../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/entities/requests/gaze.py:40
../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/entities/requests/cogvlm.py:41
../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/entities/requests/trocr.py:25
  PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../../../../../../local/data0/moved_data/publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/deprecated/class_validators.py:121
../../../../../../local/data0/moved_data/publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/deprecated/class_validators.py:121
  PydanticDeprecatedSince20: `allow_reuse` is deprecated and will be ignored; it should no longer be necessary. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../../../../../../local/data0/moved_data/publishablew/inference/inference/venv/lib/python3.11/site-packages/timm/models/layers/__init__.py:48
  FutureWarning: Importing from timm.models.layers is deprecated, please import via timm.layers

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_one_image
FAILED ../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_one_image_and_enforced_grid
FAILED ../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_two_images
FAILED ../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_three_images
FAILED ../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_four_images
FAILED ../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images
FAILED ../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images_and_custom_grid
FAILED ../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images_and_custom_colors
=================== 8 failed, 2 passed, 13 warnings in 4.29s ===================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/inference/inference/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/inference/inference
configfile: pytest.ini
plugins: anyio-4.8.0, requests-mock-1.11.0, timeout-2.3.1, retry-1.6.3, asyncio-0.21.1
asyncio: mode=Mode.STRICT
collecting ... [02/13/25 20:27:08] WARNING  Your inference package version 0.31.1 is out of date! Please upgrade to version    __init__.py:41
                             0.37.1 of inference for the latest features and bug fixes by running `pip install                
                             --upgrade inference`.                                                                            
collected 10 items

../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_generate_color_image PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_one_image PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_one_image_and_enforced_grid PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_two_images PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_three_images PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_four_images PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images_and_custom_grid PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images_and_custom_colors PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images_and_custom_grid_to_small_to_fit_images PASSED

=============================== warnings summary ===============================
../../../../../../local/data0/moved_data/publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/fields.py:1042
  PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../../../../../../local/data0/moved_data/publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/fields.py:1042
  PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'field'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../../../../../../local/data0/moved_data/publishablew/inference/inference/venv/lib/python3.11/site-packages/starlette/formparsers.py:12
  PendingDeprecationWarning: Please use `import python_multipart` instead.

../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/workflows/execution_engine/entities/types.py:1137
../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/workflows/execution_engine/entities/types.py:1150
../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/workflows/execution_engine/entities/types.py:1166
  PydanticDeprecatedSince20: The `dict` method is deprecated; use `model_dump` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/entities/requests/clip.py:29
../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/entities/requests/gaze.py:40
../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/entities/requests/cogvlm.py:41
../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/entities/requests/trocr.py:25
  PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../../../../../../local/data0/moved_data/publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/deprecated/class_validators.py:121
../../../../../../local/data0/moved_data/publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/deprecated/class_validators.py:121
  PydanticDeprecatedSince20: `allow_reuse` is deprecated and will be ignored; it should no longer be necessary. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../../../../../../local/data0/moved_data/publishablew/inference/inference/venv/lib/python3.11/site-packages/timm/models/layers/__init__.py:48
  FutureWarning: Importing from timm.models.layers is deprecated, please import via timm.layers

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================= 10 passed, 13 warnings in 4.58s ========================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/inference/inference/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/inference/inference
configfile: pytest.ini
plugins: anyio-4.8.0, requests-mock-1.11.0, timeout-2.3.1, retry-1.6.3, asyncio-0.21.1
asyncio: mode=Mode.STRICT
collecting ... [02/13/25 20:26:57] WARNING  Your inference package version 0.31.1 is out of date! Please upgrade to version    __init__.py:41
                             0.37.1 of inference for the latest features and bug fixes by running `pip install                
                             --upgrade inference`.                                                                            
collected 10 items

../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_generate_color_image PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_one_image PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_one_image_and_enforced_grid PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_two_images PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_three_images PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_four_images PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images_and_custom_grid PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images_and_custom_colors PASSED
../../../../../../local/data0/moved_data/publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_drawing.py::test_create_tiles_with_all_images_and_custom_grid_to_small_to_fit_images PASSED

=============================== warnings summary ===============================
../../../../../../local/data0/moved_data/publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/fields.py:1042
  PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../../../../../../local/data0/moved_data/publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/fields.py:1042
  PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'field'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../../../../../../local/data0/moved_data/publishablew/inference/inference/venv/lib/python3.11/site-packages/starlette/formparsers.py:12
  PendingDeprecationWarning: Please use `import python_multipart` instead.

../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/workflows/execution_engine/entities/types.py:1137
../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/workflows/execution_engine/entities/types.py:1150
../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/workflows/execution_engine/entities/types.py:1166
  PydanticDeprecatedSince20: The `dict` method is deprecated; use `model_dump` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/entities/requests/clip.py:29
../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/entities/requests/gaze.py:40
../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/entities/requests/cogvlm.py:41
../../../../../../local/data0/moved_data/publishablew/inference/inference/inference/core/entities/requests/trocr.py:25
  PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../../../../../../local/data0/moved_data/publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/deprecated/class_validators.py:121
../../../../../../local/data0/moved_data/publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/deprecated/class_validators.py:121
  PydanticDeprecatedSince20: `allow_reuse` is deprecated and will be ignored; it should no longer be necessary. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../../../../../../local/data0/moved_data/publishablew/inference/inference/venv/lib/python3.11/site-packages/timm/models/layers/__init__.py:48
  FutureWarning: Importing from timm.models.layers is deprecated, please import via timm.layers

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================= 10 passed, 13 warnings in 5.18s ========================
