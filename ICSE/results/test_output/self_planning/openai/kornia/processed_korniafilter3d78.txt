output file:
processed_korniafilter3d78.json
function:
filter3d
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-circular] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-reflect]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter_2batch_2ch[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_gradcheck[cpu] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-2]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-replicate] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-False] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-True] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-constant]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-reflect]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_even_sized_filter[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter_2batch_2ch[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_noncontiguous[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-True]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-replicate]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-circular]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-circular]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-reflect] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-constant] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-circular] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_gradcheck[cpu]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_normalized_mean_filter[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-constant]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_normalized_mean_filter[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-constant] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-replicate] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-replicate]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-False]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_even_sized_filter[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-reflect] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_noncontiguous[cpu-float32] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'jit', 'tvm', 'inductor', 'onnxrt', 'cudagraphs', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 22 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-constant] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-reflect] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-replicate] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-circular] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-constant] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-reflect] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-replicate] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-circular] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-3] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-6] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_exception FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter_2batch_2ch[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_normalized_mean_filter[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_even_sized_filter[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_noncontiguous[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_gradcheck[cpu] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_module SKIPPED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-True] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-False] FAILED

=================================== FAILURES ===================================
______________ TestFilter3D.test_smoke[cpu-float32-True-constant] ______________

self = <test_filters.TestFilter3D object at 0x76af2fd32530>
border_type = 'constant', normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("border_type", ["constant", "reflect", "replicate", "circular"])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, border_type, normalized, device, dtype):
        if torch_version_le(1, 9, 1) and border_type == "reflect":
            pytest.skip(reason="Reflect border is not implemented for 3D on torch < 1.9.1")
    
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(1, 1, 6, 7, 8, device=device, dtype=dtype)
>       actual = filter3d(data, kernel, border_type, normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., ... 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.]]]]])
kernel = tensor([[[[0.2887, 0.0637, 0.3635],
          [0.3943, 0.7696, 0.2675],
          [0.8284, 0.4598, 0.5669]],

        ...5561]],

         [[0.1957, 0.1502, 0.1685],
          [0.3053, 0.3085, 0.1373],
          [0.1053, 0.7387, 0.7451]]]])
border_type = 'constant', normalized = True

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
______________ TestFilter3D.test_smoke[cpu-float32-True-reflect] _______________

self = <test_filters.TestFilter3D object at 0x76af2fd32350>
border_type = 'reflect', normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("border_type", ["constant", "reflect", "replicate", "circular"])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, border_type, normalized, device, dtype):
        if torch_version_le(1, 9, 1) and border_type == "reflect":
            pytest.skip(reason="Reflect border is not implemented for 3D on torch < 1.9.1")
    
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(1, 1, 6, 7, 8, device=device, dtype=dtype)
>       actual = filter3d(data, kernel, border_type, normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., ... 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.]]]]])
kernel = tensor([[[[0.8650, 0.4917, 0.7800],
          [0.9926, 0.4434, 0.0020],
          [0.0026, 0.8463, 0.7467]],

        ...7708]],

         [[0.0439, 0.4997, 0.1759],
          [0.3780, 0.6831, 0.9563],
          [0.0249, 0.1349, 0.8968]]]])
border_type = 'reflect', normalized = True

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
_____________ TestFilter3D.test_smoke[cpu-float32-True-replicate] ______________

self = <test_filters.TestFilter3D object at 0x76af2fd32890>
border_type = 'replicate', normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("border_type", ["constant", "reflect", "replicate", "circular"])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, border_type, normalized, device, dtype):
        if torch_version_le(1, 9, 1) and border_type == "reflect":
            pytest.skip(reason="Reflect border is not implemented for 3D on torch < 1.9.1")
    
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(1, 1, 6, 7, 8, device=device, dtype=dtype)
>       actual = filter3d(data, kernel, border_type, normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., ... 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.]]]]])
kernel = tensor([[[[0.1271, 0.5702, 0.0242],
          [0.2722, 0.0199, 0.5755],
          [0.6882, 0.8043, 0.5199]],

        ...2414]],

         [[0.4380, 0.1462, 0.4000],
          [0.9822, 0.0983, 0.3240],
          [0.6676, 0.2981, 0.3624]]]])
border_type = 'replicate', normalized = True

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
______________ TestFilter3D.test_smoke[cpu-float32-True-circular] ______________

self = <test_filters.TestFilter3D object at 0x76af2fd32950>
border_type = 'circular', normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("border_type", ["constant", "reflect", "replicate", "circular"])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, border_type, normalized, device, dtype):
        if torch_version_le(1, 9, 1) and border_type == "reflect":
            pytest.skip(reason="Reflect border is not implemented for 3D on torch < 1.9.1")
    
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(1, 1, 6, 7, 8, device=device, dtype=dtype)
>       actual = filter3d(data, kernel, border_type, normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., ... 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.]]]]])
kernel = tensor([[[[0.7533, 0.2293, 0.6910],
          [0.7145, 0.4448, 0.2182],
          [0.5914, 0.3280, 0.8145]],

        ...2264]],

         [[0.1868, 0.0446, 0.1342],
          [0.6746, 0.2519, 0.7353],
          [0.9445, 0.7133, 0.4227]]]])
border_type = 'circular', normalized = True

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
_____________ TestFilter3D.test_smoke[cpu-float32-False-constant] ______________

self = <test_filters.TestFilter3D object at 0x76af2fd32a10>
border_type = 'constant', normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("border_type", ["constant", "reflect", "replicate", "circular"])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, border_type, normalized, device, dtype):
        if torch_version_le(1, 9, 1) and border_type == "reflect":
            pytest.skip(reason="Reflect border is not implemented for 3D on torch < 1.9.1")
    
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(1, 1, 6, 7, 8, device=device, dtype=dtype)
>       actual = filter3d(data, kernel, border_type, normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., ... 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.]]]]])
kernel = tensor([[[[0.1872, 0.8582, 0.1502],
          [0.2135, 0.1467, 0.2736],
          [0.6550, 0.2232, 0.6490]],

        ...9940]],

         [[0.2586, 0.4571, 0.0261],
          [0.0181, 0.6674, 0.2870],
          [0.7773, 0.3257, 0.8356]]]])
border_type = 'constant', normalized = False

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
______________ TestFilter3D.test_smoke[cpu-float32-False-reflect] ______________

self = <test_filters.TestFilter3D object at 0x76af2fd32ad0>
border_type = 'reflect', normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("border_type", ["constant", "reflect", "replicate", "circular"])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, border_type, normalized, device, dtype):
        if torch_version_le(1, 9, 1) and border_type == "reflect":
            pytest.skip(reason="Reflect border is not implemented for 3D on torch < 1.9.1")
    
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(1, 1, 6, 7, 8, device=device, dtype=dtype)
>       actual = filter3d(data, kernel, border_type, normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., ... 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.]]]]])
kernel = tensor([[[[0.0086, 0.2611, 0.3213],
          [0.4610, 0.6976, 0.5619],
          [0.0395, 0.1912, 0.4261]],

        ...3836]],

         [[0.0312, 0.4453, 0.3322],
          [0.1090, 0.0374, 0.6130],
          [0.0290, 0.1901, 0.8365]]]])
border_type = 'reflect', normalized = False

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
_____________ TestFilter3D.test_smoke[cpu-float32-False-replicate] _____________

self = <test_filters.TestFilter3D object at 0x76af2fd32b90>
border_type = 'replicate', normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("border_type", ["constant", "reflect", "replicate", "circular"])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, border_type, normalized, device, dtype):
        if torch_version_le(1, 9, 1) and border_type == "reflect":
            pytest.skip(reason="Reflect border is not implemented for 3D on torch < 1.9.1")
    
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(1, 1, 6, 7, 8, device=device, dtype=dtype)
>       actual = filter3d(data, kernel, border_type, normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., ... 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.]]]]])
kernel = tensor([[[[0.8211, 0.5152, 0.2065],
          [0.8779, 0.1252, 0.2073],
          [0.5353, 0.4215, 0.6477]],

        ...8459]],

         [[0.1260, 0.4283, 0.4281],
          [0.3862, 0.8620, 0.7223],
          [0.0766, 0.2640, 0.9140]]]])
border_type = 'replicate', normalized = False

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
_____________ TestFilter3D.test_smoke[cpu-float32-False-circular] ______________

self = <test_filters.TestFilter3D object at 0x76af2fd32c50>
border_type = 'circular', normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("border_type", ["constant", "reflect", "replicate", "circular"])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, border_type, normalized, device, dtype):
        if torch_version_le(1, 9, 1) and border_type == "reflect":
            pytest.skip(reason="Reflect border is not implemented for 3D on torch < 1.9.1")
    
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(1, 1, 6, 7, 8, device=device, dtype=dtype)
>       actual = filter3d(data, kernel, border_type, normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., ... 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.]]]]])
kernel = tensor([[[[0.5512, 0.4417, 0.5744],
          [0.4489, 0.0345, 0.9487],
          [0.1940, 0.2239, 0.5138]],

        ...5097]],

         [[0.4672, 0.9243, 0.0615],
          [0.7782, 0.4970, 0.2043],
          [0.2185, 0.7817, 0.4647]]]])
border_type = 'circular', normalized = False

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
_________________ TestFilter3D.test_cardinality[cpu-float32-2] _________________

self = <test_filters.TestFilter3D object at 0x76af2fd32fe0>, batch_size = 2
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [2, 3, 6, 8])
    def test_cardinality(self, batch_size, device, dtype):
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(batch_size, 3, 6, 7, 8, device=device, dtype=dtype)
>       assert filter3d(data, kernel).shape == data.shape

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:390: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1....., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.]]]]])
kernel = tensor([[[[0.6214, 0.7500, 0.2624],
          [0.3449, 0.2661, 0.0110],
          [0.8784, 0.7595, 0.4266]],

        ...4991]],

         [[0.3991, 0.4759, 0.2356],
          [0.8095, 0.0746, 0.4445],
          [0.1355, 0.0385, 0.1802]]]])
border_type = 'replicate', normalized = False

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
_________________ TestFilter3D.test_cardinality[cpu-float32-3] _________________

self = <test_filters.TestFilter3D object at 0x76af2fd32f20>, batch_size = 3
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [2, 3, 6, 8])
    def test_cardinality(self, batch_size, device, dtype):
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(batch_size, 3, 6, 7, 8, device=device, dtype=dtype)
>       assert filter3d(data, kernel).shape == data.shape

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:390: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1....., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.]]]]])
kernel = tensor([[[[0.7005, 0.7584, 0.2309],
          [0.1621, 0.5293, 0.7951],
          [0.1237, 0.5570, 0.6836]],

        ...0053]],

         [[0.6483, 0.4941, 0.8269],
          [0.6733, 0.3945, 0.8004],
          [0.7755, 0.2136, 0.2869]]]])
border_type = 'replicate', normalized = False

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
_________________ TestFilter3D.test_cardinality[cpu-float32-6] _________________

self = <test_filters.TestFilter3D object at 0x76af2fd33280>, batch_size = 6
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [2, 3, 6, 8])
    def test_cardinality(self, batch_size, device, dtype):
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(batch_size, 3, 6, 7, 8, device=device, dtype=dtype)
>       assert filter3d(data, kernel).shape == data.shape

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:390: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1....., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.]]]]])
kernel = tensor([[[[0.8554, 0.7296, 0.7009],
          [0.3941, 0.5878, 0.0704],
          [0.5707, 0.5701, 0.8581]],

        ...8601]],

         [[0.0254, 0.2114, 0.4030],
          [0.0885, 0.3044, 0.8077],
          [0.3210, 0.8183, 0.2026]]]])
border_type = 'replicate', normalized = False

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
_________________ TestFilter3D.test_cardinality[cpu-float32-8] _________________

self = <test_filters.TestFilter3D object at 0x76af2fd33340>, batch_size = 8
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [2, 3, 6, 8])
    def test_cardinality(self, batch_size, device, dtype):
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(batch_size, 3, 6, 7, 8, device=device, dtype=dtype)
>       assert filter3d(data, kernel).shape == data.shape

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:390: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1....., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.]]]]])
kernel = tensor([[[[0.0691, 0.5452, 0.5004],
          [0.1156, 0.7194, 0.4349],
          [0.7159, 0.2815, 0.9560]],

        ...4821]],

         [[0.8541, 0.7738, 0.6382],
          [0.6139, 0.4007, 0.8371],
          [0.6731, 0.9710, 0.1086]]]])
border_type = 'replicate', normalized = False

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
_________________________ TestFilter3D.test_exception __________________________

self = <test_filters.TestFilter3D object at 0x76af2fd334f0>

    def test_exception(self):
        k = torch.ones(1, 1, 1, 1)
        data = torch.ones(1, 1, 1, 1, 1)
        with pytest.raises(TypeError) as errinfo:
>           filter3d(1, k)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:396: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = 1, kernel = tensor([[[[1.]]]]), border_type = 'replicate'
normalized = False

    def filter3d(input, kernel, border_type='zero', normalized=False):
>       if input.dim() != 5:
E       AttributeError: 'int' object has no attribute 'dim'

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:10: AttributeError
__________________ TestFilter3D.test_mean_filter[cpu-float32] __________________

self = <test_filters.TestFilter3D object at 0x76af2fd337f0>
device = device(type='cpu'), dtype = torch.float32

    def test_mean_filter(self, device, dtype):
        kernel = torch.ones(1, 3, 3, 3, device=device, dtype=dtype)
        sample = torch.tensor(
            [
                [
                    [
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 5.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected = torch.tensor(
            [
                [
                    [
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       actual = filter3d(sample, kernel)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:481: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0.,...0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.]]]]])
kernel = tensor([[[[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]],

         [[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]],

         [[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]]]])
border_type = 'replicate', normalized = False

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
____________ TestFilter3D.test_mean_filter_2batch_2ch[cpu-float32] _____________

self = <test_filters.TestFilter3D object at 0x76af2fd33b20>
device = device(type='cpu'), dtype = torch.float32

    def test_mean_filter_2batch_2ch(self, device, dtype):
        kernel = torch.ones(1, 3, 3, 3, device=device, dtype=dtype)
        sample = torch.tensor(
            [
                [
                    [
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 5.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
        sample = sample.expand(2, 2, -1, -1, -1)
    
        expected = torch.tensor(
            [
                [
                    [
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 5.0, 5.0, 5.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
        expected = expected.expand(2, 2, -1, -1, -1)
    
>       actual = filter3d(sample, kernel)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:552: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0.,...0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.]]]]])
kernel = tensor([[[[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]],

         [[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]],

         [[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]]]])
border_type = 'replicate', normalized = False

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
____________ TestFilter3D.test_normalized_mean_filter[cpu-float32] _____________

self = <test_filters.TestFilter3D object at 0x76af2fd33e50>
device = device(type='cpu'), dtype = torch.float32

    def test_normalized_mean_filter(self, device, dtype):
        kernel = torch.ones(1, 3, 3, 3, device=device, dtype=dtype)
        sample = torch.tensor(
            [
                [
                    [
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 5.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
        sample = sample.expand(2, 2, -1, -1, -1)
    
        nv = 5.0 / 27  # normalization value
        expected = torch.tensor(
            [
                [
                    [
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, nv, nv, nv, 0.0],
                            [0.0, nv, nv, nv, 0.0],
                            [0.0, nv, nv, nv, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, nv, nv, nv, 0.0],
                            [0.0, nv, nv, nv, 0.0],
                            [0.0, nv, nv, nv, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, nv, nv, nv, 0.0],
                            [0.0, nv, nv, nv, 0.0],
                            [0.0, nv, nv, nv, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
        expected = expected.expand(2, 2, -1, -1, -1)
    
>       actual = filter3d(sample, kernel, normalized=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:624: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0.,...0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.]]]]])
kernel = tensor([[[[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]],

         [[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]],

         [[1., 1., 1.],
          [1., 1., 1.],
          [1., 1., 1.]]]])
border_type = 'replicate', normalized = True

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
_______________ TestFilter3D.test_even_sized_filter[cpu-float32] _______________

self = <test_filters.TestFilter3D object at 0x76af2fd541c0>
device = device(type='cpu'), dtype = torch.float32

    def test_even_sized_filter(self, device, dtype):
        kernel = torch.ones(1, 2, 2, 2, device=device, dtype=dtype)
        sample = torch.tensor(
            [
                [
                    [
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 5.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected = torch.tensor(
            [
                [
                    [
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 0.0, 0.0],
                            [0.0, 5.0, 5.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       actual = filter3d(sample, kernel)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:694: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0.,...0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.],
           [0., 0., 0., 0., 0.]]]]])
kernel = tensor([[[[1., 1.],
          [1., 1.]],

         [[1., 1.],
          [1., 1.]]]])
border_type = 'replicate', normalized = False

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
_________________ TestFilter3D.test_noncontiguous[cpu-float32] _________________

self = <test_filters.TestFilter3D object at 0x76af2fd544f0>
device = device(type='cpu'), dtype = torch.float32

    def test_noncontiguous(self, device, dtype):
        batch_size = 3
        inp = torch.rand(3, 5, 5, 5, device=device, dtype=dtype).expand(batch_size, -1, -1, -1, -1)
        kernel = torch.ones(1, 2, 2, 2, device=device, dtype=dtype)
    
>       actual = filter3d(inp, kernel)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:702: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[0.9907, 0.4874, 0.6606, 0.1998, 0.1584],
           [0.4654, 0.3864, 0.5833, 0.8157, 0.0655],
           [... 0.4219],
           [0.9642, 0.6300, 0.2072, 0.9157, 0.7563],
           [0.7388, 0.3190, 0.4186, 0.8473, 0.7423]]]]])
kernel = tensor([[[[1., 1.],
          [1., 1.]],

         [[1., 1.],
          [1., 1.]]]])
border_type = 'replicate', normalized = False

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
_______________________ TestFilter3D.test_gradcheck[cpu] _______________________

self = <test_filters.TestFilter3D object at 0x76af2fd547c0>
device = device(type='cpu')

    def test_gradcheck(self, device):
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=torch.float64)
        sample = torch.ones(1, 1, 6, 7, 8, device=device, dtype=torch.float64)
    
        # evaluate function gradient
>       self.gradcheck(filter3d, (sample, kernel), nondet_tol=1e-8)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., ..., 1., 1., 1., 1., 1.],
           [1., 1., 1., 1., 1., 1., 1., 1.]]]]], dtype=torch.float64,
       requires_grad=True)
kernel = tensor([[[[0.3104, 0.3101, 0.3632],
          [0.6888, 0.8264, 0.7694],
          [0.6949, 0.3805, 0.3596]],

        ...1],
          [0.5055, 0.4096, 0.9018],
          [0.4612, 0.9371, 0.2017]]]], dtype=torch.float64, requires_grad=True)
border_type = 'replicate', normalized = False

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
_____________ TestFilter3D.test_dynamo[cpu-float32-inductor-True] ______________

self = <test_filters.TestFilter3D object at 0x76af2fd54df0>, normalized = True
device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x76b01512f400>, backend='inductor')

    @pytest.mark.parametrize("normalized", [True, False])
    def test_dynamo(self, normalized, device, dtype, torch_optimizer):
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(2, 3, 4, 10, 10, device=device, dtype=dtype)
        op = filter3d
        op_optimized = torch_optimizer(op)
    
>       expected = op(data, kernel, normalized=normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1....., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.]]]]])
kernel = tensor([[[[0.8267, 0.7186, 0.2467],
          [0.0037, 0.6536, 0.6960],
          [0.4050, 0.8066, 0.6179]],

        ...6803]],

         [[0.8151, 0.3825, 0.0452],
          [0.1839, 0.5629, 0.7277],
          [0.3481, 0.3991, 0.0830]]]])
border_type = 'replicate', normalized = True

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
_____________ TestFilter3D.test_dynamo[cpu-float32-inductor-False] _____________

self = <test_filters.TestFilter3D object at 0x76af2fd54d60>, normalized = False
device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x76b01512f400>, backend='inductor')

    @pytest.mark.parametrize("normalized", [True, False])
    def test_dynamo(self, normalized, device, dtype, torch_optimizer):
        kernel = torch.rand(1, 3, 3, 3, device=device, dtype=dtype)
        data = torch.ones(2, 3, 4, 10, 10, device=device, dtype=dtype)
        op = filter3d
        op_optimized = torch_optimizer(op)
    
>       expected = op(data, kernel, normalized=normalized)

/local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/filter.py:142: in filter3d
    return filter3d(input, kernel, border_type, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([[[[[1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1....., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.]]]]])
kernel = tensor([[[[0.4100, 0.8339, 0.4998],
          [0.2420, 0.1147, 0.8183],
          [0.2015, 0.9510, 0.4517]],

        ...2567]],

         [[0.0704, 0.1563, 0.7925],
          [0.0435, 0.1234, 0.1260],
          [0.2171, 0.1284, 0.4364]]]])
border_type = 'replicate', normalized = False

    def filter3d(input, kernel, border_type='zero', normalized=False):
        if input.dim() != 5:
            raise ValueError('Input tensor must have 5 dimensions (B, C, D, H, W).')
        if kernel.dim() != 3:
>           raise ValueError('Kernel must have 3 dimensions (D_k, H_k, W_k).')
E           ValueError: Kernel must have 3 dimensions (D_k, H_k, W_k).

/local/data0/moved_data/publishablew/kornia/kornia/kornia/filters/temp.py:13: ValueError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-constant]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-reflect]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-replicate]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-circular]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-constant]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-reflect]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-replicate]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-circular]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_exception
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter_2batch_2ch[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_normalized_mean_filter[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_even_sized_filter[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_noncontiguous[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_gradcheck[cpu]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-True]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-False]
======================== 21 failed, 1 skipped in 0.71s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'cudagraphs', 'jit', 'onnxrt', 'openxla', 'tvm', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 22 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-constant] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-reflect] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-replicate] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-circular] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-constant] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-reflect] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-replicate] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-circular] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_exception PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter_2batch_2ch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_normalized_mean_filter[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_even_sized_filter[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_noncontiguous[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_module SKIPPED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-True] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-False] PASSED

======================== 21 passed, 1 skipped in 2.07s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'inductor', 'jit', 'openxla', 'onnxrt', 'tvm', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 22 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-constant] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-reflect] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-replicate] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-True-circular] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-constant] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-reflect] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-replicate] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_smoke[cpu-float32-False-circular] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_cardinality[cpu-float32-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_exception PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_mean_filter_2batch_2ch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_normalized_mean_filter[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_even_sized_filter[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_noncontiguous[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_module SKIPPED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-True] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/filters/test_filters.py::TestFilter3D::test_dynamo[cpu-float32-inductor-False] PASSED

======================== 21 passed, 1 skipped in 2.11s =========================
