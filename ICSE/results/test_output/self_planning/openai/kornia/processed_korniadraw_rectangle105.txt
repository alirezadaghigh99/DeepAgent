output file:
processed_korniadraw_rectangle105.json
function:
draw_rectangle
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'onnxrt', 'jit', 'openxla', 'tvm', 'inductor', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 52 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] FAILED

=================================== FAILURES ===================================
__________________ TestDrawRectangle.test_smoke[cpu-color0-4] __________________

self = <test_draw.TestDrawRectangle object at 0x7d0de371da20>
device = device(type='cpu'), batch = 4, color = tensor([1.])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
>       draw_rectangle(black_image, points, color=color)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:296: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0.,...   [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]]])
rectangle = tensor([[[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]]])
color = tensor([[[1.]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
_________________ TestDrawRectangle.test_smoke[cpu-color0-17] __________________

self = <test_draw.TestDrawRectangle object at 0x7d0de371d8d0>
device = device(type='cpu'), batch = 17, color = tensor([1.])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
>       draw_rectangle(black_image, points, color=color)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:296: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0.,...   [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]]])
rectangle = tensor([[[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

  ...],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]]])
color = tensor([[[1.]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
__________________ TestDrawRectangle.test_smoke[cpu-color1-4] __________________

self = <test_draw.TestDrawRectangle object at 0x7d0de371dc00>
device = device(type='cpu'), batch = 4, color = tensor([0.5000])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
>       draw_rectangle(black_image, points, color=color)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:296: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0.,...   [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]]])
rectangle = tensor([[[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]]])
color = tensor([[[0.5000]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
_________________ TestDrawRectangle.test_smoke[cpu-color1-17] __________________

self = <test_draw.TestDrawRectangle object at 0x7d0de371dcc0>
device = device(type='cpu'), batch = 17, color = tensor([0.5000])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
>       draw_rectangle(black_image, points, color=color)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:296: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0.,...   [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]]])
rectangle = tensor([[[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

  ...],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]]])
color = tensor([[[0.5000]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
____________ TestDrawRectangle.test_fill_and_edges[cpu-7-12-True-8] ____________

self = <test_draw.TestDrawRectangle object at 0x7d0de371ea10>
device = device(type='cpu'), batch = 8, fill = True, height = 12, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-12-True-11] ____________

self = <test_draw.TestDrawRectangle object at 0x7d0de371df30>
device = device(type='cpu'), batch = 11, fill = True, height = 12, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

  ...],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-12-False-8] ____________

self = <test_draw.TestDrawRectangle object at 0x7d0de371e560>
device = device(type='cpu'), batch = 8, fill = False, height = 12, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-12-False-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7d0de371e590>
device = device(type='cpu'), batch = 11, fill = False, height = 12, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

  ...],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-106-True-8] ____________

self = <test_draw.TestDrawRectangle object at 0x7d0de371e650>
device = device(type='cpu'), batch = 8, fill = True, height = 106, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,...0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-106-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7d0de371e710>
device = device(type='cpu'), batch = 11, fill = True, height = 106, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,...0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-106-False-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7d0de371e7d0>
device = device(type='cpu'), batch = 8, fill = False, height = 106, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,...0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-7-106-False-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7d0de371e890>
device = device(type='cpu'), batch = 11, fill = False, height = 106, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,...0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-298-True-8] ____________

self = <test_draw.TestDrawRectangle object at 0x7d0de371e950>
device = device(type='cpu'), batch = 8, fill = True, height = 298, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,...0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-298-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7d0de371e1a0>
device = device(type='cpu'), batch = 11, fill = True, height = 298, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,...0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-298-False-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7d0de371f520>
device = device(type='cpu'), batch = 8, fill = False, height = 298, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,...0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-7-298-False-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7d0de371f5e0>
device = device(type='cpu'), batch = 11, fill = False, height = 298, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,...0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-123-12-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7d0de371f6a0>
device = device(type='cpu'), batch = 8, fill = True, height = 12, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0,...0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-12-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7d0de371f760>
device = device(type='cpu'), batch = 11, fill = True, height = 12, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0,...0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-12-False-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7d0de371f820>
device = device(type='cpu'), batch = 8, fill = False, height = 12, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0,...0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-12-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x7d0de371f8e0>
device = device(type='cpu'), batch = 11, fill = False, height = 12, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0,...0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-106-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7d0de371f9a0>
device = device(type='cpu'), batch = 8, fill = True, height = 106, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0,...0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-106-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x7d0de371fa60>
device = device(type='cpu'), batch = 11, fill = True, height = 106, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0,...0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-106-False-8] __________

self = <test_draw.TestDrawRectangle object at 0x7d0de371fb20>
device = device(type='cpu'), batch = 8, fill = False, height = 106, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0,...0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
_________ TestDrawRectangle.test_fill_and_edges[cpu-123-106-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x7d0de371fbe0>
device = device(type='cpu'), batch = 11, fill = False, height = 106, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0,...0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-298-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7d0de371fca0>
device = device(type='cpu'), batch = 8, fill = True, height = 298, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0,...0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-298-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x7d0de371fd60>
device = device(type='cpu'), batch = 11, fill = True, height = 298, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0,...0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-298-False-8] __________

self = <test_draw.TestDrawRectangle object at 0x7d0de371fe20>
device = device(type='cpu'), batch = 8, fill = False, height = 298, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0,...0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
_________ TestDrawRectangle.test_fill_and_edges[cpu-123-298-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x7d0de371fee0>
device = device(type='cpu'), batch = 11, fill = False, height = 298, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0,...0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-537-12-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7d0de371ffa0>
device = device(type='cpu'), batch = 8, fill = True, height = 12, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0,...0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-12-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7d0de375c0a0>
device = device(type='cpu'), batch = 11, fill = True, height = 12, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0,...0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-12-False-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7d0de375c160>
device = device(type='cpu'), batch = 8, fill = False, height = 12, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0,...0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-12-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x7d0de375c220>
device = device(type='cpu'), batch = 11, fill = False, height = 12, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0,...0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-106-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7d0de375c2e0>
device = device(type='cpu'), batch = 8, fill = True, height = 106, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0,...0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-106-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x7d0de375c3a0>
device = device(type='cpu'), batch = 11, fill = True, height = 106, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0,...0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-106-False-8] __________

self = <test_draw.TestDrawRectangle object at 0x7d0de375c460>
device = device(type='cpu'), batch = 8, fill = False, height = 106, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0,...0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
_________ TestDrawRectangle.test_fill_and_edges[cpu-537-106-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x7d0de375c520>
device = device(type='cpu'), batch = 11, fill = False, height = 106, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0,...0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-298-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7d0de375c5e0>
device = device(type='cpu'), batch = 8, fill = True, height = 298, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0,...0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-298-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x7d0de375c6a0>
device = device(type='cpu'), batch = 11, fill = True, height = 298, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0,...0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-298-False-8] __________

self = <test_draw.TestDrawRectangle object at 0x7d0de375c760>
device = device(type='cpu'), batch = 8, fill = False, height = 298, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0,...0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
_________ TestDrawRectangle.test_fill_and_edges[cpu-537-298-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x7d0de375c820>
device = device(type='cpu'), batch = 11, fill = False, height = 298, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0,...0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: IndexError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-5-4] _______________

self = <test_draw.TestDrawRectangle object at 0x7d0de375cd90>
device = device(type='cpu'), batch = 4, N = 5, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.2902, 0.4907, 0.9356,  ..., 0.6551, 0.0917, 0.0650],
          [0.7467, 0.7993, 0.2187,  ..., 0.5938, 0.2...98, 0.4317, 0.4806,  ..., 0.8386, 0.4776, 0.7143],
          [0.2898, 0.6747, 0.4984,  ..., 0.2748, 0.5308, 0.7993]]]])
rectangle = tensor([[[13,  0, 14,  9],
         [ 6,  6, 11, 16],
         [ 4, 14,  8, 19],
         [17, 11, 19, 14],
         [... 18, 14],
         [13,  9, 19, 13],
         [ 8,  6, 13, 18],
         [ 9,  9, 16, 18],
         [ 9,  1, 15, 19]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 1 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-5-6] _______________

self = <test_draw.TestDrawRectangle object at 0x7d0de375ccd0>
device = device(type='cpu'), batch = 6, N = 5, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.2017, 0.5763, 0.1107,  ..., 0.1683, 0.7258, 0.9279],
          [0.8418, 0.2034, 0.5015,  ..., 0.1114, 0.9...34, 0.0288, 0.7159,  ..., 0.0566, 0.0246, 0.9879],
          [0.9352, 0.3982, 0.3527,  ..., 0.7761, 0.6906, 0.8673]]]])
rectangle = tensor([[[17, 14, 19, 16],
         [ 7, 15, 10, 18],
         [ 1, 15, 10, 18],
         [18, 18, 19, 19],
         [... 19, 16],
         [18, 11, 19, 15],
         [10, 13, 16, 17],
         [14, 16, 18, 19],
         [16,  6, 18, 14]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 1 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-12-4] ______________

self = <test_draw.TestDrawRectangle object at 0x7d0de375cbb0>
device = device(type='cpu'), batch = 4, N = 12, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.3201, 0.9270, 0.6297,  ..., 0.6035, 0.3176, 0.3680],
          [0.1050, 0.9762, 0.4493,  ..., 0.7537, 0.0...21, 0.6006, 0.1393,  ..., 0.3234, 0.5756, 0.3902],
          [0.0926, 0.3846, 0.9956,  ..., 0.3758, 0.6213, 0.6747]]]])
rectangle = tensor([[[ 0, 11,  2, 17],
         [10,  6, 17,  8],
         [ 0,  0, 12, 19],
         [ 1,  3, 16, 12],
         [... 17, 18],
         [14,  3, 15,  6],
         [ 7,  5, 18, 10],
         [ 1,  8,  3, 14],
         [ 2,  0, 10,  2]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 1 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-12-6] ______________

self = <test_draw.TestDrawRectangle object at 0x7d0de375d0c0>
device = device(type='cpu'), batch = 6, N = 12, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[4.0690e-01, 6.3306e-01, 6.5625e-01,  ..., 2.2916e-01,
           2.1616e-01, 5.3594e-01],
          [8.4258...1, 6.4230e-01],
          [9.7835e-01, 8.7708e-01, 3.2836e-01,  ..., 1.0577e-01,
           3.3757e-01, 7.2015e-01]]]])
rectangle = tensor([[[ 5,  4, 11, 13],
         [ 8, 11, 13, 12],
         [ 9, 18, 12, 19],
         [16,  4, 19, 11],
         [... 19, 11],
         [ 5,  1,  9, 18],
         [18,  8, 19, 15],
         [ 6,  2, 12,  4],
         [10,  8, 14, 11]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 1 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:26: IndexError
______________ TestDrawRectangle.test_n_rectangles[cpu-False-5-4] ______________

self = <test_draw.TestDrawRectangle object at 0x7d0de375d180>
device = device(type='cpu'), batch = 4, N = 5, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[4.4853e-01, 9.3882e-01, 4.4503e-01,  ..., 9.2438e-01,
           7.1316e-01, 6.0616e-01],
          [7.5655...1, 5.8469e-01],
          [7.0301e-01, 2.0105e-01, 8.1353e-01,  ..., 4.0583e-01,
           7.2901e-01, 8.2818e-01]]]])
rectangle = tensor([[[11,  2, 19, 15],
         [12, 17, 15, 18],
         [ 7,  7, 13, 16],
         [12,  9, 17, 14],
         [... 18, 16],
         [ 5, 15,  7, 17],
         [ 1, 16, 15, 18],
         [15, 18, 19, 19],
         [11,  8, 12, 18]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   RuntimeError: The expanded size of the tensor (8) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 8].  Tensor sizes: [3]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: RuntimeError
______________ TestDrawRectangle.test_n_rectangles[cpu-False-5-6] ______________

self = <test_draw.TestDrawRectangle object at 0x7d0de375d240>
device = device(type='cpu'), batch = 6, N = 5, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[7.5970e-01, 9.8192e-01, 6.5039e-01,  ..., 6.1859e-01,
           1.8385e-01, 8.1822e-01],
          [3.6954...1, 9.2575e-01],
          [3.8858e-02, 1.7082e-01, 6.8101e-01,  ..., 4.8567e-01,
           3.8844e-01, 6.6174e-01]]]])
rectangle = tensor([[[16, 17, 17, 18],
         [15,  3, 17,  8],
         [ 9,  7, 19, 15],
         [ 0,  8,  3, 15],
         [...  8, 19],
         [ 5,  4, 18, 13],
         [17, 10, 18, 18],
         [14,  1, 16, 10],
         [15,  0, 17, 17]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   RuntimeError: The expanded size of the tensor (1) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 1].  Tensor sizes: [3]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: RuntimeError
_____________ TestDrawRectangle.test_n_rectangles[cpu-False-12-4] ______________

self = <test_draw.TestDrawRectangle object at 0x7d0de375d300>
device = device(type='cpu'), batch = 4, N = 12, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.5695, 0.6832, 0.1495,  ..., 0.8941, 0.8901, 0.1626],
          [0.2961, 0.9724, 0.8161,  ..., 0.9592, 0.4...55, 0.9394, 0.1575,  ..., 0.0502, 0.2968, 0.4361],
          [0.8747, 0.1407, 0.5920,  ..., 0.2511, 0.2662, 0.6244]]]])
rectangle = tensor([[[15,  4, 16, 13],
         [ 3, 10, 17, 15],
         [ 9,  6, 11, 18],
         [ 6,  6, 17, 16],
         [...  6,  4],
         [ 3,  4,  7, 15],
         [14, 16, 17, 19],
         [18, 12, 19, 13],
         [ 6, 12,  7, 13]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   RuntimeError: The expanded size of the tensor (1) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 1].  Tensor sizes: [3]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: RuntimeError
_____________ TestDrawRectangle.test_n_rectangles[cpu-False-12-6] ______________

self = <test_draw.TestDrawRectangle object at 0x7d0de375d3c0>
device = device(type='cpu'), batch = 6, N = 12, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1.2335e-01, 3.7415e-01, 8.8151e-01,  ..., 4.0284e-02,
           4.3533e-01, 1.5833e-01],
          [9.4138...1, 8.9856e-01],
          [7.1187e-01, 1.2059e-01, 6.2318e-01,  ..., 2.9276e-01,
           9.5263e-01, 9.5864e-01]]]])
rectangle = tensor([[[17,  2, 19,  8],
         [ 0, 11, 14, 17],
         [ 7,  3, 13,  9],
         [ 6,  2, 18,  4],
         [...  8, 16],
         [ 3, 17,  9, 19],
         [14, 14, 18, 19],
         [10, 18, 16, 19],
         [ 3, 18, 17, 19]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   RuntimeError: The expanded size of the tensor (2) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 2].  Tensor sizes: [3]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: RuntimeError
_____________ TestDrawRectangle.test_color_background[cpu-color0] ______________

self = <test_draw.TestDrawRectangle object at 0x7d0de375d6c0>
device = device(type='cpu'), color = tensor([0.5000, 0.3000, 0.1500])

    @pytest.mark.parametrize("color", (torch.tensor([0.5, 0.3, 0.15]), torch.tensor([0.23, 0.33, 0.8])))
    def test_color_background(self, device, color):
        image = torch.zeros(1, 3, 40, 40, device=device)
        image[:, 0, :, :] = color[0]
        image[:, 1, :, :] = color[1]
        image[:, 2, :, :] = color[2]
        image_w_rectangle = image.clone()
        p1 = (1, 5)
        p2 = (30, 39)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
        draw_rectangle(image_w_rectangle, points, color=torch.tensor([1.0]))
>       assert (
            torch.abs(
                (image_w_rectangle - image).sum()
                - (1 - color[0]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1] + 1) - 4)
                - (1 - color[1]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1] + 1) - 4)
                - (1 - color[2]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1] + 1) - 4)
            )
            <= 0.0001
        )
E       assert tensor(8.2000) <= 0.0001
E        +  where tensor(8.2000) = <built-in method abs of type object at 0x7d0eb84bf1c0>((((tensor(250.1000) - ((1 - tensor(0.5000)) * (((2 * ((30 - 1) + 1)) + (2 * ((39 - 5) + 1))) - 4))) - ((1 - tensor(0.3000)) * (((2 * ((30 - 1) + 1)) + (2 * ((39 - 5) + 1))) - 4))) - ((1 - tensor(0.1500)) * (((2 * ((30 - 1) + 1)) + (2 * ((39 - 5) + 1))) - 4))))
E        +    where <built-in method abs of type object at 0x7d0eb84bf1c0> = torch.abs
E        +    and   tensor(250.1000) = <built-in method sum of Tensor object at 0x7d0de317dad0>()
E        +      where <built-in method sum of Tensor object at 0x7d0de317dad0> = (tensor([[[[0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 1.0000, 1.0000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 1.0000, 0.5000],\n          ...,\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000]],\n\n         [[0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 1.0000, 1.0000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 1.0000, 0.3000],\n          ...,\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000]],\n\n         [[0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 1.0000, 1.0000, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 1.0000, 0.1500],\n          ...,\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500]]]]) - tensor([[[[0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          ...,\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000]],\n\n         [[0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          ...,\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000]],\n\n         [[0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          ...,\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500]]]])).sum

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:395: AssertionError
_____________ TestDrawRectangle.test_color_background[cpu-color1] ______________

self = <test_draw.TestDrawRectangle object at 0x7d0de375d630>
device = device(type='cpu'), color = tensor([0.2300, 0.3300, 0.8000])

    @pytest.mark.parametrize("color", (torch.tensor([0.5, 0.3, 0.15]), torch.tensor([0.23, 0.33, 0.8])))
    def test_color_background(self, device, color):
        image = torch.zeros(1, 3, 40, 40, device=device)
        image[:, 0, :, :] = color[0]
        image[:, 1, :, :] = color[1]
        image[:, 2, :, :] = color[2]
        image_w_rectangle = image.clone()
        p1 = (1, 5)
        p2 = (30, 39)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
        draw_rectangle(image_w_rectangle, points, color=torch.tensor([1.0]))
>       assert (
            torch.abs(
                (image_w_rectangle - image).sum()
                - (1 - color[0]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1] + 1) - 4)
                - (1 - color[1]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1] + 1) - 4)
                - (1 - color[2]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1] + 1) - 4)
            )
            <= 0.0001
        )
E       assert tensor(6.5600) <= 0.0001
E        +  where tensor(6.5600) = <built-in method abs of type object at 0x7d0eb84bf1c0>((((tensor(200.0800) - ((1 - tensor(0.2300)) * (((2 * ((30 - 1) + 1)) + (2 * ((39 - 5) + 1))) - 4))) - ((1 - tensor(0.3300)) * (((2 * ((30 - 1) + 1)) + (2 * ((39 - 5) + 1))) - 4))) - ((1 - tensor(0.8000)) * (((2 * ((30 - 1) + 1)) + (2 * ((39 - 5) + 1))) - 4))))
E        +    where <built-in method abs of type object at 0x7d0eb84bf1c0> = torch.abs
E        +    and   tensor(200.0800) = <built-in method sum of Tensor object at 0x7d0de2706660>()
E        +      where <built-in method sum of Tensor object at 0x7d0de2706660> = (tensor([[[[0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 1.0000, 1.0000, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 1.0000, 0.2300],\n          ...,\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300]],\n\n         [[0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 1.0000, 1.0000, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 1.0000, 0.3300],\n          ...,\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300]],\n\n         [[0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 1.0000, 1.0000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 1.0000, 0.8000],\n          ...,\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000]]]]) - tensor([[[[0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          ...,\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300]],\n\n         [[0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          ...,\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300]],\n\n         [[0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          ...,\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000]]]])).sum

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:395: AssertionError
_____________ TestDrawRectangle.test_color_foreground[cpu-color0] ______________

self = <test_draw.TestDrawRectangle object at 0x7d0de375dae0>
device = device(type='cpu'), color = tensor([0.3400, 0.6300, 0.1600])

    @pytest.mark.parametrize("color", (torch.tensor([0.34, 0.63, 0.16]), torch.tensor([0.29, 0.13, 0.48])))
    def test_color_foreground(self, device, color):
        image = torch.zeros(1, 3, 50, 40, device=device)
        image_w_rectangle = image.clone()
        p1 = (10, 4)
        p2 = (11, 40)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
>       draw_rectangle(image_w_rectangle, points, color=color)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 4, 10, 40, 11]]])
color = tensor([[[0.3400, 0.6300, 0.1600]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   RuntimeError: The expanded size of the tensor (36) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 36].  Tensor sizes: [3]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: RuntimeError
_____________ TestDrawRectangle.test_color_foreground[cpu-color1] ______________

self = <test_draw.TestDrawRectangle object at 0x7d0de375da50>
device = device(type='cpu'), color = tensor([0.2900, 0.1300, 0.4800])

    @pytest.mark.parametrize("color", (torch.tensor([0.34, 0.63, 0.16]), torch.tensor([0.29, 0.13, 0.48])))
    def test_color_foreground(self, device, color):
        image = torch.zeros(1, 3, 50, 40, device=device)
        image_w_rectangle = image.clone()
        p1 = (10, 4)
        p2 = (11, 40)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
>       draw_rectangle(image_w_rectangle, points, color=color)

/local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 4, 10, 40, 11]]])
color = tensor([[[0.2900, 0.1300, 0.4800]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(-1, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n]
E                   RuntimeError: The expanded size of the tensor (36) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 36].  Tensor sizes: [3]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/temp.py:28: RuntimeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1]
============================== 52 failed in 1.55s ==============================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'inductor', 'openxla', 'jit', 'cudagraphs', 'onnxrt', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 52 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] PASSED

============================== 52 passed in 0.29s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'tvm', 'cudagraphs', 'onnxrt', 'inductor', None, 'openxla'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 52 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] PASSED

============================== 52 passed in 0.29s ==============================
