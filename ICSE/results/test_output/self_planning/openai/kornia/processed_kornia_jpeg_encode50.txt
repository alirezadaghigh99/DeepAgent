output file:
processed_kornia_jpeg_encode50.json
function:
_jpeg_encode
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_param[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_cardinality[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_cardinality[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke_not_div_by_16[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke_not_div_by_16[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_multi_batch[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module_with_param[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_custom_qt[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_inp[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_multi_batch[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_gradcheck[cpu]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_inp[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_param[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_gradcheck[cpu] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module_with_param[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_custom_qt[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'openxla', 'cudagraphs', 'onnxrt', 'inductor', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 11 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke_not_div_by_16[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_multi_batch[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_custom_qt[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_param[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_inp[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_exception[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_cardinality[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module_with_param[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_gradcheck[cpu] FAILED

=================================== FAILURES ===================================
_____________________ TestDiffJPEG.test_smoke[cpu-float32] _____________________

self = <test_jpeg.TestDiffJPEG object at 0x781a55d34f40>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke(self, device, dtype) -> None:
        """This test standard usage."""
        B, H, W = 2, 32, 32
        img = torch.rand(B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(B,), device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:35: in _jpeg_encode
    y_blocks = patchify(y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tensor = tensor([[[141.6812, 117.8960, 207.1788],
         [107.2900, 113.6239, 188.9723],
         [ 80.2673, 167.6149, 107.84...    [117.5733, 108.9650, 173.9883],
         [167.7442, 115.7716, 126.7467],
         [114.2642, 196.6453, 150.8089]]])

    def patchify(tensor):
        B, H, W = tensor.shape
>       tensor = tensor.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:33: RuntimeError
______________ TestDiffJPEG.test_smoke_not_div_by_16[cpu-float32] ______________

self = <test_jpeg.TestDiffJPEG object at 0x781a55d35330>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke_not_div_by_16(self, device, dtype) -> None:
        """This test standard usage."""
        B, H, W = 2, 33, 33
        img = torch.rand(B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(B,), device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:35: in _jpeg_encode
    y_blocks = patchify(y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tensor = tensor([[[147.8330,  90.6717, 153.8958],
         [190.9246,  92.9906, 159.2249],
         [ 63.0084, 137.6174, 133.76...    [155.0671, 129.5498, 147.8201],
         [155.0671, 129.5498, 147.8201],
         [155.0671, 129.5498, 147.8201]]])

    def patchify(tensor):
        B, H, W = tensor.shape
>       tensor = tensor.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:33: RuntimeError
__________________ TestDiffJPEG.test_multi_batch[cpu-float32] __________________

self = <test_jpeg.TestDiffJPEG object at 0x781a55d35660>
device = device(type='cpu'), dtype = torch.float32

    def test_multi_batch(self, device, dtype) -> None:
        """Here we test two batch dimensions."""
        B, H, W = 4, 32, 32
        img = torch.rand(B, B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(1,), device=device, dtype=dtype)
        qt_y = torch.randint(low=1, high=255, size=(B * B, 8, 8), device=device, dtype=dtype)
        qt_c = torch.randint(low=1, high=255, size=(B * B, 8, 8), device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality, qt_y, qt_c)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:35: in _jpeg_encode
    y_blocks = patchify(y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tensor = tensor([[[135.0677,  79.1559, 184.3003],
         [107.3728, 189.3949, 113.3433],
         [219.6469,  62.9439, 146.35...    [ 80.1716, 155.0313, 145.7313],
         [169.4075, 153.0424,  63.2761],
         [139.5914, 179.5756, 143.1518]]])

    def patchify(tensor):
        B, H, W = tensor.shape
>       tensor = tensor.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:33: RuntimeError
___________________ TestDiffJPEG.test_custom_qt[cpu-float32] ___________________

self = <test_jpeg.TestDiffJPEG object at 0x781a55d35990>
device = device(type='cpu'), dtype = torch.float32

    def test_custom_qt(self, device, dtype) -> None:
        """Here we test if we can handle custom quantization tables."""
        B, H, W = 4, 32, 32
        img = torch.rand(B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(B,), device=device, dtype=dtype)
        qt_y = torch.randint(low=1, high=255, size=(B, 8, 8), device=device, dtype=dtype)
        qt_c = torch.randint(low=1, high=255, size=(B, 8, 8), device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality, qt_y, qt_c)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:35: in _jpeg_encode
    y_blocks = patchify(y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tensor = tensor([[[144.2123, 132.1536, 107.2132],
         [ 38.7501, 238.9812, 113.2645],
         [ 98.0846, 207.2373, 174.59...    [105.0012, 151.2109, 116.6949],
         [188.9272, 161.4237,  95.5637],
         [161.8967, 163.4346,  22.7129]]])

    def patchify(tensor):
        B, H, W = tensor.shape
>       tensor = tensor.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:33: RuntimeError
________________ TestDiffJPEG.test_non_batch_param[cpu-float32] ________________

self = <test_jpeg.TestDiffJPEG object at 0x781a55d35cc0>
device = device(type='cpu'), dtype = torch.float32

    def test_non_batch_param(self, device, dtype) -> None:
        """Here we test if we can handle non-batched JPEG parameters (JPEG quality and QT's)."""
        B, H, W = 3, 32, 32
        img = torch.rand(B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(1,), device=device, dtype=dtype)
        qt_y = torch.randint(low=1, high=255, size=(1, 8, 8), device=device, dtype=dtype)
        qt_c = torch.randint(low=1, high=255, size=(1, 8, 8), device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality, qt_y, qt_c)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:35: in _jpeg_encode
    y_blocks = patchify(y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tensor = tensor([[[152.9796, 185.4012, 167.8292],
         [139.0618,  88.0117, 127.0172],
         [100.7770, 176.5521, 111.22...    [157.7811, 169.5269,  87.9856],
         [ 62.4448, 180.1468,  84.8779],
         [171.7993, 138.2456, 123.2742]]])

    def patchify(tensor):
        B, H, W = tensor.shape
>       tensor = tensor.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:33: RuntimeError
_________________ TestDiffJPEG.test_non_batch_inp[cpu-float32] _________________

self = <test_jpeg.TestDiffJPEG object at 0x781a55d35ff0>
device = device(type='cpu'), dtype = torch.float32

    def test_non_batch_inp(self, device, dtype) -> None:
        """Here we test if we can handle non-batched inputs (input image, JPEG quality, and QT's)."""
        H, W = 32, 32
        img = torch.rand(3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(1,), device=device, dtype=dtype)
        qt_y = torch.randint(low=1, high=255, size=(8, 8), device=device, dtype=dtype)
        qt_c = torch.randint(low=1, high=255, size=(8, 8), device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality, qt_y, qt_c)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:35: in _jpeg_encode
    y_blocks = patchify(y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tensor = tensor([[[126.9015, 135.7759,  74.6546],
         [ 37.4187, 141.2114, 166.5314],
         [ 64.1796, 147.2310,  88.78...    [165.1450,  54.8731, 161.0648],
         [ 61.4356, 186.9047, 144.8383],
         [108.1796,  77.4427, 201.6353]]])

    def patchify(tensor):
        B, H, W = tensor.shape
>       tensor = tensor.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:33: RuntimeError
__________________ TestDiffJPEG.test_cardinality[cpu-float32] __________________

self = <test_jpeg.TestDiffJPEG object at 0x781a55d36650>
device = device(type='cpu'), dtype = torch.float32

    def test_cardinality(self, device, dtype) -> None:
        B, H, W = 1, 16, 16
        img = torch.zeros(B, 3, H, W, device=device, dtype=dtype)
        img[..., 4:-4, 4:-4] = 1.0
        jpeg_quality = torch.tensor([2.0], device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:35: in _jpeg_encode
    y_blocks = patchify(y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tensor = tensor([[[  0., 128., 128.],
         [  0., 128., 128.],
         [  0., 128., 128.],
         [  0., 128., 128.],
  ...,
         [  0., 128., 128.],
         [  0., 128., 128.],
         [  0., 128., 128.],
         [  0., 128., 128.]]])

    def patchify(tensor):
        B, H, W = tensor.shape
>       tensor = tensor.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:33: RuntimeError
____________________ TestDiffJPEG.test_module[cpu-float32] _____________________

self = <test_jpeg.TestDiffJPEG object at 0x781a55d36980>
device = device(type='cpu'), dtype = torch.float32

    def test_module(self, device, dtype) -> None:
        B, H, W = 4, 16, 16
        img = torch.rand(B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(B,), device=device, dtype=dtype)
        qt_y = torch.randint(low=1, high=255, size=(B, 8, 8), device=device, dtype=dtype)
        qt_c = torch.randint(low=1, high=255, size=(B, 8, 8), device=device, dtype=dtype)
        diff_jpeg_module = kornia.enhance.JPEGCodecDifferentiable(qt_y, qt_c)
>       img_jpeg = diff_jpeg_module(img, jpeg_quality)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:1033: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:432: in forward
    image_rgb_jpeg: Tensor = jpeg_codec_differentiable(image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=self.quantization_table_c, quantization_table_y=self.quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:35: in _jpeg_encode
    y_blocks = patchify(y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tensor = tensor([[[ 93.6072, 152.3832, 108.4507],
         [ 62.9993, 176.8059, 175.7594],
         [ 98.1476, 159.2477, 175.77...    [ 68.4429, 131.7352, 123.5714],
         [143.2938, 111.5798,  83.5706],
         [194.8126, 111.3852, 139.2967]]])

    def patchify(tensor):
        B, H, W = tensor.shape
>       tensor = tensor.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:33: RuntimeError
_______________ TestDiffJPEG.test_module_with_param[cpu-float32] _______________

self = <test_jpeg.TestDiffJPEG object at 0x781a55d35e40>
device = device(type='cpu'), dtype = torch.float32

    def test_module_with_param(self, device, dtype) -> None:
        B, H, W = 4, 16, 16
        img = torch.rand(B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(B,), device=device, dtype=dtype)
        qt_y = torch.nn.Parameter(torch.randint(low=1, high=255, size=(B, 8, 8), device=device, dtype=dtype))
        qt_c = torch.nn.Parameter(torch.randint(low=1, high=255, size=(B, 8, 8), device=device, dtype=dtype))
        diff_jpeg_module = kornia.enhance.JPEGCodecDifferentiable(qt_y, qt_c)
>       img_jpeg = diff_jpeg_module(img, jpeg_quality)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:1044: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:432: in forward
    image_rgb_jpeg: Tensor = jpeg_codec_differentiable(image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=self.quantization_table_c, quantization_table_y=self.quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:35: in _jpeg_encode
    y_blocks = patchify(y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tensor = tensor([[[195.6485,  28.9024, 121.9118],
         [103.4509, 154.3087,  91.8348],
         [ 50.6282, 203.5710, 135.41...    [179.2114,  77.2198, 111.4485],
         [162.9154,  46.5220,  71.1531],
         [ 91.9683, 203.8827, 144.5654]]])

    def patchify(tensor):
        B, H, W = tensor.shape
>       tensor = tensor.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:33: RuntimeError
_______________________ TestDiffJPEG.test_gradcheck[cpu] _______________________

self = <test_jpeg.TestDiffJPEG object at 0x781a55d368f0>
device = device(type='cpu')

    def test_gradcheck(self, device) -> None:
        """We test that the gradient matches the gradient of the reference implementation."""
        B, H, W = 1, 16, 16
        img = torch.zeros(B, 3, H, W, device=device, dtype=torch.float)
        img[..., 0, 4:-4, 4:-4] = 1.0
        img[..., 1, 4:-4, 4:-4] = 0.5
        img[..., 2, 4:-4, 4:-4] = 0.5
        img.requires_grad = True
        jpeg_quality = torch.tensor([10.0], device=device, dtype=torch.float, requires_grad=True)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality)

/local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py:1058: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:35: in _jpeg_encode
    y_blocks = patchify(y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tensor = tensor([[[  0., 128., 128.],
         [  0., 128., 128.],
         [  0., 128., 128.],
         [  0., 128., 128.],
  ...8.],
         [  0., 128., 128.],
         [  0., 128., 128.],
         [  0., 128., 128.]]], grad_fn=<SliceBackward0>)

    def patchify(tensor):
        B, H, W = tensor.shape
>       tensor = tensor.unfold(1, 8, 8).unfold(2, 8, 8)
E       RuntimeError: maximum size for tensor at dimension 2 is 3 but size is 8

/local/data0/moved_data/publishablew/kornia/kornia/kornia/enhance/temp.py:33: RuntimeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke_not_div_by_16[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_multi_batch[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_custom_qt[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_param[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_inp[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_cardinality[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module_with_param[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_gradcheck[cpu]
========================= 10 failed, 1 passed in 0.51s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', None, 'onnxrt', 'tvm', 'inductor', 'openxla', 'cudagraphs'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 11 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke_not_div_by_16[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_multi_batch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_custom_qt[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_param[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_inp[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_exception[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_cardinality[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module_with_param[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_gradcheck[cpu] PASSED

=============================== warnings summary ===============================
tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/functional.py:534: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3595.)
    return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 11 passed, 1 warning in 0.22s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'jit', 'openxla', 'tvm', 'cudagraphs', 'inductor', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 11 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke_not_div_by_16[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_multi_batch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_custom_qt[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_param[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_inp[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_exception[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_cardinality[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module_with_param[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_gradcheck[cpu] PASSED

=============================== warnings summary ===============================
tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/functional.py:534: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3595.)
    return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 11 passed, 1 warning in 0.20s =========================
