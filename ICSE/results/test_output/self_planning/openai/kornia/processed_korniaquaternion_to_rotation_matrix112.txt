output file:
processed_korniaquaternion_to_rotation_matrix112.json
function:
quaternion_to_rotation_matrix
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims4]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims5]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_z_rotation[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_unit_quaternion[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_y_rotation[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_x_rotation[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_x_rotation[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims4] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims5] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims0] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_z_rotation[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_y_rotation[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_unit_quaternion[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims0]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'tvm', 'inductor', 'cudagraphs', 'jit', None, 'openxla'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 12 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims0] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims5] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_unit_quaternion[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_x_rotation[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_y_rotation[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_z_rotation[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_dynamo[cpu-float32-inductor] PASSED

=================================== FAILURES ===================================
___ TestQuaternionToRotationMatrix.test_smoke_batch[cpu-float32-batch_dims0] ___

self = <tests.geometry.test_conversions.TestQuaternionToRotationMatrix object at 0x75a7c1364970>
batch_dims = (), device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_dims", ((), (1,), (3,), (8,), (1, 1), (5, 6)))
    def test_smoke_batch(self, batch_dims, device, dtype):
        quaternion = torch.zeros(*batch_dims, 4, device=device, dtype=dtype)
        matrix = kornia.geometry.conversions.quaternion_to_rotation_matrix(quaternion)
>       assert matrix.shape == (*batch_dims, 3, 3)
E       AssertionError: assert torch.Size([1, 3, 3]) == (3, 3)
E         
E         At index 0 diff: 1 != 3
E         Left contains one more item: 3
E         
E         Full diff:
E         + torch.Size([1, 3, 3])
E         - (...
E         
E         ...Full output truncated (3 lines hidden), use '-vv' to show

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py:249: AssertionError
___ TestQuaternionToRotationMatrix.test_smoke_batch[cpu-float32-batch_dims4] ___

self = <tests.geometry.test_conversions.TestQuaternionToRotationMatrix object at 0x75a7c1364e50>
batch_dims = (1, 1), device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_dims", ((), (1,), (3,), (8,), (1, 1), (5, 6)))
    def test_smoke_batch(self, batch_dims, device, dtype):
        quaternion = torch.zeros(*batch_dims, 4, device=device, dtype=dtype)
        matrix = kornia.geometry.conversions.quaternion_to_rotation_matrix(quaternion)
>       assert matrix.shape == (*batch_dims, 3, 3)
E       AssertionError: assert torch.Size([1, 3, 3]) == (1, 1, 3, 3)
E         
E         At index 1 diff: 3 != 1
E         Right contains one more item: 3
E         
E         Full diff:
E         + torch.Size([1, 3, 3])
E         - (...
E         
E         ...Full output truncated (5 lines hidden), use '-vv' to show

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py:249: AssertionError
___ TestQuaternionToRotationMatrix.test_smoke_batch[cpu-float32-batch_dims5] ___

self = <tests.geometry.test_conversions.TestQuaternionToRotationMatrix object at 0x75a7c1364f10>
batch_dims = (5, 6), device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_dims", ((), (1,), (3,), (8,), (1, 1), (5, 6)))
    def test_smoke_batch(self, batch_dims, device, dtype):
        quaternion = torch.zeros(*batch_dims, 4, device=device, dtype=dtype)
        matrix = kornia.geometry.conversions.quaternion_to_rotation_matrix(quaternion)
>       assert matrix.shape == (*batch_dims, 3, 3)
E       AssertionError: assert torch.Size([30, 3, 3]) == (5, 6, 3, 3)
E         
E         At index 0 diff: 30 != 5
E         Right contains one more item: 3
E         
E         Full diff:
E         + torch.Size([30, 3, 3])
E         - (...
E         
E         ...Full output truncated (5 lines hidden), use '-vv' to show

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py:249: AssertionError
_______ TestQuaternionToRotationMatrix.test_unit_quaternion[cpu-float32] _______

self = <tests.geometry.test_conversions.TestQuaternionToRotationMatrix object at 0x75a7c1365270>
device = device(type='cpu'), dtype = torch.float32, atol = 0.0001, rtol = 0.0001

    def test_unit_quaternion(self, device, dtype, atol, rtol):
        quaternion = torch.tensor((1.0, 0.0, 0.0, 0.0), device=device, dtype=dtype)
        expected = torch.tensor(((1.0, 0.0, 0.0), (0.0, 1.0, 0.0), (0.0, 0.0, 1.0)), device=device, dtype=dtype)
        matrix = kornia.geometry.conversions.quaternion_to_rotation_matrix(quaternion)
>       self.assert_close(matrix, expected, atol=atol, rtol=rtol)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]]])
expected = tensor([[1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.]])
rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: The values for attribute 'shape' do not match: torch.Size([1, 3, 3]) != torch.Size([3, 3]).

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
_________ TestQuaternionToRotationMatrix.test_x_rotation[cpu-float32] __________

self = <tests.geometry.test_conversions.TestQuaternionToRotationMatrix object at 0x75a7c13655d0>
device = device(type='cpu'), dtype = torch.float32, atol = 0.0001, rtol = 0.0001

    def test_x_rotation(self, device, dtype, atol, rtol):
        quaternion = torch.tensor((0.0, 1.0, 0.0, 0.0), device=device, dtype=dtype)
        expected = torch.tensor(((1.0, 0.0, 0.0), (0.0, -1.0, 0.0), (0.0, 0.0, -1.0)), device=device, dtype=dtype)
        matrix = kornia.geometry.conversions.quaternion_to_rotation_matrix(quaternion)
>       self.assert_close(matrix, expected, atol=atol, rtol=rtol)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py:261: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[ 1.,  0.,  0.],
         [ 0., -1.,  0.],
         [ 0.,  0., -1.]]])
expected = tensor([[ 1.,  0.,  0.],
        [ 0., -1.,  0.],
        [ 0.,  0., -1.]])
rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: The values for attribute 'shape' do not match: torch.Size([1, 3, 3]) != torch.Size([3, 3]).

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
_________ TestQuaternionToRotationMatrix.test_y_rotation[cpu-float32] __________

self = <tests.geometry.test_conversions.TestQuaternionToRotationMatrix object at 0x75a7c1365960>
device = device(type='cpu'), dtype = torch.float32, atol = 0.0001, rtol = 0.0001

    def test_y_rotation(self, device, dtype, atol, rtol):
        quaternion = torch.tensor((0.0, 0.0, 1.0, 0.0), device=device, dtype=dtype)
        expected = torch.tensor(((-1.0, 0.0, 0.0), (0.0, 1.0, 0.0), (0.0, 0.0, -1.0)), device=device, dtype=dtype)
        matrix = kornia.geometry.conversions.quaternion_to_rotation_matrix(quaternion)
>       self.assert_close(matrix, expected, atol=atol, rtol=rtol)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py:267: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[-1.,  0.,  0.],
         [ 0.,  1.,  0.],
         [ 0.,  0., -1.]]])
expected = tensor([[-1.,  0.,  0.],
        [ 0.,  1.,  0.],
        [ 0.,  0., -1.]])
rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: The values for attribute 'shape' do not match: torch.Size([1, 3, 3]) != torch.Size([3, 3]).

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
_________ TestQuaternionToRotationMatrix.test_z_rotation[cpu-float32] __________

self = <tests.geometry.test_conversions.TestQuaternionToRotationMatrix object at 0x75a7c1365cf0>
device = device(type='cpu'), dtype = torch.float32, atol = 0.0001, rtol = 0.0001

    def test_z_rotation(self, device, dtype, atol, rtol):
        quaternion = torch.tensor((0.0, 0.0, 0.0, 1.0), device=device, dtype=dtype)
        expected = torch.tensor(((-1.0, 0.0, 0.0), (0.0, -1.0, 0.0), (0.0, 0.0, 1.0)), device=device, dtype=dtype)
        matrix = kornia.geometry.conversions.quaternion_to_rotation_matrix(quaternion)
>       self.assert_close(matrix, expected, atol=atol, rtol=rtol)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py:273: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[-1.,  0.,  0.],
         [ 0., -1.,  0.],
         [ 0.,  0.,  1.]]])
expected = tensor([[-1.,  0.,  0.],
        [ 0., -1.,  0.],
        [ 0.,  0.,  1.]])
rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: The values for attribute 'shape' do not match: torch.Size([1, 3, 3]) != torch.Size([3, 3]).

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims0]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims5]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_unit_quaternion[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_x_rotation[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_y_rotation[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_z_rotation[cpu-float32]
========================= 7 failed, 5 passed in 2.40s ==========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'cudagraphs', 'openxla', 'onnxrt', 'tvm', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 12 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_unit_quaternion[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_x_rotation[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_y_rotation[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_z_rotation[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_dynamo[cpu-float32-inductor] PASSED

============================== 12 passed in 1.97s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'jit', 'tvm', 'inductor', 'cudagraphs', None, 'onnxrt'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 12 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_smoke_batch[cpu-float32-batch_dims5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_unit_quaternion[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_x_rotation[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_y_rotation[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_z_rotation[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix::test_dynamo[cpu-float32-inductor] PASSED

============================== 12 passed in 2.00s ==============================
