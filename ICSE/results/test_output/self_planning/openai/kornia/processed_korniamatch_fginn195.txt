output file:
processed_korniamatch_fginn195.json
function:
match_fginn
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'inductor', 'onnxrt', 'jit', None, 'openxla', 'cudagraphs'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 12 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_jit[cpu-float32] SKIPPED

=================================== FAILURES ===================================
_________________ TestMatchFGINN.test_shape_one_way[cpu-2-4-4] _________________

self = <test_matching.TestMatchFGINN object at 0x716b79b3b460>, num_desc1 = 2
num_desc2 = 4, dim = 4, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_one_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.8393, 0.5830, 0.5197, 0.8632],
        [0.7636, 0.7423, 0.6180, 0.1489]])
desc2 = tensor([[0.9878, 0.1122, 0.6394, 0.8038],
        [0.5850, 0.4443, 0.1414, 0.9171],
        [0.0290, 0.2749, 0.2493, 0.1181],
        [0.8218, 0.4914, 0.8052, 0.2604]])
lafs1 = tensor([[[[0.2345, 0.9998, 0.5747],
          [0.7122, 0.8043, 0.4704]],

         [[0.8243, 0.5074, 0.1620],
          [0.1868, 0.5896, 0.4158]]]])
lafs2 = tensor([[[[0.3424, 0.6050, 0.1751],
          [0.7521, 0.7136, 0.8977]],

         [[0.8785, 0.3402, 0.2726],
        ...8938],
          [0.1875, 0.7763, 0.4025]],

         [[0.2690, 0.2831, 0.9112],
          [0.1573, 0.9762, 0.1740]]]])
th = 0.9, spatial_th = 1000, mutual = False, dm = None

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        distances = torch.cdist(desc1, desc2, p=2)
        min_distances, nn_indices = torch.min(distances, dim=1)
        valid_matches = min_distances < th
        if spatial_th > 0:
>           spatial_distances = torch.cdist(lafs1, lafs2[nn_indices], p=2)
E           IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:18: IndexError
________________ TestMatchFGINN.test_shape_one_way[cpu-2-5-128] ________________

self = <test_matching.TestMatchFGINN object at 0x716b79b3b3a0>, num_desc1 = 2
num_desc2 = 5, dim = 128, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_one_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.6651, 0.2201, 0.2248, 0.4295, 0.0434, 0.6140, 0.2364, 0.1257, 0.5422,
         0.7054, 0.4969, 0.2585, 0.39...69, 0.6344,
         0.5596, 0.4563, 0.2754, 0.8232, 0.6098, 0.1109, 0.6873, 0.1723, 0.8413,
         0.1972, 0.4892]])
desc2 = tensor([[0.3989, 0.6284, 0.4453, 0.4378, 0.5734, 0.6803, 0.7614, 0.5208, 0.5708,
         0.7814, 0.1673, 0.2903, 0.40...54, 0.8370,
         0.3070, 0.3075, 0.6335, 0.4947, 0.7381, 0.8361, 0.7988, 0.1071, 0.8343,
         0.2414, 0.6176]])
lafs1 = tensor([[[[0.1385, 0.0099, 0.9703],
          [0.0640, 0.4471, 0.0469]],

         [[0.1728, 0.5639, 0.9670],
          [0.9831, 0.9025, 0.9828]]]])
lafs2 = tensor([[[[0.6602, 0.1493, 0.3297],
          [0.3351, 0.2875, 0.1915]],

         [[0.9792, 0.9383, 0.9307],
        ...8821],
          [0.3312, 0.7799, 0.8291]],

         [[0.9881, 0.6640, 0.5725],
          [0.1095, 0.8121, 0.6660]]]])
th = 0.9, spatial_th = 1000, mutual = False, dm = None

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        distances = torch.cdist(desc1, desc2, p=2)
        min_distances, nn_indices = torch.min(distances, dim=1)
        valid_matches = min_distances < th
        if spatial_th > 0:
>           spatial_distances = torch.cdist(lafs1, lafs2[nn_indices], p=2)
E           IndexError: index 2 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:18: IndexError
________________ TestMatchFGINN.test_shape_one_way[cpu-6-2-32] _________________

self = <test_matching.TestMatchFGINN object at 0x716b79b3b730>, num_desc1 = 6
num_desc2 = 2, dim = 32, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_one_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.8623, 0.5643, 0.1875, 0.9329, 0.9549, 0.7138, 0.7014, 0.3425, 0.8655,
         0.4244, 0.7592, 0.7268, 0.85...540, 0.8427, 0.7266, 0.1375, 0.2459, 0.6839, 0.5798, 0.3833, 0.5621,
         0.7535, 0.4459, 0.6250, 0.9060, 0.5038]])
desc2 = tensor([[0.0687, 0.1821, 0.4052, 0.0817, 0.0121, 0.9053, 0.6408, 0.9559, 0.7069,
         0.8841, 0.0074, 0.3970, 0.31...189, 0.7865, 0.0227, 0.7769, 0.1720, 0.1285, 0.2593, 0.9132, 0.3787,
         0.8420, 0.5872, 0.1846, 0.3070, 0.3999]])
lafs1 = tensor([[[[0.2611, 0.4700, 0.3822],
          [0.0615, 0.0157, 0.6942]],

         [[0.0915, 0.6162, 0.2360],
        ...1865],
          [0.6389, 0.5988, 0.1308]],

         [[0.4753, 0.1942, 0.7939],
          [0.0178, 0.2162, 0.4488]]]])
lafs2 = tensor([[[[0.9945, 0.6580, 0.7361],
          [0.1413, 0.5803, 0.9650]],

         [[0.6768, 0.1041, 0.8203],
          [0.1952, 0.3604, 0.8719]]]])
th = 0.9, spatial_th = 1000, mutual = False, dm = None

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        distances = torch.cdist(desc1, desc2, p=2)
        min_distances, nn_indices = torch.min(distances, dim=1)
        valid_matches = min_distances < th
        if spatial_th > 0:
>           spatial_distances = torch.cdist(lafs1, lafs2[nn_indices], p=2)
E           IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:18: IndexError
_________________ TestMatchFGINN.test_shape_two_way[cpu-2-4-4] _________________

self = <test_matching.TestMatchFGINN object at 0x716b79b3ba30>, num_desc1 = 2
num_desc2 = 4, dim = 4, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_two_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000, mutual=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.2361, 0.5845, 0.1372, 0.5306],
        [0.8214, 0.1027, 0.2725, 0.9160]])
desc2 = tensor([[0.3732, 0.1801, 0.1138, 0.3935],
        [0.6901, 0.6964, 0.8844, 0.9984],
        [0.3879, 0.1918, 0.6894, 0.2093],
        [0.6253, 0.6332, 0.2355, 0.9165]])
lafs1 = tensor([[[[0.9959, 0.3704, 0.0380],
          [0.7842, 0.3775, 0.6586]],

         [[0.1688, 0.3521, 0.0667],
          [0.1473, 0.1001, 0.4725]]]])
lafs2 = tensor([[[[0.1913, 0.4260, 0.6841],
          [0.5542, 0.2520, 0.1728]],

         [[0.6274, 0.5561, 0.0170],
        ...8644],
          [0.1335, 0.9907, 0.7931]],

         [[0.2741, 0.8307, 0.6097],
          [0.5647, 0.2050, 0.8642]]]])
th = 0.9, spatial_th = 1000, mutual = True, dm = None

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        distances = torch.cdist(desc1, desc2, p=2)
        min_distances, nn_indices = torch.min(distances, dim=1)
        valid_matches = min_distances < th
        if spatial_th > 0:
>           spatial_distances = torch.cdist(lafs1, lafs2[nn_indices], p=2)
E           IndexError: index 3 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:18: IndexError
________________ TestMatchFGINN.test_shape_two_way[cpu-2-5-128] ________________

self = <test_matching.TestMatchFGINN object at 0x716b79b3b9a0>, num_desc1 = 2
num_desc2 = 5, dim = 128, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_two_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000, mutual=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.0342, 0.0394, 0.7409, 0.0212, 0.9082, 0.1754, 0.9266, 0.9594, 0.0567,
         0.5870, 0.5241, 0.4193, 0.86...23, 0.1903,
         0.6659, 0.5712, 0.6949, 0.8656, 0.6262, 0.8141, 0.4382, 0.9640, 0.2325,
         0.6675, 0.6422]])
desc2 = tensor([[0.8958, 0.5861, 0.5848, 0.8099, 0.4059, 0.9616, 0.3664, 0.9593, 0.0976,
         0.4358, 0.6861, 0.6619, 0.49...71, 0.0959,
         0.0758, 0.4104, 0.5219, 0.0576, 0.5665, 0.6014, 0.5758, 0.1532, 0.0184,
         0.6332, 0.8782]])
lafs1 = tensor([[[[0.1359, 0.7946, 0.8516],
          [0.1945, 0.8286, 0.6529]],

         [[0.8992, 0.6886, 0.7355],
          [0.5103, 0.2054, 0.9077]]]])
lafs2 = tensor([[[[0.0586, 0.6655, 0.0167],
          [0.2379, 0.6951, 0.4562]],

         [[0.2384, 0.6564, 0.2264],
        ...9633],
          [0.2946, 0.1027, 0.7378]],

         [[0.5597, 0.3042, 0.0096],
          [0.2222, 0.4693, 0.8949]]]])
th = 0.9, spatial_th = 1000, mutual = True, dm = None

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        distances = torch.cdist(desc1, desc2, p=2)
        min_distances, nn_indices = torch.min(distances, dim=1)
        valid_matches = min_distances < th
        if spatial_th > 0:
>           spatial_distances = torch.cdist(lafs1, lafs2[nn_indices], p=2)
E           IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:18: IndexError
________________ TestMatchFGINN.test_shape_two_way[cpu-6-2-32] _________________

self = <test_matching.TestMatchFGINN object at 0x716b79b3bd30>, num_desc1 = 6
num_desc2 = 2, dim = 32, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_two_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000, mutual=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[2.4557e-01, 1.2737e-01, 8.9904e-01, 4.0294e-01, 4.2921e-01, 5.6421e-01,
         9.5272e-01, 4.8123e-01, 5.22...01,
         3.8706e-01, 6.4869e-01, 9.6830e-01, 2.8728e-01, 2.5902e-01, 2.3431e-01,
         2.3165e-03, 4.1931e-01]])
desc2 = tensor([[0.6883, 0.3115, 0.5732, 0.3424, 0.5956, 0.5363, 0.8605, 0.7431, 0.2879,
         0.1956, 0.0945, 0.5158, 0.28...667, 0.2020, 0.2799, 0.0510, 0.4265, 0.9741, 0.7966, 0.6052, 0.4886,
         0.8397, 0.7298, 0.7791, 0.8667, 0.4196]])
lafs1 = tensor([[[[0.0300, 0.8107, 0.0289],
          [0.1472, 0.2114, 0.7276]],

         [[0.6696, 0.9342, 0.5529],
        ...1834],
          [0.8372, 0.0803, 0.5815]],

         [[0.2037, 0.4517, 0.1805],
          [0.4592, 0.8733, 0.2646]]]])
lafs2 = tensor([[[[0.4712, 0.7365, 0.5931],
          [0.0512, 0.2516, 0.6722]],

         [[0.7108, 0.3925, 0.2497],
          [0.1803, 0.1630, 0.8136]]]])
th = 0.9, spatial_th = 1000, mutual = True, dm = None

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        distances = torch.cdist(desc1, desc2, p=2)
        min_distances, nn_indices = torch.min(distances, dim=1)
        valid_matches = min_distances < th
        if spatial_th > 0:
>           spatial_distances = torch.cdist(lafs1, lafs2[nn_indices], p=2)
E           IndexError: index 1 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:18: IndexError
__________________ TestMatchFGINN.test_matching1[cpu-float32] __________________

self = <test_matching.TestMatchFGINN object at 0x716b79b6c040>
device = device(type='cpu'), dtype = torch.float32

    def test_matching1(self, device, dtype):
        desc1 = torch.tensor([[0, 0.0], [1, 1.001], [2, 2], [3, 3.0], [5, 5.0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0], [3, 3.0], [2.3, 2.4], [1, 1.001], [0, 0.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8, 0.01)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:266: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.0000, 0.0000],
        [1.0000, 1.0010],
        [2.0000, 2.0000],
        [3.0000, 3.0000],
        [5.0000, 5.0000]])
desc2 = tensor([[5.0000, 5.0000],
        [3.0000, 3.0000],
        [2.3000, 2.4000],
        [1.0000, 1.0010],
        [0.0000, 0.0000]])
lafs1 = tensor([[[[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]],

         [[1.0000, 0.0000, 1.0000],
       ...00],
          [-0.0000, 1.0000, 3.0000]],

         [[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]]]])
lafs2 = tensor([[[[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 3.0000],
       ...00],
          [-0.0000, 1.0000, 1.0010]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
th = 0.8, spatial_th = 0.01, mutual = False, dm = None

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        distances = torch.cdist(desc1, desc2, p=2)
        min_distances, nn_indices = torch.min(distances, dim=1)
        valid_matches = min_distances < th
        if spatial_th > 0:
>           spatial_distances = torch.cdist(lafs1, lafs2[nn_indices], p=2)
E           IndexError: index 4 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:18: IndexError
_______________ TestMatchFGINN.test_matching_mutual[cpu-float32] _______________

self = <test_matching.TestMatchFGINN object at 0x716b79b6c370>
device = device(type='cpu'), dtype = torch.float32

    def test_matching_mutual(self, device, dtype):
        desc1 = torch.tensor([[0, 0.1], [1, 1.001], [2, 2], [3, 3.0], [5, 5.0], [0.0, 0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0], [3, 3.0], [2.3, 2.4], [1, 1.001], [0, 0.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8, 2.0, mutual=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:282: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.0000, 0.1000],
        [1.0000, 1.0010],
        [2.0000, 2.0000],
        [3.0000, 3.0000],
        [5.0000, 5.0000],
        [0.0000, 0.0000]])
desc2 = tensor([[5.0000, 5.0000],
        [3.0000, 3.0000],
        [2.3000, 2.4000],
        [1.0000, 1.0010],
        [0.0000, 0.0000]])
lafs1 = tensor([[[[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.1000]],

         [[1.0000, 0.0000, 1.0000],
       ...00],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
lafs2 = tensor([[[[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 3.0000],
       ...00],
          [-0.0000, 1.0000, 1.0010]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
th = 0.8, spatial_th = 2.0, mutual = True, dm = None

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        distances = torch.cdist(desc1, desc2, p=2)
        min_distances, nn_indices = torch.min(distances, dim=1)
        valid_matches = min_distances < th
        if spatial_th > 0:
>           spatial_distances = torch.cdist(lafs1, lafs2[nn_indices], p=2)
E           IndexError: index 4 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:18: IndexError
___________________ TestMatchFGINN.test_nomatch[cpu-float32] ___________________

self = <test_matching.TestMatchFGINN object at 0x716b79b6c6a0>
device = device(type='cpu'), dtype = torch.float32

    def test_nomatch(self, device, dtype):
        desc1 = torch.tensor([[0, 0.0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:298: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0., 0.]]), desc2 = tensor([[5., 5.]])
lafs1 = tensor([[[[1., 0., 0.],
          [-0., 1., 0.]]]])
lafs2 = tensor([[[[1., 0., 5.],
          [-0., 1., 5.]]]]), th = 0.8
spatial_th = 10.0, mutual = False, dm = None

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        distances = torch.cdist(desc1, desc2, p=2)
        min_distances, nn_indices = torch.min(distances, dim=1)
        valid_matches = min_distances < th
        if spatial_th > 0:
            spatial_distances = torch.cdist(lafs1, lafs2[nn_indices], p=2)
>           valid_matches &= (spatial_distances < spatial_th).squeeze()
E           RuntimeError: output with shape [1] doesn't match the broadcast shape [2, 2]

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:19: RuntimeError
__________________ TestMatchFGINN.test_matching2[cpu-float32] __________________

self = <test_matching.TestMatchFGINN object at 0x716b79b6c9d0>
device = device(type='cpu'), dtype = torch.float32

    def test_matching2(self, device, dtype):
        desc1 = torch.tensor([[0, 0.0], [1, 1.001], [2, 2], [3, 3.0], [5, 5.0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0], [3, 3.0], [2.3, 2.4], [1, 1.001], [0, 0.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8, 2.0)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:308: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.0000, 0.0000],
        [1.0000, 1.0010],
        [2.0000, 2.0000],
        [3.0000, 3.0000],
        [5.0000, 5.0000]])
desc2 = tensor([[5.0000, 5.0000],
        [3.0000, 3.0000],
        [2.3000, 2.4000],
        [1.0000, 1.0010],
        [0.0000, 0.0000]])
lafs1 = tensor([[[[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]],

         [[1.0000, 0.0000, 1.0000],
       ...00],
          [-0.0000, 1.0000, 3.0000]],

         [[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]]]])
lafs2 = tensor([[[[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 3.0000],
       ...00],
          [-0.0000, 1.0000, 1.0010]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
th = 0.8, spatial_th = 2.0, mutual = False, dm = None

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        distances = torch.cdist(desc1, desc2, p=2)
        min_distances, nn_indices = torch.min(distances, dim=1)
        valid_matches = min_distances < th
        if spatial_th > 0:
>           spatial_distances = torch.cdist(lafs1, lafs2[nn_indices], p=2)
E           IndexError: index 4 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:18: IndexError
______________________ TestMatchFGINN.test_gradcheck[cpu] ______________________

self = <test_matching.TestMatchFGINN object at 0x716b79b6cca0>
device = device(type='cpu')

    def test_gradcheck(self, device):
        desc1 = torch.rand(5, 8, device=device, dtype=torch.float64)
        desc2 = torch.rand(7, 8, device=device, dtype=torch.float64)
        center1 = torch.rand(1, 5, 2, device=device, dtype=torch.float64)
        center2 = torch.rand(1, 7, 2, device=device, dtype=torch.float64)
        lafs1 = laf_from_center_scale_ori(center1)
        lafs2 = laf_from_center_scale_ori(center2)
>       self.gradcheck(match_fginn, (desc1, desc2, lafs1, lafs2, 0.8, 0.05), nondet_tol=1e-4)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:325: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.6092, 0.6189, 0.0928, 0.5178, 0.6073, 0.4176, 0.1976, 0.0313],
        [0.4050, 0.5087, 0.5775, 0.6634, 0.9...     [0.0120, 0.8327, 0.5370, 0.1531, 0.1754, 0.3351, 0.1213, 0.8835]],
       dtype=torch.float64, requires_grad=True)
desc2 = tensor([[0.4006, 0.6910, 0.6098, 0.5906, 0.5636, 0.8467, 0.4174, 0.0359],
        [0.1427, 0.0770, 0.5785, 0.4830, 0.8...     [0.0465, 0.8078, 0.9600, 0.5226, 0.6844, 0.2178, 0.8332, 0.3089]],
       dtype=torch.float64, requires_grad=True)
lafs1 = tensor([[[[1.0000, 0.0000, 0.1453],
          [-0.0000, 1.0000, 0.8786]],

         [[1.0000, 0.0000, 0.4604],
       ...     [[1.0000, 0.0000, 0.7087],
          [-0.0000, 1.0000, 0.6909]]]], dtype=torch.float64,
       requires_grad=True)
lafs2 = tensor([[[[1.0000, 0.0000, 0.8176],
          [-0.0000, 1.0000, 0.8589]],

         [[1.0000, 0.0000, 0.7417],
       ...     [[1.0000, 0.0000, 0.0637],
          [-0.0000, 1.0000, 0.2715]]]], dtype=torch.float64,
       requires_grad=True)
th = 0.8, spatial_th = 0.05, mutual = False, dm = None

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        distances = torch.cdist(desc1, desc2, p=2)
        min_distances, nn_indices = torch.min(distances, dim=1)
        valid_matches = min_distances < th
        if spatial_th > 0:
>           spatial_distances = torch.cdist(lafs1, lafs2[nn_indices], p=2)
E           IndexError: index 5 is out of bounds for dimension 0 with size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:18: IndexError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu]
======================== 11 failed, 1 skipped in 0.64s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'tvm', 'openxla', 'inductor', 'onnxrt', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 12 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_jit[cpu-float32] SKIPPED

======================== 11 passed, 1 skipped in 0.18s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'inductor', 'tvm', 'jit', 'openxla', None, 'onnxrt'}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 12 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_jit[cpu-float32] SKIPPED

======================== 11 passed, 1 skipped in 0.19s =========================
