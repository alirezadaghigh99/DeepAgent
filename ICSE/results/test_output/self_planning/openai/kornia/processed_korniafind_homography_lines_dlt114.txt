output file:
processed_korniafind_homography_lines_dlt114.json
function:
find_homography_lines_dlt
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-2]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_nocrash[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_nocrash[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-5]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-2] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_gradcheck[cpu] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_smoke2[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_smoke2[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-5]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_gradcheck[cpu]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-2]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'inductor', 'tvm', 'onnxrt', 'openxla', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 19 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_smoke2[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_nocrash[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape[cpu-float32-1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape[cpu-float32-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape[cpu-float32-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape_noweights[cpu-float32-1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape_noweights[cpu-float32-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape_noweights[cpu-float32-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_points_noweights[cpu-float32-1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_points_noweights[cpu-float32-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_points_noweights[cpu-float32-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-5] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-5] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_gradcheck[cpu] FAILED

=================================== FAILURES ===================================
___________ TestFindHomographyFromLinesDLT.test_smoke2[cpu-float32] ____________

self = <tests.geometry.test_homography.TestFindHomographyFromLinesDLT object at 0x77d97112edd0>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke2(self, device, dtype):
        points1st = torch.rand(4, 2, device=device, dtype=dtype)
        points1end = torch.rand(4, 2, device=device, dtype=dtype)
        points2st = torch.rand(4, 2, device=device, dtype=dtype)
        points2end = torch.rand(4, 2, device=device, dtype=dtype)
        ls1 = torch.stack([points1st, points1end], dim=1)
        ls2 = torch.stack([points2st, points2end], dim=1)
>       H = find_homography_lines_dlt(ls1, ls2, None)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/homography.py:211: in find_homography_lines_dlt
    return find_homography_lines_dlt(ls1, ls2, weights)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ls1 = tensor([[[0.1425, 0.1390],
         [0.8791, 0.4182]],

        [[0.2595, 0.2118],
         [0.3634, 0.1896]],

        [[0.5134, 0.3207],
         [0.3066, 0.4207]],

        [[0.8357, 0.6142],
         [0.5916, 0.1988]]])
ls2 = tensor([[[0.3112, 0.6998],
         [0.5936, 0.7119]],

        [[0.2169, 0.5665],
         [0.5675, 0.1268]],

        [[0.3905, 0.0035],
         [0.3369, 0.7942]],

        [[0.6552, 0.3246],
         [0.4564, 0.2939]]])
weights = None

    def find_homography_lines_dlt(ls1, ls2, weights=None):
        """
        Computes the homography matrix using the DLT formulation for line correspondences.
    
        Parameters:
        - ls1: Tensor of shape (B, N, 2, 2) representing the first set of line segments.
        - ls2: Tensor of shape (B, N, 2, 2) representing the second set of line segments.
        - weights: Optional tensor of shape (B, N) representing weights for each line correspondence.
    
        Returns:
        - homographies: Tensor of shape (B, 3, 3) representing the computed homography matrices.
        """
>       B, N, _, _ = ls1.shape
E       ValueError: not enough values to unpack (expected 4, got 3)

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/temp.py:25: ValueError
___________ TestFindHomographyFromLinesDLT.test_nocrash[cpu-float32] ___________

self = <tests.geometry.test_homography.TestFindHomographyFromLinesDLT object at 0x77d97112f100>
device = device(type='cpu'), dtype = torch.float32

    def test_nocrash(self, device, dtype):
        points1st = torch.rand(1, 4, 2, device=device, dtype=dtype)
        points1end = torch.rand(1, 4, 2, device=device, dtype=dtype)
        points2st = torch.rand(1, 4, 2, device=device, dtype=dtype)
        points2end = torch.rand(1, 4, 2, device=device, dtype=dtype)
        weights = torch.ones(1, 4, device=device, dtype=dtype)
        points1st[0, 0, 0] = float("nan")
        ls1 = torch.stack([points1st, points1end], dim=2)
        ls2 = torch.stack([points2st, points2end], dim=2)
>       H = find_homography_lines_dlt(ls1, ls2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py:282: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/homography.py:211: in find_homography_lines_dlt
    return find_homography_lines_dlt(ls1, ls2, weights)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ls1 = tensor([[[[   nan, 0.0972],
          [0.2270, 0.2744]],

         [[0.4759, 0.7892],
          [0.0717, 0.8552]],

         [[0.8246, 0.0118],
          [0.1583, 0.6118]],

         [[0.0742, 0.9308],
          [0.6157, 0.2258]]]])
ls2 = tensor([[[[0.8729, 0.3404],
          [0.0121, 0.6796]],

         [[0.5555, 0.3862],
          [0.0398, 0.2132]],

         [[0.9097, 0.6819],
          [0.2419, 0.9336]],

         [[0.1622, 0.7856],
          [0.2458, 0.7493]]]])
weights = tensor([[1., 1., 1., 1.]])

    def find_homography_lines_dlt(ls1, ls2, weights=None):
        """
        Computes the homography matrix using the DLT formulation for line correspondences.
    
        Parameters:
        - ls1: Tensor of shape (B, N, 2, 2) representing the first set of line segments.
        - ls2: Tensor of shape (B, N, 2, 2) representing the second set of line segments.
        - weights: Optional tensor of shape (B, N) representing weights for each line correspondence.
    
        Returns:
        - homographies: Tensor of shape (B, 3, 3) representing the computed homography matrices.
        """
        B, N, _, _ = ls1.shape
        if weights is None:
            weights = torch.ones((B, N), dtype=ls1.dtype, device=ls1.device)
        homographies = torch.zeros((B, 3, 3), dtype=ls1.dtype, device=ls1.device)
        for b in range(B):
            A = []
            for n in range(N):
                x1, y1 = ls1[b, n, 0]
                x2, y2 = ls1[b, n, 1]
                x1_prime, y1_prime = ls2[b, n, 0]
                x2_prime, y2_prime = ls2[b, n, 1]
                line1 = [x1, y1, 1, 0, 0, 0, -x1_prime * x1, -x1_prime * y1, -x1_prime]
                line2 = [x2, y2, 1, 0, 0, 0, -x2_prime * x2, -x2_prime * y2, -x2_prime]
                line3 = [0, 0, 0, x1, y1, 1, -y1_prime * x1, -y1_prime * y1, -y1_prime]
                line4 = [0, 0, 0, x2, y2, 1, -y2_prime * x2, -y2_prime * y2, -y2_prime]
                A.append(weights[b, n] * torch.tensor(line1, dtype=ls1.dtype, device=ls1.device))
                A.append(weights[b, n] * torch.tensor(line2, dtype=ls1.dtype, device=ls1.device))
                A.append(weights[b, n] * torch.tensor(line3, dtype=ls1.dtype, device=ls1.device))
                A.append(weights[b, n] * torch.tensor(line4, dtype=ls1.dtype, device=ls1.device))
            A = torch.stack(A)
>           _, _, V = torch.svd(A)
E           torch._C._LinAlgError: linalg.svd: The algorithm failed to converge because the input matrix contained non-finite values.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/temp.py:45: _LinAlgError
_______ TestFindHomographyFromLinesDLT.test_clean_points[cpu-float32-1] ________

self = <tests.geometry.test_homography.TestFindHomographyFromLinesDLT object at 0x77d9711607c0>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_clean_points(self, batch_size, device, dtype):
        # generate input data
        points_src_st = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
        points_src_end = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
    
        H = kornia.eye_like(3, points_src_st)
        H = H * 0.3 * torch.rand_like(H)
        H = H / H[:, 2:3, 2:3]
        points_dst_st = kornia.geometry.transform_points(H, points_src_st)
        points_dst_end = kornia.geometry.transform_points(H, points_src_end)
    
        ls1 = torch.stack([points_src_st, points_src_end], axis=2)
        ls2 = torch.stack([points_dst_st, points_dst_end], axis=2)
        # compute transform from source to target
        dst_homo_src = find_homography_lines_dlt(ls1, ls2, None)
        rtol = 1e-3
        atol = 1e-4
        if dtype not in (torch.float32, torch.float64):
            rtol = 5e-3
            atol = 1e-3
>       self.assert_close(
            kornia.geometry.transform_points(dst_homo_src, points_src_st), points_dst_st, rtol=rtol, atol=atol
        )

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py:347: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[ 1.1648,  0.0293],
         [ 0.7493,  0.1443],
         [ 0.9952,  0.1164],
         [ 0.6611,  0.0092],
  ...,
         [ 1.0396,  0.0753],
         [ 0.8104,  0.1247],
         [ 1.2108,  0.0489],
         [ 0.8707, -0.0149]]])
expected = tensor([[[0.3882, 0.2118],
         [0.1515, 0.5945],
         [0.3099, 0.4833],
         [0.0643, 0.0498],
         [... 0.1465],
         [0.3294, 0.3466],
         [0.1934, 0.5158],
         [0.4125, 0.2764],
         [0.2165, 0.0129]]])
rtol = 0.001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 20 / 20 (100.0%)
E       Greatest absolute difference: 1.003349781036377 at index (0, 5, 0) (up to 0.0001 allowed)
E       Greatest relative difference: 320.4385986328125 at index (0, 4, 0) (up to 0.001 allowed)

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
_______ TestFindHomographyFromLinesDLT.test_clean_points[cpu-float32-2] ________

self = <tests.geometry.test_homography.TestFindHomographyFromLinesDLT object at 0x77d971160700>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_clean_points(self, batch_size, device, dtype):
        # generate input data
        points_src_st = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
        points_src_end = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
    
        H = kornia.eye_like(3, points_src_st)
        H = H * 0.3 * torch.rand_like(H)
        H = H / H[:, 2:3, 2:3]
        points_dst_st = kornia.geometry.transform_points(H, points_src_st)
        points_dst_end = kornia.geometry.transform_points(H, points_src_end)
    
        ls1 = torch.stack([points_src_st, points_src_end], axis=2)
        ls2 = torch.stack([points_dst_st, points_dst_end], axis=2)
        # compute transform from source to target
        dst_homo_src = find_homography_lines_dlt(ls1, ls2, None)
        rtol = 1e-3
        atol = 1e-4
        if dtype not in (torch.float32, torch.float64):
            rtol = 5e-3
            atol = 1e-3
>       self.assert_close(
            kornia.geometry.transform_points(dst_homo_src, points_src_st), points_dst_st, rtol=rtol, atol=atol
        )

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py:347: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[ 1.0916, -0.0855],
         [ 0.9295, -0.0447],
         [ 1.5648, -0.2488],
         [ 1.1366, -0.1146],
  ...,
         [ 0.7488,  0.1292],
         [ 1.4384,  0.0775],
         [ 0.9369,  0.1856],
         [ 0.5217,  0.2261]]])
expected = tensor([[[0.7519, 0.0224],
         [0.6687, 0.0087],
         [0.6397, 0.0572],
         [0.6307, 0.0318],
         [... 0.5284],
         [0.1388, 0.0359],
         [0.8296, 0.0400],
         [0.6657, 0.3184],
         [0.1128, 0.4174]]])
rtol = 0.001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 40 / 40 (100.0%)
E       Greatest absolute difference: 1.158315896987915 at index (0, 9, 0) (up to 0.0001 allowed)
E       Greatest relative difference: 6.120810031890869 at index (0, 1, 1) (up to 0.001 allowed)

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
_______ TestFindHomographyFromLinesDLT.test_clean_points[cpu-float32-5] ________

self = <tests.geometry.test_homography.TestFindHomographyFromLinesDLT object at 0x77d971160a00>
batch_size = 5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_clean_points(self, batch_size, device, dtype):
        # generate input data
        points_src_st = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
        points_src_end = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
    
        H = kornia.eye_like(3, points_src_st)
        H = H * 0.3 * torch.rand_like(H)
        H = H / H[:, 2:3, 2:3]
        points_dst_st = kornia.geometry.transform_points(H, points_src_st)
        points_dst_end = kornia.geometry.transform_points(H, points_src_end)
    
        ls1 = torch.stack([points_src_st, points_src_end], axis=2)
        ls2 = torch.stack([points_dst_st, points_dst_end], axis=2)
        # compute transform from source to target
        dst_homo_src = find_homography_lines_dlt(ls1, ls2, None)
        rtol = 1e-3
        atol = 1e-4
        if dtype not in (torch.float32, torch.float64):
            rtol = 5e-3
            atol = 1e-3
>       self.assert_close(
            kornia.geometry.transform_points(dst_homo_src, points_src_st), points_dst_st, rtol=rtol, atol=atol
        )

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py:347: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[ 5.4215e+00,  2.5029e+00],
         [-2.1284e+01, -5.1121e+00],
         [ 3.7264e+00,  2.2257e+00],
       ...e-01],
         [-7.7489e-01, -5.4064e-01],
         [-7.5741e-01, -5.2731e-01],
         [-1.0051e+00, -6.0599e-01]]])
expected = tensor([[[2.9651, 0.4488],
         [5.1702, 1.0730],
         [2.7620, 0.4608],
         [4.9253, 0.7111],
         [... 0.1705],
         [0.0991, 0.0396],
         [0.2501, 0.5323],
         [0.2422, 0.5138],
         [0.3530, 0.4339]]])
rtol = 0.001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 100 / 100 (100.0%)
E       Greatest absolute difference: 34.4562873840332 at index (0, 4, 0) (up to 0.0001 allowed)
E       Greatest relative difference: 75.7042007446289 at index (2, 6, 0) (up to 0.001 allowed)

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
_____ TestFindHomographyFromLinesDLT.test_clean_points_iter[cpu-float32-1] _____

self = <tests.geometry.test_homography.TestFindHomographyFromLinesDLT object at 0x77d971160d90>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_clean_points_iter(self, batch_size, device, dtype):
        # generate input data
        points_src_st = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
        points_src_end = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
    
        H = kornia.eye_like(3, points_src_st)
        H = H * 0.3 * torch.rand_like(H)
        H = H / H[:, 2:3, 2:3]
        points_dst_st = kornia.geometry.transform_points(H, points_src_st)
        points_dst_end = kornia.geometry.transform_points(H, points_src_end)
    
        ls1 = torch.stack([points_src_st, points_src_end], axis=2)
        ls2 = torch.stack([points_dst_st, points_dst_end], axis=2)
        # compute transform from source to target
        dst_homo_src = find_homography_lines_dlt_iterated(ls1, ls2, None, 5)
        rtol = 1e-3
        atol = 1e-4
        if dtype not in (torch.float32, torch.float64):
            rtol = 5e-3
            atol = 1e-3
>       self.assert_close(
            kornia.geometry.transform_points(dst_homo_src, points_src_st), points_dst_st, rtol=rtol, atol=atol
        )

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py:372: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[-0.8875,  0.3299],
         [-1.0632,  0.3792],
         [-1.3256,  0.2997],
         [-1.1321,  0.4040],
  ...,
         [-0.8913,  0.4340],
         [-0.7350,  0.3429],
         [-1.1619,  0.3781],
         [-0.9478,  0.3748]]])
expected = tensor([[[1.0038, 0.2954],
         [1.7277, 0.4003],
         [1.8004, 0.0039],
         [2.1546, 0.4817],
         [... 0.1565],
         [1.6861, 0.7824],
         [0.7337, 0.4070],
         [1.9933, 0.3446],
         [1.3909, 0.4380]]])
rtol = 0.001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 20 / 20 (100.0%)
E       Greatest absolute difference: 3.286736011505127 at index (0, 3, 0) (up to 0.0001 allowed)
E       Greatest relative difference: 74.89551544189453 at index (0, 2, 1) (up to 0.001 allowed)

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
_____ TestFindHomographyFromLinesDLT.test_clean_points_iter[cpu-float32-2] _____

self = <tests.geometry.test_homography.TestFindHomographyFromLinesDLT object at 0x77d971160cd0>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_clean_points_iter(self, batch_size, device, dtype):
        # generate input data
        points_src_st = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
        points_src_end = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
    
        H = kornia.eye_like(3, points_src_st)
        H = H * 0.3 * torch.rand_like(H)
        H = H / H[:, 2:3, 2:3]
        points_dst_st = kornia.geometry.transform_points(H, points_src_st)
        points_dst_end = kornia.geometry.transform_points(H, points_src_end)
    
        ls1 = torch.stack([points_src_st, points_src_end], axis=2)
        ls2 = torch.stack([points_dst_st, points_dst_end], axis=2)
        # compute transform from source to target
        dst_homo_src = find_homography_lines_dlt_iterated(ls1, ls2, None, 5)
        rtol = 1e-3
        atol = 1e-4
        if dtype not in (torch.float32, torch.float64):
            rtol = 5e-3
            atol = 1e-3
>       self.assert_close(
            kornia.geometry.transform_points(dst_homo_src, points_src_st), points_dst_st, rtol=rtol, atol=atol
        )

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py:372: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[-9.3159e-01, -3.6213e-01],
         [-9.3294e-01, -3.2504e-01],
         [-5.6186e-01, -1.7002e-01],
       ...e-02],
         [ 4.1530e-01,  5.1760e-02],
         [ 7.7688e-01, -9.7572e-04],
         [ 4.0105e-01,  6.5528e-02]]])
expected = tensor([[[0.1957, 0.6167],
         [0.1632, 0.1817],
         [0.0382, 0.5527],
         [0.2003, 0.1634],
         [... 0.4296],
         [0.3585, 0.3297],
         [0.1267, 0.2777],
         [1.1861, 0.3555],
         [0.1715, 0.3456]]])
rtol = 0.001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 40 / 40 (100.0%)
E       Greatest absolute difference: 1.823789119720459 at index (0, 4, 0) (up to 0.0001 allowed)
E       Greatest relative difference: 37.289920806884766 at index (0, 6, 0) (up to 0.001 allowed)

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
_____ TestFindHomographyFromLinesDLT.test_clean_points_iter[cpu-float32-5] _____

self = <tests.geometry.test_homography.TestFindHomographyFromLinesDLT object at 0x77d971160fd0>
batch_size = 5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_clean_points_iter(self, batch_size, device, dtype):
        # generate input data
        points_src_st = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
        points_src_end = torch.rand(batch_size, 10, 2, device=device, dtype=dtype)
    
        H = kornia.eye_like(3, points_src_st)
        H = H * 0.3 * torch.rand_like(H)
        H = H / H[:, 2:3, 2:3]
        points_dst_st = kornia.geometry.transform_points(H, points_src_st)
        points_dst_end = kornia.geometry.transform_points(H, points_src_end)
    
        ls1 = torch.stack([points_src_st, points_src_end], axis=2)
        ls2 = torch.stack([points_dst_st, points_dst_end], axis=2)
        # compute transform from source to target
        dst_homo_src = find_homography_lines_dlt_iterated(ls1, ls2, None, 5)
        rtol = 1e-3
        atol = 1e-4
        if dtype not in (torch.float32, torch.float64):
            rtol = 5e-3
            atol = 1e-3
>       self.assert_close(
            kornia.geometry.transform_points(dst_homo_src, points_src_st), points_dst_st, rtol=rtol, atol=atol
        )

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py:372: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[-1.4268, -1.4178],
         [-0.5002, -0.6888],
         [-1.0846, -1.8109],
         [-1.6426, -0.7052],
  ...,
         [ 0.3800, -0.0297],
         [ 0.7290, -0.0817],
         [ 0.4134, -0.0327],
         [ 0.5916, -0.0218]]])
expected = tensor([[[3.4376, 3.2293],
         [0.4412, 1.0651],
         [2.1683, 4.3177],
         [3.8293, 0.3877],
         [... 0.1971],
         [0.1220, 0.2984],
         [0.7155, 0.1424],
         [0.1735, 0.2678],
         [0.2140, 0.0243]]])
rtol = 0.001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 100 / 100 (100.0%)
E       Greatest absolute difference: 6.128599643707275 at index (0, 2, 1) (up to 0.0001 allowed)
E       Greatest relative difference: 11.368496894836426 at index (4, 5, 0) (up to 0.001 allowed)

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
______________ TestFindHomographyFromLinesDLT.test_gradcheck[cpu] ______________

self = <tests.geometry.test_homography.TestFindHomographyFromLinesDLT object at 0x77d97112eef0>
device = device(type='cpu')

    @pytest.mark.grad()
    def test_gradcheck(self, device):
        points_src_st = torch.rand(1, 10, 2, device=device, dtype=torch.float64, requires_grad=True)
        points_src_end = torch.rand(1, 10, 2, device=device, dtype=torch.float64, requires_grad=True)
    
        points_dst_st = torch.rand_like(points_src_st)
        points_dst_end = torch.rand_like(points_src_end)
        weights = torch.ones_like(points_src_st)[..., 0]
        ls1 = torch.stack([points_src_st, points_src_end], axis=2)
        ls2 = torch.stack([points_dst_st, points_dst_end], axis=2)
    
>       self.gradcheck(find_homography_lines_dlt, (ls1, ls2, weights), rtol=1e-6, atol=1e-6)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py:387: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2081: in _gradcheck_helper
    _gradcheck_real_imag(
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:1491: in _gradcheck_real_imag
    gradcheck_fn(
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:1925: in _fast_gradcheck
    _check_analytical_numerical_equal(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

all_analytical = [[tensor(0., dtype=torch.float64), tensor(0., dtype=torch.float64), tensor(-0.0336, dtype=torch.float64)]]
all_numerical = [[tensor(-0.2192, dtype=torch.float64)], [tensor(0.1015, dtype=torch.float64)], [tensor(-0.0336, dtype=torch.float64)]]
complex_indices = None
tupled_inputs = (tensor([[[[0.8216, 0.1027],
          [0.0714, 0.3336]],

         [[0.9975, 0.2580],
          [0.4753, 0.1631]],

 ...equires_grad=True), tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]], dtype=torch.float64,
       requires_grad=True))
outputs = (tensor([[[ 0.4824,  0.0118, -0.4537],
         [-0.1587, -0.1560, -0.4646],
         [-0.1757,  0.1329, -0.4974]]], dtype=torch.float64,
       grad_fn=<CopySlices>),)
func = <function find_homography_lines_dlt at 0x77d9e8919360>
all_v = [tensor([0.1221, 0.2567, 0.2039, 0.3529, 0.3928, 0.4205, 0.4353, 0.3401, 0.3420],
       dtype=torch.float64)]
all_u = [tensor([0.0748, 0.2441, 0.0938, 0.1128, 0.2202, 0.1280, 0.0201, 0.2718, 0.2000,
        0.1196, 0.0237, 0.1372, 0.046... tensor([0.4585, 0.1582, 0.0953, 0.2457, 0.4603, 0.2261, 0.2524, 0.0384, 0.6044,
        0.0423], dtype=torch.float64)]
rtol = 1e-06, atol = 1e-06, eps = 1e-06, test_imag = False

    def _check_analytical_numerical_equal(
        all_analytical,
        all_numerical,
        complex_indices,
        tupled_inputs,
        outputs,
        func,
        all_v,
        all_u,
        rtol,
        atol,
        eps,
        test_imag,
        *,
        is_forward_ad=False,
    ):
        for i, all_numerical_for_input_i in enumerate(all_numerical):
            for j, n in enumerate(all_numerical_for_input_i):
                # Forward AD generates the transpose of what this function expects
                if is_forward_ad:
                    a = all_analytical[i][j]
                else:
                    a = all_analytical[j][i]
                n = n.to(device=a.device)
                updated_atol = _adjusted_atol(atol, all_u[i], all_v[j] if all_v else None)
                if not _allclose_with_type_promotion(a, n.to(a.device), rtol, updated_atol):
                    jacobians_str = _run_slow_mode_and_get_error(
                        func, tupled_inputs, outputs, i, j, rtol, atol, eps, is_forward_ad
                    )
>                   raise GradcheckError(
                        _get_notallclose_msg(
                            a, n, j, i, complex_indices, test_imag, is_forward_ad
                        )
                        + jacobians_str
                    )
E                   torch.autograd.gradcheck.GradcheckError: Jacobian mismatch for output 0 with respect to input 0,
E                   numerical:tensor(-0.2192, dtype=torch.float64)
E                   analytical:tensor(0., dtype=torch.float64)
E                   
E                   The above quantities relating the numerical and analytical jacobians are computed 
E                   in fast mode. See: https://github.com/pytorch/pytorch/issues/53876 for more background 
E                   about fast mode. Below, we recompute numerical and analytical jacobians in slow mode:
E                   
E                   Numerical:
E                    tensor([[-1.1236e-02,  1.0377e-02,  6.9014e-02, -1.4718e-02, -4.5818e-01,
E                             1.4059e-01, -6.3117e-03,  1.3806e-01, -1.7455e-02],
E                           [-5.9916e-03,  2.8152e-03, -1.4576e-02, -5.2169e-02, -3.1489e-01,
E                             1.4989e-01,  3.8071e-02,  2.6929e-01,  4.1412e-02],
E                           [-7.4085e-03, -1.1421e-03, -6.0081e-02,  4.9428e-03,  5.1457e-02,
E                             1.9548e-02, -9.2762e-02, -2.4571e-01, -2.1232e-02],
E                           [-3.8604e-03, -5.9665e-04,  1.1369e-02,  8.5301e-02, -5.5535e-01,
E                             5.9710e-02,  1.6662e-01, -3.2057e-02,  9.5817e-03],
E                           [-1.4974e-02, -2.0383e-03,  1.6748e-01, -1.1879e-01,  1.8671e-01,
E                            -2.1845e-01,  3.0884e-03,  2.9517e-01,  9.3800e-02],
E                           [-7.6298e-03, -2.6982e-03, -1.4469e-02, -5.2328e-02,  9.9356e-01,
E                            -2.6645e-01, -1.1490e-01, -6.7145e-02, -1.7567e-02],
E                           [-8.3103e-03,  5.1709e-03, -1.5362e-02,  3.0667e-02, -6.2021e-02,
E                             1.3651e-01, -1.2408e-01, -2.0031e-01, -1.2144e-01],
E                           [-4.5105e-03,  1.0062e-03,  4.2831e-03, -6.8332e-03, -1.0135e+00,
E                             3.0342e-01,  1.1520e-01,  7.3464e-02,  7.2382e-03],
E                           [-4.4640e-03, -6.4651e-03, -4.9351e-02,  2.8141e-01, -3.2650e-01,
E                             1.3887e-01, -7.2650e-02, -1.7383e-01, -9.7353e-02],
E                           [-2.5587e-03, -2.4311e-03,  1.6900e-02, -7.1793e-02, -1.2514e+00,
E                             3.1660e-01,  3.0684e-01,  2.0783e-01,  4.8715e-02],
E                           [-1.1474e-02, -6.5147e-03, -3.9647e-02, -3.9610e-02,  2.2395e-01,
E                            -7.2646e-02,  2.0189e-01,  9.5019e-02, -1.0793e-02],
E                           [-5.8562e-03, -3.0863e-03, -3.6827e-03,  6.9324e-02,  9.3276e-01,
E                            -2.6702e-01, -1.4654e-01,  1.9768e-02, -1.0524e-02],
E                           [-1.5218e-02, -1.4824e-02,  6.1079e-02, -1.2622e-01,  6.8985e-01,
E                            -3.6199e-01,  2.9896e-01,  1.3192e-01,  2.0867e-02],
E                           [-7.6263e-03, -7.2650e-03, -1.1737e-02,  3.6599e-02,  2.3061e+00,
E                            -7.0572e-01, -2.1153e-01, -3.7112e-01, -9.6858e-02],
E                           [-8.7275e-03, -1.0813e-03, -7.9291e-02, -1.0491e-01,  7.5041e-01,
E                            -8.9200e-02, -1.1868e-01, -3.4614e-01, -1.0519e-01],
E                           [-4.5791e-03, -5.6289e-04,  1.7190e-02,  2.1879e-01, -5.9636e-02,
E                             2.8037e-02, -2.2883e-01, -4.1092e-01, -1.2635e-01],
E                           [-1.1942e-02,  6.0724e-03,  1.6424e-02, -3.5416e-02, -8.7038e-01,
E                             2.1488e-01,  2.4312e-01,  9.5550e-02, -3.2903e-03],
E                           [-6.1865e-03,  1.6115e-03, -2.4461e-02, -5.8072e-02,  2.2188e-01,
E                            -4.2577e-02,  8.2458e-02,  7.9239e-02, -2.8879e-03],
E                           [-1.1054e-02,  3.5434e-03,  1.0741e-01, -8.5966e-03, -3.0703e-01,
E                             7.0918e-02, -7.5632e-02,  7.7407e-02, -2.8451e-02],
E                           [-5.8775e-03, -1.3948e-04, -6.1560e-03, -7.3653e-02, -3.6545e-01,
E                             1.4508e-01,  4.6066e-02,  3.0534e-01,  6.7775e-02],
E                           [-7.5345e-03, -3.5592e-03, -3.3284e-02,  7.6625e-02, -7.5417e-01,
E                             1.8700e-01,  1.1022e-01, -1.6226e-02,  1.7056e-02],
E                           [-3.9109e-03, -1.5259e-03, -2.5273e-04, -4.7678e-02, -5.7875e-01,
E                             5.9229e-02,  3.5429e-01,  3.2026e-02,  2.1144e-02],
E                           [-9.1634e-03,  1.9304e-04, -1.0059e-01, -3.7139e-02,  1.5348e+00,
E                            -2.6934e-01, -3.2159e-01,  1.1081e-03, -2.1022e-02],
E                           [-4.7328e-03, -4.7206e-04,  2.4568e-02,  2.0800e-01, -2.9128e-01,
E                             1.3358e-01, -3.3243e-01, -9.6584e-03, -1.1945e-02],
E                           [-7.7803e-03, -1.1525e-03, -4.3452e-02,  5.8884e-02, -3.1693e-01,
E                             1.2035e-01, -2.6576e-02, -2.0706e-03,  9.0789e-03],
E                           [-4.0390e-03, -8.6540e-04,  6.4768e-03, -4.5038e-03, -7.3795e-01,
E                             1.3300e-01,  2.4096e-01, -5.4975e-02, -1.0667e-03],
E                           [-6.1701e-03, -2.6265e-03, -4.6548e-02,  1.4473e-01, -4.2330e-01,
E                             1.5274e-01, -8.0043e-02,  2.2133e-02,  1.4492e-02],
E                           [-3.2547e-03, -1.2406e-03,  1.2757e-02, -3.6797e-02, -1.1660e+00,
E                             2.4321e-01,  3.3650e-01, -5.1296e-02,  2.7663e-03],
E                           [-1.2136e-02,  1.1294e-02,  5.5572e-02, -3.1351e-02, -4.6525e-01,
E                             1.2628e-01,  6.8529e-02,  2.1517e-01,  9.0033e-03],
E                           [-6.3923e-03,  3.3306e-03, -2.0670e-02, -4.4062e-02,  8.7344e-04,
E                             7.5818e-02, -1.6194e-02,  1.3996e-01, -1.1882e-03],
E                           [-1.2535e-02,  1.1959e-02, -8.0610e-03, -8.3009e-02,  8.2403e-01,
E                            -1.1579e-01, -1.0540e-01,  5.0478e-02, -7.7544e-02],
E                           [-6.5823e-03,  3.6603e-03, -1.0214e-02,  6.9338e-02,  7.7400e-04,
E                             1.8329e-01, -3.4980e-01, -5.1650e-01, -2.0493e-01],
E                           [-6.3593e-03, -5.9734e-03, -5.4922e-02,  1.9896e-01,  8.4696e-02,
E                            -3.2949e-03, -7.9693e-02, -6.0820e-02, -3.1262e-02],
E                           [-3.3907e-03, -2.4132e-03,  1.5778e-02, -3.4254e-03, -6.2563e-01,
E                             1.2316e-01,  1.7348e-01,  2.1519e-02,  8.9458e-03],
E                           [-1.3647e-02,  2.4190e-03,  4.7040e-02, -7.6379e-02, -7.5719e-01,
E                             1.2154e-01,  2.4096e-01, -8.1228e-03,  4.8763e-03],
E                           [-6.9343e-03, -6.6375e-05, -2.7181e-02, -6.3964e-02,  6.5188e-01,
E                            -1.7100e-01,  1.7217e-03,  2.5244e-02, -6.2365e-05],
E                           [-1.2366e-02, -1.8078e-03,  9.3752e-02, -2.3355e-02,  1.9724e-01,
E                            -1.2002e-01, -4.4876e-02,  2.8976e-02, -1.6258e-02],
E                           [-6.3992e-03, -2.2442e-03, -6.0316e-03, -4.6988e-02,  3.1168e-01,
E                            -6.4313e-02, -5.4854e-02, -2.7669e-02, -1.1433e-02],
E                           [-9.4014e-03, -2.5108e-03, -1.5561e-02,  3.7540e-02, -4.4278e-01,
E                             1.2214e-01,  7.1782e-02,  3.0592e-04, -7.4850e-03],
E                           [-4.8421e-03, -1.6105e-03, -2.0077e-03, -3.7012e-02, -3.1290e-01,
E                             4.5380e-02,  1.6540e-01, -2.6457e-02, -8.7208e-04]],
E                          dtype=torch.float64)
E                   Analytical:
E                   tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.],
E                           [0., 0., 0., 0., 0., 0., 0., 0., 0.]], dtype=torch.float64)
E                   
E                   The max per-element difference (slow mode) is: 2.3061132624346836.

/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:1854: GradcheckError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_smoke2[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_nocrash[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-5]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_gradcheck[cpu]
========================= 9 failed, 10 passed in 0.88s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'jit', 'tvm', 'cudagraphs', 'onnxrt', 'inductor', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 19 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_smoke2[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_nocrash[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape[cpu-float32-1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape[cpu-float32-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape[cpu-float32-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape_noweights[cpu-float32-1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape_noweights[cpu-float32-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape_noweights[cpu-float32-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_points_noweights[cpu-float32-1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_points_noweights[cpu-float32-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_points_noweights[cpu-float32-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_gradcheck[cpu] PASSED

=============================== warnings summary ===============================
tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_nocrash[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/homography.py:309: RuntimeWarning: SVD did not converge
    warnings.warn("SVD did not converge", RuntimeWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 19 passed, 1 warning in 0.22s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'tvm', 'openxla', 'onnxrt', 'jit', 'cudagraphs', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 19 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_smoke2[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_nocrash[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape[cpu-float32-1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape[cpu-float32-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape[cpu-float32-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape_noweights[cpu-float32-1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape_noweights[cpu-float32-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_shape_noweights[cpu-float32-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_points_noweights[cpu-float32-1-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_points_noweights[cpu-float32-2-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_points_noweights[cpu-float32-3-6] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points[cpu-float32-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_clean_points_iter[cpu-float32-5] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_gradcheck[cpu] PASSED

=============================== warnings summary ===============================
tests/geometry/test_homography.py::TestFindHomographyFromLinesDLT::test_nocrash[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/homography.py:309: RuntimeWarning: SVD did not converge
    warnings.warn("SVD did not converge", RuntimeWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 19 passed, 1 warning in 0.24s =========================
