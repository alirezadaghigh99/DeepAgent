output file:
processed_korniadepth_to_3d178.json
function:
depth_to_3d
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'tvm', 'inductor', 'onnxrt', 'cudagraphs', 'openxla', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 4 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5] FAILED

=================================== FAILURES ===================================
______________ TestDepthTo3d.test_shapes_broadcast[cpu-float32-2] ______________

self = <tests.geometry.test_depth.TestDepthTo3d object at 0x72a5a732eb60>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 4, 5])
    def test_shapes_broadcast(self, batch_size, device, dtype):
        depth = torch.rand(batch_size, 1, 3, 4, device=device, dtype=dtype)
        camera_matrix = torch.rand(1, 3, 3, device=device, dtype=dtype)
    
>       points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/helpers.py:109: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/depth.py:73: in depth_to_3d
    return depth_to_3d(depth, camera_matrix, normalize_points)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

depth = tensor([[[[0.5825, 0.8209, 0.8166, 0.5215],
          [0.2519, 0.3637, 0.9093, 0.7551],
          [0.0304, 0.3746, 0.3...54, 0.0210, 0.5212, 0.2320],
          [0.7616, 0.9291, 0.5421, 0.9218],
          [0.2692, 0.5348, 0.7747, 0.1934]]]])
camera_matrix = tensor([[[0.9141, 0.7852, 0.9669],
         [0.0258, 0.7037, 0.2171],
         [0.4014, 0.5743, 0.1301]]])
normalize = False

    def depth_to_3d(depth, camera_matrix, normalize=False):
        if not isinstance(depth, torch.Tensor):
            raise TypeError('Depth must be a torch.Tensor')
        if not isinstance(camera_matrix, torch.Tensor):
            raise TypeError('Camera matrix must be a torch.Tensor')
        if depth.ndim != 4 or depth.shape[1] != 1:
            raise ValueError('Depth tensor must have shape (B, 1, H, W)')
        if camera_matrix.ndim != 3 or camera_matrix.shape[1:] != (3, 3):
            raise ValueError('Camera matrix must have shape (B, 3, 3)')
        B, _, H, W = depth.shape
        u = torch.arange(W, device=depth.device).repeat(H, 1)
        v = torch.arange(H, device=depth.device).repeat(W, 1).t()
        u = u.unsqueeze(0).repeat(B, 1, 1)
        v = v.unsqueeze(0).repeat(B, 1, 1)
>       fx = camera_matrix[:, 0, 0].view(B, 1, 1)
E       RuntimeError: shape '[2, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/temp.py:29: RuntimeError
______________ TestDepthTo3d.test_shapes_broadcast[cpu-float32-4] ______________

self = <tests.geometry.test_depth.TestDepthTo3d object at 0x72a5a732eef0>
batch_size = 4, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 4, 5])
    def test_shapes_broadcast(self, batch_size, device, dtype):
        depth = torch.rand(batch_size, 1, 3, 4, device=device, dtype=dtype)
        camera_matrix = torch.rand(1, 3, 3, device=device, dtype=dtype)
    
>       points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/helpers.py:109: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/depth.py:73: in depth_to_3d
    return depth_to_3d(depth, camera_matrix, normalize_points)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

depth = tensor([[[[0.0412, 0.2427, 0.2151, 0.4652],
          [0.6624, 0.7508, 0.3065, 0.9368],
          [0.1584, 0.0957, 0.7...07, 0.3654, 0.1544, 0.2832],
          [0.5391, 0.0378, 0.2760, 0.3265],
          [0.8595, 0.1749, 0.4447, 0.8202]]]])
camera_matrix = tensor([[[0.7249, 0.6586, 0.1913],
         [0.9033, 0.2181, 0.0052],
         [0.7742, 0.4648, 0.1417]]])
normalize = False

    def depth_to_3d(depth, camera_matrix, normalize=False):
        if not isinstance(depth, torch.Tensor):
            raise TypeError('Depth must be a torch.Tensor')
        if not isinstance(camera_matrix, torch.Tensor):
            raise TypeError('Camera matrix must be a torch.Tensor')
        if depth.ndim != 4 or depth.shape[1] != 1:
            raise ValueError('Depth tensor must have shape (B, 1, H, W)')
        if camera_matrix.ndim != 3 or camera_matrix.shape[1:] != (3, 3):
            raise ValueError('Camera matrix must have shape (B, 3, 3)')
        B, _, H, W = depth.shape
        u = torch.arange(W, device=depth.device).repeat(H, 1)
        v = torch.arange(H, device=depth.device).repeat(W, 1).t()
        u = u.unsqueeze(0).repeat(B, 1, 1)
        v = v.unsqueeze(0).repeat(B, 1, 1)
>       fx = camera_matrix[:, 0, 0].view(B, 1, 1)
E       RuntimeError: shape '[4, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/temp.py:29: RuntimeError
______________ TestDepthTo3d.test_shapes_broadcast[cpu-float32-5] ______________

self = <tests.geometry.test_depth.TestDepthTo3d object at 0x72a5a732efb0>
batch_size = 5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 4, 5])
    def test_shapes_broadcast(self, batch_size, device, dtype):
        depth = torch.rand(batch_size, 1, 3, 4, device=device, dtype=dtype)
        camera_matrix = torch.rand(1, 3, 3, device=device, dtype=dtype)
    
>       points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/utils/helpers.py:109: in wrapper
    return func(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/depth.py:73: in depth_to_3d
    return depth_to_3d(depth, camera_matrix, normalize_points)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

depth = tensor([[[[0.2854, 0.4418, 0.5442, 0.5852],
          [0.8901, 0.0420, 0.3442, 0.4102],
          [0.9044, 0.5168, 0.0...78, 0.7000, 0.1989, 0.2961],
          [0.7578, 0.9196, 0.4349, 0.9565],
          [0.6607, 0.6731, 0.5800, 0.6674]]]])
camera_matrix = tensor([[[0.7754, 0.9879, 0.5807],
         [0.8855, 0.2097, 0.1032],
         [0.3402, 0.8031, 0.7182]]])
normalize = False

    def depth_to_3d(depth, camera_matrix, normalize=False):
        if not isinstance(depth, torch.Tensor):
            raise TypeError('Depth must be a torch.Tensor')
        if not isinstance(camera_matrix, torch.Tensor):
            raise TypeError('Camera matrix must be a torch.Tensor')
        if depth.ndim != 4 or depth.shape[1] != 1:
            raise ValueError('Depth tensor must have shape (B, 1, H, W)')
        if camera_matrix.ndim != 3 or camera_matrix.shape[1:] != (3, 3):
            raise ValueError('Camera matrix must have shape (B, 3, 3)')
        B, _, H, W = depth.shape
        u = torch.arange(W, device=depth.device).repeat(H, 1)
        v = torch.arange(H, device=depth.device).repeat(W, 1).t()
        u = u.unsqueeze(0).repeat(B, 1, 1)
        v = v.unsqueeze(0).repeat(B, 1, 1)
>       fx = camera_matrix[:, 0, 0].view(B, 1, 1)
E       RuntimeError: shape '[5, 1, 1]' is invalid for input of size 1

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/temp.py:29: RuntimeError
=============================== warnings summary ===============================
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:30: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5]
=================== 3 failed, 1 passed, 4 warnings in 0.35s ====================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'openxla', 'jit', 'inductor', 'onnxrt', 'tvm', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 4 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5] PASSED

=============================== warnings summary ===============================
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:30: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 4 passed, 4 warnings in 0.17s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'tvm', 'inductor', 'jit', 'cudagraphs', 'openxla', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 4 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5] PASSED

=============================== warnings summary ===============================
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:30: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 4 passed, 4 warnings in 0.17s =========================
