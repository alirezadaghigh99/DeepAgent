output file:
processed_korniacenter_crop3d235.json
function:
center_crop3d
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size1]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size0] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size0] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size1] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_gradcheck[cpu] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size0]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_dynamo[cpu-float32-inductor]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_gradcheck[cpu]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size1] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_dynamo[cpu-float32-inductor] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size2]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'jit', 'cudagraphs', 'tvm', 'openxla', 'onnxrt', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 8 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size0] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size0] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_gradcheck[cpu] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_dynamo[cpu-float32-inductor] FAILED

=================================== FAILURES ===================================
________ TestCenterCrop3D.test_center_crop_357[cpu-float32-crop_size0] _________

self = <test_crop3d.TestCenterCrop3D object at 0x78211971a5c0>
crop_size = (3, 5, 7), device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("crop_size", [(3, 5, 7), (5, 3, 7), (7, 3, 5)])
    def test_center_crop_357(self, crop_size, device, dtype):
        inp = torch.arange(0.0, 343.0, device=device, dtype=dtype).view(1, 1, 7, 7, 7)
        expected = inp[
            :,
            :,
            (inp.size(2) // 2 - crop_size[0] // 2) : (inp.size(2) // 2 + crop_size[0] // 2 + 1),
            (inp.size(3) // 2 - crop_size[1] // 2) : (inp.size(3) // 2 + crop_size[1] // 2 + 1),
            (inp.size(4) // 2 - crop_size[2] // 2) : (inp.size(4) // 2 + crop_size[2] // 2 + 1),
        ]
>       out_crop = kornia.geometry.transform.center_crop3d(inp, crop_size, align_corners=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/transform/crop3d.py:78: in center_crop3d
    return center_crop3d(tensor, size, interpolation, align_corners)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tensor = tensor([[[[[  0.,   1.,   2.,   3.,   4.,   5.,   6.],
           [  7.,   8.,   9.,  10.,  11.,  12.,  13.],
        ...28.],
           [329., 330., 331., 332., 333., 334., 335.],
           [336., 337., 338., 339., 340., 341., 342.]]]]])
size = (3, 5, 7), interpolation = 'bilinear', align_corners = True

    def center_crop3d(tensor, size, interpolation='nearest', align_corners=False):
        if not isinstance(tensor, torch.Tensor):
            raise TypeError('Input must be a torch.Tensor.')
        if len(tensor.shape) != 5:
            raise ValueError('Input tensor must have shape (B, C, D, H, W).')
        B, C, D, H, W = tensor.shape
        if not isinstance(size, tuple) or len(size) != 3:
            raise ValueError('Size must be a tuple of (depth, height, width).')
        target_depth, target_height, target_width = size
        if target_depth > D or target_height > H or target_width > W:
            raise ValueError('Target size must be less than or equal to the input size in each dimension.')
        start_d = (D - target_depth) // 2
        start_h = (H - target_height) // 2
        start_w = (W - target_width) // 2
        end_d = start_d + target_depth
        end_h = start_h + target_height
        end_w = start_w + target_width
        cropped_tensor = tensor[:, :, start_d:end_d, start_h:end_h, start_w:end_w]
        if interpolation != 'nearest':
>           raise NotImplementedError("Interpolation modes other than 'nearest' are not implemented.")
E           NotImplementedError: Interpolation modes other than 'nearest' are not implemented.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/transform/temp.py:26: NotImplementedError
________ TestCenterCrop3D.test_center_crop_357[cpu-float32-crop_size1] _________

self = <test_crop3d.TestCenterCrop3D object at 0x78211971a530>
crop_size = (5, 3, 7), device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("crop_size", [(3, 5, 7), (5, 3, 7), (7, 3, 5)])
    def test_center_crop_357(self, crop_size, device, dtype):
        inp = torch.arange(0.0, 343.0, device=device, dtype=dtype).view(1, 1, 7, 7, 7)
        expected = inp[
            :,
            :,
            (inp.size(2) // 2 - crop_size[0] // 2) : (inp.size(2) // 2 + crop_size[0] // 2 + 1),
            (inp.size(3) // 2 - crop_size[1] // 2) : (inp.size(3) // 2 + crop_size[1] // 2 + 1),
            (inp.size(4) // 2 - crop_size[2] // 2) : (inp.size(4) // 2 + crop_size[2] // 2 + 1),
        ]
>       out_crop = kornia.geometry.transform.center_crop3d(inp, crop_size, align_corners=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/transform/crop3d.py:78: in center_crop3d
    return center_crop3d(tensor, size, interpolation, align_corners)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tensor = tensor([[[[[  0.,   1.,   2.,   3.,   4.,   5.,   6.],
           [  7.,   8.,   9.,  10.,  11.,  12.,  13.],
        ...28.],
           [329., 330., 331., 332., 333., 334., 335.],
           [336., 337., 338., 339., 340., 341., 342.]]]]])
size = (5, 3, 7), interpolation = 'bilinear', align_corners = True

    def center_crop3d(tensor, size, interpolation='nearest', align_corners=False):
        if not isinstance(tensor, torch.Tensor):
            raise TypeError('Input must be a torch.Tensor.')
        if len(tensor.shape) != 5:
            raise ValueError('Input tensor must have shape (B, C, D, H, W).')
        B, C, D, H, W = tensor.shape
        if not isinstance(size, tuple) or len(size) != 3:
            raise ValueError('Size must be a tuple of (depth, height, width).')
        target_depth, target_height, target_width = size
        if target_depth > D or target_height > H or target_width > W:
            raise ValueError('Target size must be less than or equal to the input size in each dimension.')
        start_d = (D - target_depth) // 2
        start_h = (H - target_height) // 2
        start_w = (W - target_width) // 2
        end_d = start_d + target_depth
        end_h = start_h + target_height
        end_w = start_w + target_width
        cropped_tensor = tensor[:, :, start_d:end_d, start_h:end_h, start_w:end_w]
        if interpolation != 'nearest':
>           raise NotImplementedError("Interpolation modes other than 'nearest' are not implemented.")
E           NotImplementedError: Interpolation modes other than 'nearest' are not implemented.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/transform/temp.py:26: NotImplementedError
________ TestCenterCrop3D.test_center_crop_357[cpu-float32-crop_size2] _________

self = <test_crop3d.TestCenterCrop3D object at 0x78211971a7d0>
crop_size = (7, 3, 5), device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("crop_size", [(3, 5, 7), (5, 3, 7), (7, 3, 5)])
    def test_center_crop_357(self, crop_size, device, dtype):
        inp = torch.arange(0.0, 343.0, device=device, dtype=dtype).view(1, 1, 7, 7, 7)
        expected = inp[
            :,
            :,
            (inp.size(2) // 2 - crop_size[0] // 2) : (inp.size(2) // 2 + crop_size[0] // 2 + 1),
            (inp.size(3) // 2 - crop_size[1] // 2) : (inp.size(3) // 2 + crop_size[1] // 2 + 1),
            (inp.size(4) // 2 - crop_size[2] // 2) : (inp.size(4) // 2 + crop_size[2] // 2 + 1),
        ]
>       out_crop = kornia.geometry.transform.center_crop3d(inp, crop_size, align_corners=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/transform/crop3d.py:78: in center_crop3d
    return center_crop3d(tensor, size, interpolation, align_corners)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tensor = tensor([[[[[  0.,   1.,   2.,   3.,   4.,   5.,   6.],
           [  7.,   8.,   9.,  10.,  11.,  12.,  13.],
        ...28.],
           [329., 330., 331., 332., 333., 334., 335.],
           [336., 337., 338., 339., 340., 341., 342.]]]]])
size = (7, 3, 5), interpolation = 'bilinear', align_corners = True

    def center_crop3d(tensor, size, interpolation='nearest', align_corners=False):
        if not isinstance(tensor, torch.Tensor):
            raise TypeError('Input must be a torch.Tensor.')
        if len(tensor.shape) != 5:
            raise ValueError('Input tensor must have shape (B, C, D, H, W).')
        B, C, D, H, W = tensor.shape
        if not isinstance(size, tuple) or len(size) != 3:
            raise ValueError('Size must be a tuple of (depth, height, width).')
        target_depth, target_height, target_width = size
        if target_depth > D or target_height > H or target_width > W:
            raise ValueError('Target size must be less than or equal to the input size in each dimension.')
        start_d = (D - target_depth) // 2
        start_h = (H - target_height) // 2
        start_w = (W - target_width) // 2
        end_d = start_d + target_depth
        end_h = start_h + target_height
        end_w = start_w + target_width
        cropped_tensor = tensor[:, :, start_d:end_d, start_h:end_h, start_w:end_w]
        if interpolation != 'nearest':
>           raise NotImplementedError("Interpolation modes other than 'nearest' are not implemented.")
E           NotImplementedError: Interpolation modes other than 'nearest' are not implemented.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/transform/temp.py:26: NotImplementedError
_____ TestCenterCrop3D.test_center_crop_357_batch[cpu-float32-crop_size0] ______

self = <test_crop3d.TestCenterCrop3D object at 0x78211971ab60>
crop_size = (3, 5, 7), device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("crop_size", [(3, 5, 7), (5, 3, 7), (7, 3, 5)])
    def test_center_crop_357_batch(self, crop_size, device, dtype):
        inp = torch.cat(
            [
                torch.arange(0.0, 343.0, device=device, dtype=dtype).view(1, 1, 7, 7, 7),
                torch.arange(343.0, 686.0, device=device, dtype=dtype).view(1, 1, 7, 7, 7),
            ]
        )
        expected = inp[
            :,
            :,
            (inp.size(2) // 2 - crop_size[0] // 2) : (inp.size(2) // 2 + crop_size[0] // 2 + 1),
            (inp.size(3) // 2 - crop_size[1] // 2) : (inp.size(3) // 2 + crop_size[1] // 2 + 1),
            (inp.size(4) // 2 - crop_size[2] // 2) : (inp.size(4) // 2 + crop_size[2] // 2 + 1),
        ]
>       out_crop = kornia.geometry.transform.center_crop3d(inp, crop_size, align_corners=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/transform/crop3d.py:78: in center_crop3d
    return center_crop3d(tensor, size, interpolation, align_corners)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tensor = tensor([[[[[  0.,   1.,   2.,   3.,   4.,   5.,   6.],
           [  7.,   8.,   9.,  10.,  11.,  12.,  13.],
        ...71.],
           [672., 673., 674., 675., 676., 677., 678.],
           [679., 680., 681., 682., 683., 684., 685.]]]]])
size = (3, 5, 7), interpolation = 'bilinear', align_corners = True

    def center_crop3d(tensor, size, interpolation='nearest', align_corners=False):
        if not isinstance(tensor, torch.Tensor):
            raise TypeError('Input must be a torch.Tensor.')
        if len(tensor.shape) != 5:
            raise ValueError('Input tensor must have shape (B, C, D, H, W).')
        B, C, D, H, W = tensor.shape
        if not isinstance(size, tuple) or len(size) != 3:
            raise ValueError('Size must be a tuple of (depth, height, width).')
        target_depth, target_height, target_width = size
        if target_depth > D or target_height > H or target_width > W:
            raise ValueError('Target size must be less than or equal to the input size in each dimension.')
        start_d = (D - target_depth) // 2
        start_h = (H - target_height) // 2
        start_w = (W - target_width) // 2
        end_d = start_d + target_depth
        end_h = start_h + target_height
        end_w = start_w + target_width
        cropped_tensor = tensor[:, :, start_d:end_d, start_h:end_h, start_w:end_w]
        if interpolation != 'nearest':
>           raise NotImplementedError("Interpolation modes other than 'nearest' are not implemented.")
E           NotImplementedError: Interpolation modes other than 'nearest' are not implemented.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/transform/temp.py:26: NotImplementedError
_____ TestCenterCrop3D.test_center_crop_357_batch[cpu-float32-crop_size1] ______

self = <test_crop3d.TestCenterCrop3D object at 0x78211971aaa0>
crop_size = (5, 3, 7), device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("crop_size", [(3, 5, 7), (5, 3, 7), (7, 3, 5)])
    def test_center_crop_357_batch(self, crop_size, device, dtype):
        inp = torch.cat(
            [
                torch.arange(0.0, 343.0, device=device, dtype=dtype).view(1, 1, 7, 7, 7),
                torch.arange(343.0, 686.0, device=device, dtype=dtype).view(1, 1, 7, 7, 7),
            ]
        )
        expected = inp[
            :,
            :,
            (inp.size(2) // 2 - crop_size[0] // 2) : (inp.size(2) // 2 + crop_size[0] // 2 + 1),
            (inp.size(3) // 2 - crop_size[1] // 2) : (inp.size(3) // 2 + crop_size[1] // 2 + 1),
            (inp.size(4) // 2 - crop_size[2] // 2) : (inp.size(4) // 2 + crop_size[2] // 2 + 1),
        ]
>       out_crop = kornia.geometry.transform.center_crop3d(inp, crop_size, align_corners=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/transform/crop3d.py:78: in center_crop3d
    return center_crop3d(tensor, size, interpolation, align_corners)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tensor = tensor([[[[[  0.,   1.,   2.,   3.,   4.,   5.,   6.],
           [  7.,   8.,   9.,  10.,  11.,  12.,  13.],
        ...71.],
           [672., 673., 674., 675., 676., 677., 678.],
           [679., 680., 681., 682., 683., 684., 685.]]]]])
size = (5, 3, 7), interpolation = 'bilinear', align_corners = True

    def center_crop3d(tensor, size, interpolation='nearest', align_corners=False):
        if not isinstance(tensor, torch.Tensor):
            raise TypeError('Input must be a torch.Tensor.')
        if len(tensor.shape) != 5:
            raise ValueError('Input tensor must have shape (B, C, D, H, W).')
        B, C, D, H, W = tensor.shape
        if not isinstance(size, tuple) or len(size) != 3:
            raise ValueError('Size must be a tuple of (depth, height, width).')
        target_depth, target_height, target_width = size
        if target_depth > D or target_height > H or target_width > W:
            raise ValueError('Target size must be less than or equal to the input size in each dimension.')
        start_d = (D - target_depth) // 2
        start_h = (H - target_height) // 2
        start_w = (W - target_width) // 2
        end_d = start_d + target_depth
        end_h = start_h + target_height
        end_w = start_w + target_width
        cropped_tensor = tensor[:, :, start_d:end_d, start_h:end_h, start_w:end_w]
        if interpolation != 'nearest':
>           raise NotImplementedError("Interpolation modes other than 'nearest' are not implemented.")
E           NotImplementedError: Interpolation modes other than 'nearest' are not implemented.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/transform/temp.py:26: NotImplementedError
_____ TestCenterCrop3D.test_center_crop_357_batch[cpu-float32-crop_size2] ______

self = <test_crop3d.TestCenterCrop3D object at 0x78211971a290>
crop_size = (7, 3, 5), device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("crop_size", [(3, 5, 7), (5, 3, 7), (7, 3, 5)])
    def test_center_crop_357_batch(self, crop_size, device, dtype):
        inp = torch.cat(
            [
                torch.arange(0.0, 343.0, device=device, dtype=dtype).view(1, 1, 7, 7, 7),
                torch.arange(343.0, 686.0, device=device, dtype=dtype).view(1, 1, 7, 7, 7),
            ]
        )
        expected = inp[
            :,
            :,
            (inp.size(2) // 2 - crop_size[0] // 2) : (inp.size(2) // 2 + crop_size[0] // 2 + 1),
            (inp.size(3) // 2 - crop_size[1] // 2) : (inp.size(3) // 2 + crop_size[1] // 2 + 1),
            (inp.size(4) // 2 - crop_size[2] // 2) : (inp.size(4) // 2 + crop_size[2] // 2 + 1),
        ]
>       out_crop = kornia.geometry.transform.center_crop3d(inp, crop_size, align_corners=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/transform/crop3d.py:78: in center_crop3d
    return center_crop3d(tensor, size, interpolation, align_corners)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tensor = tensor([[[[[  0.,   1.,   2.,   3.,   4.,   5.,   6.],
           [  7.,   8.,   9.,  10.,  11.,  12.,  13.],
        ...71.],
           [672., 673., 674., 675., 676., 677., 678.],
           [679., 680., 681., 682., 683., 684., 685.]]]]])
size = (7, 3, 5), interpolation = 'bilinear', align_corners = True

    def center_crop3d(tensor, size, interpolation='nearest', align_corners=False):
        if not isinstance(tensor, torch.Tensor):
            raise TypeError('Input must be a torch.Tensor.')
        if len(tensor.shape) != 5:
            raise ValueError('Input tensor must have shape (B, C, D, H, W).')
        B, C, D, H, W = tensor.shape
        if not isinstance(size, tuple) or len(size) != 3:
            raise ValueError('Size must be a tuple of (depth, height, width).')
        target_depth, target_height, target_width = size
        if target_depth > D or target_height > H or target_width > W:
            raise ValueError('Target size must be less than or equal to the input size in each dimension.')
        start_d = (D - target_depth) // 2
        start_h = (H - target_height) // 2
        start_w = (W - target_width) // 2
        end_d = start_d + target_depth
        end_h = start_h + target_height
        end_w = start_w + target_width
        cropped_tensor = tensor[:, :, start_d:end_d, start_h:end_h, start_w:end_w]
        if interpolation != 'nearest':
>           raise NotImplementedError("Interpolation modes other than 'nearest' are not implemented.")
E           NotImplementedError: Interpolation modes other than 'nearest' are not implemented.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/transform/temp.py:26: NotImplementedError
_____________________ TestCenterCrop3D.test_gradcheck[cpu] _____________________

self = <test_crop3d.TestCenterCrop3D object at 0x78211971af80>
device = device(type='cpu')

    def test_gradcheck(self, device):
        img = torch.arange(0.0, 343.0, device=device, dtype=torch.float64).view(1, 1, 7, 7, 7)
    
>       self.gradcheck(kornia.geometry.transform.center_crop3d, (img, (3, 5, 7)))

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/transform/crop3d.py:78: in center_crop3d
    return center_crop3d(tensor, size, interpolation, align_corners)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tensor = tensor([[[[[  0.,   1.,   2.,   3.,   4.,   5.,   6.],
           [  7.,   8.,   9.,  10.,  11.,  12.,  13.],
        ...334., 335.],
           [336., 337., 338., 339., 340., 341., 342.]]]]], dtype=torch.float64,
       requires_grad=True)
size = (3, 5, 7), interpolation = 'bilinear', align_corners = True

    def center_crop3d(tensor, size, interpolation='nearest', align_corners=False):
        if not isinstance(tensor, torch.Tensor):
            raise TypeError('Input must be a torch.Tensor.')
        if len(tensor.shape) != 5:
            raise ValueError('Input tensor must have shape (B, C, D, H, W).')
        B, C, D, H, W = tensor.shape
        if not isinstance(size, tuple) or len(size) != 3:
            raise ValueError('Size must be a tuple of (depth, height, width).')
        target_depth, target_height, target_width = size
        if target_depth > D or target_height > H or target_width > W:
            raise ValueError('Target size must be less than or equal to the input size in each dimension.')
        start_d = (D - target_depth) // 2
        start_h = (H - target_height) // 2
        start_w = (W - target_width) // 2
        end_d = start_d + target_depth
        end_h = start_h + target_height
        end_w = start_w + target_width
        cropped_tensor = tensor[:, :, start_d:end_d, start_h:end_h, start_w:end_w]
        if interpolation != 'nearest':
>           raise NotImplementedError("Interpolation modes other than 'nearest' are not implemented.")
E           NotImplementedError: Interpolation modes other than 'nearest' are not implemented.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/transform/temp.py:26: NotImplementedError
______________ TestCenterCrop3D.test_dynamo[cpu-float32-inductor] ______________

self = <test_crop3d.TestCenterCrop3D object at 0x78211971b340>
device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7821eeb172e0>, backend='inductor')

    @pytest.mark.skipif(
        torch_version() == "2.1.0",
        reason=(
            "https://github.com/pytorch/pytorch/issues/110680"
            " -  unsupported operand type(s) for @: 'FakeTensor' and 'FakeTensor' on `normalize_homography3d`"
        ),
    )
    def test_dynamo(self, device, dtype, torch_optimizer):
        # Define script
        op = kornia.geometry.transform.center_crop3d
        op_script = torch_optimizer(op)
        img = torch.ones(4, 3, 5, 6, 7, device=device, dtype=dtype)
    
>       actual = op_script(img, (4, 3, 2))

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py:465: in _fn
    return fn(*args, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/transform/crop3d.py:78: in center_crop3d
    return center_crop3d(tensor, size, interpolation, align_corners)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tensor = tensor([[[[[1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1....., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.],
           [1., 1., 1.,  ..., 1., 1., 1.]]]]])
size = (4, 3, 2), interpolation = 'bilinear', align_corners = True

    def center_crop3d(tensor, size, interpolation='nearest', align_corners=False):
        if not isinstance(tensor, torch.Tensor):
            raise TypeError('Input must be a torch.Tensor.')
        if len(tensor.shape) != 5:
            raise ValueError('Input tensor must have shape (B, C, D, H, W).')
        B, C, D, H, W = tensor.shape
        if not isinstance(size, tuple) or len(size) != 3:
            raise ValueError('Size must be a tuple of (depth, height, width).')
        target_depth, target_height, target_width = size
        if target_depth > D or target_height > H or target_width > W:
            raise ValueError('Target size must be less than or equal to the input size in each dimension.')
        start_d = (D - target_depth) // 2
        start_h = (H - target_height) // 2
        start_w = (W - target_width) // 2
        end_d = start_d + target_depth
        end_h = start_h + target_height
        end_w = start_w + target_width
        cropped_tensor = tensor[:, :, start_d:end_d, start_h:end_h, start_w:end_w]
        if interpolation != 'nearest':
>           raise NotImplementedError("Interpolation modes other than 'nearest' are not implemented.")
E           NotImplementedError: Interpolation modes other than 'nearest' are not implemented.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/transform/temp.py:26: NotImplementedError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size0]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size0]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_gradcheck[cpu]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_dynamo[cpu-float32-inductor]
============================== 8 failed in 0.46s ===============================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'inductor', 'openxla', 'onnxrt', 'tvm', 'cudagraphs', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 8 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_dynamo[cpu-float32-inductor] PASSED

============================== 8 passed in 3.66s ===============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'jit', 'openxla', 'cudagraphs', 'onnxrt', 'tvm', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 8 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_dynamo[cpu-float32-inductor] PASSED

============================== 8 passed in 3.73s ===============================
