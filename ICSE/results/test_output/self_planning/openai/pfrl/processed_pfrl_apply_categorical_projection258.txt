output file:
processed_pfrl_apply_categorical_projection258.json
function:
_apply_categorical_projection
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pfrl/pfrl/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pfrl/pfrl
configfile: pytest.ini
collecting ... collected 40 items

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7] FAILED

=================================== FAILURES ===================================
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range0-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea68a2c90>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea68a2c90>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range0-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67b3a90>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67b3a90>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range0-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67b3c10>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67b3c10>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range0-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67b3d90>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67b3d90>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range1-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67b3f10>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67b3f10>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range1-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bc110>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bc110>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range1-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bc3d0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bc3d0>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range1-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bc690>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bc690>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range2-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bc950>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bc950>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range2-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bcbd0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bcbd0>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range2-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bce90>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bce90>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range2-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bd150>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bd150>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range3-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bd410>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bd410>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range3-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bd710>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bd710>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range3-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bda50>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bda50>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range3-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bdd90>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bdd90>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range4-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67be0d0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67be0d0>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range4-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67be410>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67be410>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range4-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67be750>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67be750>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range4-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bea90>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67bea90>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range0-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67c8dd0>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.3901,  1.8273]], device='cuda:0')
y_probs = tensor([[0.6411, 0.3589]], device='cuda:0')
z = tensor([-3., -1.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range0-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67c8510>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.7980, -2.0178],
        [-0.0272, -0.8555],
        [ 0.2793, -2.1518],
        [-0.8959,  1.3891],
        [-0.8959,  0.5833],
        [ 1.2726, -0.6265],
        [ 0.3417, -0.0642]], device='cuda:0')
y_probs = tensor([[0.5326, 0.4674],
        [0.5458, 0.4542],
        [0.1485, 0.8515],
        [0.0559, 0.9441],
        [0.0876, 0.9124],
        [0.0787, 0.9213],
        [0.5570, 0.4430]], device='cuda:0')
z = tensor([-3., -1.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range0-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67c8c10>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.1585, -0.5666,  0.4610, -0.5287,  0.7921]], device='cuda:0')
y_probs = tensor([[0.2968, 0.2569, 0.0920, 0.0834, 0.2708]], device='cuda:0')
z = tensor([-3.0000, -2.5000, -2.0000, -1.5000, -1.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range0-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67caf90>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.0639,  0.6242,  0.5333, -0.5546, -1.0334],
        [-0.4649, -0.8314, -0.9084, -0.6650, -1.5916],
        ...[-0.4215, -0.1580,  0.2619, -0.9578, -0.0963],
        [ 1.1364,  0.8757,  0.4253,  0.7003,  0.3804]], device='cuda:0')
y_probs = tensor([[0.0749, 0.7052, 0.0810, 0.0639, 0.0750],
        [0.6106, 0.0444, 0.0629, 0.0602, 0.2220],
        [0.6142, 0...,
        [0.2708, 0.1923, 0.3332, 0.0021, 0.2015],
        [0.1037, 0.0381, 0.6597, 0.0873, 0.1113]], device='cuda:0')
z = tensor([-3.0000, -2.5000, -2.0000, -1.5000, -1.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range1-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67cb110>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.7615, -1.8689]], device='cuda:0')
y_probs = tensor([[0.1331, 0.8669]], device='cuda:0')
z = tensor([-2.,  0.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range1-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67cb2d0>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.9410,  1.2746],
        [ 0.3856, -1.0653],
        [ 1.2396, -0.6000],
        [ 0.6597,  0.5948],
        [ 0.8046,  1.3300],
        [ 0.5980,  0.8552],
        [ 0.4538, -1.6642]], device='cuda:0')
y_probs = tensor([[0.1310, 0.8690],
        [0.4199, 0.5801],
        [0.5359, 0.4641],
        [0.7797, 0.2203],
        [0.3971, 0.6029],
        [0.6818, 0.3182],
        [0.3199, 0.6801]], device='cuda:0')
z = tensor([-2.,  0.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range1-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67cb590>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 1.0748, -0.4023, -1.9978, -1.1204,  0.6645]], device='cuda:0')
y_probs = tensor([[0.0024, 0.2054, 0.5072, 0.0334, 0.2516]], device='cuda:0')
z = tensor([-2.0000, -1.5000, -1.0000, -0.5000,  0.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range1-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67cb850>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-1.2019, -1.1141,  0.5270, -0.1636, -0.5000],
        [ 1.1343,  0.0119,  1.6146, -0.9265, -0.2367],
        ...[ 0.4613, -0.0237, -0.3347,  0.7068,  0.6453],
        [ 0.3284, -0.7350, -1.3347,  0.2146, -0.9230]], device='cuda:0')
y_probs = tensor([[0.4405, 0.0565, 0.0233, 0.2156, 0.2641],
        [0.1539, 0.2282, 0.5392, 0.0649, 0.0137],
        [0.0701, 0...,
        [0.5925, 0.1103, 0.1826, 0.1136, 0.0010],
        [0.3521, 0.0476, 0.2663, 0.0264, 0.3076]], device='cuda:0')
z = tensor([-2.0000, -1.5000, -1.0000, -0.5000,  0.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range2-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67cbb10>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.1206, -0.8946]], device='cuda:0')
y_probs = tensor([[0.7989, 0.2011]], device='cuda:0')
z = tensor([-2.,  1.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range2-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67cbd90>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.6732,  0.6873],
        [ 1.8944, -0.3436],
        [-0.7460, -0.7920],
        [-0.8895, -0.4479],
        [-1.7726, -0.6105],
        [-1.2536, -0.6404],
        [-0.8779,  1.6220]], device='cuda:0')
y_probs = tensor([[0.2879, 0.7121],
        [0.1546, 0.8454],
        [0.9175, 0.0825],
        [0.8734, 0.1266],
        [0.6354, 0.3646],
        [0.3412, 0.6588],
        [0.4638, 0.5362]], device='cuda:0')
z = tensor([-2.,  1.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range2-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67d8090>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.5019,  0.5264,  0.2888,  0.6724,  0.5032]], device='cuda:0')
y_probs = tensor([[0.0779, 0.0309, 0.0802, 0.6023, 0.2087]], device='cuda:0')
z = tensor([-2.0000, -1.2500, -0.5000,  0.2500,  1.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range2-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67d8350>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.4880, -0.7480,  0.8018, -0.0800, -0.8047],
        [ 1.0683, -0.0819,  0.6121, -1.4775,  0.6930],
        ...[-1.2117, -0.2075, -2.4755,  0.4009, -0.6131],
        [-0.8663,  2.5686, -0.6558, -0.3844,  0.1385]], device='cuda:0')
y_probs = tensor([[0.2928, 0.0762, 0.2696, 0.0121, 0.3493],
        [0.2648, 0.0818, 0.1363, 0.3272, 0.1898],
        [0.4023, 0...,
        [0.0445, 0.3515, 0.3501, 0.0277, 0.2263],
        [0.4448, 0.2323, 0.0134, 0.1961, 0.1134]], device='cuda:0')
z = tensor([-2.0000, -1.2500, -0.5000,  0.2500,  1.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range3-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67d8610>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[1.4887, 0.2743]], device='cuda:0')
y_probs = tensor([[0.1248, 0.8752]], device='cuda:0')
z = tensor([0., 1.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range3-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67d8910>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-1.6402,  0.2561],
        [-0.5339,  0.7952],
        [-1.5056, -0.0999],
        [ 0.8625, -1.3924],
        [ 0.4565, -1.0405],
        [-1.3051, -0.2038],
        [-1.5117, -0.8328]], device='cuda:0')
y_probs = tensor([[0.3966, 0.6034],
        [0.0787, 0.9213],
        [0.6388, 0.3612],
        [0.4676, 0.5324],
        [0.0816, 0.9184],
        [0.2668, 0.7332],
        [0.3173, 0.6827]], device='cuda:0')
z = tensor([0., 1.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range3-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67d8c50>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-1.0019, -0.1463, -2.4166,  1.2210, -0.2858]], device='cuda:0')
y_probs = tensor([[0.1384, 0.1260, 0.2001, 0.2308, 0.3047]], device='cuda:0')
z = tensor([0.0000, 0.2500, 0.5000, 0.7500, 1.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range3-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67d8f90>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-1.1316, -0.9643, -0.0782,  0.3612,  0.3810],
        [-1.4832,  1.4463, -0.4522,  1.1937, -1.0343],
        ...[-0.4434, -1.5190,  0.3664, -0.7588, -0.3959],
        [ 0.7357, -0.2408,  1.1464,  0.0602, -0.8871]], device='cuda:0')
y_probs = tensor([[2.2276e-01, 4.6949e-01, 1.0368e-01, 2.0353e-01, 5.4805e-04],
        [6.2663e-02, 9.0813e-02, 1.6597e-01, 9.0...6.5753e-01, 4.4268e-03],
        [2.4563e-01, 1.8367e-01, 3.5935e-01, 1.6457e-01, 4.6784e-02]],
       device='cuda:0')
z = tensor([0.0000, 0.2500, 0.5000, 0.7500, 1.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range4-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67d92d0>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-1.3078, -0.0430]], device='cuda:0')
y_probs = tensor([[0.8419, 0.1581]], device='cuda:0')
z = tensor([1., 5.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range4-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67d9610>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.2088,  0.3895],
        [ 1.3946,  0.2264],
        [ 1.0887,  0.2430],
        [ 0.4507, -2.0321],
        [-0.2768,  1.4152],
        [ 3.0393, -0.1913],
        [ 0.4865, -0.6530]], device='cuda:0')
y_probs = tensor([[0.0022, 0.9978],
        [0.0386, 0.9614],
        [0.3867, 0.6133],
        [0.8473, 0.1527],
        [0.8982, 0.1018],
        [0.6717, 0.3283],
        [0.2711, 0.7289]], device='cuda:0')
z = tensor([1., 5.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range4-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67d9950>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 1.8801, -0.7421,  1.7021, -1.2693,  0.0883]], device='cuda:0')
y_probs = tensor([[0.0048, 0.2984, 0.3803, 0.2695, 0.0469]], device='cuda:0')
z = tensor([1., 2., 3., 4., 5.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range4-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d7ea67d9c90>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-1.5138e-02,  2.1909e-01, -1.9226e-01,  6.2263e-01,  7.0605e-01],
        [-3.0164e-01,  1.1218e+00, -2.0066e...e+00, -2.3222e-03],
        [ 2.9286e-01, -1.2088e+00,  9.3604e-01, -2.3787e+00,  6.7813e-01]],
       device='cuda:0')
y_probs = tensor([[0.2919, 0.4291, 0.0089, 0.1978, 0.0723],
        [0.0875, 0.0560, 0.2436, 0.6039, 0.0089],
        [0.0712, 0...,
        [0.4434, 0.0759, 0.0153, 0.3170, 0.1484],
        [0.0481, 0.1345, 0.6165, 0.1052, 0.0956]], device='cuda:0')
z = tensor([1., 2., 3., 4., 5.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        assert y.shape[1] == y_probs.shape[1] == z.shape[0], 'Shape mismatch in input arrays.'
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        z_min, z_max = (z.min(), z.max())
        delta_z = (z_max - z_min) / (n_atoms - 1)
        bj = (y - z_min) / delta_z
        l = torch.floor(bj).long()
        u = torch.ceil(bj).long()
        l = torch.clamp(l, 0, n_atoms - 1)
        u = torch.clamp(u, 0, n_atoms - 1)
        m_l = (u.float() - bj) * y_probs
        m_u = (bj - l.float()) * y_probs
        output = torch.zeros_like(y_probs)
        for b in range(batch_size):
            output[b].index_add_(0, l[b], m_l[b])
            output[b].index_add_(0, u[b], m_u[b])
>       return output.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:26: TypeError
=============================== warnings summary ===============================
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

tests/agents_tests/test_categorical_dqn.py: 40 warnings
  /local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:9: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
    y = torch.tensor(y, dtype=torch.float32)

tests/agents_tests/test_categorical_dqn.py: 40 warnings
  /local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:10: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
    y_probs = torch.tensor(y_probs, dtype=torch.float32)

tests/agents_tests/test_categorical_dqn.py: 40 warnings
  /local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:11: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
    z = torch.tensor(z, dtype=torch.float32)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7]
======================= 40 failed, 124 warnings in 1.68s =======================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pfrl/pfrl/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pfrl/pfrl
configfile: pytest.ini
collecting ... collected 40 items

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7] PASSED

=============================== warnings summary ===============================
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 40 passed, 4 warnings in 1.17s ========================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pfrl/pfrl/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pfrl/pfrl
configfile: pytest.ini
collecting ... collected 40 items

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7] PASSED

=============================== warnings summary ===============================
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 40 passed, 4 warnings in 1.31s ========================
