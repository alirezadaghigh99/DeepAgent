output file:
processed_classes-recommendersmultinomial_sampling79.json
function:
multinomial_sampling
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_save_load FAILED [100%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_class_init', 'FAILED ../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_train_param_init', 'FAILED ../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_save_load', '../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_train_param_init FAILED [ 50%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_sampling_funct', '../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_class_init FAILED [ 25%]', '../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_sampling_funct FAILED [ 75%]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/recommenders/recommenders/venv/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/aliredaq/Desktop/ICSE/src/tester/.hypothesis/examples'))
rootdir: /local/data0/moved_data/publishablew/recommenders/recommenders
configfile: pyproject.toml
plugins: typeguard-4.4.1, hypothesis-6.123.13, anyio-4.8.0
collecting ... collected 4 items

../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_class_init FAILED [ 25%]
../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_train_param_init FAILED [ 50%]
../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_sampling_funct FAILED [ 75%]
../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_save_load FAILED [100%]

=================================== FAILURES ===================================
_______________________________ test_class_init ________________________________

init_rbm = {'display_epoch': 20, 'epochs': 10, 'init_stdv': 0.01, 'keep_prob': 0.8, ...}

    @pytest.mark.gpu
    def test_class_init(init_rbm):
>       model = RBM(
            possible_ratings=init_rbm["possible_ratings"],
            visible_units=init_rbm["n_visible"],
            hidden_units=init_rbm["n_hidden"],
            training_epoch=init_rbm["epochs"],
            minibatch_size=init_rbm["minibatch"],
            keep_prob=init_rbm["keep_prob"],
            learning_rate=init_rbm["learning_rate"],
            init_stdv=init_rbm["init_stdv"],
            sampling_protocol=init_rbm["sampling_protocol"],
            display_epoch=init_rbm["display_epoch"],
        )

/local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:70: in __init__
    self.generate_graph()
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:308: in generate_graph
    self.gibbs_sampling()
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:247: in gibbs_sampling
    _, self.v_k = self.sample_visible_units(h_k)
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:222: in sample_visible_units
    v_tmp = self.multinomial_sampling(pvh)
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:102: in multinomial_sampling
    sampled_ratings = tf.TensorArray(dtype=tf.int32, size=m)
/local/data0/moved_data/publishablew/recommenders/recommenders/venv/lib/python3.11/site-packages/tensorflow/python/ops/tensor_array_ops.py:1100: in __init__
    self._implementation = implementation(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tensorflow.python.ops.tensor_array_ops._GraphTensorArrayV2 object at 0x7a9d79f01990>
dtype = tf.int32, size = None, dynamic_size = None, flow = None
infer_shape = True, element_shape = None, name = None

    def __init__(self,
                 dtype,
                 size=None,
                 dynamic_size=None,
                 clear_after_read=None,
                 tensor_array_name=None,
                 handle=None,
                 flow=None,
                 infer_shape=True,
                 element_shape=None,
                 colocate_with_first_write_call=True,
                 name=None):
      """Constructs a graph mode TensorArray.
    
      Args:
        dtype: (required) data type of the TensorArray.
        size: (optional) int32 scalar `Tensor`: the size of the TensorArray.
          Required if flow is not provided.
        dynamic_size: (optional) Python bool: If true, writes to the TensorArray
          can grow the TensorArray past its initial size.  Default: False.
        clear_after_read: (optional) unused. Not supported in TensorLists.
        tensor_array_name: (optional) unused.
        handle: (optional) Must always be None.
        flow: (optional) A variant `Tensor` scalar for a TensorList.
        infer_shape: (optional, default: True) If True, shape inference is
          enabled.  In this case, all elements must have the same shape.
        element_shape: (optional, default: None) A `TensorShape` object specifying
          the shape constraints of each of the elements of the TensorArray. Need
          not be fully defined.
        colocate_with_first_write_call: (optional). unused.
        name: (optional) A name for the operation.
    
      Raises:
        ValueError: if both handle and tensor_array_name are provided.
        TypeError: if handle is provided but is not a Tensor.
      """
      assert handle is None
      del handle
      del clear_after_read
      del tensor_array_name
      del colocate_with_first_write_call
    
      self._dynamic_size = dynamic_size
      self._size = size
    
      if flow is not None and (
          not isinstance(flow, tensor_lib.Tensor) or flow.dtype != dtypes.variant
      ):
        raise TypeError(
            f"Expected `flow` to be a variant tensor, but received `{flow.dtype}`"
            " instead."
        )
      if flow is None and size is None:
>       raise ValueError(
            "Argument `size` must be provided if argument `flow` is not provided."
        )
E       ValueError: Argument `size` must be provided if argument `flow` is not provided.

/local/data0/moved_data/publishablew/recommenders/recommenders/venv/lib/python3.11/site-packages/tensorflow/python/ops/tensor_array_ops.py:463: ValueError
------------------------------ Captured log call -------------------------------
WARNING  tensorflow:deprecation.py:50 From /local/data0/moved_data/publishablew/recommenders/recommenders/venv/lib/python3.11/site-packages/tensorflow/python/util/dispatch.py:1260: div (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Deprecated in favor of operator or tf.math.divide.
____________________________ test_train_param_init _____________________________

init_rbm = {'display_epoch': 20, 'epochs': 10, 'init_stdv': 0.01, 'keep_prob': 0.8, ...}
affinity_matrix = (array([[0, 0, 0, ..., 0, 1, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [2, 0, 2, ..., 0, 3, 0],
       ...,
       [1...0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]]))

    @pytest.mark.gpu
    def test_train_param_init(init_rbm, affinity_matrix):
        # obtain the train/test set matrices
        Xtr, _ = affinity_matrix
    
        # initialize the model
>       model = RBM(
            possible_ratings=np.setdiff1d(np.unique(Xtr), np.array([0])),
            visible_units=Xtr.shape[1],
            hidden_units=init_rbm["n_hidden"],
            training_epoch=init_rbm["epochs"],
            minibatch_size=init_rbm["minibatch"],
        )

/local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:70: in __init__
    self.generate_graph()
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:308: in generate_graph
    self.gibbs_sampling()
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:247: in gibbs_sampling
    _, self.v_k = self.sample_visible_units(h_k)
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:222: in sample_visible_units
    v_tmp = self.multinomial_sampling(pvh)
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:102: in multinomial_sampling
    sampled_ratings = tf.TensorArray(dtype=tf.int32, size=m)
/local/data0/moved_data/publishablew/recommenders/recommenders/venv/lib/python3.11/site-packages/tensorflow/python/ops/tensor_array_ops.py:1100: in __init__
    self._implementation = implementation(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tensorflow.python.ops.tensor_array_ops._GraphTensorArrayV2 object at 0x7a9d7a0a0590>
dtype = tf.int32, size = None, dynamic_size = None, flow = None
infer_shape = True, element_shape = None, name = None

    def __init__(self,
                 dtype,
                 size=None,
                 dynamic_size=None,
                 clear_after_read=None,
                 tensor_array_name=None,
                 handle=None,
                 flow=None,
                 infer_shape=True,
                 element_shape=None,
                 colocate_with_first_write_call=True,
                 name=None):
      """Constructs a graph mode TensorArray.
    
      Args:
        dtype: (required) data type of the TensorArray.
        size: (optional) int32 scalar `Tensor`: the size of the TensorArray.
          Required if flow is not provided.
        dynamic_size: (optional) Python bool: If true, writes to the TensorArray
          can grow the TensorArray past its initial size.  Default: False.
        clear_after_read: (optional) unused. Not supported in TensorLists.
        tensor_array_name: (optional) unused.
        handle: (optional) Must always be None.
        flow: (optional) A variant `Tensor` scalar for a TensorList.
        infer_shape: (optional, default: True) If True, shape inference is
          enabled.  In this case, all elements must have the same shape.
        element_shape: (optional, default: None) A `TensorShape` object specifying
          the shape constraints of each of the elements of the TensorArray. Need
          not be fully defined.
        colocate_with_first_write_call: (optional). unused.
        name: (optional) A name for the operation.
    
      Raises:
        ValueError: if both handle and tensor_array_name are provided.
        TypeError: if handle is provided but is not a Tensor.
      """
      assert handle is None
      del handle
      del clear_after_read
      del tensor_array_name
      del colocate_with_first_write_call
    
      self._dynamic_size = dynamic_size
      self._size = size
    
      if flow is not None and (
          not isinstance(flow, tensor_lib.Tensor) or flow.dtype != dtypes.variant
      ):
        raise TypeError(
            f"Expected `flow` to be a variant tensor, but received `{flow.dtype}`"
            " instead."
        )
      if flow is None and size is None:
>       raise ValueError(
            "Argument `size` must be provided if argument `flow` is not provided."
        )
E       ValueError: Argument `size` must be provided if argument `flow` is not provided.

/local/data0/moved_data/publishablew/recommenders/recommenders/venv/lib/python3.11/site-packages/tensorflow/python/ops/tensor_array_ops.py:463: ValueError
_____________________________ test_sampling_funct ______________________________

init_rbm = {'display_epoch': 20, 'epochs': 10, 'init_stdv': 0.01, 'keep_prob': 0.8, ...}
affinity_matrix = (array([[0, 0, 0, ..., 0, 1, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [2, 0, 2, ..., 0, 3, 0],
       ...,
       [1...0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]]))

    @pytest.mark.gpu
    def test_sampling_funct(init_rbm, affinity_matrix):
        # obtain the train/test set matrices
        Xtr, _ = affinity_matrix
    
        # initialize the model
>       model = RBM(
            possible_ratings=np.setdiff1d(np.unique(Xtr), np.array([0])),
            visible_units=Xtr.shape[1],
            hidden_units=init_rbm["n_hidden"],
            training_epoch=init_rbm["epochs"],
            minibatch_size=init_rbm["minibatch"],
        )

/local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:70: in __init__
    self.generate_graph()
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:308: in generate_graph
    self.gibbs_sampling()
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:247: in gibbs_sampling
    _, self.v_k = self.sample_visible_units(h_k)
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:222: in sample_visible_units
    v_tmp = self.multinomial_sampling(pvh)
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:102: in multinomial_sampling
    sampled_ratings = tf.TensorArray(dtype=tf.int32, size=m)
/local/data0/moved_data/publishablew/recommenders/recommenders/venv/lib/python3.11/site-packages/tensorflow/python/ops/tensor_array_ops.py:1100: in __init__
    self._implementation = implementation(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tensorflow.python.ops.tensor_array_ops._GraphTensorArrayV2 object at 0x7a9d795c7690>
dtype = tf.int32, size = None, dynamic_size = None, flow = None
infer_shape = True, element_shape = None, name = None

    def __init__(self,
                 dtype,
                 size=None,
                 dynamic_size=None,
                 clear_after_read=None,
                 tensor_array_name=None,
                 handle=None,
                 flow=None,
                 infer_shape=True,
                 element_shape=None,
                 colocate_with_first_write_call=True,
                 name=None):
      """Constructs a graph mode TensorArray.
    
      Args:
        dtype: (required) data type of the TensorArray.
        size: (optional) int32 scalar `Tensor`: the size of the TensorArray.
          Required if flow is not provided.
        dynamic_size: (optional) Python bool: If true, writes to the TensorArray
          can grow the TensorArray past its initial size.  Default: False.
        clear_after_read: (optional) unused. Not supported in TensorLists.
        tensor_array_name: (optional) unused.
        handle: (optional) Must always be None.
        flow: (optional) A variant `Tensor` scalar for a TensorList.
        infer_shape: (optional, default: True) If True, shape inference is
          enabled.  In this case, all elements must have the same shape.
        element_shape: (optional, default: None) A `TensorShape` object specifying
          the shape constraints of each of the elements of the TensorArray. Need
          not be fully defined.
        colocate_with_first_write_call: (optional). unused.
        name: (optional) A name for the operation.
    
      Raises:
        ValueError: if both handle and tensor_array_name are provided.
        TypeError: if handle is provided but is not a Tensor.
      """
      assert handle is None
      del handle
      del clear_after_read
      del tensor_array_name
      del colocate_with_first_write_call
    
      self._dynamic_size = dynamic_size
      self._size = size
    
      if flow is not None and (
          not isinstance(flow, tensor_lib.Tensor) or flow.dtype != dtypes.variant
      ):
        raise TypeError(
            f"Expected `flow` to be a variant tensor, but received `{flow.dtype}`"
            " instead."
        )
      if flow is None and size is None:
>       raise ValueError(
            "Argument `size` must be provided if argument `flow` is not provided."
        )
E       ValueError: Argument `size` must be provided if argument `flow` is not provided.

/local/data0/moved_data/publishablew/recommenders/recommenders/venv/lib/python3.11/site-packages/tensorflow/python/ops/tensor_array_ops.py:463: ValueError
________________________________ test_save_load ________________________________

init_rbm = {'display_epoch': 20, 'epochs': 10, 'init_stdv': 0.01, 'keep_prob': 0.8, ...}
affinity_matrix = (array([[0, 0, 0, ..., 0, 1, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [2, 0, 2, ..., 0, 3, 0],
       ...,
       [1...0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]]))

    @pytest.mark.gpu
    def test_save_load(init_rbm, affinity_matrix):
    
        # obtain the train/test set matrices
        Xtr, _ = affinity_matrix
    
        # initialize the model
>       original_model = RBM(
            possible_ratings=np.setdiff1d(np.unique(Xtr), np.array([0])),
            visible_units=Xtr.shape[1],
            hidden_units=init_rbm["n_hidden"],
            training_epoch=init_rbm["epochs"],
            minibatch_size=init_rbm["minibatch"],
            keep_prob=init_rbm["keep_prob"],
            learning_rate=init_rbm["learning_rate"],
            init_stdv=init_rbm["init_stdv"],
            sampling_protocol=init_rbm["sampling_protocol"],
            display_epoch=init_rbm["display_epoch"],
        )

/local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:70: in __init__
    self.generate_graph()
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:308: in generate_graph
    self.gibbs_sampling()
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:247: in gibbs_sampling
    _, self.v_k = self.sample_visible_units(h_k)
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:222: in sample_visible_units
    v_tmp = self.multinomial_sampling(pvh)
/local/data0/moved_data/publishablew/recommenders/recommenders/recommenders/models/rbm/rbm.py:102: in multinomial_sampling
    sampled_ratings = tf.TensorArray(dtype=tf.int32, size=m)
/local/data0/moved_data/publishablew/recommenders/recommenders/venv/lib/python3.11/site-packages/tensorflow/python/ops/tensor_array_ops.py:1100: in __init__
    self._implementation = implementation(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tensorflow.python.ops.tensor_array_ops._GraphTensorArrayV2 object at 0x7a9d795fe050>
dtype = tf.int32, size = None, dynamic_size = None, flow = None
infer_shape = True, element_shape = None, name = None

    def __init__(self,
                 dtype,
                 size=None,
                 dynamic_size=None,
                 clear_after_read=None,
                 tensor_array_name=None,
                 handle=None,
                 flow=None,
                 infer_shape=True,
                 element_shape=None,
                 colocate_with_first_write_call=True,
                 name=None):
      """Constructs a graph mode TensorArray.
    
      Args:
        dtype: (required) data type of the TensorArray.
        size: (optional) int32 scalar `Tensor`: the size of the TensorArray.
          Required if flow is not provided.
        dynamic_size: (optional) Python bool: If true, writes to the TensorArray
          can grow the TensorArray past its initial size.  Default: False.
        clear_after_read: (optional) unused. Not supported in TensorLists.
        tensor_array_name: (optional) unused.
        handle: (optional) Must always be None.
        flow: (optional) A variant `Tensor` scalar for a TensorList.
        infer_shape: (optional, default: True) If True, shape inference is
          enabled.  In this case, all elements must have the same shape.
        element_shape: (optional, default: None) A `TensorShape` object specifying
          the shape constraints of each of the elements of the TensorArray. Need
          not be fully defined.
        colocate_with_first_write_call: (optional). unused.
        name: (optional) A name for the operation.
    
      Raises:
        ValueError: if both handle and tensor_array_name are provided.
        TypeError: if handle is provided but is not a Tensor.
      """
      assert handle is None
      del handle
      del clear_after_read
      del tensor_array_name
      del colocate_with_first_write_call
    
      self._dynamic_size = dynamic_size
      self._size = size
    
      if flow is not None and (
          not isinstance(flow, tensor_lib.Tensor) or flow.dtype != dtypes.variant
      ):
        raise TypeError(
            f"Expected `flow` to be a variant tensor, but received `{flow.dtype}`"
            " instead."
        )
      if flow is None and size is None:
>       raise ValueError(
            "Argument `size` must be provided if argument `flow` is not provided."
        )
E       ValueError: Argument `size` must be provided if argument `flow` is not provided.

/local/data0/moved_data/publishablew/recommenders/recommenders/venv/lib/python3.11/site-packages/tensorflow/python/ops/tensor_array_ops.py:463: ValueError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_class_init
FAILED ../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_train_param_init
FAILED ../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_sampling_funct
FAILED ../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_save_load
============================== 4 failed in 2.14s ===============================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/recommenders/recommenders/venv/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/aliredaq/Desktop/ICSE/src/tester/.hypothesis/examples'))
rootdir: /local/data0/moved_data/publishablew/recommenders/recommenders
configfile: pyproject.toml
plugins: typeguard-4.4.1, hypothesis-6.123.13, anyio-4.8.0
collecting ... collected 4 items

../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_class_init PASSED [ 25%]
../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_train_param_init PASSED [ 50%]
../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_sampling_funct PASSED [ 75%]
../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_save_load PASSED [100%]

============================== 4 passed in 3.36s ===============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/recommenders/recommenders/venv/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/aliredaq/Desktop/ICSE/src/tester/.hypothesis/examples'))
rootdir: /local/data0/moved_data/publishablew/recommenders/recommenders
configfile: pyproject.toml
plugins: typeguard-4.4.1, hypothesis-6.123.13, anyio-4.8.0
collecting ... collected 4 items

../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_class_init PASSED [ 25%]
../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_train_param_init PASSED [ 50%]
../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_sampling_funct PASSED [ 75%]
../../../../../../local/data0/moved_data/publishablew/recommenders/recommenders/tests/unit/recommenders/models/test_rbm.py::test_save_load PASSED [100%]

============================== 4 passed in 3.38s ===============================
