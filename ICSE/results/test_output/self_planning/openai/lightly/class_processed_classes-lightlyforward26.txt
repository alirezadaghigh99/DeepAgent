output file:
processed_classes-lightlyforward26.json
function:
forward
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_neg_temp', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_cuda FAILED [ 50%]', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_1d FAILED [ 40%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_values FAILED [100%]', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding FAILED [ 90%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_cuda', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_neg_temp FAILED [ 80%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda FAILED [ 70%]', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass FAILED [ 30%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_values', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_1d', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank FAILED [ 60%]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/lightly/lightly/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/lightly/lightly
configfile: pyproject.toml
plugins: hydra-core-1.3.2, mock-3.14.0
collecting ... collected 10 items

../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLoss::test__gather_distributed PASSED [ 10%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLoss::test__gather_distributed_dist_not_available PASSED [ 20%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass FAILED [ 30%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_1d FAILED [ 40%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_cuda FAILED [ 50%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank FAILED [ 60%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda FAILED [ 70%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_neg_temp FAILED [ 80%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding FAILED [ 90%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_values FAILED [100%]

=================================== FAILURES ===================================
___________________ TestNTXentLossUnitTest.test_forward_pass ___________________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_forward_pass>

    def test_forward_pass(self):
        loss = NTXentLoss(memory_bank_size=0)
        for bsz in range(1, 20):
            batch_1 = torch.randn((bsz, 32))
            batch_2 = torch.randn((bsz, 32))
    
            # symmetry
>           l1 = loss(batch_1, batch_2)

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[ 2.3666e-03,  1.3473e+00,  5.6778e-01, -3.8563e-02, -3.0745e-01,
         -1.3663e-01, -1.2993e-03,  1.1840e+...221e-02,
         -1.3027e-01, -1.4284e-01, -1.4536e+00,  9.7043e-01, -1.4406e-01,
         -2.9482e-01,  6.0898e-01]])
out1 = tensor([[ 0.7391,  0.4576, -0.7041, -0.2411,  1.1399, -0.3771, -0.7284, -0.2808,
          0.1503, -1.4986, -1.6713,  ... -0.3366, -0.2999, -0.7521,  0.4114,
         -1.1655, -0.6514, -1.0221,  0.1669,  0.6943,  0.1342,  0.5798,  0.4165]])

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
_________________ TestNTXentLossUnitTest.test_forward_pass_1d __________________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_forward_pass_1d>

    def test_forward_pass_1d(self):
        loss = NTXentLoss(memory_bank_size=0)
        for bsz in range(1, 20):
            batch_1 = torch.randn((bsz, 1))
            batch_2 = torch.randn((bsz, 1))
    
            # symmetry
>           l1 = loss(batch_1, batch_2)

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[1.2328]]), out1 = tensor([[1.1818]])

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
________________ TestNTXentLossUnitTest.test_forward_pass_cuda _________________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_forward_pass_cuda>

    @unittest.skipUnless(torch.cuda.is_available(), "No cuda")
    def test_forward_pass_cuda(self):
        loss = NTXentLoss(memory_bank_size=0)
        for bsz in range(1, 20):
            batch_1 = torch.randn((bsz, 32)).cuda()
            batch_2 = torch.randn((bsz, 32)).cuda()
    
            # symmetry
>           l1 = loss(batch_1, batch_2)

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[-0.4047,  0.0117,  0.0491,  1.5466,  0.3828, -0.0866,  0.9250,  1.0395,
         -0.2268,  0.8641, -1.1891,  ...82, -0.8124,
          0.0906, -0.0123, -1.1471,  1.2295,  0.0197,  0.3988,  0.7793,  0.4059]],
       device='cuda:0')
out1 = tensor([[ 0.6040,  1.7241,  0.9126, -1.0933, -1.9755,  1.8989, -0.5739, -0.8062,
          1.8013, -0.6889,  0.1892,  ...55,  0.0120,
         -1.9903,  0.4061,  0.3933, -0.4291, -1.0422, -1.7585, -1.0834,  0.9892]],
       device='cuda:0')

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
_____________ TestNTXentLossUnitTest.test_forward_pass_memory_bank _____________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_forward_pass_memory_bank>

    def test_forward_pass_memory_bank(self):
        loss = NTXentLoss(memory_bank_size=64)
        for bsz in range(1, 20):
            batch_1 = torch.randn((bsz, 32))
            batch_2 = torch.randn((bsz, 32))
>           l = loss(batch_1, batch_2)

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[ 0.5080,  0.4461, -0.0197,  2.6757,  0.2109,  1.0557,  2.1621,  0.9433,
          0.3677,  1.1735,  0.9907,  ... -1.2637,  0.3543, -0.3223, -1.1970,
          1.0304, -2.1728, -0.1431, -0.4049, -1.3540,  0.7458, -0.5893, -0.0686]])
out1 = tensor([[-0.8054,  0.5038, -1.6833, -2.8069,  0.0812, -0.8370,  0.2093,  0.3217,
          0.4387,  0.3351, -0.0796, -...  0.2823,  0.0055, -0.0513, -0.5983,
         -0.2640, -1.6065, -2.1630, -2.0065,  1.9208, -0.2893, -1.0774, -0.0042]])

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
__________ TestNTXentLossUnitTest.test_forward_pass_memory_bank_cuda ___________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_forward_pass_memory_bank_cuda>

    @unittest.skipUnless(torch.cuda.is_available(), "No cuda")
    def test_forward_pass_memory_bank_cuda(self):
        loss = NTXentLoss(memory_bank_size=64)
        for bsz in range(1, 20):
            batch_1 = torch.randn((bsz, 32)).cuda()
            batch_2 = torch.randn((bsz, 32)).cuda()
>           l = loss(batch_1, batch_2)

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[ 0.4688,  1.2058, -1.8489,  0.7427, -0.5408, -1.0146, -1.2454,  0.9633,
          0.8888, -0.4326,  1.1650, -...74, -0.6664,
         -1.6604,  0.0762, -1.0289, -0.8947, -1.7843,  0.1865,  1.4187,  1.4363]],
       device='cuda:0')
out1 = tensor([[-0.3617, -0.9821, -0.6385, -0.8395,  0.2471, -1.5365, -0.6610,  0.3890,
         -1.4493,  0.5248, -1.1228,  ...78, -0.7986,
         -0.9024, -1.5393,  0.4295,  1.2662, -0.9914,  0.1671,  1.5401, -0.7803]],
       device='cuda:0')

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
______________ TestNTXentLossUnitTest.test_forward_pass_neg_temp _______________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_forward_pass_neg_temp>

    def test_forward_pass_neg_temp(self):
        loss = NTXentLoss(temperature=-1.0, memory_bank_size=0)
        for bsz in range(1, 20):
            batch_1 = torch.randn((bsz, 32))
            batch_2 = torch.randn((bsz, 32))
    
            # symmetry
>           l1 = loss(batch_1, batch_2)

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:162: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[-0.7039, -0.0312,  0.0180, -0.1305,  0.6775,  0.0643,  0.3601, -1.5075,
          0.6256, -0.5165,  0.6177,  ... -0.3369, -0.2720,  1.0788, -0.9153,
          1.0783, -0.1251, -1.2614,  1.5331, -0.2360,  0.4971, -1.1103,  0.1481]])
out1 = tensor([[ 0.3813, -0.1980, -0.9009,  0.1071, -0.3276,  1.9762,  1.3369,  0.1013,
          1.3105, -1.3108, -1.0245, -...  1.4137, -1.1580,  0.0298, -0.5072,
          0.2617, -0.6905, -0.5570, -1.8592,  0.0607,  1.5083,  1.5584,  0.8712]])

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
____________ TestNTXentLossUnitTest.test_with_correlated_embedding _____________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_with_correlated_embedding>

    def test_with_correlated_embedding(self):
        for n_samples in [1, 2, 8, 16]:
            for memory_bank_size in [0, 1, 2, 8, 15, 16, 17]:
                for temperature in [0.1, 1, 7]:
                    for gather_distributed in [False, True]:
                        out0 = np.random.random((n_samples, 1))
                        out1 = np.random.random((n_samples, 1))
                        out0 = np.concatenate([out0, 2 * out0], axis=1)
                        out1 = np.concatenate([out1, 2 * out1], axis=1)
                        out0 = torch.FloatTensor(out0)
                        out1 = torch.FloatTensor(out1)
                        out0.requires_grad = True
    
                        with self.subTest(
                            msg=(
                                f"n_samples: {n_samples}, memory_bank_size: {memory_bank_size},"
                                f"temperature: {temperature}, gather_distributed: {gather_distributed}"
                            )
                        ):
                            loss_function = NTXentLoss(
                                temperature=temperature,
                                memory_bank_size=memory_bank_size,
                            )
                            if memory_bank_size > 0:
                                for i in range(int(memory_bank_size / n_samples) + 2):
                                    # fill the memory bank over multiple rounds
                                    loss = float(loss_function(out0, out1))
                                expected_loss = -1 * np.log(1 / (memory_bank_size + 1))
                            else:
>                               loss = float(loss_function(out0, out1))

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[0.9544, 1.9089]], requires_grad=True)
out1 = tensor([[0.6673, 1.3346]])

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
___________________ TestNTXentLossUnitTest.test_with_values ____________________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_with_values>

    def test_with_values(self):
        for n_samples in [1, 2, 4]:
            for dimension in [1, 2, 16, 64]:
                for temperature in [0.1, 1, 10]:
                    for gather_distributed in [False, True]:
                        out0 = np.random.normal(0, 1, size=(n_samples, dimension))
                        out1 = np.random.normal(0, 1, size=(n_samples, dimension))
                        with self.subTest(
                            msg=(
                                f"out0.shape={out0.shape}, temperature={temperature}, "
                                f"gather_distributed={gather_distributed}"
                            )
                        ):
                            out0 = torch.FloatTensor(out0)
                            out1 = torch.FloatTensor(out1)
    
                            loss_function = NTXentLoss(
                                temperature=temperature,
                                gather_distributed=gather_distributed,
                            )
>                           l1 = float(loss_function(out0, out1))

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[0.9177]]), out1 = tensor([[-1.3679]])

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
=============================== warnings summary ===============================
tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank
tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=64' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_1d
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_cuda
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_neg_temp
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_values
=================== 8 failed, 2 passed, 2 warnings in 2.79s ====================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/lightly/lightly/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/lightly/lightly
configfile: pyproject.toml
plugins: hydra-core-1.3.2, mock-3.14.0
collecting ... collected 10 items

../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLoss::test__gather_distributed PASSED [ 10%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLoss::test__gather_distributed_dist_not_available PASSED [ 20%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass PASSED [ 30%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_1d PASSED [ 40%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_cuda PASSED [ 50%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank PASSED [ 60%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda PASSED [ 70%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_neg_temp PASSED [ 80%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding PASSED [ 90%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_values PASSED [100%]

=============================== warnings summary ===============================
tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank
tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=64' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=1' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=2' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=8' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=15' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=16' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=17' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py: 144 warnings
  /local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:66: DeprecationWarning: __array__ implementation doesn't accept a copy keyword, so passing copy=False failed. __array__ must implement 'dtype' and 'copy' keyword arguments. To learn more, see the migration guide https://numpy.org/devdocs/numpy_2_0_migration_guide.html#adapting-to-changes-in-the-copy-keyword
    out0 = np.array(out0)

tests/loss/test_NTXentLoss.py: 144 warnings
  /local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:67: DeprecationWarning: __array__ implementation doesn't accept a copy keyword, so passing copy=False failed. __array__ must implement 'dtype' and 'copy' keyword arguments. To learn more, see the migration guide https://numpy.org/devdocs/numpy_2_0_migration_guide.html#adapting-to-changes-in-the-copy-keyword
    out1 = np.array(out1)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================= 10 passed, 296 warnings in 2.88s =======================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/lightly/lightly/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/lightly/lightly
configfile: pyproject.toml
plugins: hydra-core-1.3.2, mock-3.14.0
collecting ... collected 10 items

../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLoss::test__gather_distributed PASSED [ 10%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLoss::test__gather_distributed_dist_not_available PASSED [ 20%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass PASSED [ 30%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_1d PASSED [ 40%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_cuda PASSED [ 50%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank PASSED [ 60%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda PASSED [ 70%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_neg_temp PASSED [ 80%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding PASSED [ 90%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_values PASSED [100%]

=============================== warnings summary ===============================
tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank
tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=64' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=1' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=2' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=8' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=15' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=16' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=17' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py: 144 warnings
  /local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:66: DeprecationWarning: __array__ implementation doesn't accept a copy keyword, so passing copy=False failed. __array__ must implement 'dtype' and 'copy' keyword arguments. To learn more, see the migration guide https://numpy.org/devdocs/numpy_2_0_migration_guide.html#adapting-to-changes-in-the-copy-keyword
    out0 = np.array(out0)

tests/loss/test_NTXentLoss.py: 144 warnings
  /local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:67: DeprecationWarning: __array__ implementation doesn't accept a copy keyword, so passing copy=False failed. __array__ must implement 'dtype' and 'copy' keyword arguments. To learn more, see the migration guide https://numpy.org/devdocs/numpy_2_0_migration_guide.html#adapting-to-changes-in-the-copy-keyword
    out1 = np.array(out1)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================= 10 passed, 296 warnings in 2.96s =======================
