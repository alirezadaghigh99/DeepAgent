output file:
processed_small-textgreedy_coreset264.json
function:
greedy_coreset
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_takes_remaining_pool', '../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_takes_remaining_pool FAILED', '../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_default_query FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_simple_query', 'FAILED ../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_default', 'FAILED ../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_default_query', '../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_default FAILED', '../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_simple_query FAILED'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/small-text/small-text/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/small-text/small-text
configfile: pytest.ini
plugins: srcpaths-1.2.1, cov-6.0.0, approvaltests-14.2.0, approvaltests-0.2.4
collecting ... collected 8 items

../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_default_query FAILED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_init_with_invalid_distance_metric PASSED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_default FAILED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_empty_pool PASSED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_exhausts_pool PASSED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_takes_remaining_pool FAILED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_simple_query FAILED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_str PASSED

=================================== FAILURES ===================================
________ GreedyCoresetSamplingStrategyNormalizedTest.test_default_query ________

self = <tests.unit.small_text.query_strategies.test_coresets.GreedyCoresetSamplingStrategyNormalizedTest testMethod=test_default_query>
embedding_dim = 100

    def test_default_query(self, embedding_dim=100):
        embeddings = np.random.rand(SamplingStrategiesTests.DEFAULT_NUM_SAMPLES, embedding_dim)
>       indices = self._query(self._get_query_strategy(), num_samples=100, embeddings=embeddings)

/local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_strategies.py:144: in _query
    return strategy.query(clf_mock, dataset, indices_unlabeled, indices_labeled, y, n=n,
/local/data0/moved_data/publishablew/small-text/small-text/small_text/query_strategies/strategies.py:306: in query
    sampled_indices = self.sample(clf, subset, subset_indices_unlabeled, subset_indices_labeled,
/local/data0/moved_data/publishablew/small-text/small-text/small_text/query_strategies/coresets.py:114: in sample
    return greedy_coreset(embeddings, indices_unlabeled, indices_labeled, n, distance_metric=self.distance_metric, normalized=self.normalize)
/local/data0/moved_data/publishablew/small-text/small-text/small_text/query_strategies/coresets.py:22: in greedy_coreset
    return greedy_coreset(x, indices_unlabeled, indices_labeled, n, distance_metric, batch_size, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[8.97843130e-02, 2.60352640e-02, 2.39796655e-02, ...,
        6.94085949e-02, 1.67159772e-01, 1.60922526e-01],
...
       [1.33135667e-01, 6.55183553e-03, 2.44710948e-02, ...,
        8.37019059e-02, 9.15699861e-02, 1.35048403e-01]])
indices_unlabeled = array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, ... 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89])
indices_labeled = array([90, 91, 92, 93, 94, 95, 96, 97, 98, 99]), n = 10
distance_metric = 'euclidean', batch_size = 100, normalized = True

    def greedy_coreset(x, indices_unlabeled, indices_labeled, n, distance_metric='euclidean', batch_size=None, normalized=False):
        if not isinstance(n, int) or n <= 0 or n > len(indices_unlabeled):
            raise ValueError('n must be a positive integer and less than or equal to the number of unlabeled indices.')
        if distance_metric not in ['cosine', 'euclidean']:
            raise ValueError("distance_metric must be either 'cosine' or 'euclidean'.")
        if normalized:
            x = x / np.linalg.norm(x, axis=1, keepdims=True)
        selected_indices = []
        unlabeled_data = x[indices_unlabeled]
        labeled_data = x[indices_labeled]
        distances = cdist(unlabeled_data, labeled_data, metric=distance_metric)
        for _ in range(n):
            if selected_indices:
                coreset_data = x[selected_indices]
                new_distances = cdist(unlabeled_data, coreset_data, metric=distance_metric)
                min_distances = np.minimum(distances.min(axis=1), new_distances.min(axis=1))
            else:
                min_distances = distances.min(axis=1)
            farthest_index = np.argmax(min_distances)
            selected_indices.append(indices_unlabeled[farthest_index])
            if batch_size:
                for start in range(0, len(unlabeled_data), batch_size):
                    end = start + batch_size
                    batch_distances = cdist(unlabeled_data[start:end], x[selected_indices], metric=distance_metric)
>                   distances[start:end] = np.minimum(distances[start:end], batch_distances)
E                   ValueError: operands could not be broadcast together with shapes (90,10) (90,2)

/local/data0/moved_data/publishablew/small-text/small-text/small_text/query_strategies/temp.py:31: ValueError
________ GreedyCoresetSamplingStrategyNormalizedTest.test_query_default ________

self = <tests.unit.small_text.query_strategies.test_coresets.GreedyCoresetSamplingStrategyNormalizedTest testMethod=test_query_default>

    def test_query_default(self):
>       indices = query_random_data(self._get_query_strategy(), use_embeddings=True)

/local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_strategies.py:53: in query_random_data
    return strategy.query(clf,
/local/data0/moved_data/publishablew/small-text/small-text/small_text/query_strategies/strategies.py:306: in query
    sampled_indices = self.sample(clf, subset, subset_indices_unlabeled, subset_indices_labeled,
/local/data0/moved_data/publishablew/small-text/small-text/small_text/query_strategies/coresets.py:114: in sample
    return greedy_coreset(embeddings, indices_unlabeled, indices_labeled, n, distance_metric=self.distance_metric, normalized=self.normalize)
/local/data0/moved_data/publishablew/small-text/small-text/small_text/query_strategies/coresets.py:22: in greedy_coreset
    return greedy_coreset(x, indices_unlabeled, indices_labeled, n, distance_metric, batch_size, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0.11118376, 0.00778283, 0.09708642, ..., 0.16172964, 0.0360936 ,
        0.15341222],
       [0.08503097, 0.13...6 ,
        0.16302987],
       [0.07069079, 0.15396339, 0.07251437, ..., 0.08019906, 0.0302631 ,
        0.08494404]])
indices_unlabeled = array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, ... 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89])
indices_labeled = array([90, 91, 92, 93, 94, 95, 96, 97, 98, 99]), n = 10
distance_metric = 'euclidean', batch_size = 100, normalized = True

    def greedy_coreset(x, indices_unlabeled, indices_labeled, n, distance_metric='euclidean', batch_size=None, normalized=False):
        if not isinstance(n, int) or n <= 0 or n > len(indices_unlabeled):
            raise ValueError('n must be a positive integer and less than or equal to the number of unlabeled indices.')
        if distance_metric not in ['cosine', 'euclidean']:
            raise ValueError("distance_metric must be either 'cosine' or 'euclidean'.")
        if normalized:
            x = x / np.linalg.norm(x, axis=1, keepdims=True)
        selected_indices = []
        unlabeled_data = x[indices_unlabeled]
        labeled_data = x[indices_labeled]
        distances = cdist(unlabeled_data, labeled_data, metric=distance_metric)
        for _ in range(n):
            if selected_indices:
                coreset_data = x[selected_indices]
                new_distances = cdist(unlabeled_data, coreset_data, metric=distance_metric)
                min_distances = np.minimum(distances.min(axis=1), new_distances.min(axis=1))
            else:
                min_distances = distances.min(axis=1)
            farthest_index = np.argmax(min_distances)
            selected_indices.append(indices_unlabeled[farthest_index])
            if batch_size:
                for start in range(0, len(unlabeled_data), batch_size):
                    end = start + batch_size
                    batch_distances = cdist(unlabeled_data[start:end], x[selected_indices], metric=distance_metric)
>                   distances[start:end] = np.minimum(distances[start:end], batch_distances)
E                   ValueError: operands could not be broadcast together with shapes (90,10) (90,2)

/local/data0/moved_data/publishablew/small-text/small-text/small_text/query_strategies/temp.py:31: ValueError
_ GreedyCoresetSamplingStrategyNormalizedTest.test_query_takes_remaining_pool __

self = <tests.unit.small_text.query_strategies.test_coresets.GreedyCoresetSamplingStrategyNormalizedTest testMethod=test_query_takes_remaining_pool>
embedding_dim = 100

    def test_query_takes_remaining_pool(self, embedding_dim=100):
        embeddings = np.random.rand(SamplingStrategiesTests.DEFAULT_NUM_SAMPLES, embedding_dim)
>       indices = self._query(self._get_query_strategy(),
                              num_samples=self.DEFAULT_NUM_SAMPLES,
                              n=10,
                              embeddings=embeddings)

/local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_strategies.py:144: in _query
    return strategy.query(clf_mock, dataset, indices_unlabeled, indices_labeled, y, n=n,
/local/data0/moved_data/publishablew/small-text/small-text/small_text/query_strategies/strategies.py:306: in query
    sampled_indices = self.sample(clf, subset, subset_indices_unlabeled, subset_indices_labeled,
/local/data0/moved_data/publishablew/small-text/small-text/small_text/query_strategies/coresets.py:114: in sample
    return greedy_coreset(embeddings, indices_unlabeled, indices_labeled, n, distance_metric=self.distance_metric, normalized=self.normalize)
/local/data0/moved_data/publishablew/small-text/small-text/small_text/query_strategies/coresets.py:22: in greedy_coreset
    return greedy_coreset(x, indices_unlabeled, indices_labeled, n, distance_metric, batch_size, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0.02085755, 0.1656187 , 0.16055741, ..., 0.1479012 , 0.09258437,
        0.05498272],
       [0.10641514, 0.02...27,
        0.08604161],
       [0.03917004, 0.00373105, 0.01882088, ..., 0.08062253, 0.16394992,
        0.11408771]])
indices_unlabeled = array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, ... 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89])
indices_labeled = array([90, 91, 92, 93, 94, 95, 96, 97, 98, 99]), n = 10
distance_metric = 'euclidean', batch_size = 100, normalized = True

    def greedy_coreset(x, indices_unlabeled, indices_labeled, n, distance_metric='euclidean', batch_size=None, normalized=False):
        if not isinstance(n, int) or n <= 0 or n > len(indices_unlabeled):
            raise ValueError('n must be a positive integer and less than or equal to the number of unlabeled indices.')
        if distance_metric not in ['cosine', 'euclidean']:
            raise ValueError("distance_metric must be either 'cosine' or 'euclidean'.")
        if normalized:
            x = x / np.linalg.norm(x, axis=1, keepdims=True)
        selected_indices = []
        unlabeled_data = x[indices_unlabeled]
        labeled_data = x[indices_labeled]
        distances = cdist(unlabeled_data, labeled_data, metric=distance_metric)
        for _ in range(n):
            if selected_indices:
                coreset_data = x[selected_indices]
                new_distances = cdist(unlabeled_data, coreset_data, metric=distance_metric)
                min_distances = np.minimum(distances.min(axis=1), new_distances.min(axis=1))
            else:
                min_distances = distances.min(axis=1)
            farthest_index = np.argmax(min_distances)
            selected_indices.append(indices_unlabeled[farthest_index])
            if batch_size:
                for start in range(0, len(unlabeled_data), batch_size):
                    end = start + batch_size
                    batch_distances = cdist(unlabeled_data[start:end], x[selected_indices], metric=distance_metric)
>                   distances[start:end] = np.minimum(distances[start:end], batch_distances)
E                   ValueError: operands could not be broadcast together with shapes (90,10) (90,2)

/local/data0/moved_data/publishablew/small-text/small-text/small_text/query_strategies/temp.py:31: ValueError
________ GreedyCoresetSamplingStrategyNormalizedTest.test_simple_query _________

self = <tests.unit.small_text.query_strategies.test_coresets.GreedyCoresetSamplingStrategyNormalizedTest testMethod=test_simple_query>
embedding_dim = 100

    def test_simple_query(self, embedding_dim=100):
        embeddings = np.random.rand(SamplingStrategiesTests.DEFAULT_NUM_SAMPLES, embedding_dim)
>       indices = self._query(self._get_query_strategy(),
                              num_samples=self.DEFAULT_NUM_SAMPLES,
                              n=5,
                              embeddings=embeddings)

/local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_strategies.py:144: in _query
    return strategy.query(clf_mock, dataset, indices_unlabeled, indices_labeled, y, n=n,
/local/data0/moved_data/publishablew/small-text/small-text/small_text/query_strategies/strategies.py:306: in query
    sampled_indices = self.sample(clf, subset, subset_indices_unlabeled, subset_indices_labeled,
/local/data0/moved_data/publishablew/small-text/small-text/small_text/query_strategies/coresets.py:114: in sample
    return greedy_coreset(embeddings, indices_unlabeled, indices_labeled, n, distance_metric=self.distance_metric, normalized=self.normalize)
/local/data0/moved_data/publishablew/small-text/small-text/small_text/query_strategies/coresets.py:22: in greedy_coreset
    return greedy_coreset(x, indices_unlabeled, indices_labeled, n, distance_metric, batch_size, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0.05327541, 0.13605808, 0.04438982, ..., 0.1008717 , 0.07672865,
        0.0888041 ],
       [0.01262973, 0.09...81,
        0.09243308],
       [0.01570839, 0.0240439 , 0.13406368, ..., 0.11362815, 0.15858269,
        0.13876748]])
indices_unlabeled = array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, ... 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89])
indices_labeled = array([90, 91, 92, 93, 94, 95, 96, 97, 98, 99]), n = 5
distance_metric = 'euclidean', batch_size = 100, normalized = True

    def greedy_coreset(x, indices_unlabeled, indices_labeled, n, distance_metric='euclidean', batch_size=None, normalized=False):
        if not isinstance(n, int) or n <= 0 or n > len(indices_unlabeled):
            raise ValueError('n must be a positive integer and less than or equal to the number of unlabeled indices.')
        if distance_metric not in ['cosine', 'euclidean']:
            raise ValueError("distance_metric must be either 'cosine' or 'euclidean'.")
        if normalized:
            x = x / np.linalg.norm(x, axis=1, keepdims=True)
        selected_indices = []
        unlabeled_data = x[indices_unlabeled]
        labeled_data = x[indices_labeled]
        distances = cdist(unlabeled_data, labeled_data, metric=distance_metric)
        for _ in range(n):
            if selected_indices:
                coreset_data = x[selected_indices]
                new_distances = cdist(unlabeled_data, coreset_data, metric=distance_metric)
                min_distances = np.minimum(distances.min(axis=1), new_distances.min(axis=1))
            else:
                min_distances = distances.min(axis=1)
            farthest_index = np.argmax(min_distances)
            selected_indices.append(indices_unlabeled[farthest_index])
            if batch_size:
                for start in range(0, len(unlabeled_data), batch_size):
                    end = start + batch_size
                    batch_distances = cdist(unlabeled_data[start:end], x[selected_indices], metric=distance_metric)
>                   distances[start:end] = np.minimum(distances[start:end], batch_distances)
E                   ValueError: operands could not be broadcast together with shapes (90,10) (90,2)

/local/data0/moved_data/publishablew/small-text/small-text/small_text/query_strategies/temp.py:31: ValueError
=============================== warnings summary ===============================
tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_default_query
tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_empty_pool
tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_exhausts_pool
tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_takes_remaining_pool
tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_simple_query
  /local/data0/moved_data/publishablew/small-text/small-text/small_text/data/datasets.py:422: UserWarning: Passing target_labels=None is discouraged as it can lead to unintended results in combination with indexing and cloning. Moreover, explicit target labels might be required in the next major version.
    check_target_labels(target_labels)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_default_query
FAILED ../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_default
FAILED ../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_takes_remaining_pool
FAILED ../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_simple_query
=================== 4 failed, 4 passed, 5 warnings in 1.64s ====================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/small-text/small-text/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/small-text/small-text
configfile: pytest.ini
plugins: srcpaths-1.2.1, cov-6.0.0, approvaltests-14.2.0, approvaltests-0.2.4
collecting ... collected 8 items

../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_default_query PASSED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_init_with_invalid_distance_metric PASSED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_default PASSED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_empty_pool PASSED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_exhausts_pool PASSED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_takes_remaining_pool PASSED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_simple_query PASSED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_str PASSED

=============================== warnings summary ===============================
tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_default_query
tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_empty_pool
tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_exhausts_pool
tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_takes_remaining_pool
tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_simple_query
  /local/data0/moved_data/publishablew/small-text/small-text/small_text/data/datasets.py:422: UserWarning: Passing target_labels=None is discouraged as it can lead to unintended results in combination with indexing and cloning. Moreover, explicit target labels might be required in the next major version.
    check_target_labels(target_labels)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 8 passed, 5 warnings in 1.44s =========================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/small-text/small-text/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/small-text/small-text
configfile: pytest.ini
plugins: srcpaths-1.2.1, cov-6.0.0, approvaltests-14.2.0, approvaltests-0.2.4
collecting ... collected 8 items

../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_default_query PASSED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_init_with_invalid_distance_metric PASSED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_default PASSED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_empty_pool PASSED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_exhausts_pool PASSED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_takes_remaining_pool PASSED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_simple_query PASSED
../../../../../../local/data0/moved_data/publishablew/small-text/small-text/tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_str PASSED

=============================== warnings summary ===============================
tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_default_query
tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_empty_pool
tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_exhausts_pool
tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_query_takes_remaining_pool
tests/unit/small_text/query_strategies/test_coresets.py::GreedyCoresetSamplingStrategyNormalizedTest::test_simple_query
  /local/data0/moved_data/publishablew/small-text/small-text/small_text/data/datasets.py:422: UserWarning: Passing target_labels=None is discouraged as it can lead to unintended results in combination with indexing and cloning. Moreover, explicit target labels might be required in the next major version.
    check_target_labels(target_labels)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 8 passed, 5 warnings in 11.28s ========================
