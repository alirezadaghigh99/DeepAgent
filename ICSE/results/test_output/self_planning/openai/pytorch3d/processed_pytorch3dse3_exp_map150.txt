output file:
processed_pytorch3dse3_exp_map150.json
function:
se3_exp_map
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_singularity', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_compare_with_precomputed', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_to_log_to_exp', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_output_format FAILED', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_singularity FAILED', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_output_format', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_to_exp_to_log', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_zero_translation', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_compare_with_precomputed FAILED', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_to_log_to_exp FAILED', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_to_exp_to_log FAILED', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_zero_translation FAILED'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 9 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_bad_se3_input_value_err PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_compare_with_precomputed FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_output_format FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_singularity FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_to_log_to_exp FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_zero_translation FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_singularity PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_to_exp_to_log FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_zero_translation PASSED

=================================== FAILURES ===================================
____________________ TestSE3.test_compare_with_precomputed _____________________

self = <tests.test_se3.TestSE3 testMethod=test_compare_with_precomputed>

    def test_compare_with_precomputed(self):
        """
        Compare the outputs against precomputed results.
        """
        self.assertClose(
            se3_log_map(self.precomputed_transform),
            self.precomputed_log_transform,
            atol=1e-4,
        )
        self.assertClose(
            self.precomputed_transform,
>           se3_exp_map(self.precomputed_log_transform),
            atol=1e-4,
        )

/local/data0/moved_data/pytorch3d/tests/test_se3.py:165: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/transforms/se3.py:6: in se3_exp_map
    return se3_exp_map(log_transform, eps)
/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py:12: in se3_exp_map
    rotation_matrix = _so3_exp_map(rotation_log, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rotation_log = tensor([[ 0.1900,  2.1600, -0.1700],
        [-0.6500, -0.8200,  0.5300],
        [-0.0900,  0.2000, -1.1200],
       ....6900],
        [ 0.0800, -0.1400,  0.3300],
        [-0.3300, -0.5300, -0.8800],
        [ 1.0100, -1.3500, -0.3500]])
eps = 0.0001

    def _so3_exp_map(rotation_log, eps):
        theta = torch.norm(rotation_log, dim=1, keepdim=True).clamp(min=eps)
        k = rotation_log / theta
        kx = _skew_symmetric(k)
        I = torch.eye(3).to(rotation_log.device)
        kx2 = torch.bmm(kx, kx)
        sin_theta = torch.sin(theta)
        cos_theta = torch.cos(theta)
>       R = I + sin_theta * kx + (1 - cos_theta) * kx2
E       RuntimeError: The size of tensor a (10) must match the size of tensor b (3) at non-singleton dimension 1

/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py:29: RuntimeError
______________________ TestSE3.test_se3_exp_output_format ______________________

self = <tests.test_se3.TestSE3 testMethod=test_se3_exp_output_format>
batch_size = 100

    def test_se3_exp_output_format(self, batch_size: int = 100):
        """
        Check that the output of `se3_exp_map` is a valid SE3 matrix.
        """
>       transform = se3_exp_map(TestSE3.init_log_transform(batch_size=batch_size))

/local/data0/moved_data/pytorch3d/tests/test_se3.py:137: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/transforms/se3.py:6: in se3_exp_map
    return se3_exp_map(log_transform, eps)
/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py:12: in se3_exp_map
    rotation_matrix = _so3_exp_map(rotation_log, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rotation_log = tensor([[ 0.1940,  2.1614, -0.1721],
        [-0.6494, -0.8175,  0.5280],
        [-0.0926,  0.1992, -1.1204],
       ...-0.5806,  0.2241,  0.9644],
        [-0.6276, -1.6328,  1.2227],
        [-0.3622, -0.5837, -1.7007]], device='cuda:0')
eps = 0.0001

    def _so3_exp_map(rotation_log, eps):
        theta = torch.norm(rotation_log, dim=1, keepdim=True).clamp(min=eps)
        k = rotation_log / theta
        kx = _skew_symmetric(k)
        I = torch.eye(3).to(rotation_log.device)
        kx2 = torch.bmm(kx, kx)
        sin_theta = torch.sin(theta)
        cos_theta = torch.cos(theta)
>       R = I + sin_theta * kx + (1 - cos_theta) * kx2
E       RuntimeError: The size of tensor a (100) must match the size of tensor b (3) at non-singleton dimension 1

/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py:29: RuntimeError
_______________________ TestSE3.test_se3_exp_singularity _______________________

self = <tests.test_se3.TestSE3 testMethod=test_se3_exp_singularity>
batch_size = 100

    def test_se3_exp_singularity(self, batch_size: int = 100):
        """
        Tests whether the `se3_exp_map` is robust to the input vectors
        with low L2 norms, where the algorithm is numerically unstable.
        """
        # generate random log-rotations with a tiny angle
        log_rot = TestSE3.init_log_transform(batch_size=batch_size)
        log_rot_small = log_rot * 1e-6
        log_rot_small.requires_grad = True
>       transforms = se3_exp_map(log_rot_small)

/local/data0/moved_data/pytorch3d/tests/test_se3.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/transforms/se3.py:6: in se3_exp_map
    return se3_exp_map(log_transform, eps)
/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py:12: in se3_exp_map
    rotation_matrix = _so3_exp_map(rotation_log, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rotation_log = tensor([[ 1.9402e-07,  2.1614e-06, -1.7205e-07],
        [-6.4944e-07, -8.1752e-07,  5.2796e-07],
        [-9.2570e-08...e-06,  1.2227e-06],
        [-3.6217e-07, -5.8366e-07, -1.7007e-06]], device='cuda:0',
       grad_fn=<SliceBackward0>)
eps = 0.0001

    def _so3_exp_map(rotation_log, eps):
        theta = torch.norm(rotation_log, dim=1, keepdim=True).clamp(min=eps)
        k = rotation_log / theta
        kx = _skew_symmetric(k)
        I = torch.eye(3).to(rotation_log.device)
        kx2 = torch.bmm(kx, kx)
        sin_theta = torch.sin(theta)
        cos_theta = torch.cos(theta)
>       R = I + sin_theta * kx + (1 - cos_theta) * kx2
E       RuntimeError: The size of tensor a (100) must match the size of tensor b (3) at non-singleton dimension 1

/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py:29: RuntimeError
______________________ TestSE3.test_se3_exp_to_log_to_exp ______________________

self = <tests.test_se3.TestSE3 testMethod=test_se3_exp_to_log_to_exp>
batch_size = 10000

    def test_se3_exp_to_log_to_exp(self, batch_size: int = 10000):
        """
        Check that `se3_exp_map(se3_log_map(A))==A` for
        a batch of randomly generated SE(3) matrices `A`.
        """
        transform = TestSE3.init_transform(batch_size=batch_size)
        # Limit test transforms to those not around the singularity where
        # the rotation angle~=pi.
        nonsingular = so3_rotation_angle(transform[:, :3, :3]) < 3.134
        transform = transform[nonsingular]
>       transform_ = se3_exp_map(
            se3_log_map(transform, eps=1e-8, cos_bound=0.0), eps=1e-8
        )

/local/data0/moved_data/pytorch3d/tests/test_se3.py:268: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/transforms/se3.py:6: in se3_exp_map
    return se3_exp_map(log_transform, eps)
/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py:12: in se3_exp_map
    rotation_matrix = _so3_exp_map(rotation_log, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rotation_log = tensor([[ 0.0536,  1.0608, -0.2628],
        [ 0.2821,  0.2623, -1.2972],
        [-0.1075,  0.4920, -0.1306],
       ... 2.5306, -1.0928,  0.1778],
        [ 1.1193, -0.9604, -0.1128],
        [-1.6430,  2.2158,  0.5445]], device='cuda:0')
eps = 1e-08

    def _so3_exp_map(rotation_log, eps):
        theta = torch.norm(rotation_log, dim=1, keepdim=True).clamp(min=eps)
        k = rotation_log / theta
        kx = _skew_symmetric(k)
        I = torch.eye(3).to(rotation_log.device)
        kx2 = torch.bmm(kx, kx)
        sin_theta = torch.sin(theta)
        cos_theta = torch.cos(theta)
>       R = I + sin_theta * kx + (1 - cos_theta) * kx2
E       RuntimeError: The size of tensor a (9969) must match the size of tensor b (3) at non-singleton dimension 1

/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py:29: RuntimeError
____________________ TestSE3.test_se3_exp_zero_translation _____________________

self = <tests.test_se3.TestSE3 testMethod=test_se3_exp_zero_translation>
batch_size = 100

    def test_se3_exp_zero_translation(self, batch_size: int = 100):
        """
        Check that `se3_exp_map` with zero translation gives
        the same result as corresponding `so3_exp_map`.
        """
        log_transform = TestSE3.init_log_transform(batch_size=batch_size)
        log_transform[:, :3] *= 0.0
>       transform = se3_exp_map(log_transform, eps=1e-8)

/local/data0/moved_data/pytorch3d/tests/test_se3.py:235: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/transforms/se3.py:6: in se3_exp_map
    return se3_exp_map(log_transform, eps)
/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py:12: in se3_exp_map
    rotation_matrix = _so3_exp_map(rotation_log, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rotation_log = tensor([[0., 0., -0.],
        [-0., -0., 0.],
        [-0., 0., -0.],
        [0., -0., 0.],
        [-0., -0., 0.],
... -0.],
        [-0., 0., 0.],
        [-0., 0., 0.],
        [-0., -0., 0.],
        [-0., -0., -0.]], device='cuda:0')
eps = 1e-08

    def _so3_exp_map(rotation_log, eps):
        theta = torch.norm(rotation_log, dim=1, keepdim=True).clamp(min=eps)
        k = rotation_log / theta
        kx = _skew_symmetric(k)
        I = torch.eye(3).to(rotation_log.device)
        kx2 = torch.bmm(kx, kx)
        sin_theta = torch.sin(theta)
        cos_theta = torch.cos(theta)
>       R = I + sin_theta * kx + (1 - cos_theta) * kx2
E       RuntimeError: The size of tensor a (100) must match the size of tensor b (3) at non-singleton dimension 1

/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py:29: RuntimeError
______________________ TestSE3.test_se3_log_to_exp_to_log ______________________

self = <tests.test_se3.TestSE3 testMethod=test_se3_log_to_exp_to_log>
batch_size = 100

    def test_se3_log_to_exp_to_log(self, batch_size: int = 100):
        """
        Check that `se3_log_map(se3_exp_map(log_transform))==log_transform`
        for a randomly generated batch of SE(3) matrix logarithms `log_transform`.
        """
        log_transform = TestSE3.init_log_transform(batch_size=batch_size)
>       log_transform_ = se3_log_map(se3_exp_map(log_transform, eps=1e-8), eps=1e-8)

/local/data0/moved_data/pytorch3d/tests/test_se3.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/transforms/se3.py:6: in se3_exp_map
    return se3_exp_map(log_transform, eps)
/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py:12: in se3_exp_map
    rotation_matrix = _so3_exp_map(rotation_log, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rotation_log = tensor([[ 0.1940,  2.1614, -0.1721],
        [-0.6494, -0.8175,  0.5280],
        [-0.0926,  0.1992, -1.1204],
       ...-0.5806,  0.2241,  0.9644],
        [-0.6276, -1.6328,  1.2227],
        [-0.3622, -0.5837, -1.7007]], device='cuda:0')
eps = 1e-08

    def _so3_exp_map(rotation_log, eps):
        theta = torch.norm(rotation_log, dim=1, keepdim=True).clamp(min=eps)
        k = rotation_log / theta
        kx = _skew_symmetric(k)
        I = torch.eye(3).to(rotation_log.device)
        kx2 = torch.bmm(kx, kx)
        sin_theta = torch.sin(theta)
        cos_theta = torch.cos(theta)
>       R = I + sin_theta * kx + (1 - cos_theta) * kx2
E       RuntimeError: The size of tensor a (100) must match the size of tensor b (3) at non-singleton dimension 1

/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py:29: RuntimeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_compare_with_precomputed
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_output_format
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_singularity
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_to_log_to_exp
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_zero_translation
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_to_exp_to_log
========================= 6 failed, 3 passed in 1.54s ==========================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 9 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_bad_se3_input_value_err PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_compare_with_precomputed PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_output_format PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_singularity PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_to_log_to_exp PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_zero_translation PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_singularity PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_to_exp_to_log PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_zero_translation PASSED

============================== 9 passed in 1.42s ===============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 9 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_bad_se3_input_value_err PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_compare_with_precomputed PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_output_format PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_singularity PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_to_log_to_exp PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_zero_translation PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_singularity PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_to_exp_to_log PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_zero_translation PASSED

============================== 9 passed in 1.45s ===============================
