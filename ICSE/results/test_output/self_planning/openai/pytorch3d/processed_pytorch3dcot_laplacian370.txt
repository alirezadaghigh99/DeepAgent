output file:
processed_pytorch3dcot_laplacian370.json
function:
cot_laplacian
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_cot', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_cotcurv', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_cotcurv FAILED', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_cot FAILED'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 3 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_cot FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_cotcurv FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_uniform PASSED

=================================== FAILURES ===================================
_____________ TestLaplacianSmoothing.test_laplacian_smoothing_cot ______________

self = <tests.test_mesh_laplacian_smoothing.TestLaplacianSmoothing testMethod=test_laplacian_smoothing_cot>

    def test_laplacian_smoothing_cot(self):
        """
        Test Laplacian Smoothing with cot weights.
        """
        meshes = TestLaplacianSmoothing.init_meshes(10, 100, 300)
    
        # feats in list
>       out = mesh_laplacian_smoothing(meshes, method="cot")

/local/data0/moved_data/pytorch3d/tests/test_mesh_laplacian_smoothing.py:160: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

meshes = <pytorch3d.structures.meshes.Meshes object at 0x7375f11947f0>
method = 'cot'

    def mesh_laplacian_smoothing(meshes, method: str = "uniform"):
        r"""
        Computes the laplacian smoothing objective for a batch of meshes.
        This function supports three variants of Laplacian smoothing,
        namely with uniform weights("uniform"), with cotangent weights ("cot"),
        and cotangent curvature ("cotcurv").For more details read [1, 2].
    
        Args:
            meshes: Meshes object with a batch of meshes.
            method: str specifying the method for the laplacian.
        Returns:
            loss: Average laplacian smoothing loss across the batch.
            Returns 0 if meshes contains no meshes or all empty meshes.
    
        Consider a mesh M = (V, F), with verts of shape Nx3 and faces of shape Mx3.
        The Laplacian matrix L is a NxN tensor such that LV gives a tensor of vectors:
        for a uniform Laplacian, LuV[i] points to the centroid of its neighboring
        vertices, a cotangent Laplacian LcV[i] is known to be an approximation of
        the surface normal, while the curvature variant LckV[i] scales the normals
        by the discrete mean curvature. For vertex i, assume S[i] is the set of
        neighboring vertices to i, a_ij and b_ij are the "outside" angles in the
        two triangles connecting vertex v_i and its neighboring vertex v_j
        for j in S[i], as seen in the diagram below.
    
        .. code-block:: python
    
                   a_ij
                    /\
                   /  \
                  /    \
                 /      \
            v_i /________\ v_j
                \        /
                 \      /
                  \    /
                   \  /
                    \/
                   b_ij
    
            The definition of the Laplacian is LV[i] = sum_j w_ij (v_j - v_i)
            For the uniform variant,    w_ij = 1 / |S[i]|
            For the cotangent variant,
                w_ij = (cot a_ij + cot b_ij) / (sum_k cot a_ik + cot b_ik)
            For the cotangent curvature, w_ij = (cot a_ij + cot b_ij) / (4 A[i])
            where A[i] is the sum of the areas of all triangles containing vertex v_i.
    
        There is a nice trigonometry identity to compute cotangents. Consider a triangle
        with side lengths A, B, C and angles a, b, c.
    
        .. code-block:: python
    
                   c
                  /|\
                 / | \
                /  |  \
             B /  H|   \ A
              /    |    \
             /     |     \
            /a_____|_____b\
                   C
    
            Then cot a = (B^2 + C^2 - A^2) / 4 * area
            We know that area = CH/2, and by the law of cosines we have
    
            A^2 = B^2 + C^2 - 2BC cos a => B^2 + C^2 - A^2 = 2BC cos a
    
            Putting these together, we get:
    
            B^2 + C^2 - A^2     2BC cos a
            _______________  =  _________ = (B/H) cos a = cos a / sin a = cot a
               4 * area            2CH
    
    
        [1] Desbrun et al, "Implicit fairing of irregular meshes using diffusion
        and curvature flow", SIGGRAPH 1999.
    
        [2] Nealan et al, "Laplacian Mesh Optimization", Graphite 2006.
        """
    
        if meshes.isempty():
            return torch.tensor(
                [0.0], dtype=torch.float32, device=meshes.device, requires_grad=True
            )
    
        N = len(meshes)
        verts_packed = meshes.verts_packed()  # (sum(V_n), 3)
        faces_packed = meshes.faces_packed()  # (sum(F_n), 3)
        num_verts_per_mesh = meshes.num_verts_per_mesh()  # (N,)
        verts_packed_idx = meshes.verts_packed_to_mesh_idx()  # (sum(V_n),)
        weights = num_verts_per_mesh.gather(0, verts_packed_idx)  # (sum(V_n),)
        weights = 1.0 / weights.float()
    
        # We don't want to backprop through the computation of the Laplacian;
        # just treat it as a magic constant matrix that is used to transform
        # verts into normals
        with torch.no_grad():
            if method == "uniform":
                L = meshes.laplacian_packed()
            elif method in ["cot", "cotcurv"]:
                L, inv_areas = cot_laplacian(verts_packed, faces_packed)
                if method == "cot":
                    norm_w = torch.sparse.sum(L, dim=1).to_dense().view(-1, 1)
                    idx = norm_w > 0
                    # pyre-fixme[58]: `/` is not supported for operand types `float` and
                    #  `Tensor`.
                    norm_w[idx] = 1.0 / norm_w[idx]
                else:
                    L_sum = torch.sparse.sum(L, dim=1).to_dense().view(-1, 1)
                    norm_w = 0.25 * inv_areas
            else:
                raise ValueError("Method should be one of {uniform, cot, cotcurv}")
    
        if method == "uniform":
            loss = L.mm(verts_packed)
        elif method == "cot":
            # pyre-fixme[61]: `norm_w` is undefined, or not always defined.
>           loss = L.mm(verts_packed) * norm_w - verts_packed
E           RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cpu and cuda:0! (when checking argument for argument mat2 in method wrapper_SparseCUDA__mm)

/local/data0/moved_data/pytorch3d/pytorch3d/loss/mesh_laplacian_smoothing.py:130: RuntimeError
___________ TestLaplacianSmoothing.test_laplacian_smoothing_cotcurv ____________

self = <tests.test_mesh_laplacian_smoothing.TestLaplacianSmoothing testMethod=test_laplacian_smoothing_cotcurv>

    def test_laplacian_smoothing_cotcurv(self):
        """
        Test Laplacian Smoothing with cotcurv weights.
        """
        meshes = TestLaplacianSmoothing.init_meshes(10, 100, 300)
    
        # feats in list
>       out = mesh_laplacian_smoothing(meshes, method="cotcurv")

/local/data0/moved_data/pytorch3d/tests/test_mesh_laplacian_smoothing.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

meshes = <pytorch3d.structures.meshes.Meshes object at 0x7376a389ef40>
method = 'cotcurv'

    def mesh_laplacian_smoothing(meshes, method: str = "uniform"):
        r"""
        Computes the laplacian smoothing objective for a batch of meshes.
        This function supports three variants of Laplacian smoothing,
        namely with uniform weights("uniform"), with cotangent weights ("cot"),
        and cotangent curvature ("cotcurv").For more details read [1, 2].
    
        Args:
            meshes: Meshes object with a batch of meshes.
            method: str specifying the method for the laplacian.
        Returns:
            loss: Average laplacian smoothing loss across the batch.
            Returns 0 if meshes contains no meshes or all empty meshes.
    
        Consider a mesh M = (V, F), with verts of shape Nx3 and faces of shape Mx3.
        The Laplacian matrix L is a NxN tensor such that LV gives a tensor of vectors:
        for a uniform Laplacian, LuV[i] points to the centroid of its neighboring
        vertices, a cotangent Laplacian LcV[i] is known to be an approximation of
        the surface normal, while the curvature variant LckV[i] scales the normals
        by the discrete mean curvature. For vertex i, assume S[i] is the set of
        neighboring vertices to i, a_ij and b_ij are the "outside" angles in the
        two triangles connecting vertex v_i and its neighboring vertex v_j
        for j in S[i], as seen in the diagram below.
    
        .. code-block:: python
    
                   a_ij
                    /\
                   /  \
                  /    \
                 /      \
            v_i /________\ v_j
                \        /
                 \      /
                  \    /
                   \  /
                    \/
                   b_ij
    
            The definition of the Laplacian is LV[i] = sum_j w_ij (v_j - v_i)
            For the uniform variant,    w_ij = 1 / |S[i]|
            For the cotangent variant,
                w_ij = (cot a_ij + cot b_ij) / (sum_k cot a_ik + cot b_ik)
            For the cotangent curvature, w_ij = (cot a_ij + cot b_ij) / (4 A[i])
            where A[i] is the sum of the areas of all triangles containing vertex v_i.
    
        There is a nice trigonometry identity to compute cotangents. Consider a triangle
        with side lengths A, B, C and angles a, b, c.
    
        .. code-block:: python
    
                   c
                  /|\
                 / | \
                /  |  \
             B /  H|   \ A
              /    |    \
             /     |     \
            /a_____|_____b\
                   C
    
            Then cot a = (B^2 + C^2 - A^2) / 4 * area
            We know that area = CH/2, and by the law of cosines we have
    
            A^2 = B^2 + C^2 - 2BC cos a => B^2 + C^2 - A^2 = 2BC cos a
    
            Putting these together, we get:
    
            B^2 + C^2 - A^2     2BC cos a
            _______________  =  _________ = (B/H) cos a = cos a / sin a = cot a
               4 * area            2CH
    
    
        [1] Desbrun et al, "Implicit fairing of irregular meshes using diffusion
        and curvature flow", SIGGRAPH 1999.
    
        [2] Nealan et al, "Laplacian Mesh Optimization", Graphite 2006.
        """
    
        if meshes.isempty():
            return torch.tensor(
                [0.0], dtype=torch.float32, device=meshes.device, requires_grad=True
            )
    
        N = len(meshes)
        verts_packed = meshes.verts_packed()  # (sum(V_n), 3)
        faces_packed = meshes.faces_packed()  # (sum(F_n), 3)
        num_verts_per_mesh = meshes.num_verts_per_mesh()  # (N,)
        verts_packed_idx = meshes.verts_packed_to_mesh_idx()  # (sum(V_n),)
        weights = num_verts_per_mesh.gather(0, verts_packed_idx)  # (sum(V_n),)
        weights = 1.0 / weights.float()
    
        # We don't want to backprop through the computation of the Laplacian;
        # just treat it as a magic constant matrix that is used to transform
        # verts into normals
        with torch.no_grad():
            if method == "uniform":
                L = meshes.laplacian_packed()
            elif method in ["cot", "cotcurv"]:
                L, inv_areas = cot_laplacian(verts_packed, faces_packed)
                if method == "cot":
                    norm_w = torch.sparse.sum(L, dim=1).to_dense().view(-1, 1)
                    idx = norm_w > 0
                    # pyre-fixme[58]: `/` is not supported for operand types `float` and
                    #  `Tensor`.
                    norm_w[idx] = 1.0 / norm_w[idx]
                else:
                    L_sum = torch.sparse.sum(L, dim=1).to_dense().view(-1, 1)
                    norm_w = 0.25 * inv_areas
            else:
                raise ValueError("Method should be one of {uniform, cot, cotcurv}")
    
        if method == "uniform":
            loss = L.mm(verts_packed)
        elif method == "cot":
            # pyre-fixme[61]: `norm_w` is undefined, or not always defined.
            loss = L.mm(verts_packed) * norm_w - verts_packed
        elif method == "cotcurv":
            # pyre-fixme[61]: `norm_w` may not be initialized here.
>           loss = (L.mm(verts_packed) - L_sum * verts_packed) * norm_w
E           RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cpu and cuda:0! (when checking argument for argument mat2 in method wrapper_SparseCUDA__mm)

/local/data0/moved_data/pytorch3d/pytorch3d/loss/mesh_laplacian_smoothing.py:133: RuntimeError
=============================== warnings summary ===============================
tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_cot
  /local/data0/moved_data/pytorch3d/pytorch3d/ops/temp.py:19: UserWarning: Using torch.cross without specifying the dim arg is deprecated.
  Please either pass the dim explicitly or simply use torch.linalg.cross.
  The default value of dim will change to agree with that of linalg.cross in a future release. (Triggered internally at ../aten/src/ATen/native/Cross.cpp:62.)
    cot0 = torch.dot(e1, e2) / (torch.norm(torch.cross(e1, e2)) + eps)

tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_uniform
  /local/data0/moved_data/pytorch3d/pytorch3d/ops/laplacian_matrices.py:25: UserWarning: torch.sparse.SparseTensor(indices, values, shape, *, device=) is deprecated.  Please use torch.sparse_coo_tensor(indices, values, shape, dtype=, device=). (Triggered internally at ../torch/csrc/utils/tensor_new.cpp:641.)
    A = torch.sparse.FloatTensor(idx, ones, (V, V))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_cot
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_cotcurv
=================== 2 failed, 1 passed, 2 warnings in 5.09s ====================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 3 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_cot PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_cotcurv PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_uniform PASSED

=============================== warnings summary ===============================
tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_cot
  /local/data0/moved_data/pytorch3d/pytorch3d/ops/laplacian_matrices.py:130: UserWarning: torch.sparse.SparseTensor(indices, values, shape, *, device=) is deprecated.  Please use torch.sparse_coo_tensor(indices, values, shape, dtype=, device=). (Triggered internally at ../torch/csrc/utils/tensor_new.cpp:641.)
    L = torch.sparse.FloatTensor(idx, cot.view(-1), (V, V))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
========================= 3 passed, 1 warning in 5.38s =========================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 3 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_cot PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_cotcurv PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_uniform PASSED

=============================== warnings summary ===============================
tests/test_mesh_laplacian_smoothing.py::TestLaplacianSmoothing::test_laplacian_smoothing_cot
  /local/data0/moved_data/pytorch3d/pytorch3d/ops/laplacian_matrices.py:130: UserWarning: torch.sparse.SparseTensor(indices, values, shape, *, device=) is deprecated.  Please use torch.sparse_coo_tensor(indices, values, shape, dtype=, device=). (Triggered internally at ../torch/csrc/utils/tensor_new.cpp:641.)
    L = torch.sparse.FloatTensor(idx, cot.view(-1), (V, V))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
========================= 3 passed, 1 warning in 5.39s =========================
