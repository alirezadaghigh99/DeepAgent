output file:
processed_pytorch3d_normalize_and_compose_all_layers142.json
function:
_normalize_and_compose_all_layers
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_background_color', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_background_color FAILED', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_opaque', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_opaque FAILED', 'FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_transparencies', '../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_transparencies FAILED'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 19 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPrecompute::test_crops_h PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPrecompute::test_crops_w PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPrecompute::test_offsets PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPreparPixelsAndColors::test_background_alpha PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPreparPixelsAndColors::test_background_z PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestGetSplatKernelNormalization::test_splat_kernel_normalization PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeOcclusionLayers::test_all_equal PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeOcclusionLayers::test_mid_to_top_level_splatting PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeOcclusionLayers::test_single_layer PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattingColorsAndWeights::test_all_equal PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattingColorsAndWeights::test_random_inputs PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattingColorsAndWeights::test_zero_alpha_zero_weight PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestOffsetSplats::test_offset PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattedColorsAndWeights::test_accumulation_background PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattedColorsAndWeights::test_accumulation_foreground PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattedColorsAndWeights::test_accumulation_middle PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_background_color FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_opaque FAILED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_transparencies FAILED

=================================== FAILURES ===================================
____________ TestNormalizeAndComposeAllLayers.test_background_color ____________

self = <tests.test_splatter_blend.TestNormalizeAndComposeAllLayers testMethod=test_background_color>

    def test_background_color(self):
        # Background should always have alpha=0, and the chosen RGB.
        N, H, W = 2, 3, 4
        # Make a mask with background in the zeroth row of the first image.
        bg_mask = torch.zeros([N, H, W, 1, 1])
        bg_mask[0, :, 0] = 1
    
        bg_color = torch.tensor([0.2, 0.3, 0.4])
    
        color_layers = torch.rand((N, H, W, 4, 3)) * (1 - bg_mask)
        color_weights = torch.rand((N, H, W, 1, 3)) * (1 - bg_mask)
    
>       colors = _normalize_and_compose_all_layers(
            bg_color, color_layers, color_weights
        )

/local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py:587: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/splatter_blend.py:190: in _normalize_and_compose_all_layers
    return _normalize_and_compose_all_layers(background_color, splatted_colors_per_occlusion_layer, splatted_weights_per_occlusion_layer)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

background_color = tensor([0.2000, 0.3000, 0.4000])
splatted_colors_per_occlusion_layer = tensor([[[[[0.0000, 0.0000, 0.0000],
           [0.0000, 0.0000, 0.0000],
           [0.0000, 0.0000, 0.0000],
       ...89],
           [0.3628, 0.2343, 0.5220],
           [0.1175, 0.6907, 0.7906],
           [0.5254, 0.4806, 0.9274]]]]])
splatted_weights_per_occlusion_layer = tensor([[[[[0.0000, 0.0000, 0.0000]],

          [[0.6013, 0.8948, 0.8821]],

          [[0.3452, 0.3550, 0.9886]],

 ...
          [[0.7781, 0.2315, 0.6224]],

          [[0.5087, 0.8894, 0.9435]],

          [[0.5393, 0.5257, 0.2229]]]]])

    def _normalize_and_compose_all_layers(background_color, splatted_colors_per_occlusion_layer, splatted_weights_per_occlusion_layer):
        background_color = torch.tensor(background_color, dtype=torch.float32)
        splatted_colors_per_occlusion_layer = torch.tensor(splatted_colors_per_occlusion_layer, dtype=torch.float32)
        splatted_weights_per_occlusion_layer = torch.tensor(splatted_weights_per_occlusion_layer, dtype=torch.float32)
        normalized_colors = torch.where(splatted_weights_per_occlusion_layer > 0, splatted_colors_per_occlusion_layer / splatted_weights_per_occlusion_layer, torch.zeros_like(splatted_colors_per_occlusion_layer))
        N, H, W, _, _ = splatted_colors_per_occlusion_layer.shape
        output_colors = torch.zeros((N, H, W, 4), dtype=torch.float32)
        output_colors[..., :3] = background_color
        for i in range(3):
            alpha = normalized_colors[..., 3, i:i + 1]
            color = normalized_colors[..., :3, i]
            output_colors[..., :3] = alpha * color + (1 - alpha) * output_colors[..., :3]
>           output_colors[..., 3] = alpha + (1 - alpha) * output_colors[..., 3]
E           RuntimeError: The size of tensor a (4) must match the size of tensor b (3) at non-singleton dimension 2

/local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:23: RuntimeError
___________ TestNormalizeAndComposeAllLayers.test_compositing_opaque ___________

self = <tests.test_splatter_blend.TestNormalizeAndComposeAllLayers testMethod=test_compositing_opaque>

    def test_compositing_opaque(self):
        # When all colors are opaque, only the foreground layer should be visible.
        N, H, W = 2, 3, 4
        color_layers = torch.rand((N, H, W, 4, 3))
        color_layers[..., 3, :] = 1.0
        color_weights = torch.ones((N, H, W, 1, 3))
    
>       out_colors = _normalize_and_compose_all_layers(
            torch.tensor([0.0, 0.0, 0.0]), color_layers, color_weights
        )

/local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py:605: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/splatter_blend.py:190: in _normalize_and_compose_all_layers
    return _normalize_and_compose_all_layers(background_color, splatted_colors_per_occlusion_layer, splatted_weights_per_occlusion_layer)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

background_color = tensor([0., 0., 0.])
splatted_colors_per_occlusion_layer = tensor([[[[[0.8511, 0.7222, 0.4590],
           [0.1554, 0.9861, 0.0999],
           [0.8474, 0.6103, 0.3287],
       ...73],
           [0.7822, 0.5359, 0.5992],
           [0.8134, 0.0198, 0.3810],
           [1.0000, 1.0000, 1.0000]]]]])
splatted_weights_per_occlusion_layer = tensor([[[[[1., 1., 1.]],

          [[1., 1., 1.]],

          [[1., 1., 1.]],

          [[1., 1., 1.]]],


        ... 1.]]],


         [[[1., 1., 1.]],

          [[1., 1., 1.]],

          [[1., 1., 1.]],

          [[1., 1., 1.]]]]])

    def _normalize_and_compose_all_layers(background_color, splatted_colors_per_occlusion_layer, splatted_weights_per_occlusion_layer):
        background_color = torch.tensor(background_color, dtype=torch.float32)
        splatted_colors_per_occlusion_layer = torch.tensor(splatted_colors_per_occlusion_layer, dtype=torch.float32)
        splatted_weights_per_occlusion_layer = torch.tensor(splatted_weights_per_occlusion_layer, dtype=torch.float32)
        normalized_colors = torch.where(splatted_weights_per_occlusion_layer > 0, splatted_colors_per_occlusion_layer / splatted_weights_per_occlusion_layer, torch.zeros_like(splatted_colors_per_occlusion_layer))
        N, H, W, _, _ = splatted_colors_per_occlusion_layer.shape
        output_colors = torch.zeros((N, H, W, 4), dtype=torch.float32)
        output_colors[..., :3] = background_color
        for i in range(3):
            alpha = normalized_colors[..., 3, i:i + 1]
            color = normalized_colors[..., :3, i]
            output_colors[..., :3] = alpha * color + (1 - alpha) * output_colors[..., :3]
>           output_colors[..., 3] = alpha + (1 - alpha) * output_colors[..., 3]
E           RuntimeError: The size of tensor a (4) must match the size of tensor b (3) at non-singleton dimension 2

/local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:23: RuntimeError
_______ TestNormalizeAndComposeAllLayers.test_compositing_transparencies _______

self = <tests.test_splatter_blend.TestNormalizeAndComposeAllLayers testMethod=test_compositing_transparencies>

    def test_compositing_transparencies(self):
        # When foreground layer is transparent and surface and bg are semi-transparent,
        # we should return a  mix of the two latter.
        N, H, W = 2, 3, 4
        color_layers = torch.rand((N, H, W, 4, 3))
        color_layers[..., 3, 0] = 0.1  # fg
        color_layers[..., 3, 1] = 0.2  # surface
        color_layers[..., 3, 2] = 0.3  # bg
        color_weights = torch.ones((N, H, W, 1, 3))
    
>       out_colors = _normalize_and_compose_all_layers(
            torch.tensor([0.0, 0.0, 0.0]), color_layers, color_weights
        )

/local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py:620: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/pytorch3d/pytorch3d/renderer/splatter_blend.py:190: in _normalize_and_compose_all_layers
    return _normalize_and_compose_all_layers(background_color, splatted_colors_per_occlusion_layer, splatted_weights_per_occlusion_layer)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

background_color = tensor([0., 0., 0.])
splatted_colors_per_occlusion_layer = tensor([[[[[0.3827, 0.0894, 0.1492],
           [0.2501, 0.1133, 0.5340],
           [0.1580, 0.4960, 0.3536],
       ...26],
           [0.6666, 0.5824, 0.0380],
           [0.7113, 0.6223, 0.9897],
           [0.1000, 0.2000, 0.3000]]]]])
splatted_weights_per_occlusion_layer = tensor([[[[[1., 1., 1.]],

          [[1., 1., 1.]],

          [[1., 1., 1.]],

          [[1., 1., 1.]]],


        ... 1.]]],


         [[[1., 1., 1.]],

          [[1., 1., 1.]],

          [[1., 1., 1.]],

          [[1., 1., 1.]]]]])

    def _normalize_and_compose_all_layers(background_color, splatted_colors_per_occlusion_layer, splatted_weights_per_occlusion_layer):
        background_color = torch.tensor(background_color, dtype=torch.float32)
        splatted_colors_per_occlusion_layer = torch.tensor(splatted_colors_per_occlusion_layer, dtype=torch.float32)
        splatted_weights_per_occlusion_layer = torch.tensor(splatted_weights_per_occlusion_layer, dtype=torch.float32)
        normalized_colors = torch.where(splatted_weights_per_occlusion_layer > 0, splatted_colors_per_occlusion_layer / splatted_weights_per_occlusion_layer, torch.zeros_like(splatted_colors_per_occlusion_layer))
        N, H, W, _, _ = splatted_colors_per_occlusion_layer.shape
        output_colors = torch.zeros((N, H, W, 4), dtype=torch.float32)
        output_colors[..., :3] = background_color
        for i in range(3):
            alpha = normalized_colors[..., 3, i:i + 1]
            color = normalized_colors[..., :3, i]
            output_colors[..., :3] = alpha * color + (1 - alpha) * output_colors[..., :3]
>           output_colors[..., 3] = alpha + (1 - alpha) * output_colors[..., 3]
E           RuntimeError: The size of tensor a (4) must match the size of tensor b (3) at non-singleton dimension 2

/local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:23: RuntimeError
=============================== warnings summary ===============================
tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_background_color
tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_opaque
tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_transparencies
  /local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:12: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
    background_color = torch.tensor(background_color, dtype=torch.float32)

tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_background_color
tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_opaque
tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_transparencies
  /local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:13: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
    splatted_colors_per_occlusion_layer = torch.tensor(splatted_colors_per_occlusion_layer, dtype=torch.float32)

tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_background_color
tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_opaque
tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_transparencies
  /local/data0/moved_data/pytorch3d/pytorch3d/renderer/temp.py:14: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
    splatted_weights_per_occlusion_layer = torch.tensor(splatted_weights_per_occlusion_layer, dtype=torch.float32)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_background_color
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_opaque
FAILED ../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_transparencies
=================== 3 failed, 16 passed, 9 warnings in 1.30s ===================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 19 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPrecompute::test_crops_h PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPrecompute::test_crops_w PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPrecompute::test_offsets PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPreparPixelsAndColors::test_background_alpha PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPreparPixelsAndColors::test_background_z PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestGetSplatKernelNormalization::test_splat_kernel_normalization PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeOcclusionLayers::test_all_equal PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeOcclusionLayers::test_mid_to_top_level_splatting PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeOcclusionLayers::test_single_layer PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattingColorsAndWeights::test_all_equal PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattingColorsAndWeights::test_random_inputs PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattingColorsAndWeights::test_zero_alpha_zero_weight PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestOffsetSplats::test_offset PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattedColorsAndWeights::test_accumulation_background PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattedColorsAndWeights::test_accumulation_foreground PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattedColorsAndWeights::test_accumulation_middle PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_background_color PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_opaque PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_transparencies PASSED

============================== 19 passed in 1.29s ==============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 19 items

../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPrecompute::test_crops_h PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPrecompute::test_crops_w PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPrecompute::test_offsets PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPreparPixelsAndColors::test_background_alpha PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestPreparPixelsAndColors::test_background_z PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestGetSplatKernelNormalization::test_splat_kernel_normalization PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeOcclusionLayers::test_all_equal PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeOcclusionLayers::test_mid_to_top_level_splatting PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeOcclusionLayers::test_single_layer PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattingColorsAndWeights::test_all_equal PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattingColorsAndWeights::test_random_inputs PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattingColorsAndWeights::test_zero_alpha_zero_weight PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestOffsetSplats::test_offset PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattedColorsAndWeights::test_accumulation_background PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattedColorsAndWeights::test_accumulation_foreground PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestComputeSplattedColorsAndWeights::test_accumulation_middle PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_background_color PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_opaque PASSED
../../../../../../local/data0/moved_data/pytorch3d/tests/test_splatter_blend.py::TestNormalizeAndComposeAllLayers::test_compositing_transparencies PASSED

============================== 19 passed in 1.23s ==============================
