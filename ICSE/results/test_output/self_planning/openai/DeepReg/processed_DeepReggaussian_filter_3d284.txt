output file:
processed_DeepReggaussian_filter_3d284.json
function:
gaussian_filter_3d
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[5-kernel_size5]', 'test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[1-kernel_size3] FAILED [ 44%]', 'test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[5-kernel_size5] FAILED [ 66%]', 'test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma2] FAILED [100%]', 'FAILED test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma0-kernel_size0]', 'test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma1-kernel_size1] FAILED [ 22%]', 'FAILED test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma0]', 'test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[2-kernel_size4] FAILED [ 55%]', 'test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma0] FAILED [ 77%]', 'FAILED test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma2]', 'test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma0-kernel_size0] FAILED [ 11%]', 'FAILED test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[1-kernel_size3]', 'test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma2-kernel_size2] FAILED [ 33%]', 'FAILED test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma1]', 'FAILED test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma1-kernel_size1]', 'FAILED test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma2-kernel_size2]', 'test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma1] FAILED [ 88%]', 'FAILED test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[2-kernel_size4]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.7.16, pytest-6.2.3, py-1.11.0, pluggy-0.13.1 -- /home/aliredaq/anaconda3/envs/deepreg/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/DeepReg/DeepReg, configfile: pytest.ini
plugins: dependency-0.5.1, cov-2.11.1
collecting ... collected 9 items

test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma0-kernel_size0] FAILED [ 11%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma1-kernel_size1] FAILED [ 22%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma2-kernel_size2] FAILED [ 33%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[1-kernel_size3] FAILED [ 44%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[2-kernel_size4] FAILED [ 55%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[5-kernel_size5] FAILED [ 66%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma0] FAILED [ 77%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma1] FAILED [ 88%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma2] FAILED [100%]

=================================== FAILURES ===================================
______ TestGaussianFilter3D.test_kernel_size[kernel_sigma0-kernel_size0] _______

self = <test.unit.test_layer_util.TestGaussianFilter3D object at 0x74b47a836250>
kernel_sigma = (1, 1, 1), kernel_size = (3, 3, 3, 3, 3)

    @pytest.mark.parametrize(
        "kernel_sigma, kernel_size",
        [
            ((1, 1, 1), (3, 3, 3, 3, 3)),
            ((2, 2, 2), (7, 7, 7, 3, 3)),
            ((5, 5, 5), (15, 15, 15, 3, 3)),
            (1, (3, 3, 3, 3, 3)),
            (2, (7, 7, 7, 3, 3)),
            (5, (15, 15, 15, 3, 3)),
        ],
    )
    def test_kernel_size(self, kernel_sigma, kernel_size):
>       filter = layer_util.gaussian_filter_3d(kernel_sigma)

test/unit/test_layer_util.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
deepreg/model/layer_util.py:268: in gaussian_filter_3d
    return gaussian_filter_3d(kernel_sigma)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_sigma = (1, 1, 1)

    def gaussian_filter_3d(kernel_sigma):
        if isinstance(kernel_sigma, int):
            kernel_sigma = [kernel_sigma] * 3
        elif isinstance(kernel_sigma, list) and len(kernel_sigma) == 3:
            pass
        else:
>           raise ValueError('kernel_sigma must be an integer or a list of three elements.')
E           ValueError: kernel_sigma must be an integer or a list of three elements.

deepreg/model/temp.py:14: ValueError
______ TestGaussianFilter3D.test_kernel_size[kernel_sigma1-kernel_size1] _______

self = <test.unit.test_layer_util.TestGaussianFilter3D object at 0x74b47a679950>
kernel_sigma = (2, 2, 2), kernel_size = (7, 7, 7, 3, 3)

    @pytest.mark.parametrize(
        "kernel_sigma, kernel_size",
        [
            ((1, 1, 1), (3, 3, 3, 3, 3)),
            ((2, 2, 2), (7, 7, 7, 3, 3)),
            ((5, 5, 5), (15, 15, 15, 3, 3)),
            (1, (3, 3, 3, 3, 3)),
            (2, (7, 7, 7, 3, 3)),
            (5, (15, 15, 15, 3, 3)),
        ],
    )
    def test_kernel_size(self, kernel_sigma, kernel_size):
>       filter = layer_util.gaussian_filter_3d(kernel_sigma)

test/unit/test_layer_util.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
deepreg/model/layer_util.py:268: in gaussian_filter_3d
    return gaussian_filter_3d(kernel_sigma)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_sigma = (2, 2, 2)

    def gaussian_filter_3d(kernel_sigma):
        if isinstance(kernel_sigma, int):
            kernel_sigma = [kernel_sigma] * 3
        elif isinstance(kernel_sigma, list) and len(kernel_sigma) == 3:
            pass
        else:
>           raise ValueError('kernel_sigma must be an integer or a list of three elements.')
E           ValueError: kernel_sigma must be an integer or a list of three elements.

deepreg/model/temp.py:14: ValueError
______ TestGaussianFilter3D.test_kernel_size[kernel_sigma2-kernel_size2] _______

self = <test.unit.test_layer_util.TestGaussianFilter3D object at 0x74b45a705350>
kernel_sigma = (5, 5, 5), kernel_size = (15, 15, 15, 3, 3)

    @pytest.mark.parametrize(
        "kernel_sigma, kernel_size",
        [
            ((1, 1, 1), (3, 3, 3, 3, 3)),
            ((2, 2, 2), (7, 7, 7, 3, 3)),
            ((5, 5, 5), (15, 15, 15, 3, 3)),
            (1, (3, 3, 3, 3, 3)),
            (2, (7, 7, 7, 3, 3)),
            (5, (15, 15, 15, 3, 3)),
        ],
    )
    def test_kernel_size(self, kernel_sigma, kernel_size):
>       filter = layer_util.gaussian_filter_3d(kernel_sigma)

test/unit/test_layer_util.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
deepreg/model/layer_util.py:268: in gaussian_filter_3d
    return gaussian_filter_3d(kernel_sigma)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_sigma = (5, 5, 5)

    def gaussian_filter_3d(kernel_sigma):
        if isinstance(kernel_sigma, int):
            kernel_sigma = [kernel_sigma] * 3
        elif isinstance(kernel_sigma, list) and len(kernel_sigma) == 3:
            pass
        else:
>           raise ValueError('kernel_sigma must be an integer or a list of three elements.')
E           ValueError: kernel_sigma must be an integer or a list of three elements.

deepreg/model/temp.py:14: ValueError
____________ TestGaussianFilter3D.test_kernel_size[1-kernel_size3] _____________

self = <test.unit.test_layer_util.TestGaussianFilter3D object at 0x74b47a836290>
kernel_sigma = 1, kernel_size = (3, 3, 3, 3, 3)

    @pytest.mark.parametrize(
        "kernel_sigma, kernel_size",
        [
            ((1, 1, 1), (3, 3, 3, 3, 3)),
            ((2, 2, 2), (7, 7, 7, 3, 3)),
            ((5, 5, 5), (15, 15, 15, 3, 3)),
            (1, (3, 3, 3, 3, 3)),
            (2, (7, 7, 7, 3, 3)),
            (5, (15, 15, 15, 3, 3)),
        ],
    )
    def test_kernel_size(self, kernel_sigma, kernel_size):
        filter = layer_util.gaussian_filter_3d(kernel_sigma)
>       assert filter.shape == kernel_size
E       assert TensorShape([3, 3, 3]) == (3, 3, 3, 3, 3)
E         +TensorShape([3, 3, 3])
E         -(3, 3, 3, 3, 3)
E         Full diff:
E         - (3, 3, 3, 3, 3)
E         + TensorShape([3, 3, 3])

test/unit/test_layer_util.py:256: AssertionError
____________ TestGaussianFilter3D.test_kernel_size[2-kernel_size4] _____________

self = <test.unit.test_layer_util.TestGaussianFilter3D object at 0x74b46dd38490>
kernel_sigma = 2, kernel_size = (7, 7, 7, 3, 3)

    @pytest.mark.parametrize(
        "kernel_sigma, kernel_size",
        [
            ((1, 1, 1), (3, 3, 3, 3, 3)),
            ((2, 2, 2), (7, 7, 7, 3, 3)),
            ((5, 5, 5), (15, 15, 15, 3, 3)),
            (1, (3, 3, 3, 3, 3)),
            (2, (7, 7, 7, 3, 3)),
            (5, (15, 15, 15, 3, 3)),
        ],
    )
    def test_kernel_size(self, kernel_sigma, kernel_size):
        filter = layer_util.gaussian_filter_3d(kernel_sigma)
>       assert filter.shape == kernel_size
E       assert TensorShape([6, 6, 6]) == (7, 7, 7, 3, 3)
E         +TensorShape([6, 6, 6])
E         -(7, 7, 7, 3, 3)
E         Full diff:
E         - (7, 7, 7, 3, 3)
E         + TensorShape([6, 6, 6])

test/unit/test_layer_util.py:256: AssertionError
____________ TestGaussianFilter3D.test_kernel_size[5-kernel_size5] _____________

self = <test.unit.test_layer_util.TestGaussianFilter3D object at 0x74b47a618c50>
kernel_sigma = 5, kernel_size = (15, 15, 15, 3, 3)

    @pytest.mark.parametrize(
        "kernel_sigma, kernel_size",
        [
            ((1, 1, 1), (3, 3, 3, 3, 3)),
            ((2, 2, 2), (7, 7, 7, 3, 3)),
            ((5, 5, 5), (15, 15, 15, 3, 3)),
            (1, (3, 3, 3, 3, 3)),
            (2, (7, 7, 7, 3, 3)),
            (5, (15, 15, 15, 3, 3)),
        ],
    )
    def test_kernel_size(self, kernel_sigma, kernel_size):
        filter = layer_util.gaussian_filter_3d(kernel_sigma)
>       assert filter.shape == kernel_size
E       assert TensorShape([15, 15, 15]) == (15, 15, 15, 3, 3)
E         +TensorShape([15, 15, 15])
E         -(15, 15, 15, 3, 3)
E         Full diff:
E         - (15, 15, 15, 3, 3)
E         + TensorShape([15, 15, 15])

test/unit/test_layer_util.py:256: AssertionError
_________________ TestGaussianFilter3D.test_sum[kernel_sigma0] _________________

self = <test.unit.test_layer_util.TestGaussianFilter3D object at 0x74b47a618d10>
kernel_sigma = (1, 1, 1)

    @pytest.mark.parametrize(
        "kernel_sigma",
        [(1, 1, 1), (2, 2, 2), (5, 5, 5)],
    )
    def test_sum(self, kernel_sigma):
>       filter = layer_util.gaussian_filter_3d(kernel_sigma)

test/unit/test_layer_util.py:263: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
deepreg/model/layer_util.py:268: in gaussian_filter_3d
    return gaussian_filter_3d(kernel_sigma)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_sigma = (1, 1, 1)

    def gaussian_filter_3d(kernel_sigma):
        if isinstance(kernel_sigma, int):
            kernel_sigma = [kernel_sigma] * 3
        elif isinstance(kernel_sigma, list) and len(kernel_sigma) == 3:
            pass
        else:
>           raise ValueError('kernel_sigma must be an integer or a list of three elements.')
E           ValueError: kernel_sigma must be an integer or a list of three elements.

deepreg/model/temp.py:14: ValueError
_________________ TestGaussianFilter3D.test_sum[kernel_sigma1] _________________

self = <test.unit.test_layer_util.TestGaussianFilter3D object at 0x74b47a6bb550>
kernel_sigma = (2, 2, 2)

    @pytest.mark.parametrize(
        "kernel_sigma",
        [(1, 1, 1), (2, 2, 2), (5, 5, 5)],
    )
    def test_sum(self, kernel_sigma):
>       filter = layer_util.gaussian_filter_3d(kernel_sigma)

test/unit/test_layer_util.py:263: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
deepreg/model/layer_util.py:268: in gaussian_filter_3d
    return gaussian_filter_3d(kernel_sigma)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_sigma = (2, 2, 2)

    def gaussian_filter_3d(kernel_sigma):
        if isinstance(kernel_sigma, int):
            kernel_sigma = [kernel_sigma] * 3
        elif isinstance(kernel_sigma, list) and len(kernel_sigma) == 3:
            pass
        else:
>           raise ValueError('kernel_sigma must be an integer or a list of three elements.')
E           ValueError: kernel_sigma must be an integer or a list of three elements.

deepreg/model/temp.py:14: ValueError
_________________ TestGaussianFilter3D.test_sum[kernel_sigma2] _________________

self = <test.unit.test_layer_util.TestGaussianFilter3D object at 0x74b47a618990>
kernel_sigma = (5, 5, 5)

    @pytest.mark.parametrize(
        "kernel_sigma",
        [(1, 1, 1), (2, 2, 2), (5, 5, 5)],
    )
    def test_sum(self, kernel_sigma):
>       filter = layer_util.gaussian_filter_3d(kernel_sigma)

test/unit/test_layer_util.py:263: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
deepreg/model/layer_util.py:268: in gaussian_filter_3d
    return gaussian_filter_3d(kernel_sigma)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_sigma = (5, 5, 5)

    def gaussian_filter_3d(kernel_sigma):
        if isinstance(kernel_sigma, int):
            kernel_sigma = [kernel_sigma] * 3
        elif isinstance(kernel_sigma, list) and len(kernel_sigma) == 3:
            pass
        else:
>           raise ValueError('kernel_sigma must be an integer or a list of three elements.')
E           ValueError: kernel_sigma must be an integer or a list of three elements.

deepreg/model/temp.py:14: ValueError
=========================== short test summary info ============================
FAILED test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma0-kernel_size0]
FAILED test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma1-kernel_size1]
FAILED test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma2-kernel_size2]
FAILED test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[1-kernel_size3]
FAILED test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[2-kernel_size4]
FAILED test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[5-kernel_size5]
FAILED test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma0]
FAILED test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma1]
FAILED test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma2]
============================== 9 failed in 1.47s ===============================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.7.16, pytest-6.2.3, py-1.11.0, pluggy-0.13.1 -- /home/aliredaq/anaconda3/envs/deepreg/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/DeepReg/DeepReg, configfile: pytest.ini
plugins: dependency-0.5.1, cov-2.11.1
collecting ... collected 9 items

test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma0-kernel_size0] PASSED [ 11%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma1-kernel_size1] PASSED [ 22%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma2-kernel_size2] PASSED [ 33%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[1-kernel_size3] PASSED [ 44%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[2-kernel_size4] PASSED [ 55%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[5-kernel_size5] PASSED [ 66%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma0] PASSED [ 77%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma1] PASSED [ 88%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma2] PASSED [100%]

============================== 9 passed in 1.17s ===============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.7.16, pytest-6.2.3, py-1.11.0, pluggy-0.13.1 -- /home/aliredaq/anaconda3/envs/deepreg/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/DeepReg/DeepReg, configfile: pytest.ini
plugins: dependency-0.5.1, cov-2.11.1
collecting ... collected 9 items

test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma0-kernel_size0] PASSED [ 11%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma1-kernel_size1] PASSED [ 22%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma2-kernel_size2] PASSED [ 33%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[1-kernel_size3] PASSED [ 44%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[2-kernel_size4] PASSED [ 55%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[5-kernel_size5] PASSED [ 66%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma0] PASSED [ 77%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma1] PASSED [ 88%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma2] PASSED [100%]

============================== 9 passed in 1.15s ===============================
