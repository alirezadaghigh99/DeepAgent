output file:
processed_cleanlabvalue_counts345.json
function:
value_counts
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[multilabel_strings]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[strings]', '../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[strings] FAILED', '../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[multilabel_integers] FAILED', '../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_str FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_str', '../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[multilabel_strings] FAILED', '../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[integers] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[integers]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[multilabel_integers]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/cleanlab/cleanlab/venv/bin/python
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/aliredaq/Desktop/ICSE/src/tester/.hypothesis/examples'))
rootdir: /local/data0/moved_data/publishablew/cleanlab/cleanlab
configfile: pyproject.toml
plugins: hypothesis-6.124.1
collecting ... collected 21 items

../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_print_inm 
 Inverse Noise Matrix P(true_label|given_label) of shape (3, 3)
 p(y|s)	s=0	s=1	s=2
	---	---	---
y=0 |	1.0	0.0	0.2
y=1 |	0.0	0.7	0.2
y=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3


 Inverse Noise Matrix P(true_label|given_label) of shape (2, 2)
 p(y|s)	s=0	s=1
	---	---
y=0 |	1.0	0.3
y=1 |	0.0	0.7
	Trace(matrix) = 1.7


 Inverse Noise Matrix P(true_label|given_label) of shape (1, 1)
 p(y|s)	s=0
	---
y=0 |	1
	Trace(matrix) = 1

PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_print_joint 
 Joint Label Noise Distribution Matrix P(given_label, true_label) of shape (3, 3)
 p(s,y)	y=0	y=1	y=2
	---	---	---
s=0 |	0.1	0.0	0.1
s=1 |	0.1	0.1	0.1
s=2 |	0.2	0.1	0.2
	Trace(matrix) = 0.4


 Joint Label Noise Distribution Matrix P(given_label, true_label) of shape (2, 2)
 p(s,y)	y=0	y=1
	---	---
s=0 |	0.2	0.3
s=1 |	0.4	0.1
	Trace(matrix) = 0.3


 Joint Label Noise Distribution Matrix P(given_label, true_label) of shape (1, 1)
 p(s,y)	y=0
	---
s=0 |	1
	Trace(matrix) = 1

PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_print_square 
 A square matrix of shape (3, 3)
 s,y	y=0	y=1	y=2
	---	---	---
s=0 |	1.0	0.0	0.2
s=1 |	0.0	0.7	0.2
s=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3


 A square matrix of shape (3, 3)
 s,y	y=0	y=1	y=2
	---	---	---
s=0 |	1.0	0.0	0.2
s=1 |	0.0	0.7	0.2
s=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3


 A square matrix of shape (3, 3)
 s,y	y=0	y=1	y=2
	---	---	---
s=0 |	1.0	0.0	0.2
s=1 |	0.0	0.7	0.2
s=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3

PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_print_noise_matrix 
 Noise Matrix (aka Noisy Channel) P(given_label|true_label) of shape (3, 3)
 p(s|y)	y=0	y=1	y=2
	---	---	---
s=0 |	1.0	0.0	0.2
s=1 |	0.0	0.7	0.2
s=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3


 Noise Matrix (aka Noisy Channel) P(given_label|true_label) of shape (3, 3)
 p(s|y)	y=0	y=1	y=2
	---	---	---
s=0 |	1.0	0.0	0.2
s=1 |	0.0	0.7	0.2
s=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3


 Noise Matrix (aka Noisy Channel) P(given_label|true_label) of shape (3, 3)
 p(s|y)	y=0	y=1	y=2
	---	---	---
s=0 |	1.0	0.0	0.2
s=1 |	0.0	0.7	0.2
s=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3

PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_pu_f1 PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_str FAILED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[integers] FAILED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[strings] FAILED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[multilabel_integers] FAILED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[multilabel_strings] FAILED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_pu_remove_noise PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_round_preserving_sum PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_one_hot PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_num_unique PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_missing_classes PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_round_preserving_row_totals PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_confusion_matrix PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_confusion_matrix_nonconsecutive PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_format_labels PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_normalized_entropy PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_force_two_dimensions PASSED

=================================== FAILURES ===================================
____________________________ test_value_counts_str _____________________________

    def test_value_counts_str():
        r = util.value_counts(["a", "b", "a"])
>       assert all(np.array([2, 1]) - r < 1e-4)
E       ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()

/local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py:63: ValueError
_______________ test_value_counts_fill_missing_classes[integers] _______________

test_case = TestCase(labels=[0, 1, 0, 2], id='integers')

    @pytest.mark.parametrize(
        "test_case",
        value_counts_missing_classes_test_cases,
        ids=lambda x: str(x.id),
    )
    def test_value_counts_fill_missing_classes(test_case):
        labels = test_case.labels
        is_multi_label = isinstance(labels[0], list)
        r = util.value_counts_fill_missing_classes(labels, num_classes=4, multi_label=is_multi_label)
>       assert np.array_equal(r, [2, 1, 1, 0])
E       assert False
E        +  where False = <function array_equal at 0x745dd41be1b0>(array([[2],\n       [1],\n       [1]]), [2, 1, 1, 0])
E        +    where <function array_equal at 0x745dd41be1b0> = np.array_equal

/local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py:85: AssertionError
_______________ test_value_counts_fill_missing_classes[strings] ________________

test_case = TestCase(labels=['a', 'b', 'a', 'c'], id='strings')

    @pytest.mark.parametrize(
        "test_case",
        value_counts_missing_classes_test_cases,
        ids=lambda x: str(x.id),
    )
    def test_value_counts_fill_missing_classes(test_case):
        labels = test_case.labels
        is_multi_label = isinstance(labels[0], list)
        r = util.value_counts_fill_missing_classes(labels, num_classes=4, multi_label=is_multi_label)
>       assert np.array_equal(r, [2, 1, 1, 0])
E       assert False
E        +  where False = <function array_equal at 0x745dd41be1b0>(array([[2],\n       [1],\n       [1]]), [2, 1, 1, 0])
E        +    where <function array_equal at 0x745dd41be1b0> = np.array_equal

/local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py:85: AssertionError
_________ test_value_counts_fill_missing_classes[multilabel_integers] __________

test_case = TestCase(labels=[[0], [0, 1], [2]], id='multilabel_integers')

    @pytest.mark.parametrize(
        "test_case",
        value_counts_missing_classes_test_cases,
        ids=lambda x: str(x.id),
    )
    def test_value_counts_fill_missing_classes(test_case):
        labels = test_case.labels
        is_multi_label = isinstance(labels[0], list)
>       r = util.value_counts_fill_missing_classes(labels, num_classes=4, multi_label=is_multi_label)

/local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/cleanlab/cleanlab/cleanlab/internal/util.py:138: in value_counts_fill_missing_classes
    return value_counts(x, num_classes=num_classes, multi_label=multi_label)
/local/data0/moved_data/publishablew/cleanlab/cleanlab/cleanlab/internal/util.py:88: in value_counts
    return value_counts(x)
/local/data0/moved_data/publishablew/cleanlab/cleanlab/cleanlab/internal/temp.py:13: in value_counts
    unique, counts = np.unique(x, return_counts=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = [[0], [0, 1], [2]], return_index = False, return_inverse = False
return_counts = True, axis = None

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        numpy.lib.arraysetops : Module with a number of other functions for
                                performing set operations on arrays.
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: NumPy 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        Examples
        --------
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
>       ar = np.asanyarray(ar)
E       ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (3,) + inhomogeneous part.

/local/data0/moved_data/publishablew/cleanlab/cleanlab/venv/lib/python3.11/site-packages/numpy/lib/arraysetops.py:272: ValueError
__________ test_value_counts_fill_missing_classes[multilabel_strings] __________

test_case = TestCase(labels=[['c'], ['a', 'b'], ['a']], id='multilabel_strings')

    @pytest.mark.parametrize(
        "test_case",
        value_counts_missing_classes_test_cases,
        ids=lambda x: str(x.id),
    )
    def test_value_counts_fill_missing_classes(test_case):
        labels = test_case.labels
        is_multi_label = isinstance(labels[0], list)
>       r = util.value_counts_fill_missing_classes(labels, num_classes=4, multi_label=is_multi_label)

/local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/cleanlab/cleanlab/cleanlab/internal/util.py:138: in value_counts_fill_missing_classes
    return value_counts(x, num_classes=num_classes, multi_label=multi_label)
/local/data0/moved_data/publishablew/cleanlab/cleanlab/cleanlab/internal/util.py:88: in value_counts
    return value_counts(x)
/local/data0/moved_data/publishablew/cleanlab/cleanlab/cleanlab/internal/temp.py:13: in value_counts
    unique, counts = np.unique(x, return_counts=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = [['c'], ['a', 'b'], ['a']], return_index = False, return_inverse = False
return_counts = True, axis = None

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        numpy.lib.arraysetops : Module with a number of other functions for
                                performing set operations on arrays.
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: NumPy 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        Examples
        --------
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
>       ar = np.asanyarray(ar)
E       ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (3,) + inhomogeneous part.

/local/data0/moved_data/publishablew/cleanlab/cleanlab/venv/lib/python3.11/site-packages/numpy/lib/arraysetops.py:272: ValueError
=============================== warnings summary ===============================
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py:0
  /local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py:0: PytestCollectionWarning: cannot collect test class 'TestCase' because it has a __new__ constructor (from: tests/test_util.py)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_str
FAILED ../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[integers]
FAILED ../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[strings]
FAILED ../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[multilabel_integers]
FAILED ../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[multilabel_strings]
=================== 5 failed, 16 passed, 1 warning in 0.71s ====================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/cleanlab/cleanlab/venv/bin/python
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/aliredaq/Desktop/ICSE/src/tester/.hypothesis/examples'))
rootdir: /local/data0/moved_data/publishablew/cleanlab/cleanlab
configfile: pyproject.toml
plugins: hypothesis-6.124.1
collecting ... collected 21 items

../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_print_inm 
 Inverse Noise Matrix P(true_label|given_label) of shape (3, 3)
 p(y|s)	s=0	s=1	s=2
	---	---	---
y=0 |	1.0	0.0	0.2
y=1 |	0.0	0.7	0.2
y=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3


 Inverse Noise Matrix P(true_label|given_label) of shape (2, 2)
 p(y|s)	s=0	s=1
	---	---
y=0 |	1.0	0.3
y=1 |	0.0	0.7
	Trace(matrix) = 1.7


 Inverse Noise Matrix P(true_label|given_label) of shape (1, 1)
 p(y|s)	s=0
	---
y=0 |	1
	Trace(matrix) = 1

PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_print_joint 
 Joint Label Noise Distribution Matrix P(given_label, true_label) of shape (3, 3)
 p(s,y)	y=0	y=1	y=2
	---	---	---
s=0 |	0.1	0.0	0.1
s=1 |	0.1	0.1	0.1
s=2 |	0.2	0.1	0.2
	Trace(matrix) = 0.4


 Joint Label Noise Distribution Matrix P(given_label, true_label) of shape (2, 2)
 p(s,y)	y=0	y=1
	---	---
s=0 |	0.2	0.3
s=1 |	0.4	0.1
	Trace(matrix) = 0.3


 Joint Label Noise Distribution Matrix P(given_label, true_label) of shape (1, 1)
 p(s,y)	y=0
	---
s=0 |	1
	Trace(matrix) = 1

PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_print_square 
 A square matrix of shape (3, 3)
 s,y	y=0	y=1	y=2
	---	---	---
s=0 |	1.0	0.0	0.2
s=1 |	0.0	0.7	0.2
s=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3


 A square matrix of shape (3, 3)
 s,y	y=0	y=1	y=2
	---	---	---
s=0 |	1.0	0.0	0.2
s=1 |	0.0	0.7	0.2
s=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3


 A square matrix of shape (3, 3)
 s,y	y=0	y=1	y=2
	---	---	---
s=0 |	1.0	0.0	0.2
s=1 |	0.0	0.7	0.2
s=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3

PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_print_noise_matrix 
 Noise Matrix (aka Noisy Channel) P(given_label|true_label) of shape (3, 3)
 p(s|y)	y=0	y=1	y=2
	---	---	---
s=0 |	1.0	0.0	0.2
s=1 |	0.0	0.7	0.2
s=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3


 Noise Matrix (aka Noisy Channel) P(given_label|true_label) of shape (3, 3)
 p(s|y)	y=0	y=1	y=2
	---	---	---
s=0 |	1.0	0.0	0.2
s=1 |	0.0	0.7	0.2
s=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3


 Noise Matrix (aka Noisy Channel) P(given_label|true_label) of shape (3, 3)
 p(s|y)	y=0	y=1	y=2
	---	---	---
s=0 |	1.0	0.0	0.2
s=1 |	0.0	0.7	0.2
s=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3

PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_pu_f1 PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_str PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[integers] PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[strings] PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[multilabel_integers] PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[multilabel_strings] PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_pu_remove_noise PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_round_preserving_sum PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_one_hot PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_num_unique PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_missing_classes PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_round_preserving_row_totals PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_confusion_matrix PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_confusion_matrix_nonconsecutive PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_format_labels PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_normalized_entropy PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_force_two_dimensions PASSED

=============================== warnings summary ===============================
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py:0
  /local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py:0: PytestCollectionWarning: cannot collect test class 'TestCase' because it has a __new__ constructor (from: tests/test_util.py)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 21 passed, 1 warning in 0.56s =========================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/cleanlab/cleanlab/venv/bin/python
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/aliredaq/Desktop/ICSE/src/tester/.hypothesis/examples'))
rootdir: /local/data0/moved_data/publishablew/cleanlab/cleanlab
configfile: pyproject.toml
plugins: hypothesis-6.124.1
collecting ... collected 21 items

../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_print_inm 
 Inverse Noise Matrix P(true_label|given_label) of shape (3, 3)
 p(y|s)	s=0	s=1	s=2
	---	---	---
y=0 |	1.0	0.0	0.2
y=1 |	0.0	0.7	0.2
y=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3


 Inverse Noise Matrix P(true_label|given_label) of shape (2, 2)
 p(y|s)	s=0	s=1
	---	---
y=0 |	1.0	0.3
y=1 |	0.0	0.7
	Trace(matrix) = 1.7


 Inverse Noise Matrix P(true_label|given_label) of shape (1, 1)
 p(y|s)	s=0
	---
y=0 |	1
	Trace(matrix) = 1

PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_print_joint 
 Joint Label Noise Distribution Matrix P(given_label, true_label) of shape (3, 3)
 p(s,y)	y=0	y=1	y=2
	---	---	---
s=0 |	0.1	0.0	0.1
s=1 |	0.1	0.1	0.1
s=2 |	0.2	0.1	0.2
	Trace(matrix) = 0.4


 Joint Label Noise Distribution Matrix P(given_label, true_label) of shape (2, 2)
 p(s,y)	y=0	y=1
	---	---
s=0 |	0.2	0.3
s=1 |	0.4	0.1
	Trace(matrix) = 0.3


 Joint Label Noise Distribution Matrix P(given_label, true_label) of shape (1, 1)
 p(s,y)	y=0
	---
s=0 |	1
	Trace(matrix) = 1

PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_print_square 
 A square matrix of shape (3, 3)
 s,y	y=0	y=1	y=2
	---	---	---
s=0 |	1.0	0.0	0.2
s=1 |	0.0	0.7	0.2
s=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3


 A square matrix of shape (3, 3)
 s,y	y=0	y=1	y=2
	---	---	---
s=0 |	1.0	0.0	0.2
s=1 |	0.0	0.7	0.2
s=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3


 A square matrix of shape (3, 3)
 s,y	y=0	y=1	y=2
	---	---	---
s=0 |	1.0	0.0	0.2
s=1 |	0.0	0.7	0.2
s=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3

PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_print_noise_matrix 
 Noise Matrix (aka Noisy Channel) P(given_label|true_label) of shape (3, 3)
 p(s|y)	y=0	y=1	y=2
	---	---	---
s=0 |	1.0	0.0	0.2
s=1 |	0.0	0.7	0.2
s=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3


 Noise Matrix (aka Noisy Channel) P(given_label|true_label) of shape (3, 3)
 p(s|y)	y=0	y=1	y=2
	---	---	---
s=0 |	1.0	0.0	0.2
s=1 |	0.0	0.7	0.2
s=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3


 Noise Matrix (aka Noisy Channel) P(given_label|true_label) of shape (3, 3)
 p(s|y)	y=0	y=1	y=2
	---	---	---
s=0 |	1.0	0.0	0.2
s=1 |	0.0	0.7	0.2
s=2 |	0.0	0.3	0.6
	Trace(matrix) = 2.3

PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_pu_f1 PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_str PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[integers] PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[strings] PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[multilabel_integers] PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_value_counts_fill_missing_classes[multilabel_strings] PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_pu_remove_noise PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_round_preserving_sum PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_one_hot PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_num_unique PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_missing_classes PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_round_preserving_row_totals PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_confusion_matrix PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_confusion_matrix_nonconsecutive PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_format_labels PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_normalized_entropy PASSED
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py::test_force_two_dimensions PASSED

=============================== warnings summary ===============================
../../../../../../local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py:0
  /local/data0/moved_data/publishablew/cleanlab/cleanlab/tests/test_util.py:0: PytestCollectionWarning: cannot collect test class 'TestCase' because it has a __new__ constructor (from: tests/test_util.py)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 21 passed, 1 warning in 0.57s =========================
