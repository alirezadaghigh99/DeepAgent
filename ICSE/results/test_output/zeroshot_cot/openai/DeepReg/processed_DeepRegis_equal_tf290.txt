output file:
processed_DeepRegis_equal_tf290.json
function:
is_equal_tf
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'test/unit/test_layer_util.py::test_get_reference_grid FAILED             [  2%]', 'test/unit/test_layer_util.py::TestLinearResample::test_repeat_zero_bound[2] FAILED [ 29%]', 'FAILED test/unit/test_layer_util.py::TestPyramidCombination::test_1d - Import...', 'FAILED test/unit/test_layer_util.py::TestLinearResample::test_repeat_zero_bound[1]', 'FAILED test/unit/test_layer_util.py::TestLinearResample::test_repeat_extrapolation[1]', 'FAILED test/unit/test_layer_util.py::TestLinearResample::test_repeat_zero_bound[2]', 'FAILED test/unit/test_layer_util.py::test_get_reference_grid - ImportError: c...', 'FAILED test/unit/test_layer_util.py::TestWarpGrid::test_identical - ImportErr...', 'test/unit/test_layer_util.py::TestLinearResample::test_repeat_extrapolation[0] FAILED [ 17%]', 'test/unit/test_layer_util.py::TestPyramidCombination::test_2d FAILED     [  9%]', 'test/unit/test_layer_util.py::TestWarpGrid::test_non_identical FAILED    [ 39%]', 'FAILED test/unit/test_layer_util.py::TestWarpGrid::test_non_identical - Impor...', 'test/unit/test_layer_util.py::TestLinearResample::test_repeat_extrapolation[1] FAILED [ 19%]', 'FAILED test/unit/test_layer_util.py::TestLinearResample::test_repeat_extrapolation[2]', 'test/unit/test_layer_util.py::TestPyramidCombination::test_1d FAILED     [  7%]', 'test/unit/test_layer_util.py::TestLinearResample::test_repeat_zero_bound[0] FAILED [ 24%]', 'test/unit/test_layer_util.py::TestLinearResample::test_repeat_extrapolation[2] FAILED [ 21%]', 'FAILED test/unit/test_layer_util.py::TestLinearResample::test_repeat_zero_bound[0]', 'FAILED test/unit/test_layer_util.py::TestPyramidCombination::test_2d - Import...', 'FAILED test/unit/test_layer_util.py::TestLinearResample::test_repeat_extrapolation[0]', 'test/unit/test_layer_util.py::TestLinearResample::test_repeat_zero_bound[1] FAILED [ 26%]', 'test/unit/test_layer_util.py::TestWarpGrid::test_identical FAILED        [ 36%]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.7.16, pytest-6.2.3, py-1.11.0, pluggy-0.13.1 -- /home/aliredaq/anaconda3/envs/deepreg/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/DeepReg/DeepReg, configfile: pytest.ini
plugins: dependency-0.5.1, cov-2.11.1
collecting ... collected 41 items

test/unit/test_layer_util.py::test_get_reference_grid FAILED             [  2%]
test/unit/test_layer_util.py::test_get_n_bits_combinations PASSED        [  4%]
test/unit/test_layer_util.py::TestPyramidCombination::test_1d FAILED     [  7%]
test/unit/test_layer_util.py::TestPyramidCombination::test_2d FAILED     [  9%]
test/unit/test_layer_util.py::TestPyramidCombination::test_error_dim PASSED [ 12%]
test/unit/test_layer_util.py::TestPyramidCombination::test_error_len PASSED [ 14%]
test/unit/test_layer_util.py::TestLinearResample::test_repeat_extrapolation[0] FAILED [ 17%]
test/unit/test_layer_util.py::TestLinearResample::test_repeat_extrapolation[1] FAILED [ 19%]
test/unit/test_layer_util.py::TestLinearResample::test_repeat_extrapolation[2] FAILED [ 21%]
test/unit/test_layer_util.py::TestLinearResample::test_repeat_zero_bound[0] FAILED [ 24%]
test/unit/test_layer_util.py::TestLinearResample::test_repeat_zero_bound[1] FAILED [ 26%]
test/unit/test_layer_util.py::TestLinearResample::test_repeat_zero_bound[2] FAILED [ 29%]
test/unit/test_layer_util.py::TestLinearResample::test_shape_error PASSED [ 31%]
test/unit/test_layer_util.py::TestLinearResample::test_interpolation_error PASSED [ 34%]
test/unit/test_layer_util.py::TestWarpGrid::test_identical FAILED        [ 36%]
test/unit/test_layer_util.py::TestWarpGrid::test_non_identical FAILED    [ 39%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma0-kernel_size0] PASSED [ 41%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma1-kernel_size1] PASSED [ 43%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma2-kernel_size2] PASSED [ 46%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[1-kernel_size3] PASSED [ 48%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[2-kernel_size4] PASSED [ 51%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[5-kernel_size5] PASSED [ 53%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma0] PASSED [ 56%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma1] PASSED [ 58%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma2] PASSED [ 60%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-5-3-1-same-0] PASSED [ 63%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-7-3-1-valid-0] PASSED [ 65%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-3-3-1-full-0] PASSED [ 68%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-6-3-1-same-1] PASSED [ 70%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-8-3-1-valid-1] PASSED [ 73%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-4-3-1-full-1] PASSED [ 75%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-9-3-2-same-0] PASSED [ 78%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-11-3-2-valid-0] PASSED [ 80%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-7-3-2-full-0] PASSED [ 82%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d_err PASSED [ 85%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_n_dim[5-9-3-2-same-0] PASSED [ 87%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_n_dim[input_shape1-output_shape1-3-2-same-expected1] PASSED [ 90%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_n_dim[input_shape2-output_shape2-3-2-same-expected2] PASSED [ 92%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_n_dim[input_shape3-output_shape3-kernel_size3-2-same-expected3] PASSED [ 95%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_n_dim[input_shape4-output_shape4-3-stride4-same-expected4] PASSED [ 97%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_n_dim[input_shape5-output_shape5-kernel_size5-2-same-expected5] PASSED [100%]

=================================== FAILURES ===================================
___________________________ test_get_reference_grid ____________________________

    def test_get_reference_grid():
        """
        Test get_reference_grid by confirming that it generates
        a sample grid test case to is_equal_tf's tolerance level.
        """
        want = tf.constant(
            np.array(
                [[[[0, 0, 0], [0, 0, 1], [0, 0, 2]], [[0, 1, 0], [0, 1, 1], [0, 1, 2]]]],
                dtype=np.float32,
            )
        )
        get = layer_util.get_reference_grid(grid_size=[1, 2, 3])
>       assert is_equal_tf(want, get)

test/unit/test_layer_util.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <tf.Tensor: shape=(1, 2, 3, 3), dtype=float32, numpy=
array([[[[0., 0., 0.],
         [0., 0., 1.],
         [0., 0., 2.]],

        [[0., 1., 0.],
         [0., 1., 1.],
         [0., 1., 2.]]]], dtype=float32)>
y = <tf.Tensor: shape=(1, 2, 3, 3), dtype=float32, numpy=
array([[[[0., 0., 0.],
         [0., 0., 1.],
         [0., 0., 2.]],

        [[0., 1., 0.],
         [0., 1., 1.],
         [0., 1., 2.]]]], dtype=float32)>
atol = 1e-05

    def is_equal_tf(x: Union[tf.Tensor, np.ndarray, List], y: Union[tf.Tensor, np.ndarray, List], atol: float=EPS) -> bool:
>       from .temp import is_equal_tf
E       ImportError: cannot import name 'is_equal_tf' from 'test.unit.temp' (/local/data0/moved_data/publishablew/DeepReg/DeepReg/test/unit/temp.py)

test/unit/util.py:26: ImportError
________________________ TestPyramidCombination.test_1d ________________________

self = <test.unit.test_layer_util.TestPyramidCombination object at 0x79428b045b10>

    def test_1d(self):
        weights = tf.constant(np.array([[0.2]], dtype=np.float32))
        values = tf.constant(np.array([[1], [2]], dtype=np.float32))
    
        # expected = 1 * 0.2 + 2 * 2
        expected = tf.constant(np.array([1.8], dtype=np.float32))
        got = layer_util.pyramid_combination(
            values=values, weight_floor=weights, weight_ceil=1 - weights
        )
>       assert is_equal_tf(got, expected)

test/unit/test_layer_util.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <tf.Tensor: shape=(1,), dtype=float32, numpy=array([1.8000001], dtype=float32)>
y = <tf.Tensor: shape=(1,), dtype=float32, numpy=array([1.8], dtype=float32)>
atol = 1e-05

    def is_equal_tf(x: Union[tf.Tensor, np.ndarray, List], y: Union[tf.Tensor, np.ndarray, List], atol: float=EPS) -> bool:
>       from .temp import is_equal_tf
E       ImportError: cannot import name 'is_equal_tf' from 'test.unit.temp' (/local/data0/moved_data/publishablew/DeepReg/DeepReg/test/unit/temp.py)

test/unit/util.py:26: ImportError
________________________ TestPyramidCombination.test_2d ________________________

self = <test.unit.test_layer_util.TestPyramidCombination object at 0x79428b219bd0>

    def test_2d(self):
        weights = tf.constant(np.array([[0.2], [0.3]], dtype=np.float32))
        values = tf.constant(
            np.array(
                [
                    [1],  # value at corner (0, 0), weight = 0.2 * 0.3
                    [2],  # value at corner (0, 1), weight = 0.2 * 0.7
                    [3],  # value at corner (1, 0), weight = 0.8 * 0.3
                    [4],  # value at corner (1, 1), weight = 0.8 * 0.7
                ],
                dtype=np.float32,
            )
        )
        # expected = 1 * 0.2 * 0.3
        #          + 2 * 0.2 * 0.7
        #          + 3 * 0.8 * 0.3
        #          + 4 * 0.8 * 0.7
        expected = tf.constant(np.array([3.3], dtype=np.float32))
        got = layer_util.pyramid_combination(
            values=values, weight_floor=weights, weight_ceil=1 - weights
        )
>       assert is_equal_tf(got, expected)

test/unit/test_layer_util.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <tf.Tensor: shape=(1,), dtype=float32, numpy=array([3.3000002], dtype=float32)>
y = <tf.Tensor: shape=(1,), dtype=float32, numpy=array([3.3], dtype=float32)>
atol = 1e-05

    def is_equal_tf(x: Union[tf.Tensor, np.ndarray, List], y: Union[tf.Tensor, np.ndarray, List], atol: float=EPS) -> bool:
>       from .temp import is_equal_tf
E       ImportError: cannot import name 'is_equal_tf' from 'test.unit.temp' (/local/data0/moved_data/publishablew/DeepReg/DeepReg/test/unit/temp.py)

test/unit/util.py:26: ImportError
_______________ TestLinearResample.test_repeat_extrapolation[0] ________________

self = <test.unit.test_layer_util.TestLinearResample object at 0x79428b07d550>
channel = 0

    @pytest.mark.parametrize("channel", [0, 1, 2])
    def test_repeat_extrapolation(self, channel):
        x = self.loc[..., 0]
        y = self.loc[..., 1]
        x = tf.clip_by_value(x, self.x_min, self.x_max)
        y = tf.clip_by_value(y, self.y_min, self.y_max)
        expected = 3 * x + y
    
        vol = self.vol
        if channel > 0:
            vol = tf.repeat(vol[..., None], channel, axis=-1)
            expected = tf.repeat(expected[..., None], channel, axis=-1)
    
        got = layer_util.resample(vol=vol, loc=self.loc, zero_boundary=False)
>       assert is_equal_tf(expected, got)

test/unit/test_layer_util.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <tf.Tensor: shape=(1, 4, 3), dtype=float32, numpy=
array([[[0.       , 1.       , 5.       ],
        [1.2      , 3.5      , 7.7      ],
        [0.7      , 2.       , 8.       ],
        [1.9000001, 4.       , 2.1000001]]], dtype=float32)>
y = <tf.Tensor: shape=(1, 4, 3), dtype=float32, numpy=
array([[[0.       , 1.       , 5.       ],
        [1.1999999, 3.5      , 7.7      ],
        [0.7      , 2.       , 8.       ],
        [1.8999999, 4.       , 2.1000001]]], dtype=float32)>
atol = 1e-05

    def is_equal_tf(x: Union[tf.Tensor, np.ndarray, List], y: Union[tf.Tensor, np.ndarray, List], atol: float=EPS) -> bool:
>       from .temp import is_equal_tf
E       ImportError: cannot import name 'is_equal_tf' from 'test.unit.temp' (/local/data0/moved_data/publishablew/DeepReg/DeepReg/test/unit/temp.py)

test/unit/util.py:26: ImportError
_______________ TestLinearResample.test_repeat_extrapolation[1] ________________

self = <test.unit.test_layer_util.TestLinearResample object at 0x79428b0769d0>
channel = 1

    @pytest.mark.parametrize("channel", [0, 1, 2])
    def test_repeat_extrapolation(self, channel):
        x = self.loc[..., 0]
        y = self.loc[..., 1]
        x = tf.clip_by_value(x, self.x_min, self.x_max)
        y = tf.clip_by_value(y, self.y_min, self.y_max)
        expected = 3 * x + y
    
        vol = self.vol
        if channel > 0:
            vol = tf.repeat(vol[..., None], channel, axis=-1)
            expected = tf.repeat(expected[..., None], channel, axis=-1)
    
        got = layer_util.resample(vol=vol, loc=self.loc, zero_boundary=False)
>       assert is_equal_tf(expected, got)

test/unit/test_layer_util.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <tf.Tensor: shape=(1, 4, 3, 1), dtype=float32, numpy=
array([[[[0.       ],
         [1.       ],
         [5.       ]....       ],
         [8.       ]],

        [[1.9000001],
         [4.       ],
         [2.1000001]]]], dtype=float32)>
y = <tf.Tensor: shape=(1, 4, 3, 1), dtype=float32, numpy=
array([[[[0.       ],
         [1.       ],
         [5.       ]....       ],
         [8.       ]],

        [[1.8999999],
         [4.       ],
         [2.1000001]]]], dtype=float32)>
atol = 1e-05

    def is_equal_tf(x: Union[tf.Tensor, np.ndarray, List], y: Union[tf.Tensor, np.ndarray, List], atol: float=EPS) -> bool:
>       from .temp import is_equal_tf
E       ImportError: cannot import name 'is_equal_tf' from 'test.unit.temp' (/local/data0/moved_data/publishablew/DeepReg/DeepReg/test/unit/temp.py)

test/unit/util.py:26: ImportError
_______________ TestLinearResample.test_repeat_extrapolation[2] ________________

self = <test.unit.test_layer_util.TestLinearResample object at 0x79428b07da10>
channel = 2

    @pytest.mark.parametrize("channel", [0, 1, 2])
    def test_repeat_extrapolation(self, channel):
        x = self.loc[..., 0]
        y = self.loc[..., 1]
        x = tf.clip_by_value(x, self.x_min, self.x_max)
        y = tf.clip_by_value(y, self.y_min, self.y_max)
        expected = 3 * x + y
    
        vol = self.vol
        if channel > 0:
            vol = tf.repeat(vol[..., None], channel, axis=-1)
            expected = tf.repeat(expected[..., None], channel, axis=-1)
    
        got = layer_util.resample(vol=vol, loc=self.loc, zero_boundary=False)
>       assert is_equal_tf(expected, got)

test/unit/test_layer_util.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <tf.Tensor: shape=(1, 4, 3, 2), dtype=float32, numpy=
array([[[[0.       , 0.       ],
         [1.       , 1.       ]...

        [[1.9000001, 1.9000001],
         [4.       , 4.       ],
         [2.1000001, 2.1000001]]]], dtype=float32)>
y = <tf.Tensor: shape=(1, 4, 3, 2), dtype=float32, numpy=
array([[[[0.       , 0.       ],
         [1.       , 1.       ]...

        [[1.8999999, 1.8999999],
         [4.       , 4.       ],
         [2.1000001, 2.1000001]]]], dtype=float32)>
atol = 1e-05

    def is_equal_tf(x: Union[tf.Tensor, np.ndarray, List], y: Union[tf.Tensor, np.ndarray, List], atol: float=EPS) -> bool:
>       from .temp import is_equal_tf
E       ImportError: cannot import name 'is_equal_tf' from 'test.unit.temp' (/local/data0/moved_data/publishablew/DeepReg/DeepReg/test/unit/temp.py)

test/unit/util.py:26: ImportError
_________________ TestLinearResample.test_repeat_zero_bound[0] _________________

self = <test.unit.test_layer_util.TestLinearResample object at 0x79428b00f510>
channel = 0

    @pytest.mark.parametrize("channel", [0, 1, 2])
    def test_repeat_zero_bound(self, channel):
        x = self.loc[..., 0]
        y = self.loc[..., 1]
        expected = 3 * x + y
        expected = (
            expected
            * tf.cast(x > self.x_min, tf.float32)
            * tf.cast(x <= self.x_max, tf.float32)
        )
        expected = (
            expected
            * tf.cast(y > self.y_min, tf.float32)
            * tf.cast(y <= self.y_max, tf.float32)
        )
    
        vol = self.vol
        if channel > 0:
            vol = tf.repeat(vol[..., None], channel, axis=-1)
            expected = tf.repeat(expected[..., None], channel, axis=-1)
    
        got = layer_util.resample(vol=vol, loc=self.loc, zero_boundary=True)
>       assert is_equal_tf(expected, got)

test/unit/test_layer_util.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <tf.Tensor: shape=(1, 4, 3), dtype=float32, numpy=
array([[[ 0.       ,  0.       ,  5.       ],
        [ 0.       , ...7      ],
        [-0.       ,  0.       ,  0.       ],
        [ 1.9000001,  4.       ,  2.1000001]]], dtype=float32)>
y = <tf.Tensor: shape=(1, 4, 3), dtype=float32, numpy=
array([[[0.       , 0.       , 5.       ],
        [0.       , 3.5      , 7.7      ],
        [0.       , 0.       , 0.       ],
        [1.9      , 4.       , 2.1000001]]], dtype=float32)>
atol = 1e-05

    def is_equal_tf(x: Union[tf.Tensor, np.ndarray, List], y: Union[tf.Tensor, np.ndarray, List], atol: float=EPS) -> bool:
>       from .temp import is_equal_tf
E       ImportError: cannot import name 'is_equal_tf' from 'test.unit.temp' (/local/data0/moved_data/publishablew/DeepReg/DeepReg/test/unit/temp.py)

test/unit/util.py:26: ImportError
_________________ TestLinearResample.test_repeat_zero_bound[1] _________________

self = <test.unit.test_layer_util.TestLinearResample object at 0x79428b1159d0>
channel = 1

    @pytest.mark.parametrize("channel", [0, 1, 2])
    def test_repeat_zero_bound(self, channel):
        x = self.loc[..., 0]
        y = self.loc[..., 1]
        expected = 3 * x + y
        expected = (
            expected
            * tf.cast(x > self.x_min, tf.float32)
            * tf.cast(x <= self.x_max, tf.float32)
        )
        expected = (
            expected
            * tf.cast(y > self.y_min, tf.float32)
            * tf.cast(y <= self.y_max, tf.float32)
        )
    
        vol = self.vol
        if channel > 0:
            vol = tf.repeat(vol[..., None], channel, axis=-1)
            expected = tf.repeat(expected[..., None], channel, axis=-1)
    
        got = layer_util.resample(vol=vol, loc=self.loc, zero_boundary=True)
>       assert is_equal_tf(expected, got)

test/unit/test_layer_util.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <tf.Tensor: shape=(1, 4, 3, 1), dtype=float32, numpy=
array([[[[ 0.       ],
         [ 0.       ],
         [ 5.     ...    ],
         [ 0.       ]],

        [[ 1.9000001],
         [ 4.       ],
         [ 2.1000001]]]], dtype=float32)>
y = <tf.Tensor: shape=(1, 4, 3, 1), dtype=float32, numpy=
array([[[[0.       ],
         [0.       ],
         [5.       ]....       ],
         [0.       ]],

        [[1.9      ],
         [4.       ],
         [2.1000001]]]], dtype=float32)>
atol = 1e-05

    def is_equal_tf(x: Union[tf.Tensor, np.ndarray, List], y: Union[tf.Tensor, np.ndarray, List], atol: float=EPS) -> bool:
>       from .temp import is_equal_tf
E       ImportError: cannot import name 'is_equal_tf' from 'test.unit.temp' (/local/data0/moved_data/publishablew/DeepReg/DeepReg/test/unit/temp.py)

test/unit/util.py:26: ImportError
_________________ TestLinearResample.test_repeat_zero_bound[2] _________________

self = <test.unit.test_layer_util.TestLinearResample object at 0x79428b1249d0>
channel = 2

    @pytest.mark.parametrize("channel", [0, 1, 2])
    def test_repeat_zero_bound(self, channel):
        x = self.loc[..., 0]
        y = self.loc[..., 1]
        expected = 3 * x + y
        expected = (
            expected
            * tf.cast(x > self.x_min, tf.float32)
            * tf.cast(x <= self.x_max, tf.float32)
        )
        expected = (
            expected
            * tf.cast(y > self.y_min, tf.float32)
            * tf.cast(y <= self.y_max, tf.float32)
        )
    
        vol = self.vol
        if channel > 0:
            vol = tf.repeat(vol[..., None], channel, axis=-1)
            expected = tf.repeat(expected[..., None], channel, axis=-1)
    
        got = layer_util.resample(vol=vol, loc=self.loc, zero_boundary=True)
>       assert is_equal_tf(expected, got)

test/unit/test_layer_util.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <tf.Tensor: shape=(1, 4, 3, 2), dtype=float32, numpy=
array([[[[ 0.       ,  0.       ],
         [ 0.       ,  0.    ...    [[ 1.9000001,  1.9000001],
         [ 4.       ,  4.       ],
         [ 2.1000001,  2.1000001]]]], dtype=float32)>
y = <tf.Tensor: shape=(1, 4, 3, 2), dtype=float32, numpy=
array([[[[0.       , 0.       ],
         [0.       , 0.       ]...

        [[1.9      , 1.9      ],
         [4.       , 4.       ],
         [2.1000001, 2.1000001]]]], dtype=float32)>
atol = 1e-05

    def is_equal_tf(x: Union[tf.Tensor, np.ndarray, List], y: Union[tf.Tensor, np.ndarray, List], atol: float=EPS) -> bool:
>       from .temp import is_equal_tf
E       ImportError: cannot import name 'is_equal_tf' from 'test.unit.temp' (/local/data0/moved_data/publishablew/DeepReg/DeepReg/test/unit/temp.py)

test/unit/util.py:26: ImportError
_________________________ TestWarpGrid.test_identical __________________________

self = <test.unit.test_layer_util.TestWarpGrid object at 0x79428b11a310>

    def test_identical(self):
        theta = tf.constant(np.eye(4, 3).reshape((1, 4, 3)), dtype=tf.float32)
        expected = self.grid[None, ...]  # shape = (1, 1, 2, 3, 3)
        got = layer_util.warp_grid(grid=self.grid, theta=theta)
>       assert is_equal_tf(got, expected)

test/unit/test_layer_util.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <tf.Tensor: shape=(1, 1, 2, 3, 3), dtype=float32, numpy=
array([[[[[0., 0., 0.],
          [0., 0., 1.],
          [0., 0., 2.]],

         [[0., 1., 0.],
          [0., 1., 1.],
          [0., 1., 2.]]]]], dtype=float32)>
y = <tf.Tensor: shape=(1, 1, 2, 3, 3), dtype=float32, numpy=
array([[[[[0., 0., 0.],
          [0., 0., 1.],
          [0., 0., 2.]],

         [[0., 1., 0.],
          [0., 1., 1.],
          [0., 1., 2.]]]]], dtype=float32)>
atol = 1e-05

    def is_equal_tf(x: Union[tf.Tensor, np.ndarray, List], y: Union[tf.Tensor, np.ndarray, List], atol: float=EPS) -> bool:
>       from .temp import is_equal_tf
E       ImportError: cannot import name 'is_equal_tf' from 'test.unit.temp' (/local/data0/moved_data/publishablew/DeepReg/DeepReg/test/unit/temp.py)

test/unit/util.py:26: ImportError
_______________________ TestWarpGrid.test_non_identical ________________________

self = <test.unit.test_layer_util.TestWarpGrid object at 0x79428b123110>

    def test_non_identical(self):
        theta = tf.constant(
            np.array(
                [
                    [
                        [0.86, 0.75, 0.48],
                        [0.07, 0.98, 0.01],
                        [0.72, 0.52, 0.97],
                        [0.12, 0.4, 0.04],
                    ]
                ],
                dtype=np.float32,
            )
        )  # shape = (1, 4, 3)
        expected = tf.constant(
            np.array(
                [
                    [
                        [
                            [[0.12, 0.4, 0.04], [0.84, 0.92, 1.01], [1.56, 1.44, 1.98]],
                            [[0.19, 1.38, 0.05], [0.91, 1.9, 1.02], [1.63, 2.42, 1.99]],
                        ]
                    ]
                ],
                dtype=np.float32,
            )
        )  # shape = (1, 1, 2, 3, 3)
        got = layer_util.warp_grid(grid=self.grid, theta=theta)
>       assert is_equal_tf(got, expected)

test/unit/test_layer_util.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = <tf.Tensor: shape=(1, 1, 2, 3, 3), dtype=float32, numpy=
array([[[[[0.12      , 0.4       , 0.04      ],
          [0.... ],
          [0.91      , 1.9       , 1.02      ],
          [1.6300001 , 2.42      , 1.99      ]]]]], dtype=float32)>
y = <tf.Tensor: shape=(1, 1, 2, 3, 3), dtype=float32, numpy=
array([[[[[0.12, 0.4 , 0.04],
          [0.84, 0.92, 1.01],
 ... 1.98]],

         [[0.19, 1.38, 0.05],
          [0.91, 1.9 , 1.02],
          [1.63, 2.42, 1.99]]]]], dtype=float32)>
atol = 1e-05

    def is_equal_tf(x: Union[tf.Tensor, np.ndarray, List], y: Union[tf.Tensor, np.ndarray, List], atol: float=EPS) -> bool:
>       from .temp import is_equal_tf
E       ImportError: cannot import name 'is_equal_tf' from 'test.unit.temp' (/local/data0/moved_data/publishablew/DeepReg/DeepReg/test/unit/temp.py)

test/unit/util.py:26: ImportError
=========================== short test summary info ============================
FAILED test/unit/test_layer_util.py::test_get_reference_grid - ImportError: c...
FAILED test/unit/test_layer_util.py::TestPyramidCombination::test_1d - Import...
FAILED test/unit/test_layer_util.py::TestPyramidCombination::test_2d - Import...
FAILED test/unit/test_layer_util.py::TestLinearResample::test_repeat_extrapolation[0]
FAILED test/unit/test_layer_util.py::TestLinearResample::test_repeat_extrapolation[1]
FAILED test/unit/test_layer_util.py::TestLinearResample::test_repeat_extrapolation[2]
FAILED test/unit/test_layer_util.py::TestLinearResample::test_repeat_zero_bound[0]
FAILED test/unit/test_layer_util.py::TestLinearResample::test_repeat_zero_bound[1]
FAILED test/unit/test_layer_util.py::TestLinearResample::test_repeat_zero_bound[2]
FAILED test/unit/test_layer_util.py::TestWarpGrid::test_identical - ImportErr...
FAILED test/unit/test_layer_util.py::TestWarpGrid::test_non_identical - Impor...
======================== 11 failed, 30 passed in 1.44s =========================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.7.16, pytest-6.2.3, py-1.11.0, pluggy-0.13.1 -- /home/aliredaq/anaconda3/envs/deepreg/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/DeepReg/DeepReg, configfile: pytest.ini
plugins: dependency-0.5.1, cov-2.11.1
collecting ... collected 41 items

test/unit/test_layer_util.py::test_get_reference_grid PASSED             [  2%]
test/unit/test_layer_util.py::test_get_n_bits_combinations PASSED        [  4%]
test/unit/test_layer_util.py::TestPyramidCombination::test_1d PASSED     [  7%]
test/unit/test_layer_util.py::TestPyramidCombination::test_2d PASSED     [  9%]
test/unit/test_layer_util.py::TestPyramidCombination::test_error_dim PASSED [ 12%]
test/unit/test_layer_util.py::TestPyramidCombination::test_error_len PASSED [ 14%]
test/unit/test_layer_util.py::TestLinearResample::test_repeat_extrapolation[0] PASSED [ 17%]
test/unit/test_layer_util.py::TestLinearResample::test_repeat_extrapolation[1] PASSED [ 19%]
test/unit/test_layer_util.py::TestLinearResample::test_repeat_extrapolation[2] PASSED [ 21%]
test/unit/test_layer_util.py::TestLinearResample::test_repeat_zero_bound[0] PASSED [ 24%]
test/unit/test_layer_util.py::TestLinearResample::test_repeat_zero_bound[1] PASSED [ 26%]
test/unit/test_layer_util.py::TestLinearResample::test_repeat_zero_bound[2] PASSED [ 29%]
test/unit/test_layer_util.py::TestLinearResample::test_shape_error PASSED [ 31%]
test/unit/test_layer_util.py::TestLinearResample::test_interpolation_error PASSED [ 34%]
test/unit/test_layer_util.py::TestWarpGrid::test_identical PASSED        [ 36%]
test/unit/test_layer_util.py::TestWarpGrid::test_non_identical PASSED    [ 39%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma0-kernel_size0] PASSED [ 41%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma1-kernel_size1] PASSED [ 43%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma2-kernel_size2] PASSED [ 46%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[1-kernel_size3] PASSED [ 48%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[2-kernel_size4] PASSED [ 51%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[5-kernel_size5] PASSED [ 53%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma0] PASSED [ 56%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma1] PASSED [ 58%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma2] PASSED [ 60%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-5-3-1-same-0] PASSED [ 63%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-7-3-1-valid-0] PASSED [ 65%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-3-3-1-full-0] PASSED [ 68%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-6-3-1-same-1] PASSED [ 70%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-8-3-1-valid-1] PASSED [ 73%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-4-3-1-full-1] PASSED [ 75%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-9-3-2-same-0] PASSED [ 78%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-11-3-2-valid-0] PASSED [ 80%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-7-3-2-full-0] PASSED [ 82%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d_err PASSED [ 85%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_n_dim[5-9-3-2-same-0] PASSED [ 87%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_n_dim[input_shape1-output_shape1-3-2-same-expected1] PASSED [ 90%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_n_dim[input_shape2-output_shape2-3-2-same-expected2] PASSED [ 92%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_n_dim[input_shape3-output_shape3-kernel_size3-2-same-expected3] PASSED [ 95%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_n_dim[input_shape4-output_shape4-3-stride4-same-expected4] PASSED [ 97%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_n_dim[input_shape5-output_shape5-kernel_size5-2-same-expected5] PASSED [100%]

============================== 41 passed in 1.25s ==============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.7.16, pytest-6.2.3, py-1.11.0, pluggy-0.13.1 -- /home/aliredaq/anaconda3/envs/deepreg/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/DeepReg/DeepReg, configfile: pytest.ini
plugins: dependency-0.5.1, cov-2.11.1
collecting ... collected 41 items

test/unit/test_layer_util.py::test_get_reference_grid PASSED             [  2%]
test/unit/test_layer_util.py::test_get_n_bits_combinations PASSED        [  4%]
test/unit/test_layer_util.py::TestPyramidCombination::test_1d PASSED     [  7%]
test/unit/test_layer_util.py::TestPyramidCombination::test_2d PASSED     [  9%]
test/unit/test_layer_util.py::TestPyramidCombination::test_error_dim PASSED [ 12%]
test/unit/test_layer_util.py::TestPyramidCombination::test_error_len PASSED [ 14%]
test/unit/test_layer_util.py::TestLinearResample::test_repeat_extrapolation[0] PASSED [ 17%]
test/unit/test_layer_util.py::TestLinearResample::test_repeat_extrapolation[1] PASSED [ 19%]
test/unit/test_layer_util.py::TestLinearResample::test_repeat_extrapolation[2] PASSED [ 21%]
test/unit/test_layer_util.py::TestLinearResample::test_repeat_zero_bound[0] PASSED [ 24%]
test/unit/test_layer_util.py::TestLinearResample::test_repeat_zero_bound[1] PASSED [ 26%]
test/unit/test_layer_util.py::TestLinearResample::test_repeat_zero_bound[2] PASSED [ 29%]
test/unit/test_layer_util.py::TestLinearResample::test_shape_error PASSED [ 31%]
test/unit/test_layer_util.py::TestLinearResample::test_interpolation_error PASSED [ 34%]
test/unit/test_layer_util.py::TestWarpGrid::test_identical PASSED        [ 36%]
test/unit/test_layer_util.py::TestWarpGrid::test_non_identical PASSED    [ 39%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma0-kernel_size0] PASSED [ 41%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma1-kernel_size1] PASSED [ 43%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[kernel_sigma2-kernel_size2] PASSED [ 46%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[1-kernel_size3] PASSED [ 48%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[2-kernel_size4] PASSED [ 51%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_kernel_size[5-kernel_size5] PASSED [ 53%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma0] PASSED [ 56%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma1] PASSED [ 58%]
test/unit/test_layer_util.py::TestGaussianFilter3D::test_sum[kernel_sigma2] PASSED [ 60%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-5-3-1-same-0] PASSED [ 63%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-7-3-1-valid-0] PASSED [ 65%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-3-3-1-full-0] PASSED [ 68%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-6-3-1-same-1] PASSED [ 70%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-8-3-1-valid-1] PASSED [ 73%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-4-3-1-full-1] PASSED [ 75%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-9-3-2-same-0] PASSED [ 78%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-11-3-2-valid-0] PASSED [ 80%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d[5-7-3-2-full-0] PASSED [ 82%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_1d_err PASSED [ 85%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_n_dim[5-9-3-2-same-0] PASSED [ 87%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_n_dim[input_shape1-output_shape1-3-2-same-expected1] PASSED [ 90%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_n_dim[input_shape2-output_shape2-3-2-same-expected2] PASSED [ 92%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_n_dim[input_shape3-output_shape3-kernel_size3-2-same-expected3] PASSED [ 95%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_n_dim[input_shape4-output_shape4-3-stride4-same-expected4] PASSED [ 97%]
test/unit/test_layer_util.py::TestDeconvOutputPadding::test_n_dim[input_shape5-output_shape5-kernel_size5-2-same-expected5] PASSED [100%]

============================== 41 passed in 1.28s ==============================
