output file:
processed_classes-lightlyforward26.json
function:
forward
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_neg_temp', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_cuda FAILED [ 50%]', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_1d FAILED [ 40%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_values FAILED [100%]', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding FAILED [ 90%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_cuda', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_neg_temp FAILED [ 80%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda FAILED [ 70%]', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass FAILED [ 30%]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_values', 'FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_1d', '../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank FAILED [ 60%]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/lightly/lightly/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/lightly/lightly
configfile: pyproject.toml
plugins: hydra-core-1.3.2, mock-3.14.0
collecting ... collected 10 items

../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLoss::test__gather_distributed PASSED [ 10%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLoss::test__gather_distributed_dist_not_available PASSED [ 20%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass FAILED [ 30%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_1d FAILED [ 40%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_cuda FAILED [ 50%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank FAILED [ 60%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda FAILED [ 70%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_neg_temp FAILED [ 80%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding FAILED [ 90%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_values FAILED [100%]

=================================== FAILURES ===================================
___________________ TestNTXentLossUnitTest.test_forward_pass ___________________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_forward_pass>

    def test_forward_pass(self):
        loss = NTXentLoss(memory_bank_size=0)
        for bsz in range(1, 20):
            batch_1 = torch.randn((bsz, 32))
            batch_2 = torch.randn((bsz, 32))
    
            # symmetry
>           l1 = loss(batch_1, batch_2)

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[-1.0742, -0.1998, -0.6576, -0.8602,  0.3355, -0.1704,  0.8310, -0.4718,
          0.1141, -0.7569,  1.1924,  ... -0.5744, -1.1934,  0.4167,  2.5152,
         -0.4112,  1.5391,  0.9420,  0.1407, -1.1536,  0.8386, -0.7340,  0.7883]])
out1 = tensor([[-0.0089, -2.2862, -1.9902,  0.2353,  0.6437, -0.7002, -0.4244,  1.1034,
          0.1750, -0.3102, -0.9507, -... -2.2427,  0.8441, -0.8638,  0.6049,
          0.3845, -0.8958,  0.9654,  1.4040, -1.6426, -0.0194,  0.2083,  0.9801]])

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1, eps=self.eps)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
_________________ TestNTXentLossUnitTest.test_forward_pass_1d __________________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_forward_pass_1d>

    def test_forward_pass_1d(self):
        loss = NTXentLoss(memory_bank_size=0)
        for bsz in range(1, 20):
            batch_1 = torch.randn((bsz, 1))
            batch_2 = torch.randn((bsz, 1))
    
            # symmetry
>           l1 = loss(batch_1, batch_2)

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[0.1245]]), out1 = tensor([[0.9439]])

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1, eps=self.eps)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
________________ TestNTXentLossUnitTest.test_forward_pass_cuda _________________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_forward_pass_cuda>

    @unittest.skipUnless(torch.cuda.is_available(), "No cuda")
    def test_forward_pass_cuda(self):
        loss = NTXentLoss(memory_bank_size=0)
        for bsz in range(1, 20):
            batch_1 = torch.randn((bsz, 32)).cuda()
            batch_2 = torch.randn((bsz, 32)).cuda()
    
            # symmetry
>           l1 = loss(batch_1, batch_2)

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[-9.1768e-01, -5.9484e-01, -5.2612e-01,  4.9928e-01, -4.5317e-01,
         -3.6268e-02,  3.0450e+00, -3.4860e-...  3.8612e-01, -7.1580e-02, -2.1677e+00, -4.6250e-01, -1.6583e+00,
         -1.2253e+00,  8.8163e-01]], device='cuda:0')
out1 = tensor([[-0.0450, -0.3664, -1.4499, -1.1814,  1.4223, -0.0654, -0.4807,  0.1212,
         -0.4811,  0.4991, -0.3021,  ...43, -2.0327,
         -0.8325, -1.3408, -0.8894, -0.1222,  0.7714,  0.4124,  1.4570, -0.2020]],
       device='cuda:0')

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1, eps=self.eps)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
_____________ TestNTXentLossUnitTest.test_forward_pass_memory_bank _____________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_forward_pass_memory_bank>

    def test_forward_pass_memory_bank(self):
        loss = NTXentLoss(memory_bank_size=64)
        for bsz in range(1, 20):
            batch_1 = torch.randn((bsz, 32))
            batch_2 = torch.randn((bsz, 32))
>           l = loss(batch_1, batch_2)

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[-0.9148, -0.2058,  0.4069, -0.7387, -0.5951, -0.1816,  0.1972, -0.4129,
          0.4673, -2.1232, -0.3567, -...  0.3393, -0.0322, -0.0070,  0.9259,
         -1.3302, -0.3941, -0.7522,  1.3010, -1.4178, -2.1801, -0.4004,  1.0640]])
out1 = tensor([[ 1.5349, -0.5079, -0.9354, -0.1368,  0.6401,  1.7257, -0.6256,  0.7457,
          1.0536, -0.3726,  0.4646, -... -0.2196, -0.2793, -0.5670, -1.1933,
          0.7545, -0.2489, -0.9885, -0.1558,  1.1445,  1.9166, -1.0099,  1.4412]])

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1, eps=self.eps)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
__________ TestNTXentLossUnitTest.test_forward_pass_memory_bank_cuda ___________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_forward_pass_memory_bank_cuda>

    @unittest.skipUnless(torch.cuda.is_available(), "No cuda")
    def test_forward_pass_memory_bank_cuda(self):
        loss = NTXentLoss(memory_bank_size=64)
        for bsz in range(1, 20):
            batch_1 = torch.randn((bsz, 32)).cuda()
            batch_2 = torch.randn((bsz, 32)).cuda()
>           l = loss(batch_1, batch_2)

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[ 0.9154,  0.3555, -0.2554, -0.2706, -1.3225, -0.2084,  0.8044, -0.6487,
         -0.7024,  0.9457, -0.0429,  ...49,  1.2476,
          0.6636, -0.6852, -0.5931, -0.9843, -1.5588,  0.2517,  1.0581,  0.9967]],
       device='cuda:0')
out1 = tensor([[-0.7745,  0.6956,  0.2784,  0.3671, -0.0598, -0.0967, -0.4733, -0.2431,
          0.1575,  0.2033,  0.7130, -...81,  0.8902,
          1.1236, -1.1868, -1.1575,  1.4868,  0.8035,  0.4160,  0.2363, -0.7964]],
       device='cuda:0')

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1, eps=self.eps)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
______________ TestNTXentLossUnitTest.test_forward_pass_neg_temp _______________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_forward_pass_neg_temp>

    def test_forward_pass_neg_temp(self):
        loss = NTXentLoss(temperature=-1.0, memory_bank_size=0)
        for bsz in range(1, 20):
            batch_1 = torch.randn((bsz, 32))
            batch_2 = torch.randn((bsz, 32))
    
            # symmetry
>           l1 = loss(batch_1, batch_2)

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:162: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[ 0.9886,  1.5092,  0.1875,  0.0789, -0.2494, -0.5492, -0.7459, -0.4303,
          2.6086,  1.5128,  1.7696,  ...  1.7779, -0.5574,  0.8342, -0.1137,
         -0.4309, -1.4203,  0.6092,  0.1879, -0.6558, -0.3800, -0.0717, -0.1264]])
out1 = tensor([[ 1.9605,  1.2901, -1.7465,  1.1184, -0.2436,  1.1224, -0.4610,  0.7033,
          1.1831,  0.5807, -1.4699,  ...  1.2009,  1.3533,  1.5525,  0.4393,
         -2.1497, -0.4834,  0.0563,  0.7274, -0.5707, -0.9629, -2.0257, -1.1727]])

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1, eps=self.eps)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
____________ TestNTXentLossUnitTest.test_with_correlated_embedding _____________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_with_correlated_embedding>

    def test_with_correlated_embedding(self):
        for n_samples in [1, 2, 8, 16]:
            for memory_bank_size in [0, 1, 2, 8, 15, 16, 17]:
                for temperature in [0.1, 1, 7]:
                    for gather_distributed in [False, True]:
                        out0 = np.random.random((n_samples, 1))
                        out1 = np.random.random((n_samples, 1))
                        out0 = np.concatenate([out0, 2 * out0], axis=1)
                        out1 = np.concatenate([out1, 2 * out1], axis=1)
                        out0 = torch.FloatTensor(out0)
                        out1 = torch.FloatTensor(out1)
                        out0.requires_grad = True
    
                        with self.subTest(
                            msg=(
                                f"n_samples: {n_samples}, memory_bank_size: {memory_bank_size},"
                                f"temperature: {temperature}, gather_distributed: {gather_distributed}"
                            )
                        ):
                            loss_function = NTXentLoss(
                                temperature=temperature,
                                memory_bank_size=memory_bank_size,
                            )
                            if memory_bank_size > 0:
                                for i in range(int(memory_bank_size / n_samples) + 2):
                                    # fill the memory bank over multiple rounds
                                    loss = float(loss_function(out0, out1))
                                expected_loss = -1 * np.log(1 / (memory_bank_size + 1))
                            else:
>                               loss = float(loss_function(out0, out1))

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[0.5223, 1.0446]], requires_grad=True)
out1 = tensor([[0.0323, 0.0646]])

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1, eps=self.eps)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
___________________ TestNTXentLossUnitTest.test_with_values ____________________

self = <test_NTXentLoss.TestNTXentLossUnitTest testMethod=test_with_values>

    def test_with_values(self):
        for n_samples in [1, 2, 4]:
            for dimension in [1, 2, 16, 64]:
                for temperature in [0.1, 1, 10]:
                    for gather_distributed in [False, True]:
                        out0 = np.random.normal(0, 1, size=(n_samples, dimension))
                        out1 = np.random.normal(0, 1, size=(n_samples, dimension))
                        with self.subTest(
                            msg=(
                                f"out0.shape={out0.shape}, temperature={temperature}, "
                                f"gather_distributed={gather_distributed}"
                            )
                        ):
                            out0 = torch.FloatTensor(out0)
                            out1 = torch.FloatTensor(out1)
    
                            loss_function = NTXentLoss(
                                temperature=temperature,
                                gather_distributed=gather_distributed,
                            )
>                           l1 = float(loss_function(out0, out1))

/local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/local/data0/moved_data/publishablew/lightly/lightly/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NTXentLoss(
  (cross_entropy): CrossEntropyLoss()
)
out0 = tensor([[-0.0685]]), out1 = tensor([[0.4234]])

    def forward(self, out0: torch.Tensor, out1: torch.Tensor) -> torch.Tensor:
>       out0 = F.normalize(out0, p=2, dim=1, eps=self.eps)
E       NameError: name 'F' is not defined

/local/data0/moved_data/publishablew/lightly/lightly/lightly/loss/ntx_ent_loss.py:82: NameError
=============================== warnings summary ===============================
tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank
tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=64' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_1d
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_cuda
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_neg_temp
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
FAILED ../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_values
=================== 8 failed, 2 passed, 2 warnings in 3.02s ====================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/lightly/lightly/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/lightly/lightly
configfile: pyproject.toml
plugins: hydra-core-1.3.2, mock-3.14.0
collecting ... collected 10 items

../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLoss::test__gather_distributed PASSED [ 10%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLoss::test__gather_distributed_dist_not_available PASSED [ 20%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass PASSED [ 30%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_1d PASSED [ 40%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_cuda PASSED [ 50%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank PASSED [ 60%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda PASSED [ 70%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_neg_temp PASSED [ 80%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding PASSED [ 90%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_values PASSED [100%]

=============================== warnings summary ===============================
tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank
tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=64' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=1' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=2' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=8' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=15' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=16' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=17' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py: 144 warnings
  /local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:66: DeprecationWarning: __array__ implementation doesn't accept a copy keyword, so passing copy=False failed. __array__ must implement 'dtype' and 'copy' keyword arguments. To learn more, see the migration guide https://numpy.org/devdocs/numpy_2_0_migration_guide.html#adapting-to-changes-in-the-copy-keyword
    out0 = np.array(out0)

tests/loss/test_NTXentLoss.py: 144 warnings
  /local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:67: DeprecationWarning: __array__ implementation doesn't accept a copy keyword, so passing copy=False failed. __array__ must implement 'dtype' and 'copy' keyword arguments. To learn more, see the migration guide https://numpy.org/devdocs/numpy_2_0_migration_guide.html#adapting-to-changes-in-the-copy-keyword
    out1 = np.array(out1)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================= 10 passed, 296 warnings in 3.12s =======================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/lightly/lightly/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/lightly/lightly
configfile: pyproject.toml
plugins: hydra-core-1.3.2, mock-3.14.0
collecting ... collected 10 items

../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLoss::test__gather_distributed PASSED [ 10%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLoss::test__gather_distributed_dist_not_available PASSED [ 20%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass PASSED [ 30%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_1d PASSED [ 40%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_cuda PASSED [ 50%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank PASSED [ 60%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda PASSED [ 70%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_neg_temp PASSED [ 80%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding PASSED [ 90%]
../../../../../../local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_values PASSED [100%]

=============================== warnings summary ===============================
tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank
tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_forward_pass_memory_bank_cuda
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=64' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=1' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=2' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=8' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=15' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=16' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py::TestNTXentLossUnitTest::test_with_correlated_embedding
  /local/data0/moved_data/publishablew/lightly/lightly/lightly/models/modules/memory_bank.py:89: UserWarning: Memory bank size 'size=17' does not specify feature dimension. It is recommended to set the feature dimension with 'size=(n, dim)' when creating the memory bank. Distributed training might fail if the feature dimension is not set.
    warnings.warn(

tests/loss/test_NTXentLoss.py: 144 warnings
  /local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:66: DeprecationWarning: __array__ implementation doesn't accept a copy keyword, so passing copy=False failed. __array__ must implement 'dtype' and 'copy' keyword arguments. To learn more, see the migration guide https://numpy.org/devdocs/numpy_2_0_migration_guide.html#adapting-to-changes-in-the-copy-keyword
    out0 = np.array(out0)

tests/loss/test_NTXentLoss.py: 144 warnings
  /local/data0/moved_data/publishablew/lightly/lightly/tests/loss/test_NTXentLoss.py:67: DeprecationWarning: __array__ implementation doesn't accept a copy keyword, so passing copy=False failed. __array__ must implement 'dtype' and 'copy' keyword arguments. To learn more, see the migration guide https://numpy.org/devdocs/numpy_2_0_migration_guide.html#adapting-to-changes-in-the-copy-keyword
    out1 = np.array(out1)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================= 10 passed, 296 warnings in 3.07s =======================
