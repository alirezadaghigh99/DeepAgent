output file:
processed_scikit-learnsmacof_single71.json
function:
_smacof_single
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py::test_normed_stress[1.5]', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py::test_normed_stress[2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py::test_normed_stress[2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py::test_normed_stress[0.5]', 'FAILED', '../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py::test_normed_stress[1.5] FAILED'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 3 items

../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py::test_normed_stress[0.5] I: Seeding RNGs with 475506543
FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py::test_normed_stress[1.5] FAILED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py::test_normed_stress[2] FAILED

=================================== FAILURES ===================================
___________________________ test_normed_stress[0.5] ____________________________

k = 0.5

    @pytest.mark.parametrize("k", [0.5, 1.5, 2])
    def test_normed_stress(k):
        """Test that non-metric MDS normalized stress is scale-invariant."""
        sim = np.array([[0, 5, 3, 4], [5, 0, 2, 2], [3, 2, 0, 1], [4, 2, 1, 0]])
    
>       X1, stress1 = mds.smacof(sim, metric=False, max_iter=5, random_state=0)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dissimilarities = array([[0, 5, 3, 4],
       [5, 0, 2, 2],
       [3, 2, 0, 1],
       [4, 2, 1, 0]])

    @validate_params({'dissimilarities': ['array-like'], 'metric': ['boolean'], 'n_components': [Interval(Integral, 1, None, closed='left')], 'init': ['array-like', None], 'n_init': [Interval(Integral, 1, None, closed='left')], 'n_jobs': [Integral, None], 'max_iter': [Interval(Integral, 1, None, closed='left')], 'verbose': ['verbose'], 'eps': [Interval(Real, 0, None, closed='left')], 'random_state': ['random_state'], 'return_n_iter': ['boolean'], 'normalized_stress': ['boolean', StrOptions({'auto'})]}, prefer_skip_nested_validation=True)
    def smacof(dissimilarities, *, metric=True, n_components=2, init=None, n_init=8, n_jobs=None, max_iter=300, verbose=0, eps=0.001, random_state=None, return_n_iter=False, normalized_stress='auto'):
        """Compute multidimensional scaling using the SMACOF algorithm.
    
        The SMACOF (Scaling by MAjorizing a COmplicated Function) algorithm is a
        multidimensional scaling algorithm which minimizes an objective function
        (the *stress*) using a majorization technique. Stress majorization, also
        known as the Guttman Transform, guarantees a monotone convergence of
        stress, and is more powerful than traditional techniques such as gradient
        descent.
    
        The SMACOF algorithm for metric MDS can be summarized by the following
        steps:
    
        1. Set an initial start configuration, randomly or not.
        2. Compute the stress
        3. Compute the Guttman Transform
        4. Iterate 2 and 3 until convergence.
    
        The nonmetric algorithm adds a monotonic regression step before computing
        the stress.
    
        Parameters
        ----------
        dissimilarities : array-like of shape (n_samples, n_samples)
            Pairwise dissimilarities between the points. Must be symmetric.
    
        metric : bool, default=True
            Compute metric or nonmetric SMACOF algorithm.
            When ``False`` (i.e. non-metric MDS), dissimilarities with 0 are considered as
            missing values.
    
        n_components : int, default=2
            Number of dimensions in which to immerse the dissimilarities. If an
            ``init`` array is provided, this option is overridden and the shape of
            ``init`` is used to determine the dimensionality of the embedding
            space.
    
        init : array-like of shape (n_samples, n_components), default=None
            Starting configuration of the embedding to initialize the algorithm. By
            default, the algorithm is initialized with a randomly chosen array.
    
        n_init : int, default=8
            Number of times the SMACOF algorithm will be run with different
            initializations. The final results will be the best output of the runs,
            determined by the run with the smallest final stress. If ``init`` is
            provided, this option is overridden and a single run is performed.
    
        n_jobs : int, default=None
            The number of jobs to use for the computation. If multiple
            initializations are used (``n_init``), each run of the algorithm is
            computed in parallel.
    
            ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.
            ``-1`` means using all processors. See :term:`Glossary <n_jobs>`
            for more details.
    
        max_iter : int, default=300
            Maximum number of iterations of the SMACOF algorithm for a single run.
    
        verbose : int, default=0
            Level of verbosity.
    
        eps : float, default=1e-3
            Relative tolerance with respect to stress at which to declare
            convergence. The value of `eps` should be tuned separately depending
            on whether or not `normalized_stress` is being used.
    
        random_state : int, RandomState instance or None, default=None
            Determines the random number generator used to initialize the centers.
            Pass an int for reproducible results across multiple function calls.
            See :term:`Glossary <random_state>`.
    
        return_n_iter : bool, default=False
            Whether or not to return the number of iterations.
    
        normalized_stress : bool or "auto" default="auto"
            Whether use and return normed stress value (Stress-1) instead of raw
            stress calculated by default. Only supported in non-metric MDS.
    
            .. versionadded:: 1.2
    
            .. versionchanged:: 1.4
               The default value changed from `False` to `"auto"` in version 1.4.
    
        Returns
        -------
        X : ndarray of shape (n_samples, n_components)
            Coordinates of the points in a ``n_components``-space.
    
        stress : float
            The final value of the stress (sum of squared distance of the
            disparities and the distances for all constrained points).
            If `normalized_stress=True`, and `metric=False` returns Stress-1.
            A value of 0 indicates "perfect" fit, 0.025 excellent, 0.05 good,
            0.1 fair, and 0.2 poor [1]_.
    
        n_iter : int
            The number of iterations corresponding to the best stress. Returned
            only if ``return_n_iter`` is set to ``True``.
    
        References
        ----------
        .. [1] "Nonmetric multidimensional scaling: a numerical method" Kruskal, J.
               Psychometrika, 29 (1964)
    
        .. [2] "Multidimensional scaling by optimizing goodness of fit to a nonmetric
               hypothesis" Kruskal, J. Psychometrika, 29, (1964)
    
        .. [3] "Modern Multidimensional Scaling - Theory and Applications" Borg, I.;
               Groenen P. Springer Series in Statistics (1997)
    
        Examples
        --------
        >>> import numpy as np
        >>> from sklearn.manifold import smacof
        >>> from sklearn.metrics import euclidean_distances
        >>> X = np.array([[0, 1, 2], [1, 0, 3],[2, 3, 0]])
        >>> dissimilarities = euclidean_distances(X)
        >>> mds_result, stress = smacof(dissimilarities, n_components=2, random_state=42)
        >>> mds_result
        array([[ 0.05... -1.07... ],
               [ 1.74..., -0.75...],
               [-1.79...,  1.83...]])
        >>> stress
        np.float64(0.0012...)
        """
        dissimilarities = check_array(dissimilarities)
        random_state = check_random_state(random_state)
        if normalized_stress == 'auto':
            normalized_stress = not metric
        if normalized_stress and metric:
            raise ValueError('Normalized stress is not supported for metric MDS. Either set `normalized_stress=False` or use `metric=False`.')
        if hasattr(init, '__array__'):
            init = np.asarray(init).copy()
            if not n_init == 1:
                warnings.warn('Explicit initial positions passed: performing only one init of the MDS instead of %d' % n_init)
                n_init = 1
        best_pos, best_stress = (None, None)
        if effective_n_jobs(n_jobs) == 1:
            for it in range(n_init):
>               pos, stress, n_iter_ = _smacof_single(dissimilarities, metric=metric, n_components=n_components, init=init, max_iter=max_iter, verbose=verbose, eps=eps, random_state=random_state, normalized_stress=normalized_stress)
E               ValueError: too many values to unpack (expected 3)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/_mds.py:279: ValueError
___________________________ test_normed_stress[1.5] ____________________________

k = 1.5

    @pytest.mark.parametrize("k", [0.5, 1.5, 2])
    def test_normed_stress(k):
        """Test that non-metric MDS normalized stress is scale-invariant."""
        sim = np.array([[0, 5, 3, 4], [5, 0, 2, 2], [3, 2, 0, 1], [4, 2, 1, 0]])
    
>       X1, stress1 = mds.smacof(sim, metric=False, max_iter=5, random_state=0)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dissimilarities = array([[0, 5, 3, 4],
       [5, 0, 2, 2],
       [3, 2, 0, 1],
       [4, 2, 1, 0]])

    @validate_params({'dissimilarities': ['array-like'], 'metric': ['boolean'], 'n_components': [Interval(Integral, 1, None, closed='left')], 'init': ['array-like', None], 'n_init': [Interval(Integral, 1, None, closed='left')], 'n_jobs': [Integral, None], 'max_iter': [Interval(Integral, 1, None, closed='left')], 'verbose': ['verbose'], 'eps': [Interval(Real, 0, None, closed='left')], 'random_state': ['random_state'], 'return_n_iter': ['boolean'], 'normalized_stress': ['boolean', StrOptions({'auto'})]}, prefer_skip_nested_validation=True)
    def smacof(dissimilarities, *, metric=True, n_components=2, init=None, n_init=8, n_jobs=None, max_iter=300, verbose=0, eps=0.001, random_state=None, return_n_iter=False, normalized_stress='auto'):
        """Compute multidimensional scaling using the SMACOF algorithm.
    
        The SMACOF (Scaling by MAjorizing a COmplicated Function) algorithm is a
        multidimensional scaling algorithm which minimizes an objective function
        (the *stress*) using a majorization technique. Stress majorization, also
        known as the Guttman Transform, guarantees a monotone convergence of
        stress, and is more powerful than traditional techniques such as gradient
        descent.
    
        The SMACOF algorithm for metric MDS can be summarized by the following
        steps:
    
        1. Set an initial start configuration, randomly or not.
        2. Compute the stress
        3. Compute the Guttman Transform
        4. Iterate 2 and 3 until convergence.
    
        The nonmetric algorithm adds a monotonic regression step before computing
        the stress.
    
        Parameters
        ----------
        dissimilarities : array-like of shape (n_samples, n_samples)
            Pairwise dissimilarities between the points. Must be symmetric.
    
        metric : bool, default=True
            Compute metric or nonmetric SMACOF algorithm.
            When ``False`` (i.e. non-metric MDS), dissimilarities with 0 are considered as
            missing values.
    
        n_components : int, default=2
            Number of dimensions in which to immerse the dissimilarities. If an
            ``init`` array is provided, this option is overridden and the shape of
            ``init`` is used to determine the dimensionality of the embedding
            space.
    
        init : array-like of shape (n_samples, n_components), default=None
            Starting configuration of the embedding to initialize the algorithm. By
            default, the algorithm is initialized with a randomly chosen array.
    
        n_init : int, default=8
            Number of times the SMACOF algorithm will be run with different
            initializations. The final results will be the best output of the runs,
            determined by the run with the smallest final stress. If ``init`` is
            provided, this option is overridden and a single run is performed.
    
        n_jobs : int, default=None
            The number of jobs to use for the computation. If multiple
            initializations are used (``n_init``), each run of the algorithm is
            computed in parallel.
    
            ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.
            ``-1`` means using all processors. See :term:`Glossary <n_jobs>`
            for more details.
    
        max_iter : int, default=300
            Maximum number of iterations of the SMACOF algorithm for a single run.
    
        verbose : int, default=0
            Level of verbosity.
    
        eps : float, default=1e-3
            Relative tolerance with respect to stress at which to declare
            convergence. The value of `eps` should be tuned separately depending
            on whether or not `normalized_stress` is being used.
    
        random_state : int, RandomState instance or None, default=None
            Determines the random number generator used to initialize the centers.
            Pass an int for reproducible results across multiple function calls.
            See :term:`Glossary <random_state>`.
    
        return_n_iter : bool, default=False
            Whether or not to return the number of iterations.
    
        normalized_stress : bool or "auto" default="auto"
            Whether use and return normed stress value (Stress-1) instead of raw
            stress calculated by default. Only supported in non-metric MDS.
    
            .. versionadded:: 1.2
    
            .. versionchanged:: 1.4
               The default value changed from `False` to `"auto"` in version 1.4.
    
        Returns
        -------
        X : ndarray of shape (n_samples, n_components)
            Coordinates of the points in a ``n_components``-space.
    
        stress : float
            The final value of the stress (sum of squared distance of the
            disparities and the distances for all constrained points).
            If `normalized_stress=True`, and `metric=False` returns Stress-1.
            A value of 0 indicates "perfect" fit, 0.025 excellent, 0.05 good,
            0.1 fair, and 0.2 poor [1]_.
    
        n_iter : int
            The number of iterations corresponding to the best stress. Returned
            only if ``return_n_iter`` is set to ``True``.
    
        References
        ----------
        .. [1] "Nonmetric multidimensional scaling: a numerical method" Kruskal, J.
               Psychometrika, 29 (1964)
    
        .. [2] "Multidimensional scaling by optimizing goodness of fit to a nonmetric
               hypothesis" Kruskal, J. Psychometrika, 29, (1964)
    
        .. [3] "Modern Multidimensional Scaling - Theory and Applications" Borg, I.;
               Groenen P. Springer Series in Statistics (1997)
    
        Examples
        --------
        >>> import numpy as np
        >>> from sklearn.manifold import smacof
        >>> from sklearn.metrics import euclidean_distances
        >>> X = np.array([[0, 1, 2], [1, 0, 3],[2, 3, 0]])
        >>> dissimilarities = euclidean_distances(X)
        >>> mds_result, stress = smacof(dissimilarities, n_components=2, random_state=42)
        >>> mds_result
        array([[ 0.05... -1.07... ],
               [ 1.74..., -0.75...],
               [-1.79...,  1.83...]])
        >>> stress
        np.float64(0.0012...)
        """
        dissimilarities = check_array(dissimilarities)
        random_state = check_random_state(random_state)
        if normalized_stress == 'auto':
            normalized_stress = not metric
        if normalized_stress and metric:
            raise ValueError('Normalized stress is not supported for metric MDS. Either set `normalized_stress=False` or use `metric=False`.')
        if hasattr(init, '__array__'):
            init = np.asarray(init).copy()
            if not n_init == 1:
                warnings.warn('Explicit initial positions passed: performing only one init of the MDS instead of %d' % n_init)
                n_init = 1
        best_pos, best_stress = (None, None)
        if effective_n_jobs(n_jobs) == 1:
            for it in range(n_init):
>               pos, stress, n_iter_ = _smacof_single(dissimilarities, metric=metric, n_components=n_components, init=init, max_iter=max_iter, verbose=verbose, eps=eps, random_state=random_state, normalized_stress=normalized_stress)
E               ValueError: too many values to unpack (expected 3)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/_mds.py:279: ValueError
____________________________ test_normed_stress[2] _____________________________

k = 2

    @pytest.mark.parametrize("k", [0.5, 1.5, 2])
    def test_normed_stress(k):
        """Test that non-metric MDS normalized stress is scale-invariant."""
        sim = np.array([[0, 5, 3, 4], [5, 0, 2, 2], [3, 2, 0, 1], [4, 2, 1, 0]])
    
>       X1, stress1 = mds.smacof(sim, metric=False, max_iter=5, random_state=0)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dissimilarities = array([[0, 5, 3, 4],
       [5, 0, 2, 2],
       [3, 2, 0, 1],
       [4, 2, 1, 0]])

    @validate_params({'dissimilarities': ['array-like'], 'metric': ['boolean'], 'n_components': [Interval(Integral, 1, None, closed='left')], 'init': ['array-like', None], 'n_init': [Interval(Integral, 1, None, closed='left')], 'n_jobs': [Integral, None], 'max_iter': [Interval(Integral, 1, None, closed='left')], 'verbose': ['verbose'], 'eps': [Interval(Real, 0, None, closed='left')], 'random_state': ['random_state'], 'return_n_iter': ['boolean'], 'normalized_stress': ['boolean', StrOptions({'auto'})]}, prefer_skip_nested_validation=True)
    def smacof(dissimilarities, *, metric=True, n_components=2, init=None, n_init=8, n_jobs=None, max_iter=300, verbose=0, eps=0.001, random_state=None, return_n_iter=False, normalized_stress='auto'):
        """Compute multidimensional scaling using the SMACOF algorithm.
    
        The SMACOF (Scaling by MAjorizing a COmplicated Function) algorithm is a
        multidimensional scaling algorithm which minimizes an objective function
        (the *stress*) using a majorization technique. Stress majorization, also
        known as the Guttman Transform, guarantees a monotone convergence of
        stress, and is more powerful than traditional techniques such as gradient
        descent.
    
        The SMACOF algorithm for metric MDS can be summarized by the following
        steps:
    
        1. Set an initial start configuration, randomly or not.
        2. Compute the stress
        3. Compute the Guttman Transform
        4. Iterate 2 and 3 until convergence.
    
        The nonmetric algorithm adds a monotonic regression step before computing
        the stress.
    
        Parameters
        ----------
        dissimilarities : array-like of shape (n_samples, n_samples)
            Pairwise dissimilarities between the points. Must be symmetric.
    
        metric : bool, default=True
            Compute metric or nonmetric SMACOF algorithm.
            When ``False`` (i.e. non-metric MDS), dissimilarities with 0 are considered as
            missing values.
    
        n_components : int, default=2
            Number of dimensions in which to immerse the dissimilarities. If an
            ``init`` array is provided, this option is overridden and the shape of
            ``init`` is used to determine the dimensionality of the embedding
            space.
    
        init : array-like of shape (n_samples, n_components), default=None
            Starting configuration of the embedding to initialize the algorithm. By
            default, the algorithm is initialized with a randomly chosen array.
    
        n_init : int, default=8
            Number of times the SMACOF algorithm will be run with different
            initializations. The final results will be the best output of the runs,
            determined by the run with the smallest final stress. If ``init`` is
            provided, this option is overridden and a single run is performed.
    
        n_jobs : int, default=None
            The number of jobs to use for the computation. If multiple
            initializations are used (``n_init``), each run of the algorithm is
            computed in parallel.
    
            ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.
            ``-1`` means using all processors. See :term:`Glossary <n_jobs>`
            for more details.
    
        max_iter : int, default=300
            Maximum number of iterations of the SMACOF algorithm for a single run.
    
        verbose : int, default=0
            Level of verbosity.
    
        eps : float, default=1e-3
            Relative tolerance with respect to stress at which to declare
            convergence. The value of `eps` should be tuned separately depending
            on whether or not `normalized_stress` is being used.
    
        random_state : int, RandomState instance or None, default=None
            Determines the random number generator used to initialize the centers.
            Pass an int for reproducible results across multiple function calls.
            See :term:`Glossary <random_state>`.
    
        return_n_iter : bool, default=False
            Whether or not to return the number of iterations.
    
        normalized_stress : bool or "auto" default="auto"
            Whether use and return normed stress value (Stress-1) instead of raw
            stress calculated by default. Only supported in non-metric MDS.
    
            .. versionadded:: 1.2
    
            .. versionchanged:: 1.4
               The default value changed from `False` to `"auto"` in version 1.4.
    
        Returns
        -------
        X : ndarray of shape (n_samples, n_components)
            Coordinates of the points in a ``n_components``-space.
    
        stress : float
            The final value of the stress (sum of squared distance of the
            disparities and the distances for all constrained points).
            If `normalized_stress=True`, and `metric=False` returns Stress-1.
            A value of 0 indicates "perfect" fit, 0.025 excellent, 0.05 good,
            0.1 fair, and 0.2 poor [1]_.
    
        n_iter : int
            The number of iterations corresponding to the best stress. Returned
            only if ``return_n_iter`` is set to ``True``.
    
        References
        ----------
        .. [1] "Nonmetric multidimensional scaling: a numerical method" Kruskal, J.
               Psychometrika, 29 (1964)
    
        .. [2] "Multidimensional scaling by optimizing goodness of fit to a nonmetric
               hypothesis" Kruskal, J. Psychometrika, 29, (1964)
    
        .. [3] "Modern Multidimensional Scaling - Theory and Applications" Borg, I.;
               Groenen P. Springer Series in Statistics (1997)
    
        Examples
        --------
        >>> import numpy as np
        >>> from sklearn.manifold import smacof
        >>> from sklearn.metrics import euclidean_distances
        >>> X = np.array([[0, 1, 2], [1, 0, 3],[2, 3, 0]])
        >>> dissimilarities = euclidean_distances(X)
        >>> mds_result, stress = smacof(dissimilarities, n_components=2, random_state=42)
        >>> mds_result
        array([[ 0.05... -1.07... ],
               [ 1.74..., -0.75...],
               [-1.79...,  1.83...]])
        >>> stress
        np.float64(0.0012...)
        """
        dissimilarities = check_array(dissimilarities)
        random_state = check_random_state(random_state)
        if normalized_stress == 'auto':
            normalized_stress = not metric
        if normalized_stress and metric:
            raise ValueError('Normalized stress is not supported for metric MDS. Either set `normalized_stress=False` or use `metric=False`.')
        if hasattr(init, '__array__'):
            init = np.asarray(init).copy()
            if not n_init == 1:
                warnings.warn('Explicit initial positions passed: performing only one init of the MDS instead of %d' % n_init)
                n_init = 1
        best_pos, best_stress = (None, None)
        if effective_n_jobs(n_jobs) == 1:
            for it in range(n_init):
>               pos, stress, n_iter_ = _smacof_single(dissimilarities, metric=metric, n_components=n_components, init=init, max_iter=max_iter, verbose=verbose, eps=eps, random_state=random_state, normalized_stress=normalized_stress)
E               ValueError: too many values to unpack (expected 3)

/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/_mds.py:279: ValueError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py::test_normed_stress[0.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py::test_normed_stress[1.5]
FAILED ../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py::test_normed_stress[2]
============================== 3 failed in 0.37s ===============================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 3 items

../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py::test_normed_stress[0.5] I: Seeding RNGs with 106785568
PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py::test_normed_stress[1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py::test_normed_stress[2] PASSED

============================== 3 passed in 0.36s ===============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 3 items

../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py::test_normed_stress[0.5] I: Seeding RNGs with 1787312601
PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py::test_normed_stress[1.5] PASSED
../../../../../../local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/manifold/tests/test_mds.py::test_normed_stress[2] PASSED

============================== 3 passed in 0.41s ===============================
