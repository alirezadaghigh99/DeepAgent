output file:
processed_torchgeovit_small_patch16_224139.json
function:
vit_small_patch16_224
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.SENTINEL2_ALL_MOCO]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_MOCO]', '../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_TM_TOA_MOCO] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_SR_MOCO]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_SR_MOCO]', '../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.SENTINEL2_ALL_DINO] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_SR_SIMCLR]', '../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_TOA_MOCO] FAILED', '../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_SR_SIMCLR] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_TM_TOA_SIMCLR]', '../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_SR_MOCO] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_TOA_MOCO]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_TOA_SIMCLR]', '../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_SR_SIMCLR] FAILED', '../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_SR_MOCO] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.SENTINEL2_ALL_DINO]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_SR_SIMCLR]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_TM_TOA_MOCO]', '../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_TM_TOA_SIMCLR] FAILED', '../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] FAILED', '../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] FAILED', '../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_TOA_SIMCLR] FAILED', '../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.SENTINEL2_ALL_MOCO] FAILED'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/torchgeo/torchgeo/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/torchgeo/torchgeo
configfile: pyproject.toml
plugins: hydra-core-1.3.2
collecting ... collected 49 items / 12 deselected / 37 selected

../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_TM_TOA_MOCO] FAILED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_TM_TOA_SIMCLR] FAILED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_TOA_MOCO] FAILED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_TOA_SIMCLR] FAILED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_SR_MOCO] FAILED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_SR_SIMCLR] FAILED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] FAILED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] FAILED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_SR_MOCO] FAILED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_SR_SIMCLR] FAILED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.SENTINEL2_ALL_DINO] FAILED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.SENTINEL2_ALL_MOCO] FAILED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_TM_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_TM_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_ETM_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_ETM_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_ETM_SR_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_ETM_SR_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_OLI_SR_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_OLI_SR_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.SENTINEL2_ALL_DINO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.SENTINEL2_ALL_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_TM_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_TM_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_ETM_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_ETM_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_ETM_SR_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_ETM_SR_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_OLI_SR_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_OLI_SR_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.SENTINEL2_ALL_DINO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.SENTINEL2_ALL_MOCO] PASSED

=================================== FAILURES ===================================
___ TestViTSmall16.test_vit_weights[ViTSmall16_Weights.LANDSAT_TM_TOA_MOCO] ____

self = <tests.models.test_vit.TestViTSmall16 object at 0x7bf1bf3e63d0>
mocked_weights = ViTSmall16_Weights.LANDSAT_TM_TOA_MOCO

    def test_vit_weights(self, mocked_weights: WeightsEnum) -> None:
>       vit_small_patch16_224(weights=mocked_weights)

/local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/vit.py:36: in vit_small_patch16_224
    return vit_small_patch16_224(weights)
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:29: in vit_small_patch16_224
    model.load_state_dict(pretrained_weights, strict=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = VisionTransformer(
  (patch_embed): PatchEmbed(
    (proj): Conv2d(3, 384, kernel_size=(16, 16), stride=(16, 16))
    ...entity()
  (head_drop): Dropout(p=0.0, inplace=False)
  (head): Linear(in_features=384, out_features=1000, bias=True)
)
state_dict = ViTSmall16_Weights.LANDSAT_TM_TOA_MOCO, strict = False
assign = False

    def load_state_dict(
        self, state_dict: Mapping[str, Any], strict: bool = True, assign: bool = False
    ):
        r"""Copy parameters and buffers from :attr:`state_dict` into this module and its descendants.
    
        If :attr:`strict` is ``True``, then
        the keys of :attr:`state_dict` must exactly match the keys returned
        by this module's :meth:`~torch.nn.Module.state_dict` function.
    
        .. warning::
            If :attr:`assign` is ``True`` the optimizer must be created after
            the call to :attr:`load_state_dict` unless
            :func:`~torch.__future__.get_swap_module_params_on_conversion` is ``True``.
    
        Args:
            state_dict (dict): a dict containing parameters and
                persistent buffers.
            strict (bool, optional): whether to strictly enforce that the keys
                in :attr:`state_dict` match the keys returned by this module's
                :meth:`~torch.nn.Module.state_dict` function. Default: ``True``
            assign (bool, optional): When ``False``, the properties of the tensors
                in the current module are preserved while when ``True``, the
                properties of the Tensors in the state dict are preserved. The only
                exception is the ``requires_grad`` field of :class:`~torch.nn.Parameter`s
                for which the value from the module is preserved.
                Default: ``False``
    
        Returns:
            ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields:
                * **missing_keys** is a list of str containing any keys that are expected
                    by this module but missing from the provided ``state_dict``.
                * **unexpected_keys** is a list of str containing the keys that are not
                    expected by this module but present in the provided ``state_dict``.
    
        Note:
            If a parameter or buffer is registered as ``None`` and its corresponding key
            exists in :attr:`state_dict`, :meth:`load_state_dict` will raise a
            ``RuntimeError``.
        """
        if not isinstance(state_dict, Mapping):
>           raise TypeError(
                f"Expected state_dict to be dict-like, got {type(state_dict)}."
            )
E           TypeError: Expected state_dict to be dict-like, got <enum 'ViTSmall16_Weights'>.

/local/data0/moved_data/publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:2516: TypeError
__ TestViTSmall16.test_vit_weights[ViTSmall16_Weights.LANDSAT_TM_TOA_SIMCLR] ___

self = <tests.models.test_vit.TestViTSmall16 object at 0x7bf1bf3e6650>
mocked_weights = ViTSmall16_Weights.LANDSAT_TM_TOA_SIMCLR

    def test_vit_weights(self, mocked_weights: WeightsEnum) -> None:
>       vit_small_patch16_224(weights=mocked_weights)

/local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/vit.py:36: in vit_small_patch16_224
    return vit_small_patch16_224(weights)
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:29: in vit_small_patch16_224
    model.load_state_dict(pretrained_weights, strict=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = VisionTransformer(
  (patch_embed): PatchEmbed(
    (proj): Conv2d(3, 384, kernel_size=(16, 16), stride=(16, 16))
    ...entity()
  (head_drop): Dropout(p=0.0, inplace=False)
  (head): Linear(in_features=384, out_features=1000, bias=True)
)
state_dict = ViTSmall16_Weights.LANDSAT_TM_TOA_SIMCLR, strict = False
assign = False

    def load_state_dict(
        self, state_dict: Mapping[str, Any], strict: bool = True, assign: bool = False
    ):
        r"""Copy parameters and buffers from :attr:`state_dict` into this module and its descendants.
    
        If :attr:`strict` is ``True``, then
        the keys of :attr:`state_dict` must exactly match the keys returned
        by this module's :meth:`~torch.nn.Module.state_dict` function.
    
        .. warning::
            If :attr:`assign` is ``True`` the optimizer must be created after
            the call to :attr:`load_state_dict` unless
            :func:`~torch.__future__.get_swap_module_params_on_conversion` is ``True``.
    
        Args:
            state_dict (dict): a dict containing parameters and
                persistent buffers.
            strict (bool, optional): whether to strictly enforce that the keys
                in :attr:`state_dict` match the keys returned by this module's
                :meth:`~torch.nn.Module.state_dict` function. Default: ``True``
            assign (bool, optional): When ``False``, the properties of the tensors
                in the current module are preserved while when ``True``, the
                properties of the Tensors in the state dict are preserved. The only
                exception is the ``requires_grad`` field of :class:`~torch.nn.Parameter`s
                for which the value from the module is preserved.
                Default: ``False``
    
        Returns:
            ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields:
                * **missing_keys** is a list of str containing any keys that are expected
                    by this module but missing from the provided ``state_dict``.
                * **unexpected_keys** is a list of str containing the keys that are not
                    expected by this module but present in the provided ``state_dict``.
    
        Note:
            If a parameter or buffer is registered as ``None`` and its corresponding key
            exists in :attr:`state_dict`, :meth:`load_state_dict` will raise a
            ``RuntimeError``.
        """
        if not isinstance(state_dict, Mapping):
>           raise TypeError(
                f"Expected state_dict to be dict-like, got {type(state_dict)}."
            )
E           TypeError: Expected state_dict to be dict-like, got <enum 'ViTSmall16_Weights'>.

/local/data0/moved_data/publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:2516: TypeError
___ TestViTSmall16.test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_TOA_MOCO] ___

self = <tests.models.test_vit.TestViTSmall16 object at 0x7bf1bf3e68d0>
mocked_weights = ViTSmall16_Weights.LANDSAT_ETM_TOA_MOCO

    def test_vit_weights(self, mocked_weights: WeightsEnum) -> None:
>       vit_small_patch16_224(weights=mocked_weights)

/local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/vit.py:36: in vit_small_patch16_224
    return vit_small_patch16_224(weights)
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:29: in vit_small_patch16_224
    model.load_state_dict(pretrained_weights, strict=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = VisionTransformer(
  (patch_embed): PatchEmbed(
    (proj): Conv2d(3, 384, kernel_size=(16, 16), stride=(16, 16))
    ...entity()
  (head_drop): Dropout(p=0.0, inplace=False)
  (head): Linear(in_features=384, out_features=1000, bias=True)
)
state_dict = ViTSmall16_Weights.LANDSAT_ETM_TOA_MOCO, strict = False
assign = False

    def load_state_dict(
        self, state_dict: Mapping[str, Any], strict: bool = True, assign: bool = False
    ):
        r"""Copy parameters and buffers from :attr:`state_dict` into this module and its descendants.
    
        If :attr:`strict` is ``True``, then
        the keys of :attr:`state_dict` must exactly match the keys returned
        by this module's :meth:`~torch.nn.Module.state_dict` function.
    
        .. warning::
            If :attr:`assign` is ``True`` the optimizer must be created after
            the call to :attr:`load_state_dict` unless
            :func:`~torch.__future__.get_swap_module_params_on_conversion` is ``True``.
    
        Args:
            state_dict (dict): a dict containing parameters and
                persistent buffers.
            strict (bool, optional): whether to strictly enforce that the keys
                in :attr:`state_dict` match the keys returned by this module's
                :meth:`~torch.nn.Module.state_dict` function. Default: ``True``
            assign (bool, optional): When ``False``, the properties of the tensors
                in the current module are preserved while when ``True``, the
                properties of the Tensors in the state dict are preserved. The only
                exception is the ``requires_grad`` field of :class:`~torch.nn.Parameter`s
                for which the value from the module is preserved.
                Default: ``False``
    
        Returns:
            ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields:
                * **missing_keys** is a list of str containing any keys that are expected
                    by this module but missing from the provided ``state_dict``.
                * **unexpected_keys** is a list of str containing the keys that are not
                    expected by this module but present in the provided ``state_dict``.
    
        Note:
            If a parameter or buffer is registered as ``None`` and its corresponding key
            exists in :attr:`state_dict`, :meth:`load_state_dict` will raise a
            ``RuntimeError``.
        """
        if not isinstance(state_dict, Mapping):
>           raise TypeError(
                f"Expected state_dict to be dict-like, got {type(state_dict)}."
            )
E           TypeError: Expected state_dict to be dict-like, got <enum 'ViTSmall16_Weights'>.

/local/data0/moved_data/publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:2516: TypeError
__ TestViTSmall16.test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_TOA_SIMCLR] __

self = <tests.models.test_vit.TestViTSmall16 object at 0x7bf1bf3e6b50>
mocked_weights = ViTSmall16_Weights.LANDSAT_ETM_TOA_SIMCLR

    def test_vit_weights(self, mocked_weights: WeightsEnum) -> None:
>       vit_small_patch16_224(weights=mocked_weights)

/local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/vit.py:36: in vit_small_patch16_224
    return vit_small_patch16_224(weights)
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:29: in vit_small_patch16_224
    model.load_state_dict(pretrained_weights, strict=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = VisionTransformer(
  (patch_embed): PatchEmbed(
    (proj): Conv2d(3, 384, kernel_size=(16, 16), stride=(16, 16))
    ...entity()
  (head_drop): Dropout(p=0.0, inplace=False)
  (head): Linear(in_features=384, out_features=1000, bias=True)
)
state_dict = ViTSmall16_Weights.LANDSAT_ETM_TOA_SIMCLR, strict = False
assign = False

    def load_state_dict(
        self, state_dict: Mapping[str, Any], strict: bool = True, assign: bool = False
    ):
        r"""Copy parameters and buffers from :attr:`state_dict` into this module and its descendants.
    
        If :attr:`strict` is ``True``, then
        the keys of :attr:`state_dict` must exactly match the keys returned
        by this module's :meth:`~torch.nn.Module.state_dict` function.
    
        .. warning::
            If :attr:`assign` is ``True`` the optimizer must be created after
            the call to :attr:`load_state_dict` unless
            :func:`~torch.__future__.get_swap_module_params_on_conversion` is ``True``.
    
        Args:
            state_dict (dict): a dict containing parameters and
                persistent buffers.
            strict (bool, optional): whether to strictly enforce that the keys
                in :attr:`state_dict` match the keys returned by this module's
                :meth:`~torch.nn.Module.state_dict` function. Default: ``True``
            assign (bool, optional): When ``False``, the properties of the tensors
                in the current module are preserved while when ``True``, the
                properties of the Tensors in the state dict are preserved. The only
                exception is the ``requires_grad`` field of :class:`~torch.nn.Parameter`s
                for which the value from the module is preserved.
                Default: ``False``
    
        Returns:
            ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields:
                * **missing_keys** is a list of str containing any keys that are expected
                    by this module but missing from the provided ``state_dict``.
                * **unexpected_keys** is a list of str containing the keys that are not
                    expected by this module but present in the provided ``state_dict``.
    
        Note:
            If a parameter or buffer is registered as ``None`` and its corresponding key
            exists in :attr:`state_dict`, :meth:`load_state_dict` will raise a
            ``RuntimeError``.
        """
        if not isinstance(state_dict, Mapping):
>           raise TypeError(
                f"Expected state_dict to be dict-like, got {type(state_dict)}."
            )
E           TypeError: Expected state_dict to be dict-like, got <enum 'ViTSmall16_Weights'>.

/local/data0/moved_data/publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:2516: TypeError
___ TestViTSmall16.test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_SR_MOCO] ____

self = <tests.models.test_vit.TestViTSmall16 object at 0x7bf1bf3e6e10>
mocked_weights = ViTSmall16_Weights.LANDSAT_ETM_SR_MOCO

    def test_vit_weights(self, mocked_weights: WeightsEnum) -> None:
>       vit_small_patch16_224(weights=mocked_weights)

/local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/vit.py:36: in vit_small_patch16_224
    return vit_small_patch16_224(weights)
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:29: in vit_small_patch16_224
    model.load_state_dict(pretrained_weights, strict=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = VisionTransformer(
  (patch_embed): PatchEmbed(
    (proj): Conv2d(3, 384, kernel_size=(16, 16), stride=(16, 16))
    ...entity()
  (head_drop): Dropout(p=0.0, inplace=False)
  (head): Linear(in_features=384, out_features=1000, bias=True)
)
state_dict = ViTSmall16_Weights.LANDSAT_ETM_SR_MOCO, strict = False
assign = False

    def load_state_dict(
        self, state_dict: Mapping[str, Any], strict: bool = True, assign: bool = False
    ):
        r"""Copy parameters and buffers from :attr:`state_dict` into this module and its descendants.
    
        If :attr:`strict` is ``True``, then
        the keys of :attr:`state_dict` must exactly match the keys returned
        by this module's :meth:`~torch.nn.Module.state_dict` function.
    
        .. warning::
            If :attr:`assign` is ``True`` the optimizer must be created after
            the call to :attr:`load_state_dict` unless
            :func:`~torch.__future__.get_swap_module_params_on_conversion` is ``True``.
    
        Args:
            state_dict (dict): a dict containing parameters and
                persistent buffers.
            strict (bool, optional): whether to strictly enforce that the keys
                in :attr:`state_dict` match the keys returned by this module's
                :meth:`~torch.nn.Module.state_dict` function. Default: ``True``
            assign (bool, optional): When ``False``, the properties of the tensors
                in the current module are preserved while when ``True``, the
                properties of the Tensors in the state dict are preserved. The only
                exception is the ``requires_grad`` field of :class:`~torch.nn.Parameter`s
                for which the value from the module is preserved.
                Default: ``False``
    
        Returns:
            ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields:
                * **missing_keys** is a list of str containing any keys that are expected
                    by this module but missing from the provided ``state_dict``.
                * **unexpected_keys** is a list of str containing the keys that are not
                    expected by this module but present in the provided ``state_dict``.
    
        Note:
            If a parameter or buffer is registered as ``None`` and its corresponding key
            exists in :attr:`state_dict`, :meth:`load_state_dict` will raise a
            ``RuntimeError``.
        """
        if not isinstance(state_dict, Mapping):
>           raise TypeError(
                f"Expected state_dict to be dict-like, got {type(state_dict)}."
            )
E           TypeError: Expected state_dict to be dict-like, got <enum 'ViTSmall16_Weights'>.

/local/data0/moved_data/publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:2516: TypeError
__ TestViTSmall16.test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_SR_SIMCLR] ___

self = <tests.models.test_vit.TestViTSmall16 object at 0x7bf1bf3e7110>
mocked_weights = ViTSmall16_Weights.LANDSAT_ETM_SR_SIMCLR

    def test_vit_weights(self, mocked_weights: WeightsEnum) -> None:
>       vit_small_patch16_224(weights=mocked_weights)

/local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/vit.py:36: in vit_small_patch16_224
    return vit_small_patch16_224(weights)
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:29: in vit_small_patch16_224
    model.load_state_dict(pretrained_weights, strict=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = VisionTransformer(
  (patch_embed): PatchEmbed(
    (proj): Conv2d(3, 384, kernel_size=(16, 16), stride=(16, 16))
    ...entity()
  (head_drop): Dropout(p=0.0, inplace=False)
  (head): Linear(in_features=384, out_features=1000, bias=True)
)
state_dict = ViTSmall16_Weights.LANDSAT_ETM_SR_SIMCLR, strict = False
assign = False

    def load_state_dict(
        self, state_dict: Mapping[str, Any], strict: bool = True, assign: bool = False
    ):
        r"""Copy parameters and buffers from :attr:`state_dict` into this module and its descendants.
    
        If :attr:`strict` is ``True``, then
        the keys of :attr:`state_dict` must exactly match the keys returned
        by this module's :meth:`~torch.nn.Module.state_dict` function.
    
        .. warning::
            If :attr:`assign` is ``True`` the optimizer must be created after
            the call to :attr:`load_state_dict` unless
            :func:`~torch.__future__.get_swap_module_params_on_conversion` is ``True``.
    
        Args:
            state_dict (dict): a dict containing parameters and
                persistent buffers.
            strict (bool, optional): whether to strictly enforce that the keys
                in :attr:`state_dict` match the keys returned by this module's
                :meth:`~torch.nn.Module.state_dict` function. Default: ``True``
            assign (bool, optional): When ``False``, the properties of the tensors
                in the current module are preserved while when ``True``, the
                properties of the Tensors in the state dict are preserved. The only
                exception is the ``requires_grad`` field of :class:`~torch.nn.Parameter`s
                for which the value from the module is preserved.
                Default: ``False``
    
        Returns:
            ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields:
                * **missing_keys** is a list of str containing any keys that are expected
                    by this module but missing from the provided ``state_dict``.
                * **unexpected_keys** is a list of str containing the keys that are not
                    expected by this module but present in the provided ``state_dict``.
    
        Note:
            If a parameter or buffer is registered as ``None`` and its corresponding key
            exists in :attr:`state_dict`, :meth:`load_state_dict` will raise a
            ``RuntimeError``.
        """
        if not isinstance(state_dict, Mapping):
>           raise TypeError(
                f"Expected state_dict to be dict-like, got {type(state_dict)}."
            )
E           TypeError: Expected state_dict to be dict-like, got <enum 'ViTSmall16_Weights'>.

/local/data0/moved_data/publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:2516: TypeError
_ TestViTSmall16.test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] _

self = <tests.models.test_vit.TestViTSmall16 object at 0x7bf1bf3e7410>
mocked_weights = ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_MOCO

    def test_vit_weights(self, mocked_weights: WeightsEnum) -> None:
>       vit_small_patch16_224(weights=mocked_weights)

/local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/vit.py:36: in vit_small_patch16_224
    return vit_small_patch16_224(weights)
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:29: in vit_small_patch16_224
    model.load_state_dict(pretrained_weights, strict=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = VisionTransformer(
  (patch_embed): PatchEmbed(
    (proj): Conv2d(3, 384, kernel_size=(16, 16), stride=(16, 16))
    ...entity()
  (head_drop): Dropout(p=0.0, inplace=False)
  (head): Linear(in_features=384, out_features=1000, bias=True)
)
state_dict = ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_MOCO, strict = False
assign = False

    def load_state_dict(
        self, state_dict: Mapping[str, Any], strict: bool = True, assign: bool = False
    ):
        r"""Copy parameters and buffers from :attr:`state_dict` into this module and its descendants.
    
        If :attr:`strict` is ``True``, then
        the keys of :attr:`state_dict` must exactly match the keys returned
        by this module's :meth:`~torch.nn.Module.state_dict` function.
    
        .. warning::
            If :attr:`assign` is ``True`` the optimizer must be created after
            the call to :attr:`load_state_dict` unless
            :func:`~torch.__future__.get_swap_module_params_on_conversion` is ``True``.
    
        Args:
            state_dict (dict): a dict containing parameters and
                persistent buffers.
            strict (bool, optional): whether to strictly enforce that the keys
                in :attr:`state_dict` match the keys returned by this module's
                :meth:`~torch.nn.Module.state_dict` function. Default: ``True``
            assign (bool, optional): When ``False``, the properties of the tensors
                in the current module are preserved while when ``True``, the
                properties of the Tensors in the state dict are preserved. The only
                exception is the ``requires_grad`` field of :class:`~torch.nn.Parameter`s
                for which the value from the module is preserved.
                Default: ``False``
    
        Returns:
            ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields:
                * **missing_keys** is a list of str containing any keys that are expected
                    by this module but missing from the provided ``state_dict``.
                * **unexpected_keys** is a list of str containing the keys that are not
                    expected by this module but present in the provided ``state_dict``.
    
        Note:
            If a parameter or buffer is registered as ``None`` and its corresponding key
            exists in :attr:`state_dict`, :meth:`load_state_dict` will raise a
            ``RuntimeError``.
        """
        if not isinstance(state_dict, Mapping):
>           raise TypeError(
                f"Expected state_dict to be dict-like, got {type(state_dict)}."
            )
E           TypeError: Expected state_dict to be dict-like, got <enum 'ViTSmall16_Weights'>.

/local/data0/moved_data/publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:2516: TypeError
_ TestViTSmall16.test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] _

self = <tests.models.test_vit.TestViTSmall16 object at 0x7bf1bf3e7710>
mocked_weights = ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR

    def test_vit_weights(self, mocked_weights: WeightsEnum) -> None:
>       vit_small_patch16_224(weights=mocked_weights)

/local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/vit.py:36: in vit_small_patch16_224
    return vit_small_patch16_224(weights)
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:29: in vit_small_patch16_224
    model.load_state_dict(pretrained_weights, strict=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = VisionTransformer(
  (patch_embed): PatchEmbed(
    (proj): Conv2d(3, 384, kernel_size=(16, 16), stride=(16, 16))
    ...entity()
  (head_drop): Dropout(p=0.0, inplace=False)
  (head): Linear(in_features=384, out_features=1000, bias=True)
)
state_dict = ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR, strict = False
assign = False

    def load_state_dict(
        self, state_dict: Mapping[str, Any], strict: bool = True, assign: bool = False
    ):
        r"""Copy parameters and buffers from :attr:`state_dict` into this module and its descendants.
    
        If :attr:`strict` is ``True``, then
        the keys of :attr:`state_dict` must exactly match the keys returned
        by this module's :meth:`~torch.nn.Module.state_dict` function.
    
        .. warning::
            If :attr:`assign` is ``True`` the optimizer must be created after
            the call to :attr:`load_state_dict` unless
            :func:`~torch.__future__.get_swap_module_params_on_conversion` is ``True``.
    
        Args:
            state_dict (dict): a dict containing parameters and
                persistent buffers.
            strict (bool, optional): whether to strictly enforce that the keys
                in :attr:`state_dict` match the keys returned by this module's
                :meth:`~torch.nn.Module.state_dict` function. Default: ``True``
            assign (bool, optional): When ``False``, the properties of the tensors
                in the current module are preserved while when ``True``, the
                properties of the Tensors in the state dict are preserved. The only
                exception is the ``requires_grad`` field of :class:`~torch.nn.Parameter`s
                for which the value from the module is preserved.
                Default: ``False``
    
        Returns:
            ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields:
                * **missing_keys** is a list of str containing any keys that are expected
                    by this module but missing from the provided ``state_dict``.
                * **unexpected_keys** is a list of str containing the keys that are not
                    expected by this module but present in the provided ``state_dict``.
    
        Note:
            If a parameter or buffer is registered as ``None`` and its corresponding key
            exists in :attr:`state_dict`, :meth:`load_state_dict` will raise a
            ``RuntimeError``.
        """
        if not isinstance(state_dict, Mapping):
>           raise TypeError(
                f"Expected state_dict to be dict-like, got {type(state_dict)}."
            )
E           TypeError: Expected state_dict to be dict-like, got <enum 'ViTSmall16_Weights'>.

/local/data0/moved_data/publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:2516: TypeError
___ TestViTSmall16.test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_SR_MOCO] ____

self = <tests.models.test_vit.TestViTSmall16 object at 0x7bf1bf3e7a10>
mocked_weights = ViTSmall16_Weights.LANDSAT_OLI_SR_MOCO

    def test_vit_weights(self, mocked_weights: WeightsEnum) -> None:
>       vit_small_patch16_224(weights=mocked_weights)

/local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/vit.py:36: in vit_small_patch16_224
    return vit_small_patch16_224(weights)
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:29: in vit_small_patch16_224
    model.load_state_dict(pretrained_weights, strict=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = VisionTransformer(
  (patch_embed): PatchEmbed(
    (proj): Conv2d(3, 384, kernel_size=(16, 16), stride=(16, 16))
    ...entity()
  (head_drop): Dropout(p=0.0, inplace=False)
  (head): Linear(in_features=384, out_features=1000, bias=True)
)
state_dict = ViTSmall16_Weights.LANDSAT_OLI_SR_MOCO, strict = False
assign = False

    def load_state_dict(
        self, state_dict: Mapping[str, Any], strict: bool = True, assign: bool = False
    ):
        r"""Copy parameters and buffers from :attr:`state_dict` into this module and its descendants.
    
        If :attr:`strict` is ``True``, then
        the keys of :attr:`state_dict` must exactly match the keys returned
        by this module's :meth:`~torch.nn.Module.state_dict` function.
    
        .. warning::
            If :attr:`assign` is ``True`` the optimizer must be created after
            the call to :attr:`load_state_dict` unless
            :func:`~torch.__future__.get_swap_module_params_on_conversion` is ``True``.
    
        Args:
            state_dict (dict): a dict containing parameters and
                persistent buffers.
            strict (bool, optional): whether to strictly enforce that the keys
                in :attr:`state_dict` match the keys returned by this module's
                :meth:`~torch.nn.Module.state_dict` function. Default: ``True``
            assign (bool, optional): When ``False``, the properties of the tensors
                in the current module are preserved while when ``True``, the
                properties of the Tensors in the state dict are preserved. The only
                exception is the ``requires_grad`` field of :class:`~torch.nn.Parameter`s
                for which the value from the module is preserved.
                Default: ``False``
    
        Returns:
            ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields:
                * **missing_keys** is a list of str containing any keys that are expected
                    by this module but missing from the provided ``state_dict``.
                * **unexpected_keys** is a list of str containing the keys that are not
                    expected by this module but present in the provided ``state_dict``.
    
        Note:
            If a parameter or buffer is registered as ``None`` and its corresponding key
            exists in :attr:`state_dict`, :meth:`load_state_dict` will raise a
            ``RuntimeError``.
        """
        if not isinstance(state_dict, Mapping):
>           raise TypeError(
                f"Expected state_dict to be dict-like, got {type(state_dict)}."
            )
E           TypeError: Expected state_dict to be dict-like, got <enum 'ViTSmall16_Weights'>.

/local/data0/moved_data/publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:2516: TypeError
__ TestViTSmall16.test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_SR_SIMCLR] ___

self = <tests.models.test_vit.TestViTSmall16 object at 0x7bf1bf3e7cd0>
mocked_weights = ViTSmall16_Weights.LANDSAT_OLI_SR_SIMCLR

    def test_vit_weights(self, mocked_weights: WeightsEnum) -> None:
>       vit_small_patch16_224(weights=mocked_weights)

/local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/vit.py:36: in vit_small_patch16_224
    return vit_small_patch16_224(weights)
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:29: in vit_small_patch16_224
    model.load_state_dict(pretrained_weights, strict=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = VisionTransformer(
  (patch_embed): PatchEmbed(
    (proj): Conv2d(3, 384, kernel_size=(16, 16), stride=(16, 16))
    ...entity()
  (head_drop): Dropout(p=0.0, inplace=False)
  (head): Linear(in_features=384, out_features=1000, bias=True)
)
state_dict = ViTSmall16_Weights.LANDSAT_OLI_SR_SIMCLR, strict = False
assign = False

    def load_state_dict(
        self, state_dict: Mapping[str, Any], strict: bool = True, assign: bool = False
    ):
        r"""Copy parameters and buffers from :attr:`state_dict` into this module and its descendants.
    
        If :attr:`strict` is ``True``, then
        the keys of :attr:`state_dict` must exactly match the keys returned
        by this module's :meth:`~torch.nn.Module.state_dict` function.
    
        .. warning::
            If :attr:`assign` is ``True`` the optimizer must be created after
            the call to :attr:`load_state_dict` unless
            :func:`~torch.__future__.get_swap_module_params_on_conversion` is ``True``.
    
        Args:
            state_dict (dict): a dict containing parameters and
                persistent buffers.
            strict (bool, optional): whether to strictly enforce that the keys
                in :attr:`state_dict` match the keys returned by this module's
                :meth:`~torch.nn.Module.state_dict` function. Default: ``True``
            assign (bool, optional): When ``False``, the properties of the tensors
                in the current module are preserved while when ``True``, the
                properties of the Tensors in the state dict are preserved. The only
                exception is the ``requires_grad`` field of :class:`~torch.nn.Parameter`s
                for which the value from the module is preserved.
                Default: ``False``
    
        Returns:
            ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields:
                * **missing_keys** is a list of str containing any keys that are expected
                    by this module but missing from the provided ``state_dict``.
                * **unexpected_keys** is a list of str containing the keys that are not
                    expected by this module but present in the provided ``state_dict``.
    
        Note:
            If a parameter or buffer is registered as ``None`` and its corresponding key
            exists in :attr:`state_dict`, :meth:`load_state_dict` will raise a
            ``RuntimeError``.
        """
        if not isinstance(state_dict, Mapping):
>           raise TypeError(
                f"Expected state_dict to be dict-like, got {type(state_dict)}."
            )
E           TypeError: Expected state_dict to be dict-like, got <enum 'ViTSmall16_Weights'>.

/local/data0/moved_data/publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:2516: TypeError
____ TestViTSmall16.test_vit_weights[ViTSmall16_Weights.SENTINEL2_ALL_DINO] ____

self = <tests.models.test_vit.TestViTSmall16 object at 0x7bf1bf3e7e10>
mocked_weights = ViTSmall16_Weights.SENTINEL2_ALL_DINO

    def test_vit_weights(self, mocked_weights: WeightsEnum) -> None:
>       vit_small_patch16_224(weights=mocked_weights)

/local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/vit.py:36: in vit_small_patch16_224
    return vit_small_patch16_224(weights)
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:29: in vit_small_patch16_224
    model.load_state_dict(pretrained_weights, strict=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = VisionTransformer(
  (patch_embed): PatchEmbed(
    (proj): Conv2d(3, 384, kernel_size=(16, 16), stride=(16, 16))
    ...entity()
  (head_drop): Dropout(p=0.0, inplace=False)
  (head): Linear(in_features=384, out_features=1000, bias=True)
)
state_dict = ViTSmall16_Weights.SENTINEL2_ALL_DINO, strict = False
assign = False

    def load_state_dict(
        self, state_dict: Mapping[str, Any], strict: bool = True, assign: bool = False
    ):
        r"""Copy parameters and buffers from :attr:`state_dict` into this module and its descendants.
    
        If :attr:`strict` is ``True``, then
        the keys of :attr:`state_dict` must exactly match the keys returned
        by this module's :meth:`~torch.nn.Module.state_dict` function.
    
        .. warning::
            If :attr:`assign` is ``True`` the optimizer must be created after
            the call to :attr:`load_state_dict` unless
            :func:`~torch.__future__.get_swap_module_params_on_conversion` is ``True``.
    
        Args:
            state_dict (dict): a dict containing parameters and
                persistent buffers.
            strict (bool, optional): whether to strictly enforce that the keys
                in :attr:`state_dict` match the keys returned by this module's
                :meth:`~torch.nn.Module.state_dict` function. Default: ``True``
            assign (bool, optional): When ``False``, the properties of the tensors
                in the current module are preserved while when ``True``, the
                properties of the Tensors in the state dict are preserved. The only
                exception is the ``requires_grad`` field of :class:`~torch.nn.Parameter`s
                for which the value from the module is preserved.
                Default: ``False``
    
        Returns:
            ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields:
                * **missing_keys** is a list of str containing any keys that are expected
                    by this module but missing from the provided ``state_dict``.
                * **unexpected_keys** is a list of str containing the keys that are not
                    expected by this module but present in the provided ``state_dict``.
    
        Note:
            If a parameter or buffer is registered as ``None`` and its corresponding key
            exists in :attr:`state_dict`, :meth:`load_state_dict` will raise a
            ``RuntimeError``.
        """
        if not isinstance(state_dict, Mapping):
>           raise TypeError(
                f"Expected state_dict to be dict-like, got {type(state_dict)}."
            )
E           TypeError: Expected state_dict to be dict-like, got <enum 'ViTSmall16_Weights'>.

/local/data0/moved_data/publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:2516: TypeError
____ TestViTSmall16.test_vit_weights[ViTSmall16_Weights.SENTINEL2_ALL_MOCO] ____

self = <tests.models.test_vit.TestViTSmall16 object at 0x7bf1bf3f8090>
mocked_weights = ViTSmall16_Weights.SENTINEL2_ALL_MOCO

    def test_vit_weights(self, mocked_weights: WeightsEnum) -> None:
>       vit_small_patch16_224(weights=mocked_weights)

/local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/vit.py:36: in vit_small_patch16_224
    return vit_small_patch16_224(weights)
/local/data0/moved_data/publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:29: in vit_small_patch16_224
    model.load_state_dict(pretrained_weights, strict=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = VisionTransformer(
  (patch_embed): PatchEmbed(
    (proj): Conv2d(3, 384, kernel_size=(16, 16), stride=(16, 16))
    ...entity()
  (head_drop): Dropout(p=0.0, inplace=False)
  (head): Linear(in_features=384, out_features=1000, bias=True)
)
state_dict = ViTSmall16_Weights.SENTINEL2_ALL_MOCO, strict = False
assign = False

    def load_state_dict(
        self, state_dict: Mapping[str, Any], strict: bool = True, assign: bool = False
    ):
        r"""Copy parameters and buffers from :attr:`state_dict` into this module and its descendants.
    
        If :attr:`strict` is ``True``, then
        the keys of :attr:`state_dict` must exactly match the keys returned
        by this module's :meth:`~torch.nn.Module.state_dict` function.
    
        .. warning::
            If :attr:`assign` is ``True`` the optimizer must be created after
            the call to :attr:`load_state_dict` unless
            :func:`~torch.__future__.get_swap_module_params_on_conversion` is ``True``.
    
        Args:
            state_dict (dict): a dict containing parameters and
                persistent buffers.
            strict (bool, optional): whether to strictly enforce that the keys
                in :attr:`state_dict` match the keys returned by this module's
                :meth:`~torch.nn.Module.state_dict` function. Default: ``True``
            assign (bool, optional): When ``False``, the properties of the tensors
                in the current module are preserved while when ``True``, the
                properties of the Tensors in the state dict are preserved. The only
                exception is the ``requires_grad`` field of :class:`~torch.nn.Parameter`s
                for which the value from the module is preserved.
                Default: ``False``
    
        Returns:
            ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields:
                * **missing_keys** is a list of str containing any keys that are expected
                    by this module but missing from the provided ``state_dict``.
                * **unexpected_keys** is a list of str containing the keys that are not
                    expected by this module but present in the provided ``state_dict``.
    
        Note:
            If a parameter or buffer is registered as ``None`` and its corresponding key
            exists in :attr:`state_dict`, :meth:`load_state_dict` will raise a
            ``RuntimeError``.
        """
        if not isinstance(state_dict, Mapping):
>           raise TypeError(
                f"Expected state_dict to be dict-like, got {type(state_dict)}."
            )
E           TypeError: Expected state_dict to be dict-like, got <enum 'ViTSmall16_Weights'>.

/local/data0/moved_data/publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/nn/modules/module.py:2516: TypeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_TM_TOA_MOCO]
FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_TM_TOA_SIMCLR]
FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_TOA_MOCO]
FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_TOA_SIMCLR]
FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_SR_MOCO]
FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_SR_SIMCLR]
FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_MOCO]
FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR]
FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_SR_MOCO]
FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_SR_SIMCLR]
FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.SENTINEL2_ALL_DINO]
FAILED ../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.SENTINEL2_ALL_MOCO]
================ 12 failed, 25 passed, 12 deselected in 12.66s =================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/torchgeo/torchgeo/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/torchgeo/torchgeo
configfile: pyproject.toml
plugins: hydra-core-1.3.2
collecting ... collected 49 items / 12 deselected / 37 selected

../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_TM_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_TM_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_SR_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_SR_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_SR_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_SR_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.SENTINEL2_ALL_DINO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.SENTINEL2_ALL_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_TM_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_TM_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_ETM_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_ETM_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_ETM_SR_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_ETM_SR_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_OLI_SR_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_OLI_SR_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.SENTINEL2_ALL_DINO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.SENTINEL2_ALL_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_TM_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_TM_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_ETM_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_ETM_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_ETM_SR_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_ETM_SR_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_OLI_SR_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_OLI_SR_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.SENTINEL2_ALL_DINO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.SENTINEL2_ALL_MOCO] PASSED

====================== 37 passed, 12 deselected in 12.63s ======================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/torchgeo/torchgeo/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/torchgeo/torchgeo
configfile: pyproject.toml
plugins: hydra-core-1.3.2
collecting ... collected 49 items / 12 deselected / 37 selected

../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_TM_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_TM_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_SR_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_ETM_SR_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_SR_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.LANDSAT_OLI_SR_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.SENTINEL2_ALL_DINO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_vit_weights[ViTSmall16_Weights.SENTINEL2_ALL_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_TM_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_TM_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_ETM_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_ETM_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_ETM_SR_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_ETM_SR_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_OLI_SR_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.LANDSAT_OLI_SR_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.SENTINEL2_ALL_DINO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_bands[ViTSmall16_Weights.SENTINEL2_ALL_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_TM_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_TM_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_ETM_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_ETM_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_ETM_SR_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_ETM_SR_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_OLI_SR_MOCO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.LANDSAT_OLI_SR_SIMCLR] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.SENTINEL2_ALL_DINO] PASSED
../../../../../../local/data0/moved_data/publishablew/torchgeo/torchgeo/tests/models/test_vit.py::TestViTSmall16::test_transforms[ViTSmall16_Weights.SENTINEL2_ALL_MOCO] PASSED

====================== 37 passed, 12 deselected in 12.52s ======================
