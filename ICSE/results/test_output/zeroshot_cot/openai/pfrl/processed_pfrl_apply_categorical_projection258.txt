output file:
processed_pfrl_apply_categorical_projection258.json
function:
_apply_categorical_projection
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7] FAILED', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7]', '../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pfrl/pfrl/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pfrl/pfrl
configfile: pytest.ini
collecting ... collected 40 items

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1] FAILED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7] FAILED

=================================== FAILURES ===================================
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range0-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d195d3a4f10>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:95: in _test
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7d1948dc2980>, array([0.8573288], dtype=float32), array([1.], dtype=float32))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=1e-05', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=1e-05
E           
E           Mismatched elements: 1 / 1 (100%)
E           Max absolute difference among violations: 0.14267123
E           Max relative difference among violations: 0.14267123
E            ACTUAL: array([0.857329], dtype=float32)
E            DESIRED: array([1.], dtype=float32)

/usr/lib/python3.11/contextlib.py:81: AssertionError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range0-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2b3a90>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 1.6794, -1.2200],
        [-0.3449,  1.1826],
        [-0.0922, -1.4102],
        [ 1.0383, -0.3863],
        [ 1.5969, -1.3066],
        [ 1.4419,  0.1365],
        [-0.6973, -0.3779]])
y_probs = tensor([[0.1830, 0.8170],
        [0.6192, 0.3808],
        [0.1227, 0.8773],
        [0.5690, 0.4310],
        [0.1610, 0.8390],
        [0.2092, 0.7908],
        [0.4649, 0.5351]])
z = tensor([-3., -1.])

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (2) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range0-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2b3cd0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:95: in _test
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7d18cc11a840>, array([3.0542734], dtype=float32), array([1.], dtype=float32))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=1e-05', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=1e-05
E           
E           Mismatched elements: 1 / 1 (100%)
E           Max absolute difference among violations: 2.0542734
E           Max relative difference among violations: 2.0542734
E            ACTUAL: array([3.054273], dtype=float32)
E            DESIRED: array([1.], dtype=float32)

/usr/lib/python3.11/contextlib.py:81: AssertionError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range0-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2b3e50>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.4530, -0.6914,  1.8083, -0.6491,  0.4251],
        [ 1.0660, -0.8925,  1.0005, -0.9104,  1.0836],
        ...1.1019],
        [ 0.9827,  1.2150, -0.5136, -0.4411,  0.6853],
        [-0.1735, -0.2865, -3.3501, -2.2128,  0.5764]])
y_probs = tensor([[0.0919, 0.4895, 0.0429, 0.1537, 0.2221],
        [0.0299, 0.0338, 0.6256, 0.0657, 0.2450],
        [0.1792, 0..., 0.0642, 0.1584],
        [0.0302, 0.0181, 0.2128, 0.0480, 0.6909],
        [0.0265, 0.0465, 0.5858, 0.2171, 0.1240]])
z = tensor([-3.0000, -2.5000, -2.0000, -1.5000, -1.0000])

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (5) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range1-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2b3fd0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:95: in _test
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7d1966faa980>, array([1.1326878], dtype=float32), array([1.], dtype=float32))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=1e-05', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=1e-05
E           
E           Mismatched elements: 1 / 1 (100%)
E           Max absolute difference among violations: 0.1326878
E           Max relative difference among violations: 0.1326878
E            ACTUAL: array([1.132688], dtype=float32)
E            DESIRED: array([1.], dtype=float32)

/usr/lib/python3.11/contextlib.py:81: AssertionError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range1-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2bc1d0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 1.0048, -0.1855],
        [ 0.8529, -0.2396],
        [-1.5777, -1.0880],
        [-0.0398,  0.6301],
        [-0.9784,  0.1294],
        [ 1.1081, -0.7799],
        [-0.8522, -0.1275]])
y_probs = tensor([[0.5329, 0.4671],
        [0.9306, 0.0694],
        [0.7709, 0.2291],
        [0.3807, 0.6193],
        [0.1313, 0.8687],
        [0.8689, 0.1311],
        [0.4471, 0.5529]])
z = tensor([-2.,  0.])

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (2) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range1-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2bc490>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:95: in _test
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7d18cc1ca980>, array([2.703239], dtype=float32), array([1.], dtype=float32))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=1e-05', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=1e-05
E           
E           Mismatched elements: 1 / 1 (100%)
E           Max absolute difference among violations: 1.703239
E           Max relative difference among violations: 1.703239
E            ACTUAL: array([2.703239], dtype=float32)
E            DESIRED: array([1.], dtype=float32)

/usr/lib/python3.11/contextlib.py:81: AssertionError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range1-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2bc750>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.0454,  0.2624,  0.8731,  0.5847, -2.2936],
        [ 0.2581,  0.3507, -1.1625, -1.5583,  0.7504],
        ...0.6010],
        [ 0.0942, -1.4219,  0.1406,  1.1297,  1.0163],
        [-0.6740, -1.0033, -1.3212,  0.3462, -0.0443]])
y_probs = tensor([[0.0907, 0.3848, 0.0606, 0.4538, 0.0101],
        [0.3040, 0.0052, 0.2384, 0.4207, 0.0317],
        [0.2200, 0..., 0.2575, 0.0155],
        [0.0323, 0.3480, 0.4290, 0.1679, 0.0229],
        [0.3263, 0.0373, 0.1527, 0.4640, 0.0196]])
z = tensor([-2.0000, -1.5000, -1.0000, -0.5000,  0.0000])

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (5) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range2-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2bca10>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:95: in _test
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7d18cc1caca0>, array([1.6927574], dtype=float32), array([1.], dtype=float32))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=1e-05', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=1e-05
E           
E           Mismatched elements: 1 / 1 (100%)
E           Max absolute difference among violations: 0.69275737
E           Max relative difference among violations: 0.69275737
E            ACTUAL: array([1.692757], dtype=float32)
E            DESIRED: array([1.], dtype=float32)

/usr/lib/python3.11/contextlib.py:81: AssertionError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range2-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2bcc90>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.2292, -0.1249],
        [-0.2030,  0.7262],
        [ 0.0179,  1.2844],
        [-0.5894,  0.7782],
        [-0.1806, -1.3052],
        [-1.4904, -0.3021],
        [ 0.1131,  1.8816]])
y_probs = tensor([[0.1669, 0.8331],
        [0.7831, 0.2169],
        [0.0882, 0.9118],
        [0.7256, 0.2744],
        [0.4378, 0.5622],
        [0.7504, 0.2496],
        [0.3544, 0.6456]])
z = tensor([-2.,  1.])

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (2) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range2-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2bcf50>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:95: in _test
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7d18cc1cb560>, array([3.7507544], dtype=float32), array([1.], dtype=float32))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=1e-05', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=1e-05
E           
E           Mismatched elements: 1 / 1 (100%)
E           Max absolute difference among violations: 2.7507544
E           Max relative difference among violations: 2.7507544
E            ACTUAL: array([3.750754], dtype=float32)
E            DESIRED: array([1.], dtype=float32)

/usr/lib/python3.11/contextlib.py:81: AssertionError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range2-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2bd210>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.7200,  0.9945,  0.0369,  0.3606, -0.4367],
        [ 0.2599, -0.3114,  0.0170,  0.5558, -0.1660],
        ...0.8569],
        [ 0.8424, -1.2578,  0.6872, -0.3083, -0.2062],
        [-0.1751, -0.8410, -1.4131,  1.2354, -0.1131]])
y_probs = tensor([[0.1571, 0.0147, 0.2832, 0.3280, 0.2170],
        [0.0100, 0.4443, 0.4738, 0.0076, 0.0643],
        [0.2634, 0..., 0.4339, 0.2430],
        [0.0917, 0.0841, 0.3633, 0.3511, 0.1098],
        [0.2332, 0.0788, 0.3931, 0.0275, 0.2673]])
z = tensor([-2.0000, -1.2500, -0.5000,  0.2500,  1.0000])

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (5) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range3-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2bd4d0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:95: in _test
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7d18cc1cbf60>, array([0.7534553], dtype=float32), array([1.], dtype=float32))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=1e-05', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=1e-05
E           
E           Mismatched elements: 1 / 1 (100%)
E           Max absolute difference among violations: 0.24654472
E           Max relative difference among violations: 0.24654472
E            ACTUAL: array([0.753455], dtype=float32)
E            DESIRED: array([1.], dtype=float32)

/usr/lib/python3.11/contextlib.py:81: AssertionError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range3-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2bd7d0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.6973, -0.0175],
        [-0.2609,  1.2890],
        [ 1.3554,  2.6401],
        [-1.3060,  0.7029],
        [ 0.8424, -1.5745],
        [ 0.0473, -0.6711],
        [-1.2212, -1.6659]])
y_probs = tensor([[0.6962, 0.3038],
        [0.9273, 0.0727],
        [0.8519, 0.1481],
        [0.3506, 0.6494],
        [0.6164, 0.3836],
        [0.7756, 0.2244],
        [0.4712, 0.5288]])
z = tensor([0., 1.])

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (2) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range3-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2bdb10>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:95: in _test
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7d18cc16c540>, array([0.97131467], dtype=float32), array([1.], dtype=float32))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=1e-05', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=1e-05
E           
E           Mismatched elements: 1 / 1 (100%)
E           Max absolute difference among violations: 0.02868533
E           Max relative difference among violations: 0.02868533
E            ACTUAL: array([0.971315], dtype=float32)
E            DESIRED: array([1.], dtype=float32)

/usr/lib/python3.11/contextlib.py:81: AssertionError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range3-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2bde50>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 1.2076, -0.3961, -0.9197,  0.4352, -0.2937],
        [-1.4321, -0.0476, -0.3302,  0.8950,  1.2525],
        ...1.2092],
        [ 0.0350, -0.6210, -0.2317,  1.3395,  1.5055],
        [-0.2758,  0.6555, -1.6008,  0.5915, -0.1499]])
y_probs = tensor([[0.2365, 0.2945, 0.3720, 0.0653, 0.0318],
        [0.0701, 0.0815, 0.1948, 0.6089, 0.0447],
        [0.0126, 0..., 0.1138, 0.0991],
        [0.0770, 0.3279, 0.2572, 0.1796, 0.1583],
        [0.1573, 0.2207, 0.0294, 0.4496, 0.1430]])
z = tensor([0.0000, 0.2500, 0.5000, 0.7500, 1.0000])

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (5) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range4-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2be190>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:95: in _test
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7d18cc16d120>, array([0.], dtype=float32), array([1.], dtype=float32))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=1e-05', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=1e-05
E           
E           Mismatched elements: 1 / 1 (100%)
E           Max absolute difference among violations: 1.
E           Max relative difference among violations: 1.
E            ACTUAL: array([0.], dtype=float32)
E            DESIRED: array([1.], dtype=float32)

/usr/lib/python3.11/contextlib.py:81: AssertionError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range4-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2be4d0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-2.1682, -0.6242],
        [-0.7413,  0.4881],
        [ 0.2633, -1.9976],
        [-0.1199, -1.6203],
        [-0.4321,  1.2216],
        [-1.2673,  0.8693],
        [-0.4971, -0.9818]])
y_probs = tensor([[0.9128, 0.0872],
        [0.6857, 0.3143],
        [0.8160, 0.1840],
        [0.9896, 0.0104],
        [0.5758, 0.4242],
        [0.8451, 0.1549],
        [0.8906, 0.1094]])
z = tensor([1., 5.])

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (2) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range4-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2be810>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:95: in _test
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7d18cc16d800>, array([0.18308768], dtype=float32), array([1.], dtype=float32))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=1e-05', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=1e-05
E           
E           Mismatched elements: 1 / 1 (100%)
E           Max absolute difference among violations: 0.8169123
E           Max relative difference among violations: 0.8169123
E            ACTUAL: array([0.183088], dtype=float32)
E            DESIRED: array([1.], dtype=float32)

/usr/lib/python3.11/contextlib.py:81: AssertionError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range4-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2beb50>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.3315, -0.6011,  1.2256,  0.8947,  0.5367],
        [-0.8907, -0.0125, -0.4300,  0.0451, -2.0134],
        ...0.7635],
        [ 0.0580,  0.1883,  0.7747,  1.1074,  2.0174],
        [ 1.3247,  0.4407,  0.5463, -1.0340,  0.8409]])
y_probs = tensor([[0.1328, 0.0315, 0.6515, 0.0171, 0.1671],
        [0.2724, 0.0532, 0.1148, 0.5205, 0.0390],
        [0.0149, 0..., 0.1573, 0.3978],
        [0.0322, 0.3476, 0.0882, 0.4028, 0.1292],
        [0.0948, 0.3241, 0.0082, 0.5330, 0.0400]])
z = tensor([1., 2., 3., 4., 5.])

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (5) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range0-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2c4150>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.2254,  0.6157]], device='cuda:0')
y_probs = tensor([[0.7410, 0.2590]], device='cuda:0')
z = tensor([-3., -1.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cpu and cuda:0! (when checking argument for argument index in method wrapper_CUDA_scatter_add_)

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range0-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2c4650>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.9138, -0.7484],
        [-0.8722,  1.6273],
        [-1.1456, -0.3275],
        [-0.7216, -0.2399],
        [-0.5353, -1.2364],
        [-0.3629,  1.0954],
        [ 0.0553,  0.6068]], device='cuda:0')
y_probs = tensor([[0.2759, 0.7241],
        [0.6107, 0.3893],
        [0.7350, 0.2650],
        [0.2332, 0.7668],
        [0.3168, 0.6832],
        [0.4082, 0.5918],
        [0.0732, 0.9268]], device='cuda:0')
z = tensor([-3., -1.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (2) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range0-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2c4d50>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.2826, -1.5538,  0.3350, -0.4175,  0.7340]], device='cuda:0')
y_probs = tensor([[0.2392, 0.0049, 0.0686, 0.5702, 0.1171]], device='cuda:0')
z = tensor([-3.0000, -2.5000, -2.0000, -1.5000, -1.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cpu and cuda:0! (when checking argument for argument index in method wrapper_CUDA_scatter_add_)

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range0-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2c70d0>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.4842,  0.1723, -1.9585,  2.1512,  1.1266],
        [ 0.2786, -0.9763, -0.9572,  0.4774, -1.1137],
        ...[-0.6439,  1.6343, -1.5399, -1.3929,  0.7382],
        [ 0.8378,  0.0653,  1.6364,  0.1141,  2.0032]], device='cuda:0')
y_probs = tensor([[0.0490, 0.2325, 0.2875, 0.3825, 0.0485],
        [0.1655, 0.0184, 0.1054, 0.5615, 0.1492],
        [0.1852, 0...,
        [0.0921, 0.0782, 0.3080, 0.0197, 0.5021],
        [0.4676, 0.1013, 0.1415, 0.1790, 0.1107]], device='cuda:0')
z = tensor([-3.0000, -2.5000, -2.0000, -1.5000, -1.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (5) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range1-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2c7250>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-1.0719,  0.3170]], device='cuda:0')
y_probs = tensor([[0.8888, 0.1112]], device='cuda:0')
z = tensor([-2.,  0.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cpu and cuda:0! (when checking argument for argument index in method wrapper_CUDA_scatter_add_)

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range1-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2c7410>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.7442,  1.6199],
        [ 0.2628, -0.9355],
        [-0.2031, -0.1131],
        [-0.3690, -0.0662],
        [ 0.9311, -0.7729],
        [-0.0858, -0.6425],
        [-0.4191, -0.7863]], device='cuda:0')
y_probs = tensor([[0.1057, 0.8943],
        [0.1462, 0.8538],
        [0.2551, 0.7449],
        [0.2791, 0.7209],
        [0.6051, 0.3949],
        [0.6320, 0.3680],
        [0.0741, 0.9259]], device='cuda:0')
z = tensor([-2.,  0.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (2) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range1-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2c76d0>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.6469, -1.4392, -0.7562,  1.0444,  1.2267]], device='cuda:0')
y_probs = tensor([[0.1797, 0.0904, 0.0424, 0.1855, 0.5019]], device='cuda:0')
z = tensor([-2.0000, -1.5000, -1.0000, -0.5000,  0.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cpu and cuda:0! (when checking argument for argument index in method wrapper_CUDA_scatter_add_)

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range1-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2c7990>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.0605, -0.4993, -0.1852,  2.0819,  0.3387],
        [ 0.4679,  0.4960, -1.5958, -1.0115,  0.0327],
        ...[-0.5576,  0.2498, -0.7927, -1.6587, -0.2412],
        [ 0.4285,  0.2108, -0.8879,  0.9552, -0.5082]], device='cuda:0')
y_probs = tensor([[0.0748, 0.6609, 0.0968, 0.0644, 0.1031],
        [0.1861, 0.1290, 0.0907, 0.1922, 0.4021],
        [0.0166, 0...,
        [0.0623, 0.1124, 0.0055, 0.6464, 0.1734],
        [0.1066, 0.3974, 0.0990, 0.0576, 0.3393]], device='cuda:0')
z = tensor([-2.0000, -1.5000, -1.0000, -0.5000,  0.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (5) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range2-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2c7c50>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.4299, -0.2128]], device='cuda:0')
y_probs = tensor([[0.8089, 0.1911]], device='cuda:0')
z = tensor([-2.,  1.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cpu and cuda:0! (when checking argument for argument index in method wrapper_CUDA_scatter_add_)

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range2-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2c7ed0>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-2.3513, -0.2725],
        [-0.2502, -0.9268],
        [ 0.4002,  0.5931],
        [-0.4516, -1.2907],
        [-1.2497, -0.9006],
        [-1.2175, -1.6391],
        [-0.2252, -0.0605]], device='cuda:0')
y_probs = tensor([[0.3091, 0.6909],
        [0.6052, 0.3948],
        [0.9930, 0.0070],
        [0.5847, 0.4153],
        [0.0871, 0.9129],
        [0.4375, 0.5625],
        [0.7111, 0.2889]], device='cuda:0')
z = tensor([-2.,  1.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (2) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range2-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2d81d0>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.9376, -0.6043,  1.4565,  0.6176, -0.0527]], device='cuda:0')
y_probs = tensor([[0.1691, 0.2508, 0.1302, 0.1954, 0.2546]], device='cuda:0')
z = tensor([-2.0000, -1.2500, -0.5000,  0.2500,  1.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cpu and cuda:0! (when checking argument for argument index in method wrapper_CUDA_scatter_add_)

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range2-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2d8490>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 1.4504e+00, -8.4872e-01,  5.2636e-01,  4.1988e-01, -9.0993e-01],
        [-1.6854e+00, -3.0871e-01,  6.7710e...e-01,  1.0956e+00],
        [-5.1261e-01,  3.7052e-01, -8.1142e-04, -7.1452e-01, -4.5033e-01]],
       device='cuda:0')
y_probs = tensor([[0.2398, 0.0350, 0.1487, 0.4297, 0.1469],
        [0.1975, 0.0250, 0.1133, 0.4908, 0.1735],
        [0.0672, 0...,
        [0.1712, 0.2086, 0.1980, 0.3310, 0.0912],
        [0.2848, 0.3446, 0.0394, 0.2393, 0.0919]], device='cuda:0')
z = tensor([-2.0000, -1.2500, -0.5000,  0.2500,  1.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (5) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range3-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2d8750>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[1.4603, 0.1877]], device='cuda:0')
y_probs = tensor([[0.3302, 0.6698]], device='cuda:0')
z = tensor([0., 1.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cpu and cuda:0! (when checking argument for argument index in method wrapper_CUDA_scatter_add_)

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range3-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2d8a50>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.7867, -0.9102],
        [-0.2015, -0.6554],
        [ 0.3129, -0.2917],
        [-0.9826, -1.7119],
        [ 0.3071, -1.2516],
        [-1.3461,  0.2883],
        [-2.5581, -0.5987]], device='cuda:0')
y_probs = tensor([[0.8444, 0.1556],
        [0.3989, 0.6011],
        [0.7784, 0.2216],
        [0.9106, 0.0894],
        [0.2081, 0.7919],
        [0.3621, 0.6379],
        [0.2216, 0.7784]], device='cuda:0')
z = tensor([0., 1.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (2) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range3-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2d8d90>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 2.3203,  0.2355,  0.0215, -0.2534,  0.4141]], device='cuda:0')
y_probs = tensor([[0.4280, 0.1291, 0.1288, 0.1926, 0.1215]], device='cuda:0')
z = tensor([0.0000, 0.2500, 0.5000, 0.7500, 1.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cpu and cuda:0! (when checking argument for argument index in method wrapper_CUDA_scatter_add_)

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range3-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2d90d0>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.3610,  0.7870,  1.2715,  1.0702, -0.0974],
        [-0.6754, -0.7805, -0.8772,  0.8801, -0.1963],
        ...[ 1.7657,  2.5377,  0.9108, -1.8852,  1.7602],
        [ 0.2030,  1.1031,  1.1567,  0.4774, -0.9715]], device='cuda:0')
y_probs = tensor([[0.0048, 0.1865, 0.5688, 0.0078, 0.2321],
        [0.2397, 0.1232, 0.2190, 0.1952, 0.2229],
        [0.0346, 0...,
        [0.3185, 0.2772, 0.0595, 0.3004, 0.0444],
        [0.2985, 0.2131, 0.2252, 0.0976, 0.1656]], device='cuda:0')
z = tensor([0.0000, 0.2500, 0.5000, 0.7500, 1.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (5) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range4-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2d9410>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.6060, -1.9267]], device='cuda:0')
y_probs = tensor([[0.2746, 0.7254]], device='cuda:0')
z = tensor([1., 5.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cpu and cuda:0! (when checking argument for argument index in method wrapper_CUDA_scatter_add_)

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range4-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2d9750>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.7735,  0.3219],
        [ 0.4813, -0.6831],
        [ 1.2804,  0.1819],
        [ 0.4701, -0.5641],
        [-1.1192, -1.0951],
        [-0.5382,  0.0709],
        [-1.9405,  1.1823]], device='cuda:0')
y_probs = tensor([[0.8197, 0.1803],
        [0.4740, 0.5260],
        [0.4177, 0.5823],
        [0.5967, 0.4033],
        [0.6862, 0.3138],
        [0.9627, 0.0373],
        [0.4805, 0.5195]], device='cuda:0')
z = tensor([1., 5.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (2) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range4-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2d9a90>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-1.0206,  0.5924, -0.2430, -1.1355,  0.5703]], device='cuda:0')
y_probs = tensor([[0.1774, 0.2714, 0.1578, 0.0670, 0.3265]], device='cuda:0')
z = tensor([1., 2., 3., 4., 5.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cpu and cuda:0! (when checking argument for argument index in method wrapper_CUDA_scatter_add_)

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range4-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x7d18cc2d9dd0>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.4703,  2.1474,  1.5946, -1.0055, -1.5281],
        [ 0.2456,  0.1450,  0.6512,  0.3679, -0.6930],
        ...[-1.6870, -0.8583, -1.0406,  0.5529,  1.1070],
        [-0.9853, -0.0624, -0.0699,  0.8479, -0.7840]], device='cuda:0')
y_probs = tensor([[0.2814, 0.1286, 0.0431, 0.4295, 0.1175],
        [0.2916, 0.0408, 0.5180, 0.1169, 0.0326],
        [0.2174, 0...,
        [0.0104, 0.5595, 0.1141, 0.0654, 0.2506],
        [0.1089, 0.5569, 0.0065, 0.0671, 0.2606]], device='cuda:0')
z = tensor([1., 2., 3., 4., 5.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        assert y.ndim == 2, 'y should be a 2D array'
        assert y_probs.ndim == 2, 'y_probs should be a 2D array'
        assert z.ndim == 1, 'z should be a 1D array'
        assert y.shape == y_probs.shape, 'y and y_probs should have the same shape'
        assert y.shape[1] == z.shape[0], 'The number of atoms in y and z should match'
        batch_size, n_atoms = y.shape
        delta_z = z[1] - z[0]
        bj = (y.unsqueeze(-1) - z.unsqueeze(0).unsqueeze(0)) / delta_z
        bj_floor = torch.floor(bj)
        bj_ceil = torch.ceil(bj)
        bj_floor = torch.clamp(bj_floor, 0, n_atoms - 1)
        bj_ceil = torch.clamp(bj_ceil, 0, n_atoms - 1)
        m_l = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        m_u = torch.zeros((batch_size, n_atoms), dtype=torch.float32)
        for i in range(n_atoms):
>           m_l.scatter_add_(1, bj_floor[:, :, i].long(), y_probs[:, i] * (bj_ceil[:, :, i] - bj[:, :, i]))
E           RuntimeError: The size of tensor a (7) must match the size of tensor b (5) at non-singleton dimension 1

/local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:25: RuntimeError
=============================== warnings summary ===============================
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

tests/agents_tests/test_categorical_dqn.py: 40 warnings
  /local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:7: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
    y = torch.tensor(y, dtype=torch.float32)

tests/agents_tests/test_categorical_dqn.py: 40 warnings
  /local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:8: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
    y_probs = torch.tensor(y_probs, dtype=torch.float32)

tests/agents_tests/test_categorical_dqn.py: 40 warnings
  /local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:9: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
    z = torch.tensor(z, dtype=torch.float32)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7]
======================= 40 failed, 124 warnings in 1.86s =======================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pfrl/pfrl/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pfrl/pfrl
configfile: pytest.ini
collecting ... collected 40 items

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7] PASSED

=============================== warnings summary ===============================
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 40 passed, 4 warnings in 1.17s ========================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pfrl/pfrl/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pfrl/pfrl
configfile: pytest.ini
collecting ... collected 40 items

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1] PASSED
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7] PASSED

=============================== warnings summary ===============================
../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../../../../../../local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 40 passed, 4 warnings in 1.31s ========================
