output file:
processed_korniacenter_crop3d235.json
function:
center_crop3d
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size0] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size1] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_gradcheck[cpu] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size0]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size0]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size1]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size0] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size1]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_gradcheck[cpu]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size1] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size2]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'cudagraphs', 'tvm', 'openxla', 'onnxrt', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 8 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size0] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size0] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_gradcheck[cpu] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_dynamo[cpu-float32-inductor] PASSED

=================================== FAILURES ===================================
________ TestCenterCrop3D.test_center_crop_357[cpu-float32-crop_size0] _________

self = <test_crop3d.TestCenterCrop3D object at 0x7616ad932290>
crop_size = (3, 5, 7), device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("crop_size", [(3, 5, 7), (5, 3, 7), (7, 3, 5)])
    def test_center_crop_357(self, crop_size, device, dtype):
        inp = torch.arange(0.0, 343.0, device=device, dtype=dtype).view(1, 1, 7, 7, 7)
        expected = inp[
            :,
            :,
            (inp.size(2) // 2 - crop_size[0] // 2) : (inp.size(2) // 2 + crop_size[0] // 2 + 1),
            (inp.size(3) // 2 - crop_size[1] // 2) : (inp.size(3) // 2 + crop_size[1] // 2 + 1),
            (inp.size(4) // 2 - crop_size[2] // 2) : (inp.size(4) // 2 + crop_size[2] // 2 + 1),
        ]
        out_crop = kornia.geometry.transform.center_crop3d(inp, crop_size, align_corners=True)
>       self.assert_close(out_crop, expected, rtol=1e-4, atol=1e-4)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = None
expected = tensor([[[[[105., 106., 107., 108., 109., 110., 111.],
           [112., 113., 114., 115., 116., 117., 118.],
        ...23.],
           [224., 225., 226., 227., 228., 229., 230.],
           [231., 232., 233., 234., 235., 236., 237.]]]]])
rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: None mismatch: None is not tensor([[[[[105., 106., 107., 108., 109., 110., 111.],
E                  [112., 113., 114., 115., 116., 117., 118.],
E                  [119., 120., 121., 122., 123., 124., 125.],
E                  [126., 127., 128., 129., 130., 131., 132.],
E                  [133., 134., 135., 136., 137., 138., 139.]],
E       
E                 [[154., 155., 156., 157., 158., 159., 160.],
E                  [161., 162., 163., 164., 165., 166., 167.],
E                  [168., 169., 170., 171., 172., 173., 174.],
E                  [175., 176., 177., 178., 179., 180., 181.],
E                  [182., 183., 184., 185., 186., 187., 188.]],
E       
E                 [[203., 204., 205., 206., 207., 208., 209.],
E                  [210., 211., 212., 213., 214., 215., 216.],
E                  [217., 218., 219., 220., 221., 222., 223.],
E                  [224., 225., 226., 227., 228., 229., 230.],
E                  [231., 232., 233., 234., 235., 236., 237.]]]]])

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
________ TestCenterCrop3D.test_center_crop_357[cpu-float32-crop_size1] _________

self = <test_crop3d.TestCenterCrop3D object at 0x7616ad932200>
crop_size = (5, 3, 7), device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("crop_size", [(3, 5, 7), (5, 3, 7), (7, 3, 5)])
    def test_center_crop_357(self, crop_size, device, dtype):
        inp = torch.arange(0.0, 343.0, device=device, dtype=dtype).view(1, 1, 7, 7, 7)
        expected = inp[
            :,
            :,
            (inp.size(2) // 2 - crop_size[0] // 2) : (inp.size(2) // 2 + crop_size[0] // 2 + 1),
            (inp.size(3) // 2 - crop_size[1] // 2) : (inp.size(3) // 2 + crop_size[1] // 2 + 1),
            (inp.size(4) // 2 - crop_size[2] // 2) : (inp.size(4) // 2 + crop_size[2] // 2 + 1),
        ]
        out_crop = kornia.geometry.transform.center_crop3d(inp, crop_size, align_corners=True)
>       self.assert_close(out_crop, expected, rtol=1e-4, atol=1e-4)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = None
expected = tensor([[[[[ 63.,  64.,  65.,  66.,  67.,  68.,  69.],
           [ 70.,  71.,  72.,  73.,  74.,  75.,  76.],
        ...65.],
           [266., 267., 268., 269., 270., 271., 272.],
           [273., 274., 275., 276., 277., 278., 279.]]]]])
rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: None mismatch: None is not tensor([[[[[ 63.,  64.,  65.,  66.,  67.,  68.,  69.],
E                  [ 70.,  71.,  72.,  73.,  74.,  75.,  76.],
E                  [ 77.,  78.,  79.,  80.,  81.,  82.,  83.]],
E       
E                 [[112., 113., 114., 115., 116., 117., 118.],
E                  [119., 120., 121., 122., 123., 124., 125.],
E                  [126., 127., 128., 129., 130., 131., 132.]],
E       
E                 [[161., 162., 163., 164., 165., 166., 167.],
E                  [168., 169., 170., 171., 172., 173., 174.],
E                  [175., 176., 177., 178., 179., 180., 181.]],
E       
E                 [[210., 211., 212., 213., 214., 215., 216.],
E                  [217., 218., 219., 220., 221., 222., 223.],
E                  [224., 225., 226., 227., 228., 229., 230.]],
E       
E                 [[259., 260., 261., 262., 263., 264., 265.],
E                  [266., 267., 268., 269., 270., 271., 272.],
E                  [273., 274., 275., 276., 277., 278., 279.]]]]])

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
________ TestCenterCrop3D.test_center_crop_357[cpu-float32-crop_size2] _________

self = <test_crop3d.TestCenterCrop3D object at 0x7616ad9324a0>
crop_size = (7, 3, 5), device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("crop_size", [(3, 5, 7), (5, 3, 7), (7, 3, 5)])
    def test_center_crop_357(self, crop_size, device, dtype):
        inp = torch.arange(0.0, 343.0, device=device, dtype=dtype).view(1, 1, 7, 7, 7)
        expected = inp[
            :,
            :,
            (inp.size(2) // 2 - crop_size[0] // 2) : (inp.size(2) // 2 + crop_size[0] // 2 + 1),
            (inp.size(3) // 2 - crop_size[1] // 2) : (inp.size(3) // 2 + crop_size[1] // 2 + 1),
            (inp.size(4) // 2 - crop_size[2] // 2) : (inp.size(4) // 2 + crop_size[2] // 2 + 1),
        ]
        out_crop = kornia.geometry.transform.center_crop3d(inp, crop_size, align_corners=True)
>       self.assert_close(out_crop, expected, rtol=1e-4, atol=1e-4)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = None
expected = tensor([[[[[ 15.,  16.,  17.,  18.,  19.],
           [ 22.,  23.,  24.,  25.,  26.],
           [ 29.,  30.,  31.,  3...09., 310., 311., 312., 313.],
           [316., 317., 318., 319., 320.],
           [323., 324., 325., 326., 327.]]]]])
rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: None mismatch: None is not tensor([[[[[ 15.,  16.,  17.,  18.,  19.],
E                  [ 22.,  23.,  24.,  25.,  26.],
E                  [ 29.,  30.,  31.,  32.,  33.]],
E       
E                 [[ 64.,  65.,  66.,  67.,  68.],
E                  [ 71.,  72.,  73.,  74.,  75.],
E                  [ 78.,  79.,  80.,  81.,  82.]],
E       
E                 [[113., 114., 115., 116., 117.],
E                  [120., 121., 122., 123., 124.],
E                  [127., 128., 129., 130., 131.]],
E       
E                 [[162., 163., 164., 165., 166.],
E                  [169., 170., 171., 172., 173.],
E                  [176., 177., 178., 179., 180.]],
E       
E                 [[211., 212., 213., 214., 215.],
E                  [218., 219., 220., 221., 222.],
E                  [225., 226., 227., 228., 229.]],
E       
E                 [[260., 261., 262., 263., 264.],
E                  [267., 268., 269., 270., 271.],
E                  [274., 275., 276., 277., 278.]],
E       
E                 [[309., 310., 311., 312., 313.],
E                  [316., 317., 318., 319., 320.],
E                  [323., 324., 325., 326., 327.]]]]])

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
_____ TestCenterCrop3D.test_center_crop_357_batch[cpu-float32-crop_size0] ______

self = <test_crop3d.TestCenterCrop3D object at 0x7616ad932830>
crop_size = (3, 5, 7), device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("crop_size", [(3, 5, 7), (5, 3, 7), (7, 3, 5)])
    def test_center_crop_357_batch(self, crop_size, device, dtype):
        inp = torch.cat(
            [
                torch.arange(0.0, 343.0, device=device, dtype=dtype).view(1, 1, 7, 7, 7),
                torch.arange(343.0, 686.0, device=device, dtype=dtype).view(1, 1, 7, 7, 7),
            ]
        )
        expected = inp[
            :,
            :,
            (inp.size(2) // 2 - crop_size[0] // 2) : (inp.size(2) // 2 + crop_size[0] // 2 + 1),
            (inp.size(3) // 2 - crop_size[1] // 2) : (inp.size(3) // 2 + crop_size[1] // 2 + 1),
            (inp.size(4) // 2 - crop_size[2] // 2) : (inp.size(4) // 2 + crop_size[2] // 2 + 1),
        ]
        out_crop = kornia.geometry.transform.center_crop3d(inp, crop_size, align_corners=True)
>       self.assert_close(out_crop, expected, rtol=1e-4, atol=1e-4)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = None
expected = tensor([[[[[105., 106., 107., 108., 109., 110., 111.],
           [112., 113., 114., 115., 116., 117., 118.],
        ...66.],
           [567., 568., 569., 570., 571., 572., 573.],
           [574., 575., 576., 577., 578., 579., 580.]]]]])
rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: None mismatch: None is not tensor([[[[[105., 106., 107., 108., 109., 110., 111.],
E                  [112., 113., 114., 115., 116., 117., 118.],
E                  [119., 120., 121., 122., 123., 124., 125.],
E                  [126., 127., 128., 129., 130., 131., 132.],
E                  [133., 134., 135., 136., 137., 138., 139.]],
E       
E                 [[154., 155., 156., 157., 158., 159., 160.],
E                  [161., 162., 163., 164., 165., 166., 167.],
E                  [168., 169., 170., 171., 172., 173., 174.],
E                  [175., 176., 177., 178., 179., 180., 181.],
E                  [182., 183., 184., 185., 186., 187., 188.]],
E       
E                 [[203., 204., 205., 206., 207., 208., 209.],
E                  [210., 211., 212., 213., 214., 215., 216.],
E                  [217., 218., 219., 220., 221., 222., 223.],
E                  [224., 225., 226., 227., 228., 229., 230.],
E                  [231., 232., 233., 234., 235., 236., 237.]]]],
E       
E       
E       
E               [[[[448., 449., 450., 451., 452., 453., 454.],
E                  [455., 456., 457., 458., 459., 460., 461.],
E                  [462., 463., 464., 465., 466., 467., 468.],
E                  [469., 470., 471., 472., 473., 474., 475.],
E                  [476., 477., 478., 479., 480., 481., 482.]],
E       
E                 [[497., 498., 499., 500., 501., 502., 503.],
E                  [504., 505., 506., 507., 508., 509., 510.],
E                  [511., 512., 513., 514., 515., 516., 517.],
E                  [518., 519., 520., 521., 522., 523., 524.],
E                  [525., 526., 527., 528., 529., 530., 531.]],
E       
E                 [[546., 547., 548., 549., 550., 551., 552.],
E                  [553., 554., 555., 556., 557., 558., 559.],
E                  [560., 561., 562., 563., 564., 565., 566.],
E                  [567., 568., 569., 570., 571., 572., 573.],
E                  [574., 575., 576., 577., 578., 579., 580.]]]]])

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
_____ TestCenterCrop3D.test_center_crop_357_batch[cpu-float32-crop_size1] ______

self = <test_crop3d.TestCenterCrop3D object at 0x7616ad932770>
crop_size = (5, 3, 7), device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("crop_size", [(3, 5, 7), (5, 3, 7), (7, 3, 5)])
    def test_center_crop_357_batch(self, crop_size, device, dtype):
        inp = torch.cat(
            [
                torch.arange(0.0, 343.0, device=device, dtype=dtype).view(1, 1, 7, 7, 7),
                torch.arange(343.0, 686.0, device=device, dtype=dtype).view(1, 1, 7, 7, 7),
            ]
        )
        expected = inp[
            :,
            :,
            (inp.size(2) // 2 - crop_size[0] // 2) : (inp.size(2) // 2 + crop_size[0] // 2 + 1),
            (inp.size(3) // 2 - crop_size[1] // 2) : (inp.size(3) // 2 + crop_size[1] // 2 + 1),
            (inp.size(4) // 2 - crop_size[2] // 2) : (inp.size(4) // 2 + crop_size[2] // 2 + 1),
        ]
        out_crop = kornia.geometry.transform.center_crop3d(inp, crop_size, align_corners=True)
>       self.assert_close(out_crop, expected, rtol=1e-4, atol=1e-4)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = None
expected = tensor([[[[[ 63.,  64.,  65.,  66.,  67.,  68.,  69.],
           [ 70.,  71.,  72.,  73.,  74.,  75.,  76.],
        ...08.],
           [609., 610., 611., 612., 613., 614., 615.],
           [616., 617., 618., 619., 620., 621., 622.]]]]])
rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: None mismatch: None is not tensor([[[[[ 63.,  64.,  65.,  66.,  67.,  68.,  69.],
E                  [ 70.,  71.,  72.,  73.,  74.,  75.,  76.],
E                  [ 77.,  78.,  79.,  80.,  81.,  82.,  83.]],
E       
E                 [[112., 113., 114., 115., 116., 117., 118.],
E                  [119., 120., 121., 122., 123., 124., 125.],
E                  [126., 127., 128., 129., 130., 131., 132.]],
E       
E                 [[161., 162., 163., 164., 165., 166., 167.],
E                  [168., 169., 170., 171., 172., 173., 174.],
E                  [175., 176., 177., 178., 179., 180., 181.]],
E       
E                 [[210., 211., 212., 213., 214., 215., 216.],
E                  [217., 218., 219., 220., 221., 222., 223.],
E                  [224., 225., 226., 227., 228., 229., 230.]],
E       
E                 [[259., 260., 261., 262., 263., 264., 265.],
E                  [266., 267., 268., 269., 270., 271., 272.],
E                  [273., 274., 275., 276., 277., 278., 279.]]]],
E       
E       
E       
E               [[[[406., 407., 408., 409., 410., 411., 412.],
E                  [413., 414., 415., 416., 417., 418., 419.],
E                  [420., 421., 422., 423., 424., 425., 426.]],
E       
E                 [[455., 456., 457., 458., 459., 460., 461.],
E                  [462., 463., 464., 465., 466., 467., 468.],
E                  [469., 470., 471., 472., 473., 474., 475.]],
E       
E                 [[504., 505., 506., 507., 508., 509., 510.],
E                  [511., 512., 513., 514., 515., 516., 517.],
E                  [518., 519., 520., 521., 522., 523., 524.]],
E       
E                 [[553., 554., 555., 556., 557., 558., 559.],
E                  [560., 561., 562., 563., 564., 565., 566.],
E                  [567., 568., 569., 570., 571., 572., 573.]],
E       
E                 [[602., 603., 604., 605., 606., 607., 608.],
E                  [609., 610., 611., 612., 613., 614., 615.],
E                  [616., 617., 618., 619., 620., 621., 622.]]]]])

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
_____ TestCenterCrop3D.test_center_crop_357_batch[cpu-float32-crop_size2] ______

self = <test_crop3d.TestCenterCrop3D object at 0x7616ad931f60>
crop_size = (7, 3, 5), device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("crop_size", [(3, 5, 7), (5, 3, 7), (7, 3, 5)])
    def test_center_crop_357_batch(self, crop_size, device, dtype):
        inp = torch.cat(
            [
                torch.arange(0.0, 343.0, device=device, dtype=dtype).view(1, 1, 7, 7, 7),
                torch.arange(343.0, 686.0, device=device, dtype=dtype).view(1, 1, 7, 7, 7),
            ]
        )
        expected = inp[
            :,
            :,
            (inp.size(2) // 2 - crop_size[0] // 2) : (inp.size(2) // 2 + crop_size[0] // 2 + 1),
            (inp.size(3) // 2 - crop_size[1] // 2) : (inp.size(3) // 2 + crop_size[1] // 2 + 1),
            (inp.size(4) // 2 - crop_size[2] // 2) : (inp.size(4) // 2 + crop_size[2] // 2 + 1),
        ]
        out_crop = kornia.geometry.transform.center_crop3d(inp, crop_size, align_corners=True)
>       self.assert_close(out_crop, expected, rtol=1e-4, atol=1e-4)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = None
expected = tensor([[[[[ 15.,  16.,  17.,  18.,  19.],
           [ 22.,  23.,  24.,  25.,  26.],
           [ 29.,  30.,  31.,  3...52., 653., 654., 655., 656.],
           [659., 660., 661., 662., 663.],
           [666., 667., 668., 669., 670.]]]]])
rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: None mismatch: None is not tensor([[[[[ 15.,  16.,  17.,  18.,  19.],
E                  [ 22.,  23.,  24.,  25.,  26.],
E                  [ 29.,  30.,  31.,  32.,  33.]],
E       
E                 [[ 64.,  65.,  66.,  67.,  68.],
E                  [ 71.,  72.,  73.,  74.,  75.],
E                  [ 78.,  79.,  80.,  81.,  82.]],
E       
E                 [[113., 114., 115., 116., 117.],
E                  [120., 121., 122., 123., 124.],
E                  [127., 128., 129., 130., 131.]],
E       
E                 [[162., 163., 164., 165., 166.],
E                  [169., 170., 171., 172., 173.],
E                  [176., 177., 178., 179., 180.]],
E       
E                 [[211., 212., 213., 214., 215.],
E                  [218., 219., 220., 221., 222.],
E                  [225., 226., 227., 228., 229.]],
E       
E                 [[260., 261., 262., 263., 264.],
E                  [267., 268., 269., 270., 271.],
E                  [274., 275., 276., 277., 278.]],
E       
E                 [[309., 310., 311., 312., 313.],
E                  [316., 317., 318., 319., 320.],
E                  [323., 324., 325., 326., 327.]]]],
E       
E       
E       
E               [[[[358., 359., 360., 361., 362.],
E                  [365., 366., 367., 368., 369.],
E                  [372., 373., 374., 375., 376.]],
E       
E                 [[407., 408., 409., 410., 411.],
E                  [414., 415., 416., 417., 418.],
E                  [421., 422., 423., 424., 425.]],
E       
E                 [[456., 457., 458., 459., 460.],
E                  [463., 464., 465., 466., 467.],
E                  [470., 471., 472., 473., 474.]],
E       
E                 [[505., 506., 507., 508., 509.],
E                  [512., 513., 514., 515., 516.],
E                  [519., 520., 521., 522., 523.]],
E       
E                 [[554., 555., 556., 557., 558.],
E                  [561., 562., 563., 564., 565.],
E                  [568., 569., 570., 571., 572.]],
E       
E                 [[603., 604., 605., 606., 607.],
E                  [610., 611., 612., 613., 614.],
E                  [617., 618., 619., 620., 621.]],
E       
E                 [[652., 653., 654., 655., 656.],
E                  [659., 660., 661., 662., 663.],
E                  [666., 667., 668., 669., 670.]]]]])

/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:37: AssertionError
_____________________ TestCenterCrop3D.test_gradcheck[cpu] _____________________

self = <test_crop3d.TestCenterCrop3D object at 0x7616ad932c50>
device = device(type='cpu')

    def test_gradcheck(self, device):
        img = torch.arange(0.0, 343.0, device=device, dtype=torch.float64).view(1, 1, 7, 7, 7)
    
>       self.gradcheck(kornia.geometry.transform.center_crop3d, (img, (3, 5, 7)))

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2075: in _gradcheck_helper
    outputs = _differentiable_outputs(func_out)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:1369: in _differentiable_outputs
    return tuple(o for o in _as_tuple(x) if o.requires_grad)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <tuple_iterator object at 0x7616ad9b69e0>

>   return tuple(o for o in _as_tuple(x) if o.requires_grad)
E   AttributeError: 'NoneType' object has no attribute 'requires_grad'

/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:1369: AttributeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size0]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size0]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_gradcheck[cpu]
========================= 7 failed, 1 passed in 0.44s ==========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'onnxrt', 'inductor', 'jit', 'tvm', 'openxla', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 8 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_dynamo[cpu-float32-inductor] PASSED

============================== 8 passed in 3.65s ===============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'inductor', 'tvm', 'jit', 'cudagraphs', 'onnxrt', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 8 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357[cpu-float32-crop_size2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size0] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_center_crop_357_batch[cpu-float32-crop_size2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/transform/test_crop3d.py::TestCenterCrop3D::test_dynamo[cpu-float32-inductor] PASSED

============================== 8 passed in 3.72s ===============================
