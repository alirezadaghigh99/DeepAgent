output file:
processed_korniamatch_fginn195.json
function:
match_fginn
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'cudagraphs', 'onnxrt', 'jit', 'openxla', 'inductor', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 12 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_jit[cpu-float32] SKIPPED

=================================== FAILURES ===================================
_________________ TestMatchFGINN.test_shape_one_way[cpu-2-4-4] _________________

self = <test_matching.TestMatchFGINN object at 0x7b5932f0f490>, num_desc1 = 2
num_desc2 = 4, dim = 4, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_one_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.2057, 0.2074, 0.3887, 0.7814],
        [0.2807, 0.8744, 0.5353, 0.9793]])
desc2 = tensor([[0.6450, 0.0772, 0.5981, 0.6803],
        [0.5669, 0.7187, 0.1366, 0.0134],
        [0.0409, 0.8176, 0.1665, 0.9043],
        [0.3903, 0.6340, 0.1445, 0.5953]])
lafs1 = tensor([[[[0.4990, 0.0761, 0.8726],
          [0.0281, 0.7038, 0.8459]],

         [[0.9782, 0.3173, 0.6131],
          [0.0374, 0.1213, 0.3203]]]])
lafs2 = tensor([[[[0.4369, 0.3527, 0.9199],
          [0.8141, 0.5428, 0.0856]],

         [[0.5012, 0.2526, 0.2690],
        ...3124],
          [0.1565, 0.0172, 0.7563]],

         [[0.3927, 0.5450, 0.5879],
          [0.2245, 0.8988, 0.1203]]]])
th = 0.9, spatial_th = 1000, mutual = False
dm = tensor([[0.5138, 1.0224, 0.6811, 0.5570],
        [0.9282, 1.0946, 0.4499, 0.6083]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[nn_idx, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:19: IndexError
________________ TestMatchFGINN.test_shape_one_way[cpu-2-5-128] ________________

self = <test_matching.TestMatchFGINN object at 0x7b5932f0f3d0>, num_desc1 = 2
num_desc2 = 5, dim = 128, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_one_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.3093, 0.7430, 0.5115, 0.1485, 0.1692, 0.4311, 0.9064, 0.3473, 0.3505,
         0.1247, 0.4794, 0.5504, 0.85...73, 0.9316,
         0.6056, 0.9913, 0.1330, 0.6022, 0.9071, 0.2675, 0.1367, 0.7239, 0.1277,
         0.9125, 0.4902]])
desc2 = tensor([[7.2911e-01, 7.6391e-01, 3.0282e-01, 7.1829e-01, 7.4029e-01, 8.0360e-01,
         3.1206e-01, 7.8720e-01, 6.67...01,
         8.8859e-01, 1.3853e-01, 9.9819e-01, 7.6483e-01, 7.7032e-02, 1.6178e-01,
         9.2438e-01, 4.7309e-01]])
lafs1 = tensor([[[[0.2689, 0.1438, 0.2929],
          [0.6775, 0.7658, 0.7159]],

         [[0.5756, 0.4108, 0.9024],
          [0.8314, 0.8829, 0.9793]]]])
lafs2 = tensor([[[[0.6476, 0.0641, 0.0449],
          [0.0517, 0.6056, 0.9393]],

         [[0.0403, 0.5116, 0.7789],
        ...6612],
          [0.9862, 0.4485, 0.1826]],

         [[0.7867, 0.9060, 0.7274],
          [0.6829, 0.5072, 0.4299]]]])
th = 0.9, spatial_th = 1000, mutual = False
dm = tensor([[4.7488, 4.5954, 4.2494, 4.7792, 4.8170],
        [4.2052, 5.0039, 4.9188, 4.4606, 4.4640]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[nn_idx, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:19: IndexError
________________ TestMatchFGINN.test_shape_one_way[cpu-6-2-32] _________________

self = <test_matching.TestMatchFGINN object at 0x7b5932f0f760>, num_desc1 = 6
num_desc2 = 2, dim = 32, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_one_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.4305, 0.9331, 0.0521, 0.2626, 0.9902, 0.8150, 0.0078, 0.8233, 0.1520,
         0.4156, 0.7648, 0.1713, 0.28...382, 0.7121, 0.0091, 0.3373, 0.8839, 0.9317, 0.7568, 0.5236, 0.9670,
         0.7814, 0.6618, 0.7860, 0.9452, 0.1211]])
desc2 = tensor([[0.9772, 0.3733, 0.4719, 0.4657, 0.8367, 0.5748, 0.4753, 0.1478, 0.6479,
         0.8091, 0.1566, 0.6318, 0.44...650, 0.0282, 0.9865, 0.9271, 0.3158, 0.8767, 0.1511, 0.3380, 0.0267,
         0.9304, 0.2879, 0.3587, 0.1085, 0.7698]])
lafs1 = tensor([[[[0.7787, 0.9368, 0.3562],
          [0.7674, 0.3372, 0.0628]],

         [[0.3527, 0.0692, 0.3739],
        ...9112],
          [0.2922, 0.8096, 0.7277]],

         [[0.0693, 0.0176, 0.6409],
          [0.2031, 0.5502, 0.2411]]]])
lafs2 = tensor([[[[0.5333, 0.7262, 0.8830],
          [0.3740, 0.6161, 0.6743]],

         [[0.5482, 0.1961, 0.7129],
          [0.3855, 0.4356, 0.5103]]]])
th = 0.9, spatial_th = 1000, mutual = False
dm = tensor([[2.2860, 2.2113],
        [2.4269, 1.7515],
        [2.7808, 2.6125],
        [2.4865, 2.5190],
        [2.4377, 2.3927],
        [2.4463, 2.9907]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[nn_idx, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:19: IndexError
_________________ TestMatchFGINN.test_shape_two_way[cpu-2-4-4] _________________

self = <test_matching.TestMatchFGINN object at 0x7b5932f0fa60>, num_desc1 = 2
num_desc2 = 4, dim = 4, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_two_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000, mutual=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.9367, 0.9120, 0.8610, 0.3887],
        [0.6223, 0.2730, 0.8489, 0.8886]])
desc2 = tensor([[0.9646, 0.3976, 0.4953, 0.1095],
        [0.5512, 0.9117, 0.1580, 0.3033],
        [0.7316, 0.9621, 0.0908, 0.7505],
        [0.3375, 0.5195, 0.3751, 0.3255]])
lafs1 = tensor([[[[0.2674, 0.7830, 0.3553],
          [0.9451, 0.2798, 0.0685]],

         [[0.6403, 0.6950, 0.5785],
          [0.6704, 0.7949, 0.2267]]]])
lafs2 = tensor([[[[0.3357, 0.7618, 0.7243],
          [0.0220, 0.7310, 0.1907]],

         [[0.1064, 0.8697, 0.6462],
        ...2664],
          [0.5160, 0.9832, 0.8677]],

         [[0.5007, 0.1315, 0.7010],
          [0.1465, 0.0095, 0.4145]]]])
th = 0.9, spatial_th = 1000, mutual = True
dm = tensor([[0.6907, 0.8063, 0.8767, 0.8679],
        [0.9300, 1.1104, 1.0395, 0.8268]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[nn_idx, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:19: IndexError
________________ TestMatchFGINN.test_shape_two_way[cpu-2-5-128] ________________

self = <test_matching.TestMatchFGINN object at 0x7b5932f0f9d0>, num_desc1 = 2
num_desc2 = 5, dim = 128, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_two_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000, mutual=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.8959, 0.1598, 0.7147, 0.4122, 0.9700, 0.6760, 0.6991, 0.8499, 0.8813,
         0.7382, 0.1438, 0.8502, 0.63...29, 0.0844,
         0.9420, 0.7962, 0.3524, 0.6019, 0.1151, 0.1004, 0.2676, 0.7637, 0.9531,
         0.2991, 0.7984]])
desc2 = tensor([[0.6601, 0.6051, 0.2483, 0.8913, 0.8339, 0.5603, 0.9168, 0.0713, 0.9539,
         0.8186, 0.6651, 0.2695, 0.72...66, 0.5528,
         0.0922, 0.6150, 0.4669, 0.6054, 0.7886, 0.0063, 0.1674, 0.9127, 0.7015,
         0.1396, 0.4113]])
lafs1 = tensor([[[[0.2774, 0.4621, 0.5135],
          [0.3948, 0.0636, 0.6874]],

         [[0.0621, 0.1112, 0.9545],
          [0.6986, 0.2191, 0.2562]]]])
lafs2 = tensor([[[[5.5004e-01, 8.7216e-01, 1.2159e-01],
          [1.3944e-01, 4.0325e-01, 2.7076e-01]],

         [[3.7102e-0...e-01, 5.2529e-01]],

         [[5.4239e-01, 4.6529e-01, 9.0005e-02],
          [1.7382e-01, 1.2676e-01, 9.6504e-02]]]])
th = 0.9, spatial_th = 1000, mutual = True
dm = tensor([[4.1789, 4.6258, 4.3631, 4.5060, 4.5317],
        [4.4481, 4.6340, 4.7945, 4.4820, 4.3333]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[nn_idx, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:19: IndexError
________________ TestMatchFGINN.test_shape_two_way[cpu-6-2-32] _________________

self = <test_matching.TestMatchFGINN object at 0x7b5932f0fd60>, num_desc1 = 6
num_desc2 = 2, dim = 32, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_two_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000, mutual=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.8712, 0.7463, 0.3862, 0.8562, 0.6094, 0.0639, 0.2174, 0.3193, 0.2665,
         0.1707, 0.9305, 0.8833, 0.33...365, 0.5391, 0.0655, 0.3264, 0.4975, 0.2017, 0.8577, 0.1977, 0.8171,
         0.0941, 0.6357, 0.0811, 0.9078, 0.9664]])
desc2 = tensor([[0.4906, 0.8352, 0.8682, 0.5100, 0.6944, 0.8935, 0.8031, 0.6428, 0.1557,
         0.0851, 0.5578, 0.5025, 0.20...096, 0.2098, 0.6088, 0.5872, 0.1521, 0.2156, 0.5116, 0.2891, 0.2709,
         0.9481, 0.7010, 0.4933, 0.8862, 0.0430]])
lafs1 = tensor([[[[0.5531, 0.6071, 0.1442],
          [0.4499, 0.1606, 0.6689]],

         [[0.7731, 0.8982, 0.6387],
        ...0837],
          [0.6404, 0.1557, 0.9691]],

         [[0.3678, 0.5478, 0.1890],
          [0.6894, 0.3550, 0.5900]]]])
lafs2 = tensor([[[[0.4514, 0.8379, 0.0521],
          [0.4476, 0.5630, 0.8482]],

         [[0.0847, 0.7557, 0.3906],
          [0.9715, 0.6003, 0.7245]]]])
th = 0.9, spatial_th = 1000, mutual = True
dm = tensor([[2.0678, 2.4391],
        [2.0484, 2.2622],
        [2.2998, 1.9680],
        [2.2799, 1.8863],
        [1.9821, 1.7653],
        [2.2435, 2.4623]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[nn_idx, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:19: IndexError
__________________ TestMatchFGINN.test_matching1[cpu-float32] __________________

self = <test_matching.TestMatchFGINN object at 0x7b5932f40070>
device = device(type='cpu'), dtype = torch.float32

    def test_matching1(self, device, dtype):
        desc1 = torch.tensor([[0, 0.0], [1, 1.001], [2, 2], [3, 3.0], [5, 5.0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0], [3, 3.0], [2.3, 2.4], [1, 1.001], [0, 0.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8, 0.01)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:266: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.0000, 0.0000],
        [1.0000, 1.0010],
        [2.0000, 2.0000],
        [3.0000, 3.0000],
        [5.0000, 5.0000]])
desc2 = tensor([[5.0000, 5.0000],
        [3.0000, 3.0000],
        [2.3000, 2.4000],
        [1.0000, 1.0010],
        [0.0000, 0.0000]])
lafs1 = tensor([[[[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]],

         [[1.0000, 0.0000, 1.0000],
       ...00],
          [-0.0000, 1.0000, 3.0000]],

         [[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]]]])
lafs2 = tensor([[[[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 3.0000],
       ...00],
          [-0.0000, 1.0000, 1.0010]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
th = 0.8, spatial_th = 0.01, mutual = False
dm = tensor([[7.0711, 4.2426, 3.3242, 1.4149, 0.0000],
        [5.6561, 2.8277, 1.9098, 0.0000, 1.4149],
        [4.2426, 1..., 1.4135, 2.8284],
        [2.8284, 0.0000, 0.9220, 2.8277, 4.2426],
        [0.0000, 2.8284, 3.7483, 5.6561, 7.0711]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[nn_idx, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:19: IndexError
_______________ TestMatchFGINN.test_matching_mutual[cpu-float32] _______________

self = <test_matching.TestMatchFGINN object at 0x7b5932f403a0>
device = device(type='cpu'), dtype = torch.float32

    def test_matching_mutual(self, device, dtype):
        desc1 = torch.tensor([[0, 0.1], [1, 1.001], [2, 2], [3, 3.0], [5, 5.0], [0.0, 0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0], [3, 3.0], [2.3, 2.4], [1, 1.001], [0, 0.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8, 2.0, mutual=True)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:282: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.0000, 0.1000],
        [1.0000, 1.0010],
        [2.0000, 2.0000],
        [3.0000, 3.0000],
        [5.0000, 5.0000],
        [0.0000, 0.0000]])
desc2 = tensor([[5.0000, 5.0000],
        [3.0000, 3.0000],
        [2.3000, 2.4000],
        [1.0000, 1.0010],
        [0.0000, 0.0000]])
lafs1 = tensor([[[[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.1000]],

         [[1.0000, 0.0000, 1.0000],
       ...00],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
lafs2 = tensor([[[[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 3.0000],
       ...00],
          [-0.0000, 1.0000, 1.0010]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
th = 0.8, spatial_th = 2.0, mutual = True
dm = tensor([[7.0007, 4.1725, 3.2527, 1.3460, 0.1000],
        [5.6561, 2.8277, 1.9098, 0.0000, 1.4149],
        [4.2426, 1..., 2.8277, 4.2426],
        [0.0000, 2.8284, 3.7483, 5.6561, 7.0711],
        [7.0711, 4.2426, 3.3242, 1.4149, 0.0000]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[nn_idx, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:19: IndexError
___________________ TestMatchFGINN.test_nomatch[cpu-float32] ___________________

self = <test_matching.TestMatchFGINN object at 0x7b5932f406d0>
device = device(type='cpu'), dtype = torch.float32

    def test_nomatch(self, device, dtype):
        desc1 = torch.tensor([[0, 0.0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:298: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0., 0.]]), desc2 = tensor([[5., 5.]])
lafs1 = tensor([[[[1., 0., 0.],
          [-0., 1., 0.]]]])
lafs2 = tensor([[[[1., 0., 5.],
          [-0., 1., 5.]]]]), th = 0.8
spatial_th = 10.0, mutual = False, dm = tensor([[7.0711]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[nn_idx, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:19: IndexError
__________________ TestMatchFGINN.test_matching2[cpu-float32] __________________

self = <test_matching.TestMatchFGINN object at 0x7b5932f40a00>
device = device(type='cpu'), dtype = torch.float32

    def test_matching2(self, device, dtype):
        desc1 = torch.tensor([[0, 0.0], [1, 1.001], [2, 2], [3, 3.0], [5, 5.0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0], [3, 3.0], [2.3, 2.4], [1, 1.001], [0, 0.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8, 2.0)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:308: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.0000, 0.0000],
        [1.0000, 1.0010],
        [2.0000, 2.0000],
        [3.0000, 3.0000],
        [5.0000, 5.0000]])
desc2 = tensor([[5.0000, 5.0000],
        [3.0000, 3.0000],
        [2.3000, 2.4000],
        [1.0000, 1.0010],
        [0.0000, 0.0000]])
lafs1 = tensor([[[[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]],

         [[1.0000, 0.0000, 1.0000],
       ...00],
          [-0.0000, 1.0000, 3.0000]],

         [[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]]]])
lafs2 = tensor([[[[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 3.0000],
       ...00],
          [-0.0000, 1.0000, 1.0010]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
th = 0.8, spatial_th = 2.0, mutual = False
dm = tensor([[7.0711, 4.2426, 3.3242, 1.4149, 0.0000],
        [5.6561, 2.8277, 1.9098, 0.0000, 1.4149],
        [4.2426, 1..., 1.4135, 2.8284],
        [2.8284, 0.0000, 0.9220, 2.8277, 4.2426],
        [0.0000, 2.8284, 3.7483, 5.6561, 7.0711]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[nn_idx, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:19: IndexError
______________________ TestMatchFGINN.test_gradcheck[cpu] ______________________

self = <test_matching.TestMatchFGINN object at 0x7b5932f40cd0>
device = device(type='cpu')

    def test_gradcheck(self, device):
        desc1 = torch.rand(5, 8, device=device, dtype=torch.float64)
        desc2 = torch.rand(7, 8, device=device, dtype=torch.float64)
        center1 = torch.rand(1, 5, 2, device=device, dtype=torch.float64)
        center2 = torch.rand(1, 7, 2, device=device, dtype=torch.float64)
        lafs1 = laf_from_center_scale_ori(center1)
        lafs2 = laf_from_center_scale_ori(center2)
>       self.gradcheck(match_fginn, (desc1, desc2, lafs1, lafs2, 0.8, 0.05), nondet_tol=1e-4)

/local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py:325: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.7852, 0.4752, 0.1465, 0.9989, 0.2094, 0.9167, 0.9484, 0.5685],
        [0.9622, 0.0034, 0.0029, 0.2396, 0.9...     [0.8769, 0.0377, 0.5786, 0.5509, 0.7739, 0.7836, 0.5784, 0.2430]],
       dtype=torch.float64, requires_grad=True)
desc2 = tensor([[0.9422, 0.0599, 0.0465, 0.5107, 0.4390, 0.1110, 0.5418, 0.1639],
        [0.3607, 0.6685, 0.4199, 0.0254, 0.4...     [0.6066, 0.8142, 0.5251, 0.5054, 0.9116, 0.5406, 0.2638, 0.3682]],
       dtype=torch.float64, requires_grad=True)
lafs1 = tensor([[[[1.0000, 0.0000, 0.3122],
          [-0.0000, 1.0000, 0.4502]],

         [[1.0000, 0.0000, 0.1690],
       ...     [[1.0000, 0.0000, 0.5298],
          [-0.0000, 1.0000, 0.2843]]]], dtype=torch.float64,
       requires_grad=True)
lafs2 = tensor([[[[1.0000, 0.0000, 0.1593],
          [-0.0000, 1.0000, 0.8782]],

         [[1.0000, 0.0000, 0.5831],
       ...     [[1.0000, 0.0000, 0.6595],
          [-0.0000, 1.0000, 0.8168]]]], dtype=torch.float64,
       requires_grad=True)
th = 0.8, spatial_th = 0.05, mutual = False
dm = tensor([[1.2151, 1.2819, 1.2442, 1.6480, 1.4704, 1.0706, 1.2950],
        [1.0625, 1.1555, 1.2688, 1.4250, 1.3668, 1.2...       [0.9283, 1.2007, 0.8426, 1.2164, 1.2677, 0.8772, 0.9347]],
       dtype=torch.float64, grad_fn=<CdistBackward0>)

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        valid_matches = min_dist < th
        if spatial_th > 0:
>           spatial_dist = torch.norm(lafs1[:, :2, 2].unsqueeze(1) - lafs2[nn_idx, :2, 2], dim=2)
E           IndexError: index 2 is out of bounds for dimension 2 with size 2

/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/temp.py:19: IndexError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu]
======================== 11 failed, 1 skipped in 0.61s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'cudagraphs', 'inductor', 'jit', 'openxla', 'onnxrt', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 12 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_jit[cpu-float32] SKIPPED

======================== 11 passed, 1 skipped in 0.17s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'onnxrt', 'tvm', 'jit', 'inductor', 'openxla', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 12 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_jit[cpu-float32] SKIPPED

======================== 11 passed, 1 skipped in 0.17s =========================
