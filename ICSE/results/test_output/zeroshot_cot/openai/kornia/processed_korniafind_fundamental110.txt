output file:
processed_korniafind_fundamental110.json
function:
find_fundamental
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32]', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] FAILED', '../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'tvm', 'openxla', 'jit', 'onnxrt', 'cudagraphs', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 16 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XFAIL
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] FAILED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] FAILED

=================================== FAILURES ===================================
_________________ TestFindFundamental.test_smoke[cpu-float32] __________________

self = <test_fundamental.TestFindFundamental object at 0x7c291801e9e0>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke(self, device, dtype):
        points1 = torch.rand(1, 8, 2, device=device, dtype=dtype)
        points2 = torch.rand(1, 8, 2, device=device, dtype=dtype)
        weights = torch.ones(1, 8, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:38: in find_fundamental
    pts1_normalized, T1 = normalize_points(pts1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points = tensor([[0.7459, 0.2102],
        [0.0413, 0.2053],
        [0.9022, 0.6239],
        [0.0798, 0.6567],
        [0.1551, 0.3632],
        [0.9361, 0.6255],
        [0.6500, 0.1319],
        [0.9750, 0.2048]])

    def normalize_points(points):
        """
        Normalize a set of points for numerical stability.
    
        Args:
            points: A tensor of shape (N, 2).
    
        Returns:
            normalized_points: A tensor of shape (N, 2).
            T: The transformation matrix used for normalization.
        """
        centroid = points.mean(dim=0)
        centered_points = points - centroid
>       scale = torch.sqrt(2) / torch.mean(torch.norm(centered_points, dim=1))
E       TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not int

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:66: TypeError
_______________ TestFindFundamental.test_shape[cpu-float32-1-8] ________________

self = <test_fundamental.TestFindFundamental object at 0x7c291801ee90>
batch_size = 1, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 9), (3, 10)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = torch.ones(B, N, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:38: in find_fundamental
    pts1_normalized, T1 = normalize_points(pts1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points = tensor([[0.2267, 0.6778],
        [0.8953, 0.7166],
        [0.0080, 0.0253],
        [0.7471, 0.0062],
        [0.4041, 0.3782],
        [0.2438, 0.9450],
        [0.4590, 0.3637],
        [0.2383, 0.2471]])

    def normalize_points(points):
        """
        Normalize a set of points for numerical stability.
    
        Args:
            points: A tensor of shape (N, 2).
    
        Returns:
            normalized_points: A tensor of shape (N, 2).
            T: The transformation matrix used for normalization.
        """
        centroid = points.mean(dim=0)
        centered_points = points - centroid
>       scale = torch.sqrt(2) / torch.mean(torch.norm(centered_points, dim=1))
E       TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not int

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:66: TypeError
_______________ TestFindFundamental.test_shape[cpu-float32-2-9] ________________

self = <test_fundamental.TestFindFundamental object at 0x7c291801edd0>
batch_size = 2, num_points = 9, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 9), (3, 10)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = torch.ones(B, N, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:38: in find_fundamental
    pts1_normalized, T1 = normalize_points(pts1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points = tensor([[0.5721, 0.7567],
        [0.2589, 0.9226],
        [0.4926, 0.8975],
        [0.0885, 0.0281],
        [0.0749, 0.7129],
        [0.6620, 0.5253],
        [0.1997, 0.0531],
        [0.0482, 0.8492],
        [0.1613, 0.7356]])

    def normalize_points(points):
        """
        Normalize a set of points for numerical stability.
    
        Args:
            points: A tensor of shape (N, 2).
    
        Returns:
            normalized_points: A tensor of shape (N, 2).
            T: The transformation matrix used for normalization.
        """
        centroid = points.mean(dim=0)
        centered_points = points - centroid
>       scale = torch.sqrt(2) / torch.mean(torch.norm(centered_points, dim=1))
E       TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not int

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:66: TypeError
_______________ TestFindFundamental.test_shape[cpu-float32-3-10] _______________

self = <test_fundamental.TestFindFundamental object at 0x7c291801f130>
batch_size = 3, num_points = 10, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 9), (3, 10)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = torch.ones(B, N, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:38: in find_fundamental
    pts1_normalized, T1 = normalize_points(pts1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points = tensor([[0.9399, 0.7813],
        [0.5715, 0.3109],
        [0.1189, 0.7477],
        [0.8027, 0.0797],
        [0.986...3284, 0.5924],
        [0.6052, 0.5062],
        [0.0355, 0.4888],
        [0.6072, 0.1759],
        [0.7219, 0.6586]])

    def normalize_points(points):
        """
        Normalize a set of points for numerical stability.
    
        Args:
            points: A tensor of shape (N, 2).
    
        Returns:
            normalized_points: A tensor of shape (N, 2).
            T: The transformation matrix used for normalization.
        """
        centroid = points.mean(dim=0)
        centered_points = points - centroid
>       scale = torch.sqrt(2) / torch.mean(torch.norm(centered_points, dim=1))
E       TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not int

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:66: TypeError
__________ TestFindFundamental.test_shape_noweights[cpu-float32-1-8] ___________

self = <test_fundamental.TestFindFundamental object at 0x7c291801f4c0>
batch_size = 1, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 8), (3, 10)])
    def test_shape_noweights(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = None
>       F_mat = epi.find_fundamental(points1, points2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.0299, 0.1463],
         [0.1372, 0.9495],
         [0.0650, 0.5536],
         [0.4420, 0.8248],
         [0.7975, 0.2051],
         [0.5265, 0.9171],
         [0.8544, 0.9742],
         [0.3520, 0.4116]]])
points2 = tensor([[[0.4362, 0.0446],
         [0.2190, 0.8381],
         [0.2546, 0.0577],
         [0.5093, 0.4415],
         [0.8095, 0.8039],
         [0.2200, 0.1812],
         [0.8077, 0.6436],
         [0.7941, 0.1155]]])
weights = None, method = '8POINT'

    def find_fundamental(points1, points2, weights, method):
        """
        Compute the fundamental matrix from corresponding points in two images.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
            method: The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError("Invalid method provided. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        if N < 8:
            raise ValueError('At least 8 points are required to compute the fundamental matrix.')
        fundamental_matrices = []
        for b in range(B):
            pts1 = points1[b]
            pts2 = points2[b]
>           w = weights[b]
E           TypeError: 'NoneType' object is not subscriptable

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:36: TypeError
__________ TestFindFundamental.test_shape_noweights[cpu-float32-2-8] ___________

self = <test_fundamental.TestFindFundamental object at 0x7c291801f400>
batch_size = 2, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 8), (3, 10)])
    def test_shape_noweights(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = None
>       F_mat = epi.find_fundamental(points1, points2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.9523, 0.3850],
         [0.2427, 0.6347],
         [0.8825, 0.1871],
         [0.1967, 0.9308],
         [... 0.4741],
         [0.3366, 0.7599],
         [0.8357, 0.5061],
         [0.1916, 0.9518],
         [0.2745, 0.2810]]])
points2 = tensor([[[0.2171, 0.5026],
         [0.9711, 0.0917],
         [0.3748, 0.3684],
         [0.3962, 0.1212],
         [... 0.2162],
         [0.0306, 0.3205],
         [0.5874, 0.2158],
         [0.5644, 0.8408],
         [0.3142, 0.2292]]])
weights = None, method = '8POINT'

    def find_fundamental(points1, points2, weights, method):
        """
        Compute the fundamental matrix from corresponding points in two images.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
            method: The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError("Invalid method provided. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        if N < 8:
            raise ValueError('At least 8 points are required to compute the fundamental matrix.')
        fundamental_matrices = []
        for b in range(B):
            pts1 = points1[b]
            pts2 = points2[b]
>           w = weights[b]
E           TypeError: 'NoneType' object is not subscriptable

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:36: TypeError
__________ TestFindFundamental.test_shape_noweights[cpu-float32-3-10] __________

self = <test_fundamental.TestFindFundamental object at 0x7c291801f760>
batch_size = 3, num_points = 10, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 8), (3, 10)])
    def test_shape_noweights(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = None
>       F_mat = epi.find_fundamental(points1, points2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.9129, 0.9945],
         [0.2306, 0.0916],
         [0.8464, 0.7219],
         [0.7964, 0.5665],
         [... 0.9725],
         [0.9345, 0.7217],
         [0.4613, 0.9051],
         [0.4166, 0.2933],
         [0.1831, 0.8885]]])
points2 = tensor([[[0.3061, 0.3278],
         [0.1192, 0.5891],
         [0.0155, 0.8372],
         [0.1496, 0.0786],
         [... 0.5615],
         [0.5882, 0.3614],
         [0.6238, 0.8313],
         [0.5063, 0.9914],
         [0.0268, 0.4782]]])
weights = None, method = '8POINT'

    def find_fundamental(points1, points2, weights, method):
        """
        Compute the fundamental matrix from corresponding points in two images.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
            method: The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError("Invalid method provided. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        if N < 8:
            raise ValueError('At least 8 points are required to compute the fundamental matrix.')
        fundamental_matrices = []
        for b in range(B):
            pts1 = points1[b]
            pts2 = points2[b]
>           w = weights[b]
E           TypeError: 'NoneType' object is not subscriptable

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:36: TypeError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-1] _____________

self = <test_fundamental.TestFindFundamental object at 0x7c291801faf0>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.0788, 0.7661],
         [0.1495, 0.0976],
         [0.8959, 0.9388],
         [0.2065, 0.2668],
         [0.5438, 0.7810],
         [0.3278, 0.1486],
         [0.3032, 0.1607]]])
points2 = tensor([[[0.4767, 0.9783],
         [0.9158, 0.9404],
         [0.9856, 0.9744],
         [0.1232, 0.9275],
         [0.5069, 0.3465],
         [0.7887, 0.0290],
         [0.2353, 0.6611]]])
weights = None, method = '7POINT'

    def find_fundamental(points1, points2, weights, method):
        """
        Compute the fundamental matrix from corresponding points in two images.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
            method: The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError("Invalid method provided. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        if N < 8:
>           raise ValueError('At least 8 points are required to compute the fundamental matrix.')
E           ValueError: At least 8 points are required to compute the fundamental matrix.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:31: ValueError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-2] _____________

self = <test_fundamental.TestFindFundamental object at 0x7c291801fa30>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.3329, 0.9041],
         [0.7184, 0.1332],
         [0.2614, 0.5283],
         [0.9825, 0.9901],
         [... 0.7988],
         [0.0834, 0.5948],
         [0.3751, 0.7465],
         [0.3715, 0.6224],
         [0.3669, 0.2681]]])
points2 = tensor([[[0.6903, 0.9955],
         [0.7145, 0.6437],
         [0.6527, 0.1065],
         [0.7701, 0.5864],
         [... 0.9884],
         [0.9674, 0.7536],
         [0.3977, 0.3336],
         [0.8956, 0.0249],
         [0.4912, 0.3395]]])
weights = None, method = '7POINT'

    def find_fundamental(points1, points2, weights, method):
        """
        Compute the fundamental matrix from corresponding points in two images.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
            method: The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError("Invalid method provided. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        if N < 8:
>           raise ValueError('At least 8 points are required to compute the fundamental matrix.')
E           ValueError: At least 8 points are required to compute the fundamental matrix.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:31: ValueError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-3] _____________

self = <test_fundamental.TestFindFundamental object at 0x7c291801fd30>
batch_size = 3, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.7813, 0.5169],
         [0.6889, 0.1292],
         [0.3309, 0.6077],
         [0.8109, 0.0446],
         [... 0.5351],
         [0.2328, 0.9602],
         [0.9064, 0.9807],
         [0.2902, 0.2931],
         [0.0835, 0.4907]]])
points2 = tensor([[[0.7537, 0.1734],
         [0.5094, 0.7663],
         [0.3229, 0.9170],
         [0.8194, 0.5238],
         [... 0.3917],
         [0.2996, 0.4234],
         [0.5675, 0.5340],
         [0.9807, 0.1599],
         [0.8524, 0.9893]]])
weights = None, method = '7POINT'

    def find_fundamental(points1, points2, weights, method):
        """
        Compute the fundamental matrix from corresponding points in two images.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
            method: The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError("Invalid method provided. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        if N < 8:
>           raise ValueError('At least 8 points are required to compute the fundamental matrix.')
E           ValueError: At least 8 points are required to compute the fundamental matrix.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:31: ValueError
_______________ TestFindFundamental.test_opencv_svd[cpu-float32] _______________

self = <test_fundamental.TestFindFundamental object at 0x7c2918050040>
device = device(type='cpu'), dtype = torch.float32

    def test_opencv_svd(self, device, dtype):
        points1 = torch.tensor(
            [
                [
                    [0.8569, 0.5982],
                    [0.0059, 0.9649],
                    [0.1968, 0.8846],
                    [0.6084, 0.3467],
                    [0.9633, 0.5274],
                    [0.8941, 0.8939],
                    [0.0863, 0.5133],
                    [0.2645, 0.8882],
                    [0.2411, 0.3045],
                    [0.8199, 0.4107],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        points2 = torch.tensor(
            [
                [
                    [0.0928, 0.3013],
                    [0.0989, 0.9649],
                    [0.0341, 0.4827],
                    [0.8294, 0.4469],
                    [0.2230, 0.2998],
                    [0.1722, 0.8182],
                    [0.5264, 0.8869],
                    [0.8908, 0.1233],
                    [0.2338, 0.7663],
                    [0.4466, 0.5696],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        weights = torch.ones(1, 10, device=device, dtype=dtype)
    
        # generated with OpenCV using above points
        # import cv2
        # Fm_expected, _ = cv2.findFundamentalMat(
        #   points1.detach().numpy().reshape(-1, 1, 2),
        #   points2.detach().numpy().reshape(-1, 1, 2), cv2.FM_8POINT)
    
        Fm_expected = torch.tensor(
            [
                [
                    [-0.47408533, 0.22033807, -0.00346677],
                    [0.54935973, 1.31080955, -1.25028275],
                    [-0.36690215, -1.08143769, 1.0],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       F_mat = epi.find_fundamental(points1, points2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:38: in find_fundamental
    pts1_normalized, T1 = normalize_points(pts1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points = tensor([[0.8569, 0.5982],
        [0.0059, 0.9649],
        [0.1968, 0.8846],
        [0.6084, 0.3467],
        [0.963...8941, 0.8939],
        [0.0863, 0.5133],
        [0.2645, 0.8882],
        [0.2411, 0.3045],
        [0.8199, 0.4107]])

    def normalize_points(points):
        """
        Normalize a set of points for numerical stability.
    
        Args:
            points: A tensor of shape (N, 2).
    
        Returns:
            normalized_points: A tensor of shape (N, 2).
            T: The transformation matrix used for normalization.
        """
        centroid = points.mean(dim=0)
        centered_points = points - centroid
>       scale = torch.sqrt(2) / torch.mean(torch.norm(centered_points, dim=1))
E       TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not int

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:66: TypeError
_____________ TestFindFundamental.test_7point_opencv[cpu-float32] ______________

self = <test_fundamental.TestFindFundamental object at 0x7c2918050370>
device = device(type='cpu'), dtype = torch.float32

    def test_7point_opencv(self, device, dtype):
        points1 = torch.tensor(
            [
                [
                    [0.8569, 0.5982],
                    [0.0059, 0.9649],
                    [0.1968, 0.8846],
                    [0.6084, 0.3467],
                    [0.9633, 0.5274],
                    [0.8941, 0.8939],
                    [0.0863, 0.5133],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        points2 = torch.tensor(
            [
                [
                    [0.0928, 0.3013],
                    [0.0989, 0.9649],
                    [0.0341, 0.4827],
                    [0.8294, 0.4469],
                    [0.2230, 0.2998],
                    [0.1722, 0.8182],
                    [0.5264, 0.8869],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        # generated with OpenCV using above points
        # Fm_expected shape is 9x3
        # import cv2
        # Fm_expected, _ = cv2.findFundamentalMat(
        #   points1.detach().numpy().reshape(-1, 1, 2),
        #   points2.detach().numpy().reshape(-1, 1, 2), cv2.FM_7POINT)
    
        Fm_expected = torch.tensor(
            [
                [
                    [
                        [-2.87490907, 5.41934672, 0.73871396],
                        [0.34010174, 3.70371623, -4.65517276],
                        [-0.1809933, -0.56577107, 1.0],
                    ],
                    [
                        [0.14465888, 0.68711702, -0.65570944],
                        [0.53424758, 0.7988479, -0.75446946],
                        [-0.48201197, -1.05375511, 1.0],
                    ],
                    [
                        [-0.0901827, 1.05515785, -0.54726062],
                        [0.51914823, 1.02476892, -1.05783979],
                        [-0.45860077, -1.01580301, 1.0],
                    ],
                ]
            ],
            device=device,
            dtype=dtype,
        )
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.8569, 0.5982],
         [0.0059, 0.9649],
         [0.1968, 0.8846],
         [0.6084, 0.3467],
         [0.9633, 0.5274],
         [0.8941, 0.8939],
         [0.0863, 0.5133]]])
points2 = tensor([[[0.0928, 0.3013],
         [0.0989, 0.9649],
         [0.0341, 0.4827],
         [0.8294, 0.4469],
         [0.2230, 0.2998],
         [0.1722, 0.8182],
         [0.5264, 0.8869]]])
weights = None, method = '7POINT'

    def find_fundamental(points1, points2, weights, method):
        """
        Compute the fundamental matrix from corresponding points in two images.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
            method: The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError("Invalid method provided. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        if N < 8:
>           raise ValueError('At least 8 points are required to compute the fundamental matrix.')
E           ValueError: At least 8 points are required to compute the fundamental matrix.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:31: ValueError
________ TestFindFundamental.test_synthetic_sampson_7point[cpu-float32] ________

self = <test_fundamental.TestFindFundamental object at 0x7c29180506a0>
device = device(type='cpu'), dtype = torch.float32

    def test_synthetic_sampson_7point(self, device, dtype):
        scene: Dict[str, torch.Tensor] = generate_two_view_random_scene(device, dtype)
        x1 = scene["x1"][:, :7, :]
        x2 = scene["x2"][:, :7, :]
>       F_est = epi.find_fundamental(x1, x2, None, "7POINT")

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[ 97.5909,  44.6425],
         [ 94.3549,  52.8496],
         [113.0578,  55.5075],
         [122.6479,  37.9120],
         [ 99.8312,  37.2484],
         [ 67.0666,  44.8994],
         [ 84.0747,  39.9481]]])
points2 = tensor([[[121.6150,  87.8577],
         [120.5049,  92.5815],
         [138.1794, 123.7856],
         [261.8969, 147.3979],
         [174.8489,  88.8601],
         [127.7042,  69.8733],
         [141.4032,  76.1486]]])
weights = None, method = '7POINT'

    def find_fundamental(points1, points2, weights, method):
        """
        Compute the fundamental matrix from corresponding points in two images.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
            method: The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError("Invalid method provided. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        if N < 8:
>           raise ValueError('At least 8 points are required to compute the fundamental matrix.')
E           ValueError: At least 8 points are required to compute the fundamental matrix.

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:31: ValueError
___________ TestFindFundamental.test_synthetic_sampson[cpu-float32] ____________

self = <test_fundamental.TestFindFundamental object at 0x7c291801ed40>
device = device(type='cpu'), dtype = torch.float32

    def test_synthetic_sampson(self, device, dtype):
        scene: Dict[str, torch.Tensor] = generate_two_view_random_scene(device, dtype)
    
        x1 = scene["x1"]
        x2 = scene["x2"]
    
        weights = torch.ones_like(x1)[..., 0]
>       F_est = epi.find_fundamental(x1, x2, weights)

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:38: in find_fundamental
    pts1_normalized, T1 = normalize_points(pts1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points = tensor([[72.2978, 49.8540],
        [75.9210, 50.1330],
        [79.6971, 56.7666],
        [84.6992, 52.8408],
      ...6738],
        [87.7406, 51.3752],
        [69.4920, 49.8740],
        [77.9317, 53.5791],
        [90.0726, 53.8740]])

    def normalize_points(points):
        """
        Normalize a set of points for numerical stability.
    
        Args:
            points: A tensor of shape (N, 2).
    
        Returns:
            normalized_points: A tensor of shape (N, 2).
            T: The transformation matrix used for normalization.
        """
        centroid = points.mean(dim=0)
        centered_points = points - centroid
>       scale = torch.sqrt(2) / torch.mean(torch.norm(centered_points, dim=1))
E       TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not int

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:66: TypeError
___________________ TestFindFundamental.test_gradcheck[cpu] ____________________

self = <test_fundamental.TestFindFundamental object at 0x7c2918050c70>
device = device(type='cpu')

    def test_gradcheck(self, device):
        points1 = torch.rand(1, 10, 2, device=device, dtype=torch.float64, requires_grad=True)
        points2 = torch.rand(1, 10, 2, device=device, dtype=torch.float64)
        weights = torch.ones(1, 10, device=device, dtype=torch.float64)
>       self.gradcheck(epi.find_fundamental, (points1, points2, weights))

/local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
/local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:38: in find_fundamental
    pts1_normalized, T1 = normalize_points(pts1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points = tensor([[0.7180, 0.2795],
        [0.9352, 0.1130],
        [0.7871, 0.6356],
        [0.2983, 0.1197],
        [0.152... [0.9419, 0.4323],
        [0.6748, 0.9884],
        [0.5407, 0.8713]], dtype=torch.float64, grad_fn=<SelectBackward0>)

    def normalize_points(points):
        """
        Normalize a set of points for numerical stability.
    
        Args:
            points: A tensor of shape (N, 2).
    
        Returns:
            normalized_points: A tensor of shape (N, 2).
            T: The transformation matrix used for normalization.
        """
        centroid = points.mean(dim=0)
        centered_points = points - centroid
>       scale = torch.sqrt(2) / torch.mean(torch.norm(centered_points, dim=1))
E       TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not int

/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:66: TypeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32]
FAILED ../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu]
======================== 15 failed, 1 xfailed in 0.64s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'onnxrt', 'openxla', 'cudagraphs', 'tvm', 'jit', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 16 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XPASS
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] PASSED

======================== 15 passed, 1 xpassed in 0.21s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'jit', 'inductor', 'openxla', 'tvm', 'cudagraphs', None}
model weights cached: []

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1, jaxtyping-0.2.38
collecting ... collected 16 items

../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XPASS
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] PASSED
../../../../../../local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] PASSED

======================== 15 passed, 1 xpassed in 0.24s =========================
