output file:
processed_pennylanenorm360.json
function:
norm
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix5-wires5]', '../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix4-wires4] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix2-wires2]', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix6-wires6]', '../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix2-wires2] FAILED', '../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix5-wires5] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix3-wires3]', '../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix6-wires6] FAILED', '../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix3-wires3] FAILED', 'FAILED ../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix4-wires4]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pennylane/pennylane/venv/bin/python
cachedir: .pytest_cache
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /local/data0/moved_data/publishablew/pennylane/pennylane/tests
configfile: pytest.ini
plugins: flaky-3.8.1, xdist-3.6.1, split-0.10.0, rng-1.0.0, mock-3.14.0, forked-1.6.0, cov-6.0.0, benchmark-5.1.0
collecting ... collected 7 items

../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[1-0] PASSED
../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[0.3-0] PASSED
../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix2-wires2] FAILED
../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix3-wires3] FAILED
../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix4-wires4] FAILED
../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix5-wires5] FAILED
../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix6-wires6] FAILED

=================================== FAILURES ===================================
______________ TestBlockEncode.test_unitary[input_matrix2-wires2] ______________

self = <test_matrix_ops.TestBlockEncode object at 0x7f4530513c50>
input_matrix = array([[0.1, 0.2],
       [0.3, 0.4]]), wires = range(0, 2)

    @pytest.mark.parametrize(
        ("input_matrix", "wires"),
        [
            (1, 0),
            (0.3, 0),
            (np.array([[0.1, 0.2], [0.3, 0.4]]), range(2)),
            (np.array([[0.1, 0.2, 0.3]]), range(2)),
            (np.array([[0.1], [0.2], [0.3]]), range(2)),
            (np.array([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]), range(3)),
            (np.array([[1, 2], [3, 4]]), range(2)),
        ],
    )
    def test_unitary(self, input_matrix, wires):
        """Test that BlockEncode matrices are unitary."""
>       mat = qml.matrix(qml.BlockEncode(input_matrix, wires))

/local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py:894: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pennylane/pennylane/pennylane/capture/capture_meta.py:89: in __call__
    return type.__call__(cls, *args, **kwargs)
/local/data0/moved_data/publishablew/pennylane/pennylane/pennylane/ops/qubit/matrix_ops.py:548: in __init__
    normalization = qml.math.maximum(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fn = 'maximum', like = None, args = (None, None), kwargs = {}
backend = 'builtins', func = <ufunc 'maximum'>

    def do(fn, *args, like=None, **kwargs):
        """Do function named ``fn`` on ``(*args, **kwargs)``, peforming single
        dispatch to retrieve ``fn`` based on whichever library defines the class of
        the ``args[0]``, or the ``like`` keyword argument if specified.
    
        Examples
        --------
    
        Works on numpy arrays:
    
            >>> import numpy as np
            >>> x_np = np.random.uniform(size=[5])
            >>> y_np = do('sqrt', x_np)
            >>> y_np
            array([0.32464973, 0.90379787, 0.85037325, 0.88729814, 0.46768083])
    
            >>> type(y_np)
            numpy.ndarray
    
        Works on cupy arrays:
    
            >>> import cupy as cp
            >>> x_cp = cp.random.uniform(size=[5])
            >>> y_cp = do('sqrt', x_cp)
            >>> y_cp
            array([0.44541656, 0.88713113, 0.92626237, 0.64080557, 0.69620767])
    
            >>> type(y_cp)
            cupy.core.core.ndarray
    
        Works on tensorflow arrays:
    
            >>> import tensorflow as tf
            >>> x_tf = tf.random.uniform(shape=[5])
            >>> y_tf = do('sqrt', x_tf)
            >>> y_tf
            <tf.Tensor 'Sqrt_1:0' shape=(5,) dtype=float32>
    
            >>> type(y_tf)
            tensorflow.python.framework.ops.Tensor
    
        You get the idea.
    
        For functions that don't dispatch on the first argument you can use the
        ``like`` keyword:
    
            >>> do('eye', 3, like=x_tf)
            <tf.Tensor: id=91, shape=(3, 3), dtype=float32>
        """
        backend = _choose_backend(fn, args, kwargs, like=like)
        func = get_lib_fn(backend, fn)
>       return func(*args, **kwargs)
E       TypeError: '>=' not supported between instances of 'NoneType' and 'NoneType'

/local/data0/moved_data/publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/autoray/autoray.py:81: TypeError
______________ TestBlockEncode.test_unitary[input_matrix3-wires3] ______________

self = <test_matrix_ops.TestBlockEncode object at 0x7f4530513ed0>
input_matrix = array([[0.1, 0.2, 0.3]]), wires = range(0, 2)

    @pytest.mark.parametrize(
        ("input_matrix", "wires"),
        [
            (1, 0),
            (0.3, 0),
            (np.array([[0.1, 0.2], [0.3, 0.4]]), range(2)),
            (np.array([[0.1, 0.2, 0.3]]), range(2)),
            (np.array([[0.1], [0.2], [0.3]]), range(2)),
            (np.array([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]), range(3)),
            (np.array([[1, 2], [3, 4]]), range(2)),
        ],
    )
    def test_unitary(self, input_matrix, wires):
        """Test that BlockEncode matrices are unitary."""
>       mat = qml.matrix(qml.BlockEncode(input_matrix, wires))

/local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py:894: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pennylane/pennylane/pennylane/capture/capture_meta.py:89: in __call__
    return type.__call__(cls, *args, **kwargs)
/local/data0/moved_data/publishablew/pennylane/pennylane/pennylane/ops/qubit/matrix_ops.py:548: in __init__
    normalization = qml.math.maximum(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fn = 'maximum', like = None, args = (None, None), kwargs = {}
backend = 'builtins', func = <ufunc 'maximum'>

    def do(fn, *args, like=None, **kwargs):
        """Do function named ``fn`` on ``(*args, **kwargs)``, peforming single
        dispatch to retrieve ``fn`` based on whichever library defines the class of
        the ``args[0]``, or the ``like`` keyword argument if specified.
    
        Examples
        --------
    
        Works on numpy arrays:
    
            >>> import numpy as np
            >>> x_np = np.random.uniform(size=[5])
            >>> y_np = do('sqrt', x_np)
            >>> y_np
            array([0.32464973, 0.90379787, 0.85037325, 0.88729814, 0.46768083])
    
            >>> type(y_np)
            numpy.ndarray
    
        Works on cupy arrays:
    
            >>> import cupy as cp
            >>> x_cp = cp.random.uniform(size=[5])
            >>> y_cp = do('sqrt', x_cp)
            >>> y_cp
            array([0.44541656, 0.88713113, 0.92626237, 0.64080557, 0.69620767])
    
            >>> type(y_cp)
            cupy.core.core.ndarray
    
        Works on tensorflow arrays:
    
            >>> import tensorflow as tf
            >>> x_tf = tf.random.uniform(shape=[5])
            >>> y_tf = do('sqrt', x_tf)
            >>> y_tf
            <tf.Tensor 'Sqrt_1:0' shape=(5,) dtype=float32>
    
            >>> type(y_tf)
            tensorflow.python.framework.ops.Tensor
    
        You get the idea.
    
        For functions that don't dispatch on the first argument you can use the
        ``like`` keyword:
    
            >>> do('eye', 3, like=x_tf)
            <tf.Tensor: id=91, shape=(3, 3), dtype=float32>
        """
        backend = _choose_backend(fn, args, kwargs, like=like)
        func = get_lib_fn(backend, fn)
>       return func(*args, **kwargs)
E       TypeError: '>=' not supported between instances of 'NoneType' and 'NoneType'

/local/data0/moved_data/publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/autoray/autoray.py:81: TypeError
______________ TestBlockEncode.test_unitary[input_matrix4-wires4] ______________

self = <test_matrix_ops.TestBlockEncode object at 0x7f4530514190>
input_matrix = array([[0.1],
       [0.2],
       [0.3]]), wires = range(0, 2)

    @pytest.mark.parametrize(
        ("input_matrix", "wires"),
        [
            (1, 0),
            (0.3, 0),
            (np.array([[0.1, 0.2], [0.3, 0.4]]), range(2)),
            (np.array([[0.1, 0.2, 0.3]]), range(2)),
            (np.array([[0.1], [0.2], [0.3]]), range(2)),
            (np.array([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]), range(3)),
            (np.array([[1, 2], [3, 4]]), range(2)),
        ],
    )
    def test_unitary(self, input_matrix, wires):
        """Test that BlockEncode matrices are unitary."""
>       mat = qml.matrix(qml.BlockEncode(input_matrix, wires))

/local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py:894: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pennylane/pennylane/pennylane/capture/capture_meta.py:89: in __call__
    return type.__call__(cls, *args, **kwargs)
/local/data0/moved_data/publishablew/pennylane/pennylane/pennylane/ops/qubit/matrix_ops.py:548: in __init__
    normalization = qml.math.maximum(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fn = 'maximum', like = None, args = (None, None), kwargs = {}
backend = 'builtins', func = <ufunc 'maximum'>

    def do(fn, *args, like=None, **kwargs):
        """Do function named ``fn`` on ``(*args, **kwargs)``, peforming single
        dispatch to retrieve ``fn`` based on whichever library defines the class of
        the ``args[0]``, or the ``like`` keyword argument if specified.
    
        Examples
        --------
    
        Works on numpy arrays:
    
            >>> import numpy as np
            >>> x_np = np.random.uniform(size=[5])
            >>> y_np = do('sqrt', x_np)
            >>> y_np
            array([0.32464973, 0.90379787, 0.85037325, 0.88729814, 0.46768083])
    
            >>> type(y_np)
            numpy.ndarray
    
        Works on cupy arrays:
    
            >>> import cupy as cp
            >>> x_cp = cp.random.uniform(size=[5])
            >>> y_cp = do('sqrt', x_cp)
            >>> y_cp
            array([0.44541656, 0.88713113, 0.92626237, 0.64080557, 0.69620767])
    
            >>> type(y_cp)
            cupy.core.core.ndarray
    
        Works on tensorflow arrays:
    
            >>> import tensorflow as tf
            >>> x_tf = tf.random.uniform(shape=[5])
            >>> y_tf = do('sqrt', x_tf)
            >>> y_tf
            <tf.Tensor 'Sqrt_1:0' shape=(5,) dtype=float32>
    
            >>> type(y_tf)
            tensorflow.python.framework.ops.Tensor
    
        You get the idea.
    
        For functions that don't dispatch on the first argument you can use the
        ``like`` keyword:
    
            >>> do('eye', 3, like=x_tf)
            <tf.Tensor: id=91, shape=(3, 3), dtype=float32>
        """
        backend = _choose_backend(fn, args, kwargs, like=like)
        func = get_lib_fn(backend, fn)
>       return func(*args, **kwargs)
E       TypeError: '>=' not supported between instances of 'NoneType' and 'NoneType'

/local/data0/moved_data/publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/autoray/autoray.py:81: TypeError
______________ TestBlockEncode.test_unitary[input_matrix5-wires5] ______________

self = <test_matrix_ops.TestBlockEncode object at 0x7f4530514410>
input_matrix = array([[0.1, 0.2],
       [0.3, 0.4],
       [0.5, 0.6]])
wires = range(0, 3)

    @pytest.mark.parametrize(
        ("input_matrix", "wires"),
        [
            (1, 0),
            (0.3, 0),
            (np.array([[0.1, 0.2], [0.3, 0.4]]), range(2)),
            (np.array([[0.1, 0.2, 0.3]]), range(2)),
            (np.array([[0.1], [0.2], [0.3]]), range(2)),
            (np.array([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]), range(3)),
            (np.array([[1, 2], [3, 4]]), range(2)),
        ],
    )
    def test_unitary(self, input_matrix, wires):
        """Test that BlockEncode matrices are unitary."""
>       mat = qml.matrix(qml.BlockEncode(input_matrix, wires))

/local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py:894: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pennylane/pennylane/pennylane/capture/capture_meta.py:89: in __call__
    return type.__call__(cls, *args, **kwargs)
/local/data0/moved_data/publishablew/pennylane/pennylane/pennylane/ops/qubit/matrix_ops.py:548: in __init__
    normalization = qml.math.maximum(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fn = 'maximum', like = None, args = (None, None), kwargs = {}
backend = 'builtins', func = <ufunc 'maximum'>

    def do(fn, *args, like=None, **kwargs):
        """Do function named ``fn`` on ``(*args, **kwargs)``, peforming single
        dispatch to retrieve ``fn`` based on whichever library defines the class of
        the ``args[0]``, or the ``like`` keyword argument if specified.
    
        Examples
        --------
    
        Works on numpy arrays:
    
            >>> import numpy as np
            >>> x_np = np.random.uniform(size=[5])
            >>> y_np = do('sqrt', x_np)
            >>> y_np
            array([0.32464973, 0.90379787, 0.85037325, 0.88729814, 0.46768083])
    
            >>> type(y_np)
            numpy.ndarray
    
        Works on cupy arrays:
    
            >>> import cupy as cp
            >>> x_cp = cp.random.uniform(size=[5])
            >>> y_cp = do('sqrt', x_cp)
            >>> y_cp
            array([0.44541656, 0.88713113, 0.92626237, 0.64080557, 0.69620767])
    
            >>> type(y_cp)
            cupy.core.core.ndarray
    
        Works on tensorflow arrays:
    
            >>> import tensorflow as tf
            >>> x_tf = tf.random.uniform(shape=[5])
            >>> y_tf = do('sqrt', x_tf)
            >>> y_tf
            <tf.Tensor 'Sqrt_1:0' shape=(5,) dtype=float32>
    
            >>> type(y_tf)
            tensorflow.python.framework.ops.Tensor
    
        You get the idea.
    
        For functions that don't dispatch on the first argument you can use the
        ``like`` keyword:
    
            >>> do('eye', 3, like=x_tf)
            <tf.Tensor: id=91, shape=(3, 3), dtype=float32>
        """
        backend = _choose_backend(fn, args, kwargs, like=like)
        func = get_lib_fn(backend, fn)
>       return func(*args, **kwargs)
E       TypeError: '>=' not supported between instances of 'NoneType' and 'NoneType'

/local/data0/moved_data/publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/autoray/autoray.py:81: TypeError
______________ TestBlockEncode.test_unitary[input_matrix6-wires6] ______________

self = <test_matrix_ops.TestBlockEncode object at 0x7f4530514690>
input_matrix = array([[1, 2],
       [3, 4]]), wires = range(0, 2)

    @pytest.mark.parametrize(
        ("input_matrix", "wires"),
        [
            (1, 0),
            (0.3, 0),
            (np.array([[0.1, 0.2], [0.3, 0.4]]), range(2)),
            (np.array([[0.1, 0.2, 0.3]]), range(2)),
            (np.array([[0.1], [0.2], [0.3]]), range(2)),
            (np.array([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]), range(3)),
            (np.array([[1, 2], [3, 4]]), range(2)),
        ],
    )
    def test_unitary(self, input_matrix, wires):
        """Test that BlockEncode matrices are unitary."""
>       mat = qml.matrix(qml.BlockEncode(input_matrix, wires))

/local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py:894: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/local/data0/moved_data/publishablew/pennylane/pennylane/pennylane/capture/capture_meta.py:89: in __call__
    return type.__call__(cls, *args, **kwargs)
/local/data0/moved_data/publishablew/pennylane/pennylane/pennylane/ops/qubit/matrix_ops.py:548: in __init__
    normalization = qml.math.maximum(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fn = 'maximum', like = None, args = (None, None), kwargs = {}
backend = 'builtins', func = <ufunc 'maximum'>

    def do(fn, *args, like=None, **kwargs):
        """Do function named ``fn`` on ``(*args, **kwargs)``, peforming single
        dispatch to retrieve ``fn`` based on whichever library defines the class of
        the ``args[0]``, or the ``like`` keyword argument if specified.
    
        Examples
        --------
    
        Works on numpy arrays:
    
            >>> import numpy as np
            >>> x_np = np.random.uniform(size=[5])
            >>> y_np = do('sqrt', x_np)
            >>> y_np
            array([0.32464973, 0.90379787, 0.85037325, 0.88729814, 0.46768083])
    
            >>> type(y_np)
            numpy.ndarray
    
        Works on cupy arrays:
    
            >>> import cupy as cp
            >>> x_cp = cp.random.uniform(size=[5])
            >>> y_cp = do('sqrt', x_cp)
            >>> y_cp
            array([0.44541656, 0.88713113, 0.92626237, 0.64080557, 0.69620767])
    
            >>> type(y_cp)
            cupy.core.core.ndarray
    
        Works on tensorflow arrays:
    
            >>> import tensorflow as tf
            >>> x_tf = tf.random.uniform(shape=[5])
            >>> y_tf = do('sqrt', x_tf)
            >>> y_tf
            <tf.Tensor 'Sqrt_1:0' shape=(5,) dtype=float32>
    
            >>> type(y_tf)
            tensorflow.python.framework.ops.Tensor
    
        You get the idea.
    
        For functions that don't dispatch on the first argument you can use the
        ``like`` keyword:
    
            >>> do('eye', 3, like=x_tf)
            <tf.Tensor: id=91, shape=(3, 3), dtype=float32>
        """
        backend = _choose_backend(fn, args, kwargs, like=like)
        func = get_lib_fn(backend, fn)
>       return func(*args, **kwargs)
E       TypeError: '>=' not supported between instances of 'NoneType' and 'NoneType'

/local/data0/moved_data/publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/autoray/autoray.py:81: TypeError
=========================== short test summary info ============================
FAILED ../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix2-wires2]
FAILED ../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix3-wires3]
FAILED ../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix4-wires4]
FAILED ../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix5-wires5]
FAILED ../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix6-wires6]
========================= 5 failed, 2 passed in 0.37s ==========================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pennylane/pennylane/venv/bin/python
cachedir: .pytest_cache
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /local/data0/moved_data/publishablew/pennylane/pennylane/tests
configfile: pytest.ini
plugins: flaky-3.8.1, xdist-3.6.1, split-0.10.0, rng-1.0.0, mock-3.14.0, forked-1.6.0, cov-6.0.0, benchmark-5.1.0
collecting ... collected 7 items

../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[1-0] PASSED
../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[0.3-0] PASSED
../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix2-wires2] PASSED
../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix3-wires3] PASSED
../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix4-wires4] PASSED
../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix5-wires5] PASSED
../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix6-wires6] PASSED

============================== 7 passed in 0.03s ===============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pennylane/pennylane/venv/bin/python
cachedir: .pytest_cache
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /local/data0/moved_data/publishablew/pennylane/pennylane/tests
configfile: pytest.ini
plugins: flaky-3.8.1, xdist-3.6.1, split-0.10.0, rng-1.0.0, mock-3.14.0, forked-1.6.0, cov-6.0.0, benchmark-5.1.0
collecting ... collected 7 items

../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[1-0] PASSED
../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[0.3-0] PASSED
../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix2-wires2] PASSED
../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix3-wires3] PASSED
../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix4-wires4] PASSED
../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix5-wires5] PASSED
../../../../../../local/data0/moved_data/publishablew/pennylane/pennylane/tests/ops/qubit/test_matrix_ops.py::TestBlockEncode::test_unitary[input_matrix6-wires6] PASSED

============================== 7 passed in 0.08s ===============================
