{
    "result": "To create the `quaternion_to_axis_angle` function, we need to follow these steps:\n\n1. **Import Necessary Libraries**: We'll use PyTorch for tensor operations, so we need to import it.\n\n2. **Define the Function**: We'll define the function `quaternion_to_axis_angle` that takes a tensor as input.\n\n3. **Input Validation**: Check if the input is a tensor and has the correct shape (either Nx4 or 4).\n\n4. **Unpack the Quaternion**: Extract the components (w, x, y, z) from the quaternion.\n\n5. **Compute the Axis-Angle Representation**:\n   - Calculate the angle of rotation.\n   - Calculate the axis of rotation.\n\n6. **Return the Result**: Return the axis-angle representation as a tensor.\n\nLet's implement this step by step:\n\n```python\nimport torch\n\ndef quaternion_to_axis_angle(quaternion):\n    # Check if the input is a tensor\n    if not isinstance(quaternion, torch.Tensor):\n        raise TypeError(\"Input must be a PyTorch tensor.\")\n    \n    # Check if the shape is Nx4 or 4\n    if quaternion.dim() == 1:\n        if quaternion.size(0) != 4:\n            raise ValueError(\"Input tensor must have shape [4] or [N, 4].\")\n    elif quaternion.dim() == 2:\n        if quaternion.size(1) != 4:\n            raise ValueError(\"Input tensor must have shape [4] or [N, 4].\")\n    else:\n        raise ValueError(\"Input tensor must have shape [4] or [N, 4].\")\n    \n    # Normalize the quaternion to ensure it is a unit quaternion\n    quaternion = quaternion / quaternion.norm(dim=-1, keepdim=True)\n    \n    # Unpack the quaternion components\n    w, x, y, z = quaternion[..., 0], quaternion[..., 1], quaternion[..., 2], quaternion[..., 3]\n    \n    # Calculate the angle of rotation\n    angle = 2 * torch.acos(w)\n    \n    # Calculate the axis of rotation\n    sin_theta_over_two = torch.sqrt(1 - w**2)\n    small_angle_threshold = 1e-8\n    axis = torch.where(sin_theta_over_two > small_angle_threshold,\n                       torch.stack((x, y, z), dim=-1) / sin_theta_over_two.unsqueeze(-1),\n                       torch.tensor([1.0, 0.0, 0.0], device=quaternion.device).expand_as(torch.stack((x, y, z), dim=-1)))\n    \n    # Combine the axis and angle into a single tensor\n    axis_angle = axis * angle.unsqueeze(-1)\n    \n    return axis_angle\n\n# Example usage\nquaternion = torch.tensor((1., 0., 0., 0.))\nprint(quaternion_to_axis_angle(quaternion))  # Output: tensor([0., 0., 0.])\n```\n\nThis function will convert a quaternion to an axis-angle representation, handling both single quaternions and batches of quaternions. The axis is normalized, and the angle is in radians.",
    "prompt": "Generate a Python function called quaternion_to_axis_angle that converts a quaternion vector to an axis angle of rotation in radians. The input is a tensor called quaternion with quaternions in (w, x, y, z) format. The output is a tensor with the axis angle of rotation. The function checks if the input is a tensor and has a shape of Nx4 or 4. It then unpacks the input and computes the conversion using mathematical operations. The final output is a tensor with the axis angle values.Example:\n        >>> quaternion = tensor((1., 0., 0., 0.))\n        >>> quaternion_to_axis_angle(quaternion)\n        tensor([0., 0., 0.])",
    "function_name": "quaternion_to_axis_angle",
    "ground_truth": "kornia/geometry/conversions.py",
    "test": "tests/geometry/test_conversions.py::TestQuaternionToAngleAxis",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Image"
}