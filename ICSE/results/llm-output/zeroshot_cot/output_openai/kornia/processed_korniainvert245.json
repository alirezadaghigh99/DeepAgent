{
    "result": "To create the `invert` function, we need to follow these steps:\n\n1. **Import Necessary Libraries**: We'll use PyTorch, so we need to import it.\n2. **Define the Function**: The function will take two arguments: `image` and `max_value`.\n3. **Check Input Types**: Ensure both `image` and `max_value` are tensors.\n4. **Handle Broadcasting**: Ensure `max_value` can be broadcasted to the shape of `image`.\n5. **Invert the Image**: Subtract the `image` from `max_value` to get the inverted image.\n6. **Return the Result**: The result should have the same shape as the input `image`.\n\nLet's implement this step by step:\n\n```python\nimport torch\n\ndef invert(image, max_value=None):\n    # Step 3: Check if inputs are tensors\n    assert isinstance(image, torch.Tensor), \"Input image must be a tensor.\"\n    if max_value is not None:\n        assert isinstance(max_value, torch.Tensor), \"Max value must be a tensor.\"\n\n    # Step 4: Handle broadcasting\n    if max_value is None:\n        max_value = torch.tensor(1.0, dtype=image.dtype, device=image.device)\n    \n    # Ensure max_value can be broadcasted to the shape of image\n    max_value = max_value.to(image.device)\n    \n    # Step 5: Invert the image\n    inverted_image = max_value - image\n    \n    # Step 6: Return the result\n    return inverted_image\n\n# Example usage\nimg = torch.rand(1, 2, 4, 4)\nprint(invert(img).shape)  # torch.Size([1, 2, 4, 4])\n\nimg = 255. * torch.rand(1, 2, 3, 4, 4)\nprint(invert(img, torch.as_tensor(255.)).shape)  # torch.Size([1, 2, 3, 4, 4])\n\nimg = torch.rand(1, 3, 4, 4)\nprint(invert(img, torch.as_tensor([[[[1.]]]])).shape)  # torch.Size([1, 3, 4, 4])\n```\n\n### Explanation:\n- **Type Checking**: We use `assert` to ensure that both `image` and `max_value` are tensors.\n- **Broadcasting**: If `max_value` is not provided, we default it to a tensor with value `1.0`. We ensure `max_value` is on the same device as `image` and can be broadcasted.\n- **Inversion**: The inversion is done by subtracting the `image` from `max_value`.\n- **Return**: The function returns the inverted image tensor, maintaining the same shape as the input `image`.",
    "prompt": "Generate a Python function called invert that takes in an input image tensor and an optional maximum value tensor, and returns the inverted values of the input image tensor by its maximum value. The input image tensor should have an arbitrary shape, while the maximum value tensor should have a shape that matches the input tensor shape or can work with broadcasting. The function should raise an AssertionError if the input image or maximum value is not a tensor. The output should be a tensor with the same shape as the input image tensor. >>> img = torch.rand(1, 2, 4, 4)\n        >>> invert(img).shape\n        torch.Size([1, 2, 4, 4])\n\n        >>> img = 255. * torch.rand(1, 2, 3, 4, 4)\n        >>> invert(img, torch.as_tensor(255.)).shape\n        torch.Size([1, 2, 3, 4, 4])\n\n        >>> img = torch.rand(1, 3, 4, 4)\n        >>> invert(img, torch.as_tensor([[[[1.]]]])).shape\n        torch.Size([1, 3, 4, 4])",
    "function_name": "invert",
    "ground_truth": "kornia/enhance/adjust.py",
    "test": "tests/geometry/epipolar/test_fundamental.py::TestFindFundamental",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}