{
    "result": "To generate the `translation_vector` function for the `PinholeCamera` class, we need to extract the translation vector from the extrinsics matrix. The extrinsics matrix typically has the shape `(B, 4, 4)` and is composed of a rotation matrix and a translation vector. The translation vector is usually located in the last column of the top 3 rows of the extrinsics matrix.\n\nHere's how you can implement the `translation_vector` function:\n\n```python\nimport torch\nfrom torch import Tensor\n\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n\n    def translation_vector(self) -> Tensor:\n        # Extract the translation vector from the extrinsics matrix\n        # The translation vector is the last column of the top 3 rows\n        # Shape of extrinsics: (B, 4, 4)\n        # We want to extract the shape (B, 3, 1)\n        translation = self._extrinsics[:, :3, 3].unsqueeze(-1)\n        return translation\n```\n\n### Explanation:\n- **Extrinsics Matrix**: The extrinsics matrix is typically a 4x4 matrix that combines rotation and translation. The top-left 3x3 part is the rotation matrix, and the last column of the top 3 rows is the translation vector.\n- **Translation Vector Extraction**: We extract the translation vector by selecting the last column of the top 3 rows of the extrinsics matrix. This is done using `self._extrinsics[:, :3, 3]`, which selects the appropriate elements for all batches.\n- **Reshaping**: We use `unsqueeze(-1)` to add an extra dimension, resulting in a shape of `(B, 3, 1)`.\n\nThis function will return the translation vector for each batch in the extrinsics matrix.",
    "prompt": "Generate the `translation_vector` function for the following class to return the translation vector from the extrinsics matrix. The function should take `self` as input and return a tensor with shape `(B, 3, 1)`.\n\n```python\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n```",
    "function_name": "translation_vector",
    "ground_truth": "kornia/geometry/camera/pinhole.py",
    "test": "tests/geometry/camera/test_pinhole.py",
    "class": "PinholeCamera",
    "stage": "Image",
    "task": "",
    "data": "Inference"
}