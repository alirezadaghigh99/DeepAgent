{
    "result": "To create the `quaternion_to_rotation_matrix` function, we need to follow these steps:\n\n1. **Normalize the Quaternion**: Ensure the quaternion is a unit quaternion by dividing it by its norm.\n2. **Unpack the Quaternion**: Extract the components \\( w, x, y, z \\) from the quaternion.\n3. **Compute the Rotation Matrix**: Use the mathematical formula to convert the quaternion to a 3x3 rotation matrix.\n4. **Reshape and Return**: Ensure the output is in the correct shape and return it.\n\nHere's the complete implementation:\n\n```python\nimport torch\n\ndef quaternion_to_rotation_matrix(quaternion):\n    # Normalize the quaternion\n    norm = torch.norm(quaternion, dim=-1, keepdim=True)\n    quaternion = quaternion / norm\n\n    # Unpack the quaternion components\n    w, x, y, z = quaternion[..., 0], quaternion[..., 1], quaternion[..., 2], quaternion[..., 3]\n\n    # Compute the rotation matrix elements\n    xx = x * x\n    yy = y * y\n    zz = z * z\n    xy = x * y\n    xz = x * z\n    yz = y * z\n    wx = w * x\n    wy = w * y\n    wz = w * z\n\n    # Create the rotation matrix\n    rotation_matrix = torch.empty((*quaternion.shape[:-1], 3, 3), dtype=quaternion.dtype, device=quaternion.device)\n    rotation_matrix[..., 0, 0] = 1 - 2 * (yy + zz)\n    rotation_matrix[..., 0, 1] = 2 * (xy - wz)\n    rotation_matrix[..., 0, 2] = 2 * (xz + wy)\n    rotation_matrix[..., 1, 0] = 2 * (xy + wz)\n    rotation_matrix[..., 1, 1] = 1 - 2 * (xx + zz)\n    rotation_matrix[..., 1, 2] = 2 * (yz - wx)\n    rotation_matrix[..., 2, 0] = 2 * (xz - wy)\n    rotation_matrix[..., 2, 1] = 2 * (yz + wx)\n    rotation_matrix[..., 2, 2] = 1 - 2 * (xx + yy)\n\n    return rotation_matrix\n\n# Example usage\nquaternion = torch.tensor((0., 0., 0., 1.))\nrotation_matrix = quaternion_to_rotation_matrix(quaternion)\nprint(rotation_matrix)\n```\n\n### Explanation:\n\n- **Normalization**: The quaternion is normalized to ensure it represents a valid rotation.\n- **Unpacking**: The components \\( w, x, y, z \\) are extracted for easier computation.\n- **Matrix Calculation**: The rotation matrix is calculated using the standard formula for converting a quaternion to a rotation matrix.\n- **Output**: The resulting rotation matrix is returned in the correct shape.\n\nThis function can handle inputs of shape `(*, 4)`, where `*` can be any batch dimensions, allowing for batch processing of multiple quaternions.",
    "prompt": "Generate a Python function called quaternion_to_rotation_matrix that converts a quaternion to a rotation matrix. The input is a tensor called quaternion containing a quaternion in (w, x, y, z) format with shape (*, 4). The output is a rotation matrix of shape (*, 3, 3). The function first normalizes the input quaternion, then unpacks its components to compute the conversion using specific mathematical operations. Finally, it reshapes the output matrix and returns it. An example usage of the function is provided in the code snippet. >>> quaternion = tensor((0., 0., 0., 1.))\n        >>> quaternion_to_rotation_matrix(quaternion)\n        tensor([[-1.,  0.,  0.],\n                [ 0., -1.,  0.],\n                [ 0.,  0.,  1.]])",
    "function_name": "quaternion_to_rotation_matrix",
    "ground_truth": "kornia/geometry/conversions.py",
    "test": "tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Image"
}