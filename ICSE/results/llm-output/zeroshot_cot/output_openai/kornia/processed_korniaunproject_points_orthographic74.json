{
    "result": "To create the `unproject_points_orthographic` function, we need to follow these steps:\n\n1. **Understand the Inputs and Outputs**: \n   - The function takes two inputs: `points_in_camera` and `extension`.\n   - `points_in_camera` is a tensor of shape `(..., 2)`, representing 2D points in the camera frame.\n   - `extension` is a tensor of shape `(..., 1)`, representing the z-coordinate or depth extension for each point.\n   - The function should return a tensor of shape `(..., 3)`, representing the unprojected 3D points.\n\n2. **Combine the Inputs**:\n   - We need to concatenate the `points_in_camera` and `extension` tensors along the last dimension to form the 3D points.\n\n3. **Implement the Function**:\n   - Use PyTorch's `torch.cat` function to concatenate the tensors.\n\nHere's the implementation of the function:\n\n```python\nimport torch\n\ndef unproject_points_orthographic(points_in_camera, extension):\n    \"\"\"\n    Unprojects points from the canonical z=1 plane into the camera frame.\n\n    Args:\n        points_in_camera (Tensor): A tensor of shape (..., 2) representing the 2D points.\n        extension (Tensor): A tensor of shape (..., 1) representing the z-coordinate extension.\n\n    Returns:\n        Tensor: A tensor of shape (..., 3) representing the unprojected 3D points.\n    \"\"\"\n    # Concatenate the points_in_camera and extension along the last dimension\n    unprojected_points = torch.cat((points_in_camera, extension), dim=-1)\n    return unprojected_points\n\n# Example usage\npoints = torch.tensor([1., 2.])\nextension = torch.tensor([3.])\nresult = unproject_points_orthographic(points, extension)\nprint(result)  # Output: tensor([1., 2., 3.])\n```\n\n### Explanation:\n- **torch.cat**: This function is used to concatenate tensors along a specified dimension. In this case, we concatenate along the last dimension (`dim=-1`) to form a 3D point from the 2D `points_in_camera` and the 1D `extension`.\n- **Example Usage**: The example demonstrates how to use the function with a simple input, and the output is as expected: a 3D point `[1., 2., 3.]`.",
    "prompt": "Create a Python function called unproject_points_orthographic that unprojects points from the canonical z=1 plane into the camera frame. The function takes in two parameters: points_in_camera, a Tensor representing the points to unproject with shape (..., 2), and extension, a Tensor representing the extension of the points to unproject with shape (..., 1). The function returns a Tensor representing the unprojected points with shape (..., 3). \n\nFor example:\npoints = torch.tensor([1., 2.])\nextension = torch.tensor([3.])\nunproject_points_orthographic(points, extension) should return tensor([1., 2., 3.])",
    "function_name": "unproject_points_orthographic",
    "ground_truth": "kornia/geometry/camera/projection_orthographic.py",
    "test": "tests/geometry/camera/test_projections.py::TestProjectionOrthographic",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Image"
}