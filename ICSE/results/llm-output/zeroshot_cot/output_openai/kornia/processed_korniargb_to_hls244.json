{
    "result": "To create the `rgb_to_hls` function, we need to follow these steps:\n\n1. **Input Validation**: Check if the input is a PyTorch tensor and has the correct shape.\n2. **RGB to HLS Conversion**: Implement the conversion logic from RGB to HLS.\n3. **Return the Result**: Return the converted HLS image as a PyTorch tensor.\n\nLet's break down the code step by step:\n\n### Step 1: Input Validation\n\nFirst, we need to ensure that the input is a PyTorch tensor and has the correct shape. The shape should be `(*, 3, H, W)`, where `*` can be any number of leading dimensions.\n\n```python\nimport torch\n\ndef rgb_to_hls(image, eps=1e-10):\n    # Check if the input is a PyTorch tensor\n    if not isinstance(image, torch.Tensor):\n        raise TypeError(\"Input must be a PyTorch tensor.\")\n    \n    # Check if the input has the correct shape\n    if image.ndim < 3 or image.size(-3) != 3:\n        raise ValueError(\"Input must have shape (*, 3, H, W).\")\n```\n\n### Step 2: RGB to HLS Conversion\n\nThe conversion from RGB to HLS involves several steps:\n\n- Normalize the RGB values.\n- Calculate the luminance (L).\n- Calculate the saturation (S).\n- Calculate the hue (H).\n\nHere's how you can implement this:\n\n```python\n    # Separate the RGB channels\n    r, g, b = image.unbind(dim=-3)\n    \n    # Calculate the max and min values across the RGB channels\n    max_rgb, _ = torch.max(image, dim=-3)\n    min_rgb, _ = torch.min(image, dim=-3)\n    \n    # Calculate luminance\n    l = (max_rgb + min_rgb) / 2\n    \n    # Calculate saturation\n    s = torch.where(l < 0.5, (max_rgb - min_rgb) / (max_rgb + min_rgb + eps), \n                    (max_rgb - min_rgb) / (2.0 - max_rgb - min_rgb + eps))\n    \n    # Calculate hue\n    delta = max_rgb - min_rgb\n    h = torch.zeros_like(l)\n    \n    mask = delta > eps\n    r_eq_max = (r == max_rgb) & mask\n    g_eq_max = (g == max_rgb) & mask\n    b_eq_max = (b == max_rgb) & mask\n    \n    h[r_eq_max] = (g[r_eq_max] - b[r_eq_max]) / delta[r_eq_max]\n    h[g_eq_max] = 2.0 + (b[g_eq_max] - r[g_eq_max]) / delta[g_eq_max]\n    h[b_eq_max] = 4.0 + (r[b_eq_max] - g[b_eq_max]) / delta[b_eq_max]\n    \n    h = (h / 6.0) % 1.0  # Normalize hue to be in the range [0, 1]\n    \n    # Stack the H, L, S channels back together\n    hls = torch.stack((h, l, s), dim=-3)\n    \n    return hls\n```\n\n### Step 3: Example Usage\n\nHere's how you can use the `rgb_to_hls` function:\n\n```python\n# Example usage\nif __name__ == \"__main__\":\n    # Create a random RGB image tensor with shape (2, 3, 4, 4)\n    random_rgb_image = torch.rand(2, 3, 4, 4)\n    \n    # Convert the RGB image to HLS format\n    hls_image = rgb_to_hls(random_rgb_image)\n    \n    print(\"HLS Image Shape:\", hls_image.shape)\n    print(\"HLS Image:\", hls_image)\n```\n\nThis code will convert a random RGB image tensor to HLS format and print the result. The function checks for input validity and performs the conversion using PyTorch operations.",
    "prompt": "Generate a Python function called rgb_to_hls that converts an RGB image to HLS format. The function takes in a PyTorch tensor called image representing the RGB image with shape (*, 3, H, W) and an epsilon value eps to avoid division by zero. The image data is assumed to be in the range of (0, 1).\n\nThe function returns the HLS version of the input image with the same shape (*, 3, H, W). If the input image is not a PyTorch tensor, a TypeError is raised. If the input size does not have a shape of (*, 3, H, W), a ValueError is raised.\n\nThe conversion process involves calculating the HLS components (hue, luminance, saturation) based on the RGB values of the input image. The resulting HLS image is returned as a PyTorch tensor.\n\nAn example usage of the rgb_to_hls function is provided in the code snippet, where a random input RGB image tensor is converted to HLS format. Raise the value error if there input not instance of image or there was a problem with shape",
    "function_name": "rgb_to_hls",
    "ground_truth": "kornia/color/hls.py",
    "test": "tests/color/test_hls.py::TestRgbToHls",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}