{
    "result": "To create the `vector_to_skew_symmetric_matrix` function, we will follow these steps:\n\n1. **Import PyTorch**: Ensure that PyTorch is imported to handle tensor operations.\n2. **Define the Function**: Create a function that accepts a PyTorch tensor as input.\n3. **Check Input Shape**: Implement error handling to ensure the input tensor has the correct shape.\n4. **Compute Skew-Symmetric Matrix**: Calculate the skew-symmetric matrix for each vector.\n5. **Return the Result**: Return the resulting skew-symmetric matrix or matrices.\n\nLet's implement this step by step:\n\n### Step 1: Import PyTorch\n\n```python\nimport torch\n```\n\n### Step 2: Define the Function\n\n```python\ndef vector_to_skew_symmetric_matrix(v):\n```\n\n### Step 3: Check Input Shape\n\n```python\n    # Check if the input is a PyTorch tensor\n    if not isinstance(v, torch.Tensor):\n        raise ValueError(\"Input must be a PyTorch tensor.\")\n    \n    # Check if the input has the correct shape\n    if v.dim() == 1:\n        if v.shape[0] != 3:\n            raise ValueError(\"Input vector must have shape (3,).\")\n    elif v.dim() == 2:\n        if v.shape[1] != 3:\n            raise ValueError(\"Each vector in the batch must have shape (3,).\")\n    else:\n        raise ValueError(\"Input must be a tensor of shape (3,) or (B, 3).\")\n```\n\n### Step 4: Compute Skew-Symmetric Matrix\n\n```python\n    # If the input is a single vector\n    if v.dim() == 1:\n        v = v.unsqueeze(0)  # Add a batch dimension for consistent processing\n\n    # Extract components\n    x, y, z = v[:, 0], v[:, 1], v[:, 2]\n\n    # Create skew-symmetric matrices\n    zero = torch.zeros_like(x)\n    skew_matrices = torch.stack([\n        torch.stack([zero, -z, y], dim=1),\n        torch.stack([z, zero, -x], dim=1),\n        torch.stack([-y, x, zero], dim=1)\n    ], dim=1)\n```\n\n### Step 5: Return the Result\n\n```python\n    # If the input was a single vector, remove the batch dimension\n    if skew_matrices.shape[0] == 1:\n        return skew_matrices.squeeze(0)\n    \n    return skew_matrices\n```\n\n### Complete Function\n\nHere is the complete function:\n\n```python\nimport torch\n\ndef vector_to_skew_symmetric_matrix(v):\n    # Check if the input is a PyTorch tensor\n    if not isinstance(v, torch.Tensor):\n        raise ValueError(\"Input must be a PyTorch tensor.\")\n    \n    # Check if the input has the correct shape\n    if v.dim() == 1:\n        if v.shape[0] != 3:\n            raise ValueError(\"Input vector must have shape (3,).\")\n    elif v.dim() == 2:\n        if v.shape[1] != 3:\n            raise ValueError(\"Each vector in the batch must have shape (3,).\")\n    else:\n        raise ValueError(\"Input must be a tensor of shape (3,) or (B, 3).\")\n    \n    # If the input is a single vector\n    if v.dim() == 1:\n        v = v.unsqueeze(0)  # Add a batch dimension for consistent processing\n\n    # Extract components\n    x, y, z = v[:, 0], v[:, 1], v[:, 2]\n\n    # Create skew-symmetric matrices\n    zero = torch.zeros_like(x)\n    skew_matrices = torch.stack([\n        torch.stack([zero, -z, y], dim=1),\n        torch.stack([z, zero, -x], dim=1),\n        torch.stack([-y, x, zero], dim=1)\n    ], dim=1)\n\n    # If the input was a single vector, remove the batch dimension\n    if skew_matrices.shape[0] == 1:\n        return skew_matrices.squeeze(0)\n    \n    return skew_matrices\n```\n\nThis function will convert a 3D vector or a batch of 3D vectors into their corresponding skew-symmetric matrices, with appropriate error handling for input validation.",
    "prompt": "Create a Python function called vector_to_skew_symmetric_matrix that converts a 3D vector into its corresponding skew-symmetric matrix. The input should be a PyTorch Tensor of shape (B, 3) or (3,), representing a batch of 3D vectors or a single 3D vector. The function should return a PyTorch Tensor of shape (B, 3, 3) or (3, 3) containing the skew-symmetric matrices. It should include error handling to ensure the input vector has the correct shape and raise a ValueError if it does not",
    "function_name": "vector_to_skew_symmetric_matrix",
    "ground_truth": "kornia/geometry/conversions.py#L1490",
    "test": "tests/geometry/test_conversions.py::test_vector_to_skew_symmetric_matrix",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}