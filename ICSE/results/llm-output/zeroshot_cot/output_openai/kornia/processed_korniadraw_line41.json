{
    "result": "To create the `draw_line` function, we'll follow these steps:\n\n1. **Validate Inputs**: Ensure that the input image, points, and color are in the correct format and dimensions.\n2. **Check Bounds**: Ensure that the points are within the bounds of the image.\n3. **Draw the Line**: Use a line drawing algorithm to update the image with the specified color along the line.\n4. **Return the Updated Image**: Return the image with the drawn line.\n\nLet's implement this step by step:\n\n### Step 1: Validate Inputs\n\nWe'll start by checking the dimensions of the inputs to ensure they are as expected.\n\n```python\nimport torch\n\ndef draw_line(image, p1, p2, color):\n    # Check image dimensions\n    if image.ndim != 3:\n        raise ValueError(\"Image must have 3 dimensions (C, H, W).\")\n    \n    C, H, W = image.shape\n    \n    # Check color dimensions\n    if color.shape != (C,):\n        raise ValueError(\"Color must have the same number of channels as the image.\")\n    \n    # Check points dimensions\n    if p1.ndim not in [1, 2] or p2.ndim not in [1, 2]:\n        raise ValueError(\"Points p1 and p2 must have shape (2,) or (B, 2).\")\n    \n    if p1.shape != p2.shape:\n        raise ValueError(\"Points p1 and p2 must have the same shape.\")\n    \n    if p1.ndim == 1:\n        p1 = p1.unsqueeze(0)\n        p2 = p2.unsqueeze(0)\n    \n    B = p1.shape[0]\n    \n    # Check if points are within bounds\n    for i in range(B):\n        if not (0 <= p1[i, 0] < W and 0 <= p1[i, 1] < H and 0 <= p2[i, 0] < W and 0 <= p2[i, 1] < H):\n            raise ValueError(\"Points must be within the bounds of the image.\")\n```\n\n### Step 2: Draw the Line\n\nWe'll use Bresenham's line algorithm to draw the line between the points. This algorithm is efficient and works well for raster graphics.\n\n```python\ndef bresenham_line(x0, y0, x1, y1):\n    \"\"\"Generate points of a line using Bresenham's algorithm.\"\"\"\n    points = []\n    dx = abs(x1 - x0)\n    dy = abs(y1 - y0)\n    sx = 1 if x0 < x1 else -1\n    sy = 1 if y0 < y1 else -1\n    err = dx - dy\n\n    while True:\n        points.append((x0, y0))\n        if x0 == x1 and y0 == y1:\n            break\n        e2 = err * 2\n        if e2 > -dy:\n            err -= dy\n            x0 += sx\n        if e2 < dx:\n            err += dx\n            y0 += sy\n\n    return points\n```\n\n### Step 3: Update the Image\n\nNow, we'll use the `bresenham_line` function to update the image with the specified color.\n\n```python\ndef draw_line(image, p1, p2, color):\n    # (Validation code from above)\n    \n    for i in range(B):\n        x0, y0 = int(p1[i, 0]), int(p1[i, 1])\n        x1, y1 = int(p2[i, 0]), int(p2[i, 1])\n        \n        line_points = bresenham_line(x0, y0, x1, y1)\n        \n        for x, y in line_points:\n            image[:, y, x] = color\n    \n    return image\n```\n\n### Final Code\n\nHere's the complete function with all parts combined:\n\n```python\nimport torch\n\ndef bresenham_line(x0, y0, x1, y1):\n    \"\"\"Generate points of a line using Bresenham's algorithm.\"\"\"\n    points = []\n    dx = abs(x1 - x0)\n    dy = abs(y1 - y0)\n    sx = 1 if x0 < x1 else -1\n    sy = 1 if y0 < y1 else -1\n    err = dx - dy\n\n    while True:\n        points.append((x0, y0))\n        if x0 == x1 and y0 == y1:\n            break\n        e2 = err * 2\n        if e2 > -dy:\n            err -= dy\n            x0 += sx\n        if e2 < dx:\n            err += dx\n            y0 += sy\n\n    return points\n\ndef draw_line(image, p1, p2, color):\n    # Check image dimensions\n    if image.ndim != 3:\n        raise ValueError(\"Image must have 3 dimensions (C, H, W).\")\n    \n    C, H, W = image.shape\n    \n    # Check color dimensions\n    if color.shape != (C,):\n        raise ValueError(\"Color must have the same number of channels as the image.\")\n    \n    # Check points dimensions\n    if p1.ndim not in [1, 2] or p2.ndim not in [1, 2]:\n        raise ValueError(\"Points p1 and p2 must have shape (2,) or (B, 2).\")\n    \n    if p1.shape != p2.shape:\n        raise ValueError(\"Points p1 and p2 must have the same shape.\")\n    \n    if p1.ndim == 1:\n        p1 = p1.unsqueeze(0)\n        p2 = p2.unsqueeze(0)\n    \n    B = p1.shape[0]\n    \n    # Check if points are within bounds\n    for i in range(B):\n        if not (0 <= p1[i, 0] < W and 0 <= p1[i, 1] < H and 0 <= p2[i, 0] < W and 0 <= p2[i, 1] < H):\n            raise ValueError(\"Points must be within the bounds of the image.\")\n    \n    for i in range(B):\n        x0, y0 = int(p1[i, 0]), int(p1[i, 1])\n        x1, y1 = int(p2[i, 0]), int(p2[i, 1])\n        \n        line_points = bresenham_line(x0, y0, x1, y1)\n        \n        for x, y in line_points:\n            image[:, y, x] = color\n    \n    return image\n```\n\nThis function should now correctly draw a line on the image using the specified color, ensuring all inputs are validated and within bounds.",
    "prompt": "Create a Python function called draw_line that draws a single line into an image. The function takes in four parameters: image (a torch.Tensor representing the input image with shape (C,H,W)), p1 (the start point [x y] of the line with shape (2, ) or (B, 2)), p2 (the end point [x y] of the line with shape (2, ) or (B, 2)), and color (the color of the line with shape (C) where C is the number of channels of the image). The function returns the image with the drawn line.\n\nEnsure that the input points p1 and p2 are 2D points with shape (2, ) or (B, 2) and have the same batch sizes. Check that the points are within the bounds of the image. The image must have 3 dimensions (C,H,W) and the color must have the same number of channels as the image.\n\nThe function calculates the coordinates of the line based on the start and end points, and then updates the image with the specified color along the line. The updated image is returned as the output.",
    "function_name": "draw_line",
    "ground_truth": "kornia/utils/draw.py",
    "test": "tests/utils/test_draw.py",
    "class": "",
    "stage": "Inference",
    "task": "",
    "data": "Image"
}