{
    "result": "To convert an axis-angle representation to a rotation matrix, we can use the Rodrigues' rotation formula. The axis-angle representation consists of a vector where the direction of the vector represents the axis of rotation and the magnitude of the vector represents the angle of rotation in radians.\n\nHere's a step-by-step implementation of the `axis_angle_to_rotation_matrix` function:\n\n1. **Import Necessary Libraries**: We'll use PyTorch for tensor operations.\n\n2. **Normalize the Axis**: The axis part of the axis-angle vector needs to be normalized.\n\n3. **Compute the Rotation Matrix**: Use the Rodrigues' rotation formula to compute the rotation matrix.\n\n4. **Handle Edge Cases**: Consider the case where the angle is zero, which should return an identity matrix.\n\nHere's the complete code:\n\n```python\nimport torch\n\ndef axis_angle_to_rotation_matrix(axis_angle):\n    \"\"\"\n    Convert 3D vector of axis-angle rotation to 3x3 rotation matrix.\n\n    Args:\n        axis_angle: tensor of 3D vector of axis-angle rotations in radians with shape (N, 3).\n\n    Returns:\n        tensor of rotation matrices of shape (N, 3, 3).\n    \"\"\"\n    # Ensure the input is a tensor\n    if not isinstance(axis_angle, torch.Tensor):\n        axis_angle = torch.tensor(axis_angle, dtype=torch.float32)\n\n    # Get the angle (magnitude of the vector)\n    angles = torch.norm(axis_angle, dim=1, keepdim=True)\n\n    # Normalize the axis\n    axes = axis_angle / (angles + 1e-8)  # Add small epsilon to avoid division by zero\n\n    # Compute the components of the Rodrigues' rotation formula\n    cos_angles = torch.cos(angles)\n    sin_angles = torch.sin(angles)\n    one_minus_cos = 1 - cos_angles\n\n    # Extract the components of the axis\n    x, y, z = axes[:, 0], axes[:, 1], axes[:, 2]\n\n    # Compute the rotation matrices\n    rotation_matrices = torch.zeros((axis_angle.shape[0], 3, 3), dtype=torch.float32)\n    rotation_matrices[:, 0, 0] = cos_angles[:, 0] + x * x * one_minus_cos[:, 0]\n    rotation_matrices[:, 0, 1] = x * y * one_minus_cos[:, 0] - z * sin_angles[:, 0]\n    rotation_matrices[:, 0, 2] = x * z * one_minus_cos[:, 0] + y * sin_angles[:, 0]\n    rotation_matrices[:, 1, 0] = y * x * one_minus_cos[:, 0] + z * sin_angles[:, 0]\n    rotation_matrices[:, 1, 1] = cos_angles[:, 0] + y * y * one_minus_cos[:, 0]\n    rotation_matrices[:, 1, 2] = y * z * one_minus_cos[:, 0] - x * sin_angles[:, 0]\n    rotation_matrices[:, 2, 0] = z * x * one_minus_cos[:, 0] - y * sin_angles[:, 0]\n    rotation_matrices[:, 2, 1] = z * y * one_minus_cos[:, 0] + x * sin_angles[:, 0]\n    rotation_matrices[:, 2, 2] = cos_angles[:, 0] + z * z * one_minus_cos[:, 0]\n\n    # Handle the case where the angle is zero (return identity matrix)\n    identity_matrices = torch.eye(3).expand(axis_angle.shape[0], 3, 3)\n    rotation_matrices = torch.where(angles.view(-1, 1, 1) < 1e-8, identity_matrices, rotation_matrices)\n\n    return rotation_matrices\n\n# Example usage\ninput1 = torch.tensor([[0., 0., 0.]])\nprint(axis_angle_to_rotation_matrix(input1))\n\ninput2 = torch.tensor([[1.5708, 0., 0.]])\nprint(axis_angle_to_rotation_matrix(input2))\n```\n\nThis function takes a tensor of axis-angle vectors and returns a tensor of corresponding rotation matrices. The function handles the edge case where the angle is zero by returning an identity matrix.",
    "prompt": "Write a python function axis_angle_to_rotation_matrix thatConvert 3d vector of axis-angle rotation to 3x3 rotation matrix.\n\n    Args:\n        axis_angle: tensor of 3d vector of axis-angle rotations in radians with shape :math:`(N, 3)`.\n\n    Returns:\n        tensor of rotation matrices of shape :math:`(N, 3, 3)`.\n\n    Example:\n        >>> input = tensor([[0., 0., 0.]])\n        >>> axis_angle_to_rotation_matrix(input)\n        tensor([[[1., 0., 0.],\n                 [0., 1., 0.],\n                 [0., 0., 1.]]])\n\n        >>> input = tensor([[1.5708, 0., 0.]])\n        >>> axis_angle_to_rotation_matrix(input)\n        tensor([[[ 1.0000e+00,  0.0000e+00,  0.0000e+00],\n                 [ 0.0000e+00, -3.6200e-06, -1.0000e+00],\n                 [ 0.0000e+00,  1.0000e+00, -3.6200e-06]]]]",
    "function_name": "axis_angle_to_rotation_matrix",
    "ground_truth": "kornia/geometry/conversions.py#L267",
    "test": "tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}