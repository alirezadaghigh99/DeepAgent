{
    "result": "To create a Python function called `deg2rad` that converts angles from degrees to radians, we need to follow these steps:\n\n1. **Import Necessary Libraries**: We need to import the necessary libraries, such as `torch` for handling tensors and `math` for the conversion constant.\n\n2. **Define the Function**: We'll define the function `deg2rad` with a parameter `tensor`.\n\n3. **Type Checking**: We'll check if the input is a tensor. If not, we'll raise a `TypeError`.\n\n4. **Conversion**: We'll perform the conversion from degrees to radians using the formula: radians = degrees \u00d7 (\u03c0 / 180).\n\n5. **Return the Result**: Finally, we'll return the converted tensor.\n\nHere's the complete code:\n\n```python\nimport torch\nimport math\nfrom torch import Tensor\n\ndef deg2rad(tensor: Tensor) -> Tensor:\n    \"\"\"\n    Convert angles from degrees to radians.\n\n    Args:\n        tensor: Tensor of arbitrary shape.\n\n    Returns:\n        Tensor with same shape as input, with angles converted to radians.\n    \"\"\"\n    if not isinstance(tensor, Tensor):\n        raise TypeError(f\"Input type is not a Tensor. Got {type(tensor)}\")\n    \n    # Convert degrees to radians\n    radians_tensor = tensor * (math.pi / 180)\n    \n    return radians_tensor\n```\n\n### Explanation:\n\n- **Import Statements**: We import `torch` and `math`. `torch` is used for tensor operations, and `math.pi` provides the value of \u03c0.\n\n- **Function Definition**: The function `deg2rad` takes a `Tensor` as input and returns a `Tensor`.\n\n- **Type Checking**: We ensure the input is a `Tensor`. If not, a `TypeError` is raised.\n\n- **Conversion**: The conversion is done using the formula for converting degrees to radians.\n\n- **Return**: The function returns the tensor with the converted values.",
    "prompt": "Generate a Python function called deg2rad Function that converts angles from degrees to radians.\n\n    Args:\n        tensor: Tensor of arbitrary shape.\n\n    Returns:\n        tensor with same shape as input.\nif not isinstance(tensor, Tensor):\n        raise TypeError(f\"Input type is not a Tensor. Got {type(tensor)}\")",
    "function_name": "deg2rad",
    "ground_truth": "kornia/geometry/conversions.py#L83",
    "test": "tests/geometry/test_conversions.py::TestRadDegConversions::test_deg2rad_gradcheck",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": ""
}