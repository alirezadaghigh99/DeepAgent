{
    "result": "To generate the `unproject` function for the `PinholeCamera` class, we need to follow these steps:\n\n1. **Understand the Camera Model**: The pinhole camera model uses intrinsic and extrinsic matrices to map 3D world coordinates to 2D pixel coordinates. The intrinsic matrix relates to the camera's internal parameters, while the extrinsic matrix relates to the camera's position and orientation in the world.\n\n2. **Inverse the Intrinsic Matrix**: To convert from pixel coordinates back to camera coordinates, we need the inverse of the intrinsic matrix.\n\n3. **Transform Pixel to Camera Coordinates**: Use the inverse intrinsic matrix to transform the 2D pixel coordinates into 3D camera coordinates.\n\n4. **Apply Depth Information**: Use the depth information to scale the camera coordinates appropriately.\n\n5. **Transform Camera to World Coordinates**: Use the extrinsic matrix to transform the camera coordinates to world coordinates.\n\nLet's implement these steps in the `unproject` function:\n\n```python\nimport torch\nfrom torch import Tensor\n\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n\n    def unproject(self, point_2d: Tensor, depth: Tensor) -> Tensor:\n        # Step 1: Inverse the intrinsic matrix\n        intrinsics_inv = torch.inverse(self._intrinsics)\n\n        # Step 2: Convert 2D pixel coordinates to homogeneous coordinates\n        ones = torch.ones_like(point_2d[..., :1])\n        pixel_homogeneous = torch.cat((point_2d, ones), dim=-1)  # Shape: (*, 3)\n\n        # Step 3: Transform pixel coordinates to camera coordinates\n        camera_coords_homogeneous = torch.matmul(intrinsics_inv, pixel_homogeneous.unsqueeze(-1)).squeeze(-1)\n\n        # Step 4: Apply depth to get 3D camera coordinates\n        camera_coords = camera_coords_homogeneous * depth\n\n        # Step 5: Convert camera coordinates to homogeneous coordinates\n        camera_coords_homogeneous = torch.cat((camera_coords, ones), dim=-1)  # Shape: (*, 4)\n\n        # Step 6: Transform camera coordinates to world coordinates using the extrinsic matrix\n        world_coords_homogeneous = torch.matmul(self._extrinsics, camera_coords_homogeneous.unsqueeze(-1)).squeeze(-1)\n\n        # Step 7: Convert from homogeneous coordinates to 3D world coordinates\n        world_coords = world_coords_homogeneous[..., :3] / world_coords_homogeneous[..., 3:4]\n\n        return world_coords\n```\n\n### Explanation:\n- **Intrinsic Matrix Inversion**: We first invert the intrinsic matrix to map pixel coordinates back to camera coordinates.\n- **Homogeneous Coordinates**: We convert 2D pixel coordinates to homogeneous coordinates by appending a 1, which is necessary for matrix multiplication.\n- **Depth Scaling**: The depth value scales the camera coordinates to ensure they are correctly positioned in 3D space.\n- **Extrinsic Transformation**: We use the extrinsic matrix to transform the camera coordinates to world coordinates.\n- **Final Conversion**: We convert the homogeneous world coordinates back to 3D coordinates by dividing by the last element.\n\nThis function will transform 2D pixel coordinates with depth information into 3D world coordinates.",
    "prompt": "Generate the `unproject` function for the following class to transform coordinates in the pixel frame to the world frame. The input is `self`, a `point_2d` tensor with shape `(*, 2)`, and a `depth` tensor with shape `(*, 1)`. The output is a tensor of `(x, y, z)` world coordinates with shape `(*, 3)`.\n\n```python\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n```",
    "function_name": "unproject",
    "ground_truth": "kornia/geometry/camera/pinhole.py",
    "test": "tests/geometry/camera/test_pinhole.py",
    "class": "PinholeCamera",
    "stage": "Image",
    "task": "",
    "data": "Inference"
}