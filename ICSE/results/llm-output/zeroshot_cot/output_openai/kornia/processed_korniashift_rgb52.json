{
    "result": "To create the `shift_rgb` function, we will follow these steps:\n\n1. **Validate the Input**: Ensure the input image is a tensor with the correct shape and that it is an RGB image.\n2. **Apply the Shifts**: Adjust each channel of the image by the corresponding shift value.\n3. **Clamp the Values**: Ensure that the resulting pixel values are clamped between 0 and 1.\n4. **Return the Modified Image**: Return the adjusted image tensor.\n\nLet's implement this step by step:\n\n### Step 1: Validate the Input\n\nWe need to check that the input image is a tensor with the shape `(N, C, H, W)` and that `C` is 3, indicating an RGB image.\n\n### Step 2: Apply the Shifts\n\nFor each channel, we will add the corresponding shift value to each image in the batch.\n\n### Step 3: Clamp the Values\n\nAfter applying the shifts, we need to ensure that all pixel values are within the range [0, 1].\n\n### Step 4: Return the Modified Image\n\nFinally, we return the modified image tensor.\n\nHere's the complete implementation:\n\n```python\nimport torch\n\ndef shift_rgb(image, r_shift, g_shift, b_shift):\n    # Step 1: Validate the Input\n    if not isinstance(image, torch.Tensor):\n        raise TypeError(\"Image must be a torch.Tensor\")\n    if image.ndim != 4:\n        raise ValueError(\"Image must have 4 dimensions (N, C, H, W)\")\n    if image.size(1) != 3:\n        raise ValueError(\"Image must have 3 channels (RGB)\")\n\n    if not (isinstance(r_shift, torch.Tensor) and isinstance(g_shift, torch.Tensor) and isinstance(b_shift, torch.Tensor)):\n        raise TypeError(\"Shift values must be torch.Tensors\")\n    if r_shift.ndim != 1 or g_shift.ndim != 1 or b_shift.ndim != 1:\n        raise ValueError(\"Shift tensors must be 1-dimensional\")\n    if r_shift.size(0) != image.size(0) or g_shift.size(0) != image.size(0) or b_shift.size(0) != image.size(0):\n        raise ValueError(\"Shift tensors must have the same length as the batch size\")\n\n    # Step 2: Apply the Shifts\n    # Add the shift values to each channel\n    image[:, 0, :, :] += r_shift.view(-1, 1, 1)\n    image[:, 1, :, :] += g_shift.view(-1, 1, 1)\n    image[:, 2, :, :] += b_shift.view(-1, 1, 1)\n\n    # Step 3: Clamp the Values\n    image = torch.clamp(image, 0, 1)\n\n    # Step 4: Return the Modified Image\n    return image\n\n# Example usage\nimage = torch.tensor([[[[0.2000, 0.0000]],\n                       [[0.3000, 0.5000]],\n                       [[0.4000, 0.7000]]],\n                      [[[0.2000, 0.7000]],\n                       [[0.0000, 0.8000]],\n                       [[0.2000, 0.3000]]]])\n\nr_shift = torch.tensor([0.1000, 0.1000])\ng_shift = torch.tensor([0.3000, 0.3000])\nb_shift = torch.tensor([-0.3000, -0.3000])\n\nshifted_image = shift_rgb(image, r_shift, g_shift, b_shift)\nprint(shifted_image)\n```\n\nThis function will correctly shift the RGB channels of the input image tensor and ensure that the output values are clamped between 0 and 1.",
    "prompt": "Generate a Python function named shift_rgb that shifts the RGB channels of an image. The function takes the following inputs: an image tensor of shape (N, C, H, W), where C is 3 (indicating an RGB image), and three tensors r_shift, g_shift, and b_shift of shape (N) that represent the shift values for the red, green, and blue channels, respectively.\n\nThe function should:\n\nVerify that the image is a valid tensor and a color image.\nApply the shifts to each channel.\nEnsure the output values are clamped between 0 and 1.\nReturn the modified image as a tensor of the same shape.\nThe function should handle errors by checking the tensor types and confirming that the input image is an RGB image.\"\nexample of input : image = tensor([[[[0.2000, 0.0000]],\n\n         [[0.3000, 0.5000]],\n\n         [[0.4000, 0.7000]]],\n\n\n        [[[0.2000, 0.7000]],\n\n         [[0.0000, 0.8000]],\n\n         [[0.2000, 0.3000]]]]), r_shift = tensor([0.1000]), g_shift = tensor([0.3000]), b_shift = tensor([-0.3000])",
    "function_name": "shift_rgb",
    "ground_truth": "kornia/enhance/shift_rgb.py",
    "test": "tests/enhance/test_shift_rgb.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Classification",
    "data": "Image"
}