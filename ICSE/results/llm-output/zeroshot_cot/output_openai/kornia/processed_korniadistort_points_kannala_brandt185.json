{
    "result": "To implement the `distort_points_kannala_brandt` function, we need to understand the Kannala-Brandt distortion model. This model is often used in fisheye camera calibration and involves a series of polynomial terms to model the radial distortion. Here's a step-by-step breakdown of how to implement this function:\n\n1. **Understand the Parameters**: The `params` tensor contains the intrinsic parameters and distortion coefficients:\n   - `fx`, `fy`: Focal lengths in the x and y directions.\n   - `cx`, `cy`: Principal point offsets.\n   - `k1`, `k2`, `k3`, `k4`: Distortion coefficients.\n\n2. **Extract Parameters**: Extract these parameters from the `params` tensor.\n\n3. **Compute Radial Distance**: For each point, compute the radial distance from the origin in the z=1 plane.\n\n4. **Apply Distortion**: Use the distortion coefficients to compute the distorted radius.\n\n5. **Compute Distorted Points**: Use the distorted radius to compute the distorted x and y coordinates.\n\n6. **Return the Distorted Points**: Return the distorted points as a tensor.\n\nHere's the implementation:\n\n```python\nimport torch\n\ndef distort_points_kannala_brandt(projected_points_in_camera_z1_plane, params):\n    # Extract parameters\n    fx, fy, cx, cy, k1, k2, k3, k4 = params[..., 0], params[..., 1], params[..., 2], params[..., 3], params[..., 4], params[..., 5], params[..., 6], params[..., 7]\n    \n    # Extract x and y from the input points\n    x = projected_points_in_camera_z1_plane[..., 0]\n    y = projected_points_in_camera_z1_plane[..., 1]\n    \n    # Compute the radial distance\n    r = torch.sqrt(x**2 + y**2)\n    \n    # Compute the distorted radius using the Kannala-Brandt model\n    theta = torch.atan(r)\n    theta_d = theta + k1 * theta**3 + k2 * theta**5 + k3 * theta**7 + k4 * theta**9\n    \n    # Avoid division by zero\n    r = torch.where(r == 0, torch.tensor(1.0, dtype=r.dtype, device=r.device), r)\n    \n    # Compute the scaling factor\n    scale = theta_d / r\n    \n    # Compute the distorted points\n    x_distorted = fx * scale * x + cx\n    y_distorted = fy * scale * y + cy\n    \n    # Return the distorted points\n    return torch.stack((x_distorted, y_distorted), dim=-1)\n\n# Example usage\npoints = torch.tensor([319.5, 239.5])  # center of a 640x480 image\nparams = torch.tensor([1000.0, 1000.0, 320.0, 280.0, 0.1, 0.01, 0.001, 0.0001])\ndistorted_points = distort_points_kannala_brandt(points, params)\nprint(distorted_points)\n```\n\nThis code will compute the distorted points using the Kannala-Brandt model. The function handles multiple points and parameters by using PyTorch's broadcasting capabilities. The example usage demonstrates how to call the function with a single point and a set of parameters.",
    "prompt": "Generate a Python function called distort_points_kannala_brandt that distorts one or more points from the canonical z=1 plane into the camera frame using the Kannala-Brandt model. The function takes two inputs: projected_points_in_camera_z1_plane, a Tensor representing the points to distort with shape (..., 2), and params, a Tensor representing the parameters of the Kannala-Brandt distortion model with shape (..., 8). The function returns a Tensor representing the distorted points with shape (..., 2). \n\nFor example:\n```python\npoints = torch.tensor([319.5, 239.5])  # center of a 640x480 image\nparams = torch.tensor([1000.0, 1000.0, 320.0, 280.0, 0.1, 0.01, 0.001, 0.0001])\ndistort_points_kannala_brandt(points, params)\n```\nOutput:\n```\ntensor([1982.6832, 1526.3619])\n```",
    "function_name": "distort_points_kannala_brandt",
    "ground_truth": "kornia/geometry/camera/distortion_kannala_brandt.py",
    "test": "tests/geometry/camera/test_distortion.py::TestDistortionKannalaBrandt",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}