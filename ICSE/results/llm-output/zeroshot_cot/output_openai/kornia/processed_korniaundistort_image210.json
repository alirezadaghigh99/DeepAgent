{
    "result": "To create the `undistort_image` function, we need to follow these steps:\n\n1. **Understand the Inputs and Outputs**: \n   - The input image is a tensor with shape `(*, C, H, W)`.\n   - The intrinsic camera matrix `K` is a tensor with shape `(*, 3, 3)`.\n   - The distortion coefficients `dist` is a tensor with shape `(*, n)`, where `n` can vary depending on the distortion model used.\n   - The output should be an undistorted image with the same shape as the input image.\n\n2. **Use OpenCV for Undistortion**:\n   - OpenCV provides functions to undistort images using camera matrices and distortion coefficients. However, OpenCV works with NumPy arrays, so we need to convert between PyTorch tensors and NumPy arrays.\n\n3. **Implement the Function**:\n   - Convert the input image and parameters from PyTorch tensors to NumPy arrays.\n   - Use OpenCV's `cv2.undistort` function to undistort the image.\n   - Convert the undistorted image back to a PyTorch tensor.\n\nHere's the implementation:\n\n```python\nimport torch\nimport cv2\nimport numpy as np\n\ndef undistort_image(image, K, dist):\n    # Check if OpenCV is available\n    if not hasattr(cv2, 'undistort'):\n        raise ImportError(\"OpenCV is required for this function.\")\n    \n    # Convert the input image to a NumPy array\n    image_np = image.cpu().numpy()\n    K_np = K.cpu().numpy()\n    dist_np = dist.cpu().numpy()\n    \n    # Prepare an output tensor with the same shape as the input\n    undistorted_image = torch.empty_like(image)\n    \n    # Iterate over the batch dimension\n    for i in range(image_np.shape[0]):\n        # Extract the single image, camera matrix, and distortion coefficients\n        img = image_np[i].transpose(1, 2, 0)  # Convert to HWC for OpenCV\n        k = K_np[i]\n        d = dist_np[i]\n        \n        # Undistort the image using OpenCV\n        undistorted_img = cv2.undistort(img, k, d)\n        \n        # Convert back to CHW format and store in the output tensor\n        undistorted_image[i] = torch.from_numpy(undistorted_img.transpose(2, 0, 1))\n    \n    return undistorted_image\n\n# Example usage\nimg = torch.rand(1, 3, 5, 5)\nK = torch.eye(3)[None]\ndist_coeff = torch.rand(1, 4)\nout = undistort_image(img, K, dist_coeff)\nprint(out.shape)\n```\n\n### Explanation:\n- **Conversion**: The function converts the input image and parameters to NumPy arrays for compatibility with OpenCV.\n- **Batch Processing**: It processes each image in the batch individually.\n- **Undistortion**: Uses `cv2.undistort` to correct the image for lens distortion.\n- **Output**: Converts the undistorted image back to a PyTorch tensor and returns it.\n\nThis function assumes that the distortion coefficients are compatible with OpenCV's `cv2.undistort` function, which typically supports radial and tangential distortion. If you need to handle more complex distortion models (e.g., thin prism, tilt), additional steps or a different approach might be necessary.",
    "prompt": "Generate a Python function called undistort_image that compensates an image for lens distortion. The function takes in three inputs: image (a torch.Tensor representing the input image with shape (*, C, H, W)), K (a torch.Tensor representing the intrinsic camera matrix with shape (*, 3, 3)), and dist (a torch.Tensor representing the distortion coefficients with shape (*, n)). The distortion coefficients include radial, tangential, thin prism, and tilt distortion models.\n\nThe function returns an undistorted image with the same shape as the input image (*, C, H, W). \n\nFor example:\n```python\nimg = torch.rand(1, 3, 5, 5)\nK = torch.eye(3)[None]\ndist_coeff = torch.rand(1, 4)\nout = undistort_image(img, K, dist_coeff)\nout.shape\n```\n\nThe output shape of the undistorted image will be torch.Size([1, 3, 5, 5).",
    "function_name": "undistort_image",
    "ground_truth": "kornia/geometry/calibration/undistort.py",
    "test": "tests/geometry/calibration/test_undistort.py::TestUndistortImage",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Image"
}