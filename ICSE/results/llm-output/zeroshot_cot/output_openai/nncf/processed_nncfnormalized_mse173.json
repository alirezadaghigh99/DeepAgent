{
    "result": "To create the `normalized_mse` function, we will follow these steps:\n\n1. **Import Necessary Libraries**: We need to import NumPy since we will be working with NumPy arrays.\n2. **Define the Function**: Create a function named `normalized_mse` that takes two lists of NumPy arrays as input.\n3. **Iterate Over the Lists**: Loop through the elements of `ref_outputs` and `approx_outputs` simultaneously.\n4. **Compute MSE**: For each pair of arrays, compute the mean square error (MSE) between the reference and approximate outputs.\n5. **Compute Normalization Factor**: Compute the MSE between the reference output and zero, which will be used as the normalization factor.\n6. **Compute NMSE**: Calculate the normalized mean square error (NMSE) for each pair.\n7. **Average NMSE**: Compute the average NMSE across all pairs.\n8. **Return the Result**: Return the average NMSE as a single float value.\n\nLet's implement this step by step:\n\n```python\nimport numpy as np\n\ndef normalized_mse(ref_outputs, approx_outputs):\n    # Check if the input lists have the same length\n    if len(ref_outputs) != len(approx_outputs):\n        raise ValueError(\"The input lists must have the same length.\")\n    \n    nmse_list = []\n    \n    # Iterate over pairs of reference and approximate outputs\n    for ref, approx in zip(ref_outputs, approx_outputs):\n        # Compute the MSE between the reference and approximate outputs\n        mse = np.mean((ref - approx) ** 2)\n        \n        # Compute the MSE between the reference output and zero\n        mse_ref_zero = np.mean(ref ** 2)\n        \n        # Compute the NMSE\n        nmse = mse / mse_ref_zero if mse_ref_zero != 0 else float('inf')\n        \n        # Append the NMSE to the list\n        nmse_list.append(nmse)\n    \n    # Compute the average NMSE\n    average_nmse = np.mean(nmse_list)\n    \n    return average_nmse\n```\n\n### Explanation:\n- **Error Handling**: We first check if the input lists have the same length to avoid mismatches.\n- **MSE Calculation**: For each pair of arrays, we calculate the MSE using the formula \\(\\text{MSE} = \\frac{1}{n} \\sum (x_i - y_i)^2\\).\n- **Normalization**: The normalization factor is the MSE of the reference output with respect to zero, calculated as \\(\\text{MSE}_{\\text{ref\\_zero}} = \\frac{1}{n} \\sum (x_i)^2\\).\n- **NMSE Calculation**: NMSE is calculated as \\(\\text{NMSE} = \\frac{\\text{MSE}}{\\text{MSE}_{\\text{ref\\_zero}}}\\). We handle the case where the normalization factor is zero by returning infinity.\n- **Average NMSE**: Finally, we compute the average NMSE across all pairs and return it.",
    "prompt": "Create a Python function `normalized_mse` that computes the normalized mean square error (NMSE) between two lists of NumPy arrays, `ref_outputs` and `approx_outputs`. The NMSE is defined as the mean square error (MSE) between the reference and approximate outputs, normalized by the MSE between the reference output and zero. The function iterates over corresponding elements in `ref_outputs` and `approx_outputs`, computes the NMSE for each pair, and then returns the average NMSE across all pairs as a single float value.",
    "function_name": "normalized_mse",
    "ground_truth": "nncf/quantization/algorithms/accuracy_control/rank_functions.py",
    "test": "tests/common/accuracy_control/test_ranking.py",
    "class": "",
    "stage": "Evaluating&Metrics",
    "task": "Regression",
    "data": ""
}