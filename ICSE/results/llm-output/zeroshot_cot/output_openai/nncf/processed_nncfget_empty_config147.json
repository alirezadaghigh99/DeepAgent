{
    "result": "To generate the `get_empty_config` function step by step, we'll break down the requirements and implement each part accordingly.\n\n### Step 1: Define the Function Signature\n\nFirst, we need to define the function signature with the specified optional parameters and their default values.\n\n```python\ndef get_empty_config(model_size=4, input_sample_sizes=None, input_info=None):\n    pass\n```\n\n### Step 2: Handle Default Values for `input_sample_sizes`\n\nNext, we need to set `input_sample_sizes` to `[1, 1, 4, 4]` if it is `None`.\n\n```python\ndef get_empty_config(model_size=4, input_sample_sizes=None, input_info=None):\n    if input_sample_sizes is None:\n        input_sample_sizes = [1, 1, 4, 4]\n```\n\n### Step 3: Define the Nested Function `_create_input_info`\n\nWe need a nested function `_create_input_info` that creates a list of dictionaries with the key `\"sample_size\"` based on `input_sample_sizes`.\n\n```python\ndef get_empty_config(model_size=4, input_sample_sizes=None, input_info=None):\n    if input_sample_sizes is None:\n        input_sample_sizes = [1, 1, 4, 4]\n\n    def _create_input_info():\n        return [{\"sample_size\": size} for size in input_sample_sizes]\n```\n\n### Step 4: Create an Instance of `NNCFConfig`\n\nAssuming `NNCFConfig` is a class that can be instantiated (you might need to import it from the appropriate module), we create an instance and update it with the required keys.\n\n```python\nclass NNCFConfig(dict):\n    pass  # Placeholder for the actual NNCFConfig class\n\ndef get_empty_config(model_size=4, input_sample_sizes=None, input_info=None):\n    if input_sample_sizes is None:\n        input_sample_sizes = [1, 1, 4, 4]\n\n    def _create_input_info():\n        return [{\"sample_size\": size} for size in input_sample_sizes]\n\n    config = NNCFConfig()\n    config.update({\n        \"model\": \"empty_config\",\n        \"model_size\": model_size,\n        \"input_info\": input_info if input_info is not None else _create_input_info()\n    })\n    return config\n```\n\n### Final Code\n\nHere is the complete function with all the steps combined:\n\n```python\nclass NNCFConfig(dict):\n    pass  # Placeholder for the actual NNCFConfig class\n\ndef get_empty_config(model_size=4, input_sample_sizes=None, input_info=None):\n    if input_sample_sizes is None:\n        input_sample_sizes = [1, 1, 4, 4]\n\n    def _create_input_info():\n        return [{\"sample_size\": size} for size in input_sample_sizes]\n\n    config = NNCFConfig()\n    config.update({\n        \"model\": \"empty_config\",\n        \"model_size\": model_size,\n        \"input_info\": input_info if input_info is not None else _create_input_info()\n    })\n    return config\n```\n\nThis function will create and return an `NNCFConfig` instance with the specified configuration. Note that `NNCFConfig` is assumed to be a dictionary-like class; you may need to replace the placeholder with the actual class definition or import statement.",
    "prompt": "Generate a Python function called get_empty_config that takes in three optional parameters: model_size (default value of 4), input_sample_sizes (a list or tuple of integers, default value of None), and input_info (a dictionary, default value of None). The function returns an instance of NNCFConfig.\n\nIf input_sample_sizes is None, it is set to [1, 1, 4, 4]. The function also contains a nested function _create_input_info that creates a list of dictionaries with the key \"sample_size\" based on the input_sample_sizes parameter.\n\nThe NNCFConfig instance is created and updated with the keys \"model\" set to \"empty_config\", \"model_size\" set to the model_size parameter, and \"input_info\" set to input_info if it is provided, otherwise it is set to the result of calling _create_input_info(). The final output is the configured NNCFConfig instance.",
    "function_name": "get_empty_config",
    "ground_truth": "tests/torch/helpers.py",
    "test": "tests/torch/quantization/test_algo_quantization.py",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": ""
}