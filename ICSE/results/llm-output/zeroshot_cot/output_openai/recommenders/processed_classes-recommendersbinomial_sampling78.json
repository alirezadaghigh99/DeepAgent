{
    "result": "To implement the `binomial_sampling` function for the `RBM` class, we need to perform binomial sampling using a rejection method. This involves comparing each probability in the input tensor `pr` with a random value sampled from a uniform distribution. If the random value is less than the probability, the output is `1`; otherwise, it's `0`.\n\nHere's how you can implement this function using TensorFlow:\n\n```python\nimport tensorflow as tf\n\nclass RBM:\n    def __init__(self, possible_ratings, visible_units, hidden_units=500, keep_prob=0.7, init_stdv=0.1, learning_rate=0.004, minibatch_size=100, training_epoch=20, display_epoch=10, sampling_protocol=[50, 70, 80, 90, 100], debug=False, with_metrics=False, seed=42):\n        # Initialize the random seed for reproducibility\n        tf.random.set_seed(seed)\n        # Other initialization code can go here\n\n    def binomial_sampling(self, pr):\n        # Generate a tensor of random values from a uniform distribution [0, 1)\n        random_values = tf.random.uniform(shape=tf.shape(pr), minval=0.0, maxval=1.0, dtype=tf.float32)\n        \n        # Perform the binomial sampling using the rejection method\n        sampled_values = tf.cast(random_values < pr, dtype=tf.float32)\n        \n        return sampled_values\n\n# Example usage:\n# rbm = RBM(possible_ratings=5, visible_units=100)\n# pr = tf.constant([[0.2, 0.8], [0.5, 0.5]], dtype=tf.float32)\n# sampled = rbm.binomial_sampling(pr)\n# print(sampled)\n```\n\n### Explanation:\n\n1. **Random Values Generation**: We use `tf.random.uniform` to generate a tensor of random values with the same shape as `pr`. These values are drawn from a uniform distribution between 0 and 1.\n\n2. **Comparison for Sampling**: We compare each element of `pr` with the corresponding random value. If the random value is less than the probability, the result is `1`; otherwise, it's `0`.\n\n3. **Casting to Float**: The result of the comparison is a boolean tensor, which we cast to `float32` to match the expected output type.\n\nThis function will return a tensor of the same shape as `pr`, with each element being either `1` or `0`, representing the sampled activation of the hidden units.",
    "prompt": "Generate a Python function `binomial_sampling` for the class `RBM` that performs binomial sampling of hidden unit activations using a rejection method. The function should take as input a tensor `pr`, which represents the conditional probabilities of the hidden units being active, and compare each probability with a random value sampled from a uniform distribution The input is `pr` (tf.Tensor, float32), and the output is a tensor of the same shape with values of `1` or `0`.\n```python\nclass RBM:\n    def __init__(self, possible_ratings, visible_units, hidden_units=500, keep_prob=0.7, init_stdv=0.1, learning_rate=0.004, minibatch_size=100, training_epoch=20, display_epoch=10, sampling_protocol=[50, 70, 80, 90, 100], debug=False, with_metrics=False, seed=42):\n        pass\n\n    def binomial_sampling(self, pr):\n        # Implement the function as described in the prompt\n```",
    "function_name": "binomial_sampling",
    "ground_truth": "recommenders/models/rbm/rbm.py",
    "test": "tests/unit/recommenders/models/test_rbm.py",
    "class": "RBM",
    "stage": "",
    "task": "Recommendation",
    "data": "pre-post process"
}