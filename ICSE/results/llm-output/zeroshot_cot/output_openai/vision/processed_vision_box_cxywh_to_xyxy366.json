{
    "result": "To create a Python function that converts bounding boxes from the (cx, cy, w, h) format to the (x1, y1, x2, y2) format, we can follow these steps:\n\n1. **Understand the Conversion**: \n   - Given a bounding box in the format (cx, cy, w, h):\n     - \\( cx \\) and \\( cy \\) are the coordinates of the center of the box.\n     - \\( w \\) is the width of the box.\n     - \\( h \\) is the height of the box.\n   - We need to convert this to (x1, y1, x2, y2):\n     - \\( x1 = cx - \\frac{w}{2} \\)\n     - \\( y1 = cy - \\frac{h}{2} \\)\n     - \\( x2 = cx + \\frac{w}{2} \\)\n     - \\( y2 = cy + \\frac{h}{2} \\)\n\n2. **Implement the Function**:\n   - We'll use PyTorch to handle the tensor operations.\n   - The function will take a tensor of bounding boxes in (cx, cy, w, h) format and return a tensor in (x1, y1, x2, y2) format.\n\nHere's the implementation:\n\n```python\nimport torch\n\ndef _box_cxcywh_to_xyxy(boxes):\n    \"\"\"\n    Convert bounding boxes from (cx, cy, w, h) format to (x1, y1, x2, y2) format.\n\n    Args:\n        boxes (torch.Tensor): A tensor of shape (N, 4) where N is the number of boxes,\n                              and each box is represented as (cx, cy, w, h).\n\n    Returns:\n        torch.Tensor: A tensor of shape (N, 4) where each box is represented as (x1, y1, x2, y2).\n    \"\"\"\n    # Ensure the input is a tensor\n    if not isinstance(boxes, torch.Tensor):\n        raise TypeError(\"Input boxes should be a torch.Tensor\")\n\n    # Calculate x1, y1, x2, y2\n    x1 = boxes[:, 0] - boxes[:, 2] / 2\n    y1 = boxes[:, 1] - boxes[:, 3] / 2\n    x2 = boxes[:, 0] + boxes[:, 2] / 2\n    y2 = boxes[:, 1] + boxes[:, 3] / 2\n\n    # Stack the results into a single tensor\n    return torch.stack((x1, y1, x2, y2), dim=1)\n\n# Example usage:\n# boxes_cxcywh = torch.tensor([[50, 50, 20, 20], [30, 30, 10, 10]])\n# boxes_xyxy = _box_cxcywh_to_xyxy(boxes_cxcywh)\n# print(boxes_xyxy)\n```\n\n### Explanation:\n- **Input**: The function takes a tensor `boxes` of shape (N, 4), where N is the number of bounding boxes.\n- **Output**: It returns a tensor of the same shape (N, 4) with the converted coordinates.\n- **Operations**: We calculate the top-left and bottom-right corners using simple arithmetic operations and stack the results to form the output tensor.",
    "prompt": "Write a Python function _box_cxcywh_to_xyxy that converts bounding boxes from the (cx, cy, w, h) format, where (cx, cy) represents the center and (w, h) represents the width and height, to the (x1, y1, x2, y2) format, where (x1, y1) and (x2, y2) represent the top-left and bottom-right corners, respectively. The function should return a tensor with the converted bounding boxes.",
    "function_name": "_box_cxcywh_to_xyxy",
    "ground_truth": "torchvision/ops/_box_convert.py",
    "test": "test/test_ops.py::TestBoxConvert",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}