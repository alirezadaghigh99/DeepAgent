{
    "result": "To create the `_compute_resized_output_size` function, we need to handle several scenarios based on the input parameters. Let's break down the steps required to implement this function:\n\n1. **Input Validation**: We need to validate the inputs to ensure they are in the expected format and raise appropriate errors if they are not.\n\n2. **Handling `size` Parameter**:\n   - If `size` is `None`, we need to check if `allow_size_none` is `True`. If not, raise a `ValueError`.\n   - If `size` is a single integer, it represents the desired size of the smaller edge.\n   - If `size` is a list or tuple of two integers, it represents the desired height and width.\n\n3. **Handling `max_size` Parameter**:\n   - If `max_size` is provided, ensure it is an integer and is larger than the requested size.\n\n4. **Calculate New Dimensions**:\n   - Based on the `size` and `max_size`, calculate the new dimensions while maintaining the aspect ratio.\n\n5. **Return the New Size**: Return the calculated dimensions as a list `[new_height, new_width]`.\n\nLet's start implementing the function step by step.\n\n### Step 1: Input Validation and Initial Setup\n\n```python\ndef _compute_resized_output_size(image_size, size=None, max_size=None, allow_size_none=False):\n    if not isinstance(image_size, (list, tuple)) or len(image_size) != 2:\n        raise ValueError(\"image_size must be a list or tuple of two integers.\")\n    \n    original_height, original_width = image_size\n    \n    if size is None:\n        if not allow_size_none:\n            raise ValueError(\"size cannot be None unless allow_size_none is True.\")\n    elif isinstance(size, int):\n        size = [size]\n    elif isinstance(size, (list, tuple)) and len(size) == 2:\n        pass\n    else:\n        raise ValueError(\"size must be an int, a list/tuple of two ints, or None.\")\n    \n    if max_size is not None and not isinstance(max_size, int):\n        raise ValueError(\"max_size must be an integer.\")\n```\n\n### Step 2: Calculate New Dimensions\n\n```python\n    if size is None:\n        # If size is None and allowed, return the original size\n        return [original_height, original_width]\n    \n    if len(size) == 1:\n        # Resize based on the smaller edge\n        scale = size[0] / min(original_height, original_width)\n        new_height = int(original_height * scale)\n        new_width = int(original_width * scale)\n    else:\n        # Resize to the specified dimensions\n        new_height, new_width = size\n    \n    # Ensure the new dimensions do not exceed max_size\n    if max_size is not None:\n        if max(new_height, new_width) > max_size:\n            scale = max_size / max(new_height, new_width)\n            new_height = int(new_height * scale)\n            new_width = int(new_width * scale)\n    \n    return [new_height, new_width]\n```\n\n### Step 3: Finalize the Function\n\nHere is the complete function:\n\n```python\ndef _compute_resized_output_size(image_size, size=None, max_size=None, allow_size_none=False):\n    if not isinstance(image_size, (list, tuple)) or len(image_size) != 2:\n        raise ValueError(\"image_size must be a list or tuple of two integers.\")\n    \n    original_height, original_width = image_size\n    \n    if size is None:\n        if not allow_size_none:\n            raise ValueError(\"size cannot be None unless allow_size_none is True.\")\n    elif isinstance(size, int):\n        size = [size]\n    elif isinstance(size, (list, tuple)) and len(size) == 2:\n        pass\n    else:\n        raise ValueError(\"size must be an int, a list/tuple of two ints, or None.\")\n    \n    if max_size is not None and not isinstance(max_size, int):\n        raise ValueError(\"max_size must be an integer.\")\n    \n    if size is None:\n        # If size is None and allowed, return the original size\n        return [original_height, original_width]\n    \n    if len(size) == 1:\n        # Resize based on the smaller edge\n        scale = size[0] / min(original_height, original_width)\n        new_height = int(original_height * scale)\n        new_width = int(original_width * scale)\n    else:\n        # Resize to the specified dimensions\n        new_height, new_width = size\n    \n    # Ensure the new dimensions do not exceed max_size\n    if max_size is not None:\n        if max(new_height, new_width) > max_size:\n            scale = max_size / max(new_height, new_width)\n            new_height = int(new_height * scale)\n            new_width = int(new_width * scale)\n    \n    return [new_height, new_width]\n```\n\nThis function should now handle the different cases for resizing an image, taking into account the `size`, `max_size`, and `allow_size_none` parameters.",
    "prompt": "Write a Python function `_compute_resized_output_size` that calculates the new size of an image after resizing, based on the original `image_size` (height and width). The function accepts parameters: `size`, an optional list specifying the desired size of the smaller edge or both dimensions; `max_size`, an optional integer that limits the size of the longer edge; and `allow_size_none`, a boolean that permits `size` to be `None` (only used in version 2). The function should handle different cases where `size` is `None`, a single value, or a pair of values, and return a list with the new height and width. The function should include checks to raise a `ValueError` if `size` is `None` but `max_size` is not an integer, if `max_size` is smaller than the requested size, or if any other invalid configuration is encountered.",
    "function_name": "_compute_resized_output_size",
    "ground_truth": "torchvision/transforms/functional.py#L357",
    "test": "test/test_transforms.py::test_resize",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}