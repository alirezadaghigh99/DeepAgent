{
    "result": "To create the `make_hastie_10_2` function, we will follow these steps:\n\n1. Import the necessary library, `numpy`.\n2. Define the function `make_hastie_10_2` with parameters `n_samples` and `random_state`.\n3. Set the random seed for reproducibility using `numpy.random.seed`.\n4. Generate the input data `X` with shape `(n_samples, 10)` using standard normal distribution.\n5. Calculate the target array `y` based on the condition provided.\n6. Return the arrays `X` and `y`.\n\nHere's the complete code:\n\n```python\nimport numpy as np\n\ndef make_hastie_10_2(n_samples, random_state=None):\n    \"\"\"\n    Generate data for binary classification as used in Hastie et al. 2009, Example 10.2.\n\n    Parameters:\n    - n_samples: int, number of samples to generate.\n    - random_state: int, random seed for reproducibility.\n\n    Returns:\n    - X: np.ndarray, shape (n_samples, 10), input samples with standard independent Gaussian features.\n    - y: np.ndarray, shape (n_samples,), output values where y[i] is 1 if sum of X[i] squared > 9.34, else -1.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n    \n    # Generate input samples with standard normal distribution\n    X = np.random.randn(n_samples, 10)\n    \n    # Calculate the target values based on the condition\n    y = np.where(np.sum(X**2, axis=1) > 9.34, 1, -1)\n    \n    return X, y\n\n# Example usage\nX, y = make_hastie_10_2(n_samples=5, random_state=42)\nprint(\"X shape:\", X.shape)\nprint(\"y shape:\", y.shape)\nprint(\"First few X values:\\n\", X[:5])\nprint(\"First few y values:\", y[:5])\n```\n\n### Explanation:\n\n- **Importing numpy**: We use `numpy` for generating random numbers and performing array operations.\n- **Function Definition**: The function `make_hastie_10_2` takes `n_samples` and `random_state` as arguments.\n- **Random State**: If `random_state` is provided, it sets the seed for `numpy`'s random number generator to ensure reproducibility.\n- **Generating X**: We generate `n_samples` of 10-dimensional data points from a standard normal distribution using `np.random.randn`.\n- **Calculating y**: We compute the sum of squares of each sample and compare it to 9.34. If the sum is greater, `y[i]` is set to 1; otherwise, it is set to -1.\n- **Return**: The function returns the generated data `X` and the target labels `y`.\n\nThe example usage demonstrates how to call the function and print the shapes and initial values of the generated arrays.",
    "prompt": "Generate a Python function called make_hastie_10_2 that generates data for binary classification as used in Hastie et al. 2009, Example 10.2. The function takes in the number of samples (n_samples) and a random state for reproducibility. It returns two arrays: X, which contains input samples of shape (n_samples, 10) with standard independent Gaussian features, and y, which contains output values of shape (n_samples,) defined by a specific condition. The target y[i] is set to 1 if the sum of X[i] squared is greater than 9.34, otherwise -1. The function utilizes numpy for array operations and includes references to related dataset approaches and literature. An example usage is provided to demonstrate the function's output shapes and initial values.",
    "function_name": "make_hastie_10_2",
    "ground_truth": "sklearn/datasets/_samples_generator.py",
    "test": "sklearn/datasets/tests/test_samples_generator.py",
    "class": "",
    "stage": "Model Construction",
    "task": "Classification",
    "data": "Table"
}