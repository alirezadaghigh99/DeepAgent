{
    "result": "To create the `pairwise_distances_chunked` function, we will break down the process into several steps. We'll start by setting up the function signature and then implement the logic for computing pairwise distances in chunks. We'll also handle the optional `reduce_func` for processing each chunk. Finally, we'll provide examples of how to use the function.\n\n### Step 1: Define the Function Signature\n\nFirst, let's define the function signature with the necessary parameters:\n\n```python\nimport numpy as np\nfrom sklearn.metrics import pairwise_distances\nfrom sklearn.utils import gen_batches\n\ndef pairwise_distances_chunked(X, Y=None, reduce_func=None, metric='euclidean', n_jobs=1, working_memory=None, **kwds):\n    \"\"\"\n    Generate a distance matrix chunk by chunk with optional reduction.\n\n    Parameters:\n    - X: array-like of shape (n_samples_X, n_features)\n    - Y: array-like of shape (n_samples_Y, n_features), optional\n    - reduce_func: callable, optional\n    - metric: str or callable, default='euclidean'\n    - n_jobs: int, default=1\n    - working_memory: int, optional\n    - **kwds: additional keyword arguments for the distance metric\n\n    Yields:\n    - A contiguous slice of the distance matrix, optionally processed by reduce_func.\n    \"\"\"\n    # Implementation will go here\n```\n\n### Step 2: Calculate Pairwise Distances in Chunks\n\nWe'll use `sklearn.metrics.pairwise_distances` to compute the distances and `sklearn.utils.gen_batches` to generate batches based on the `working_memory` parameter.\n\n```python\n    if Y is None:\n        Y = X\n\n    n_samples_X = X.shape[0]\n    n_samples_Y = Y.shape[0]\n\n    # Estimate the size of a single distance matrix element\n    if metric == 'precomputed':\n        element_size = 8  # Assuming float64\n    else:\n        element_size = np.zeros((1,), dtype=np.float64).nbytes\n\n    # Calculate the number of elements that fit in the working memory\n    if working_memory is None:\n        working_memory = 1024  # Default to 1MB if not specified\n\n    max_elements = int(working_memory * (2**20) / element_size)\n    chunk_size = max(1, max_elements // n_samples_Y)\n\n    for chunk_start in range(0, n_samples_X, chunk_size):\n        chunk_end = min(chunk_start + chunk_size, n_samples_X)\n        X_chunk = X[chunk_start:chunk_end]\n\n        distances = pairwise_distances(X_chunk, Y, metric=metric, n_jobs=n_jobs, **kwds)\n\n        if reduce_func is not None:\n            yield reduce_func(distances)\n        else:\n            yield distances\n```\n\n### Step 3: Provide Usage Examples\n\nNow, let's provide examples of how to use this function both with and without a `reduce_func`.\n\n#### Example 1: Without `reduce_func`\n\n```python\n# Example usage without reduce_func\nX = np.random.random((100, 5))\nY = np.random.random((100, 5))\n\nfor chunk in pairwise_distances_chunked(X, Y, working_memory=0.5):\n    print(\"Chunk shape:\", chunk.shape)\n```\n\n#### Example 2: With `reduce_func`\n\n```python\n# Example usage with reduce_func to find neighbors within a radius\ndef neighbors_within_radius(distances, radius=0.5):\n    return [np.where(row < radius)[0] for row in distances]\n\nfor neighbors in pairwise_distances_chunked(X, Y, reduce_func=lambda d: neighbors_within_radius(d, radius=0.5), working_memory=0.5):\n    print(\"Neighbors:\", neighbors)\n```\n\nThis code provides a flexible way to compute pairwise distances in chunks, with the option to process each chunk using a custom reduction function. Adjust the `working_memory` parameter to control the size of each chunk based on your available memory.",
    "prompt": "Generate a Python function called pairwise_distances_chunked that generates a distance matrix chunk by chunk with optional reduction. The function takes in parameters X, Y, reduce_func, metric, n_jobs, working_memory, and additional keyword parameters. It calculates pairwise distances in working_memory-sized chunks and applies reduce_func on each chunk if provided. The function yields a contiguous slice of the distance matrix, optionally processed by reduce_func. The function also includes examples of usage without reduce_func and with reduce_func for retrieving neighbors and average distance within a radius.",
    "function_name": "pairwise_distances_chunked",
    "ground_truth": "sklearn/metrics/pairwise.py",
    "test": "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Table"
}