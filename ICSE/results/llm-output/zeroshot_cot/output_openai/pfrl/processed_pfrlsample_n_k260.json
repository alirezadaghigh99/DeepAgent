{
    "result": "To create the `sample_n_k` function, we will break down the task into several steps. Here's how we can approach it:\n\n1. **Input Validation**: We need to ensure that `k` is not larger than `n` and that `k` is not negative. If either condition is violated, we should raise a `ValueError`.\n\n2. **Handle Special Case**: If `k` is 0, we should return an empty NumPy array.\n\n3. **Sampling Strategy**:\n   - If `3 * k >= n`, use NumPy's `random.choice` to sample `k` elements without replacement.\n   - Otherwise, sample `2 * k` elements and ensure they are distinct, then return the first `k` elements.\n\n4. **Return the Result**: The function should return a NumPy array containing the sampled elements.\n\nLet's implement this step by step:\n\n### Step 1: Import Necessary Libraries\n\nFirst, we need to import NumPy since we'll be using it for array operations and random sampling.\n\n```python\nimport numpy as np\n```\n\n### Step 2: Define the Function and Handle Input Validation\n\nWe'll start by defining the function and adding input validation.\n\n```python\ndef sample_n_k(n, k):\n    if k > n or k < 0:\n        raise ValueError(\"k must be non-negative and less than or equal to n.\")\n```\n\n### Step 3: Handle the Special Case of k = 0\n\nIf `k` is 0, we should return an empty NumPy array.\n\n```python\n    if k == 0:\n        return np.array([], dtype=int)\n```\n\n### Step 4: Implement the Sampling Strategy\n\nNow, we implement the logic for sampling based on the condition `3 * k >= n`.\n\n```python\n    if 3 * k >= n:\n        # Use random.choice to sample k elements without replacement\n        return np.random.choice(n, k, replace=False)\n    else:\n        # Sample 2 * k elements and ensure they are distinct\n        sampled_elements = np.random.choice(n, 2 * k, replace=False)\n        return sampled_elements[:k]\n```\n\n### Step 5: Combine Everything\n\nNow, let's combine all the steps into the complete function.\n\n```python\nimport numpy as np\n\ndef sample_n_k(n, k):\n    if k > n or k < 0:\n        raise ValueError(\"k must be non-negative and less than or equal to n.\")\n    \n    if k == 0:\n        return np.array([], dtype=int)\n    \n    if 3 * k >= n:\n        return np.random.choice(n, k, replace=False)\n    else:\n        sampled_elements = np.random.choice(n, 2 * k, replace=False)\n        return sampled_elements[:k]\n```\n\nThis function should now correctly sample `k` distinct elements from the range `0` to `n` according to the specified conditions.",
    "prompt": "Generate a Python function called sample_n_k that samples k distinct elements uniformly from the range 0 to n. The inputs are two integers, n and k. The function will raise a ValueError if k is larger than n or is negative. If k is 0, the function will return an empty NumPy array. If 3 times k is greater than or equal to n, the function will use NumPy's random.choice function to sample k elements without replacement. Otherwise, the function will sample 2k elements and ensure that they are distinct before returning the first k elements. The output of the function is a NumPy array containing k distinct elements sampled from the range 0 to n.",
    "function_name": "sample_n_k",
    "ground_truth": "pfrl/utils/random.py",
    "test": "tests/utils_tests/test_random.py::TestSampleNK::test_fast",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Table"
}