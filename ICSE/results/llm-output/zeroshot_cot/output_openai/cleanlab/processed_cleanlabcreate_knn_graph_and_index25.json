{
    "result": "To create the `create_knn_graph_and_index` function, we will break down the task into several steps. We'll use libraries like `scikit-learn` for KNN computation and `scipy` for creating a sparse adjacency matrix. Here's how we can proceed:\n\n### Step 1: Import Necessary Libraries\n\nFirst, we need to import the necessary libraries.\n\n```python\nimport numpy as np\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.sparse import csr_matrix\n```\n\n### Step 2: Define the Function Signature\n\nNext, we define the function signature with the required parameters.\n\n```python\ndef create_knn_graph_and_index(features, n_neighbors=5, metric='euclidean', correct_duplicates=False, **kwargs):\n```\n\n### Step 3: Handle Exact Duplicates (Optional)\n\nIf `correct_duplicates` is `True`, we need to handle exact duplicates in the feature array. One way to do this is by adding a small amount of noise to duplicate entries.\n\n```python\n    if correct_duplicates:\n        features = features + np.random.normal(0, 1e-10, features.shape)\n```\n\n### Step 4: Fit the KNN Model\n\nUse `NearestNeighbors` from `scikit-learn` to fit the KNN model.\n\n```python\n    knn = NearestNeighbors(n_neighbors=n_neighbors, metric=metric, **kwargs)\n    knn.fit(features)\n```\n\n### Step 5: Compute the KNN Graph\n\nUse the fitted KNN model to find the nearest neighbors and their distances.\n\n```python\n    distances, indices = knn.kneighbors(features)\n```\n\n### Step 6: Create the Sparse Adjacency Matrix\n\nCreate a sparse adjacency matrix using the distances and indices.\n\n```python\n    n_samples = features.shape[0]\n    row_indices = np.repeat(np.arange(n_samples), n_neighbors)\n    col_indices = indices.flatten()\n    data = distances.flatten()\n\n    adjacency_matrix = csr_matrix((data, (row_indices, col_indices)), shape=(n_samples, n_samples))\n```\n\n### Step 7: Return the Results\n\nReturn the adjacency matrix and the fitted KNN model.\n\n```python\n    return adjacency_matrix, knn\n```\n\n### Step 8: Usage Examples\n\nFinally, provide examples demonstrating how to use the function with numpy arrays.\n\n```python\n# Example usage\nif __name__ == \"__main__\":\n    # Create a random feature array\n    np.random.seed(0)\n    features = np.random.rand(10, 3)\n\n    # Create the KNN graph and index\n    adjacency_matrix, knn = create_knn_graph_and_index(features, n_neighbors=3, metric='euclidean')\n\n    # Print the adjacency matrix\n    print(\"Adjacency Matrix:\")\n    print(adjacency_matrix.toarray())\n\n    # Print the KNN model\n    print(\"\\nKNN Model:\")\n    print(knn)\n```\n\n### Complete Function\n\nHere is the complete function with all the steps combined:\n\n```python\nimport numpy as np\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.sparse import csr_matrix\n\ndef create_knn_graph_and_index(features, n_neighbors=5, metric='euclidean', correct_duplicates=False, **kwargs):\n    if correct_duplicates:\n        features = features + np.random.normal(0, 1e-10, features.shape)\n    \n    knn = NearestNeighbors(n_neighbors=n_neighbors, metric=metric, **kwargs)\n    knn.fit(features)\n    \n    distances, indices = knn.kneighbors(features)\n    \n    n_samples = features.shape[0]\n    row_indices = np.repeat(np.arange(n_samples), n_neighbors)\n    col_indices = indices.flatten()\n    data = distances.flatten()\n    \n    adjacency_matrix = csr_matrix((data, (row_indices, col_indices)), shape=(n_samples, n_samples))\n    \n    return adjacency_matrix, knn\n\n# Example usage\nif __name__ == \"__main__\":\n    # Create a random feature array\n    np.random.seed(0)\n    features = np.random.rand(10, 3)\n\n    # Create the KNN graph and index\n    adjacency_matrix, knn = create_knn_graph_and_index(features, n_neighbors=3, metric='euclidean')\n\n    # Print the adjacency matrix\n    print(\"Adjacency Matrix:\")\n    print(adjacency_matrix.toarray())\n\n    # Print the KNN model\n    print(\"\\nKNN Model:\")\n    print(knn)\n```\n\nThis function will compute the KNN graph and return both the adjacency matrix and the fitted KNN model. The example usage demonstrates how to use the function with a random feature array.",
    "prompt": "Generate a Python function called create_knn_graph_and_index that calculates the KNN graph from input features. The function takes in a feature array, optional parameters for the number of nearest neighbors and distance metric, a boolean flag for correcting exact duplicates, and additional keyword arguments for the search index constructor. \n\nThe function returns a tuple containing a sparse, weighted adjacency matrix representing the KNN graph of the feature array and a k-nearest neighbors search object fitted to the input feature array. The function also includes examples demonstrating its usage with numpy arrays.",
    "function_name": "create_knn_graph_and_index",
    "ground_truth": "cleanlab/internal/neighbor/knn_graph.py",
    "test": "tests/internal/neighbor/test_neighbor.py",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": ""
}