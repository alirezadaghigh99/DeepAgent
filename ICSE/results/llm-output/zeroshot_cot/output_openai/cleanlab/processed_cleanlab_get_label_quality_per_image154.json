{
    "result": "To create the `_get_label_quality_per_image` function, we will follow these steps:\n\n1. **Import Necessary Libraries**: We'll need NumPy for handling the array operations.\n2. **Define the Function**: We'll define the function with the specified parameters.\n3. **Input Validation**: We'll check for invalid inputs and raise exceptions with descriptive error messages.\n4. **Implement the Softmin Method**: We'll implement the softmin calculation using the specified temperature.\n5. **Return the Result**: Finally, we'll return the computed label quality score.\n\nLet's implement this step by step:\n\n```python\nimport numpy as np\n\ndef _get_label_quality_per_image(pixel_scores, method='softmin', temperature=0.1):\n    # Step 3: Input Validation\n    if pixel_scores is None or len(pixel_scores) == 0:\n        raise Exception(\"pixel_scores cannot be None or empty.\")\n    \n    if temperature is None or temperature == 0:\n        raise Exception(\"temperature must be a non-zero value.\")\n    \n    if method != 'softmin':\n        raise Exception(\"Unsupported method. Currently, only 'softmin' is supported.\")\n    \n    # Step 4: Implement the Softmin Method\n    # Calculate the softmin of the pixel scores\n    # Softmin is computed as exp(-x / temperature) / sum(exp(-x / temperature))\n    exp_scores = np.exp(-pixel_scores / temperature)\n    softmin_scores = exp_scores / np.sum(exp_scores)\n    \n    # Calculate the label quality score as the weighted sum of pixel scores\n    label_quality_score = np.sum(softmin_scores * pixel_scores)\n    \n    # Step 5: Return the Result\n    return label_quality_score\n\n# Example usage:\n# pixel_scores = np.array([0.2, 0.5, 0.8, 0.1])\n# quality_score = _get_label_quality_per_image(pixel_scores)\n# print(\"Label Quality Score:\", quality_score)\n```\n\n### Explanation:\n\n- **Input Validation**: We check if `pixel_scores` is `None` or empty, and if `temperature` is `None` or zero. We also ensure that the method is 'softmin'.\n- **Softmin Calculation**: We compute the softmin by taking the exponential of the negative pixel scores divided by the temperature, normalizing by the sum of these exponentials.\n- **Label Quality Score**: The score is calculated as the weighted sum of the pixel scores using the softmin weights.\n- **Return**: The function returns the computed label quality score.\n\nThis function will compute the label quality score for an image based on the provided per-pixel scores using the softmin method.",
    "prompt": "Create a Python function _get_label_quality_per_image that computes the label quality score for an image based on per-pixel label quality scores. The function uses the \"softmin\" method by default, which emphasizes the lowest-quality pixel labels more heavily in the calculation.\n\nParameters:\npixel_scores: A NumPy array containing per-pixel label quality scores, flattened into a 1D array of shape (N,), where N is the number of pixels in the image.\nmethod: A string specifying the method used to calculate the label quality score. Currently, only the \"softmin\" method is supported. This parameter is optional and defaults to \"softmin\".\ntemperature: A float that determines the temperature of the softmin function. This parameter controls how much weight is given to lower-quality pixel labels. Lower values emphasize the lowest scores more, while higher values average the scores more evenly. The default value is 0.1.\nReturns:\nA float representing the label quality score for the image, ranging from 0 (lowest quality) to 1 (highest quality).If pixel_scores is None, empty, or if temperature is 0 or None, the function raises an Exception with a descriptive error message.\nIf an unsupported method is specified, an exception is raised with a message indicating the correct method to use.",
    "function_name": "_get_label_quality_per_image",
    "ground_truth": "cleanlab/segmentation/rank.py#L204",
    "test": "tests/test_segmentation.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "segmentation",
    "data": "Image"
}