{
    "result": "The function `cross_product_matrix` is designed to construct a skew-symmetric matrix for each vector in the input tensor `x`. This matrix is useful in various mathematical and physical applications, such as computing cross products in three-dimensional space. Let's walk through the implementation step-by-step:\n\n### Implementation Steps\n\n1. **Input Validation**: \n   - The function first checks if the last dimension of the input tensor `x` is 3. This is crucial because a cross-product matrix can only be constructed for 3-dimensional vectors. If the condition is not met, an `AssertionError` is raised with a descriptive message.\n\n2. **Extract Components**:\n   - The components of each vector, \\(a\\), \\(b\\), and \\(c\\), are extracted using tensor slicing. This is done by accessing the respective indices of the last dimension of the tensor.\n\n3. **Construct the Skew-Symmetric Matrix**:\n   - A zero tensor of the same shape as \\(a\\) is created to fill the diagonal of the skew-symmetric matrix.\n   - The skew-symmetric matrix is constructed using `torch.stack`. Each row of the matrix is created by stacking the appropriate components and the zero tensor. The rows are then stacked together to form the full matrix.\n\n4. **Return the Result**:\n   - The function returns the tensor containing the skew-symmetric matrices for each vector in the input tensor. The shape of the output tensor is `(*, 3, 3)`, where `*` represents any leading dimensions in the input tensor.\n\nHere's the complete implementation:\n\n```python\nimport torch\n\ndef cross_product_matrix(x: torch.Tensor) -> torch.Tensor:\n    # Step 1: Validate input\n    if not x.shape[-1] == 3:\n        raise AssertionError(f\"Input tensor must have last dimension of size 3, but got {x.shape[-1]}\")\n    \n    # Step 2: Extract components\n    a = x[..., 0]\n    b = x[..., 1]\n    c = x[..., 2]\n    \n    # Step 3: Construct the skew-symmetric matrix\n    zero = torch.zeros_like(a)\n    cross_prod_matrix = torch.stack([\n        torch.stack([zero, -c, b], dim=-1),\n        torch.stack([c, zero, -a], dim=-1),\n        torch.stack([-b, a, zero], dim=-1)\n    ], dim=-2)\n    \n    # Step 4: Return the result\n    return cross_prod_matrix\n```\n\n### Explanation:\n\n- **Input Validation**: Ensures that the function only processes valid 3-dimensional vectors.\n  \n- **Extract Components**: Efficiently extracts the necessary components for constructing the matrix.\n\n- **Construct the Matrix**: Uses `torch.stack` to build the skew-symmetric matrix, ensuring that the matrix is constructed correctly for each vector.\n\n- **Return the Result**: Provides the final tensor of skew-symmetric matrices, maintaining the original batch dimensions.\n\nThis function is efficient and leverages PyTorch's tensor operations to handle potentially large batches of vectors, making it suitable for use in machine learning and scientific computing applications.",
    "prompt": "Create a Python function `cross_product_matrix` that:\n\n- Constructs the cross-product matrix (a skew-symmetric matrix) for a given vector.\n- Accepts a single parameter:\n  - `x`: A tensor of shape `(*, 3)` representing the input vector(s).\n- Returns a tensor containing the constructed cross-product matrix with shape `(*, 3, 3)`.\n\nErrors:\n- Raises an `AssertionError` if the last dimension of the input tensor is not equal to 3.\ndef cross_product_matrix(x: torch.Tensor) -> torch.Tensor:\n      if not x.shape[-1] == 3:\n        raise AssertionError(x.shape)\n## complete",
    "function_name": "cross_product_matrix",
    "ground_truth": "kornia/geometry/epipolar/numeric.py#L8",
    "test": "tests/geometry/epipolar/test_numeric.py::TestSkewSymmetric",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Image"
}