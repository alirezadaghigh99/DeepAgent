{
    "result": "Here's the `draw_point2d` function implemented in Python, following the steps you outlined. This function modifies an image tensor by setting specified `[x, y]` coordinates to a given color. It handles both grayscale and multi-channel images, ensuring that the input parameters are valid before making any changes.\n\n```python\nimport numpy as np\n\ndef draw_point2d(image, coordinates, color):\n    \"\"\"\n    Sets specified [x, y] coordinates in an image tensor to a given color.\n\n    Parameters:\n    - image: numpy array of shape (H, W) for grayscale or (C, H, W) for multi-channel.\n    - coordinates: tuple (x, y) specifying the point to color.\n    - color: single value for grayscale or array-like for multi-channel matching the image's channels.\n\n    Returns:\n    - Modified image with the points colored.\n    \"\"\"\n    # Validate image dimensions\n    if image.ndim not in [2, 3]:\n        raise ValueError(\"Image must be either 2D (H, W) or 3D (C, H, W).\")\n\n    # Validate color dimensions\n    if image.ndim == 2 and not np.isscalar(color):\n        raise ValueError(\"Color must be a single value for a grayscale image.\")\n    if image.ndim == 3 and (not hasattr(color, \"__len__\") or len(color) != image.shape[0]):\n        raise ValueError(\"Color must match the number of channels in the image.\")\n\n    # Validate coordinates\n    x, y = coordinates\n    if not (0 <= x < image.shape[-1] and 0 <= y < image.shape[-2]):\n        raise ValueError(\"Coordinates are out of image bounds.\")\n\n    # Modify the image\n    if image.ndim == 2:\n        image[y, x] = color\n    else:\n        image[:, y, x] = color\n\n    return image\n```\n\n### Explanation:\n\n1. **Input Validation**:\n   - The function first checks if the image is either a 2D grayscale image `(H, W)` or a 3D multi-channel image `(C, H, W)`.\n   - It then checks if the color is appropriate for the image type: a single scalar for grayscale or an array-like object with the same number of channels as the image for multi-channel images.\n\n2. **Coordinate Validation**:\n   - The function checks if the provided `[x, y]` coordinates are within the bounds of the image dimensions. If not, it raises a `ValueError`.\n\n3. **Modify the Image**:\n   - For a grayscale image, it sets the pixel at `[y, x]` to the specified color value.\n   - For a multi-channel image, it sets the pixel at `[y, x]` across all channels to the specified color values.\n\n4. **Return the Modified Image**:\n   - The function returns the modified image with the specified points colored.\n\nThis implementation ensures that the function is robust and handles different image types and color specifications correctly.",
    "prompt": "Write a Python function `draw_point2d` that sets specified `[x, y]` coordinates in an image tensor to a given color. The image can be either grayscale `(H, W)` or multi-channel `(C, H, W)`, and the color tensor must match the image's channels. The function should return the modified image with the points colored.",
    "function_name": "draw_point2d",
    "ground_truth": "kornia/utils/draw.py",
    "test": "tests/utils/test_draw.py::TestDrawPoint",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Detection",
    "data": "Image"
}