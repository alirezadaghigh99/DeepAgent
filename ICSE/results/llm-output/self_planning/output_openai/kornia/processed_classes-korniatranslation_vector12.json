{
    "result": "The `translation_vector` function for the `PinholeCamera` class is designed to extract the translation component from the extrinsics matrix of a batch of cameras. Here's a detailed breakdown of the implementation:\n\n### Implementation Steps:\n\n1. **Understand the Extrinsics Matrix**: \n   - The extrinsics matrix is a 4x4 matrix that combines both rotation and translation.\n   - The top-left 3x3 part of the matrix represents the rotation.\n   - The top-right 3x1 part of the matrix represents the translation vector.\n\n2. **Extract the Translation Vector**:\n   - For each camera in the batch, extract the top-right 3x1 part of the extrinsics matrix.\n   - This is done by slicing the tensor to get the required part.\n\n3. **Return the Translation Vector**:\n   - The function returns a tensor of shape `(B, 3, 1)`, where `B` is the batch size.\n\n### Code Implementation:\n\n```python\nimport torch\nfrom torch import Tensor\n\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n\n    def translation_vector(self) -> Tensor:\n        # Extract the translation vector from the extrinsics matrix\n        # The extrinsics matrix is assumed to be of shape (B, 4, 4)\n        # We need the top-right 3x1 part of the matrix\n        translation = self._extrinsics[:, :3, 3:4]\n        return translation\n\n# Example usage:\n# Assuming extrinsics is a tensor of shape (B, 4, 4)\n# camera = PinholeCamera(intrinsics, extrinsics, height, width)\n# translation = camera.translation_vector()\n```\n\n### Explanation:\n\n- **Slicing the Tensor**: \n  - `self._extrinsics[:, :3, 3:4]` is used to slice the extrinsics tensor.\n  - `:` selects all elements along the batch dimension.\n  - `:3` selects the first three rows, which correspond to the x, y, and z components of the translation vector.\n  - `3:4` selects the fourth column, which contains the translation vector in homogeneous coordinates.\n\n- **Output Shape**:\n  - The output is a tensor of shape `(B, 3, 1)`, where:\n    - `B` is the batch size.\n    - `3` represents the three spatial dimensions (x, y, z).\n    - `1` is the single column for the translation vector.\n\nThis function efficiently extracts the translation vectors for a batch of cameras, making it suitable for applications in computer vision and robotics where camera extrinsics are used.",
    "prompt": "Generate the `translation_vector` function for the following class to return the translation vector from the extrinsics matrix. The function should take `self` as input and return a tensor with shape `(B, 3, 1)`.\n\n```python\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n```",
    "function_name": "translation_vector",
    "ground_truth": "kornia/geometry/camera/pinhole.py",
    "test": "tests/geometry/camera/test_pinhole.py",
    "class": "PinholeCamera",
    "stage": "Image",
    "task": "",
    "data": "Inference"
}