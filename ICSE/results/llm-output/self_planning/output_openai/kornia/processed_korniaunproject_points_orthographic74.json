{
    "result": "The task is to create a Python function called `unproject_points_orthographic` that unprojects 2D points from the canonical z=1 plane into the camera frame by adding a z-axis extension. Here's a step-by-step explanation and implementation of the function:\n\n### Steps to Implement the Function:\n\n1. **Understand the Input and Output**:\n   - **Input**:\n     - `points_in_camera`: A tensor with shape `(..., 2)`, representing 2D points in the camera frame.\n     - `extension`: A tensor with shape `(..., 1)`, representing the z-axis extension for each point.\n   - **Output**:\n     - A tensor with shape `(..., 3)`, representing the unprojected 3D points.\n\n2. **Combine the Inputs**:\n   - The task is to combine the 2D points with their corresponding z-axis extension to form 3D points.\n   - This can be achieved by concatenating the `points_in_camera` tensor with the `extension` tensor along the last dimension.\n\n3. **Implement the Function**:\n   - Use the `torch.cat` function to concatenate the two tensors along the last dimension.\n\n### Implementation:\n\n```python\nimport torch\n\ndef unproject_points_orthographic(points_in_camera, extension):\n    \"\"\"\n    Unprojects points from the canonical z=1 plane into the camera frame.\n\n    Parameters:\n    - points_in_camera: Tensor of shape (..., 2) representing the points to unproject.\n    - extension: Tensor of shape (..., 1) representing the extension of the points.\n\n    Returns:\n    - Tensor of shape (..., 3) representing the unprojected points.\n    \"\"\"\n    # Concatenate the points_in_camera and extension along the last dimension\n    unprojected_points = torch.cat((points_in_camera, extension), dim=-1)\n    return unprojected_points\n\n# Example usage:\npoints = torch.tensor([1., 2.])\nextension = torch.tensor([3.])\nresult = unproject_points_orthographic(points, extension)\nprint(result)  # Output: tensor([1., 2., 3.])\n```\n\n### Explanation:\n- **Concatenation**: The `torch.cat` function is used to concatenate the `points_in_camera` and `extension` tensors along the last dimension (`dim=-1`). This effectively combines the 2D points with their corresponding z-axis extension to form 3D points.\n- **Flexibility**: The function is designed to handle inputs with arbitrary batch dimensions, as indicated by the ellipsis (`...`) in the shape description. This means it can process multiple points in a batch simultaneously.\n\nThis implementation is efficient and leverages PyTorch's tensor operations to handle potentially large batches of data.",
    "prompt": "Create a Python function called unproject_points_orthographic that unprojects points from the canonical z=1 plane into the camera frame. The function takes in two parameters: points_in_camera, a Tensor representing the points to unproject with shape (..., 2), and extension, a Tensor representing the extension of the points to unproject with shape (..., 1). The function returns a Tensor representing the unprojected points with shape (..., 3). \n\nFor example:\npoints = torch.tensor([1., 2.])\nextension = torch.tensor([3.])\nunproject_points_orthographic(points, extension) should return tensor([1., 2., 3.])",
    "function_name": "unproject_points_orthographic",
    "ground_truth": "kornia/geometry/camera/projection_orthographic.py",
    "test": "tests/geometry/camera/test_projections.py::TestProjectionOrthographic",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Image"
}