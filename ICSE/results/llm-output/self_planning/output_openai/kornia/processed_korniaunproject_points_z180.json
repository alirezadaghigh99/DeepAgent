{
    "result": "The function `unproject_points_z1` is designed to transform 2D points from a canonical plane (z=1) into 3D space by appending a depth value to each point. Here's the complete implementation of the function, along with an example usage:\n\n```python\nimport torch\n\ndef unproject_points_z1(points_in_cam_canonical, extension=None):\n    \"\"\"\n    Unprojects points from the canonical z=1 plane into the camera frame.\n\n    Args:\n        points_in_cam_canonical (Tensor): A tensor of shape (..., 2) representing 2D points.\n        extension (Tensor, optional): A tensor of shape (..., 1) representing the depth of each point.\n\n    Returns:\n        Tensor: A tensor of shape (..., 3) representing the unprojected 3D points.\n    \"\"\"\n    # Ensure points_in_cam_canonical is a tensor with the last dimension of size 2\n    if points_in_cam_canonical.shape[-1] != 2:\n        raise ValueError(\"points_in_cam_canonical must have the last dimension of size 2.\")\n    \n    # If extension is not provided, assume a default depth of 1\n    if extension is None:\n        extension = torch.ones(points_in_cam_canonical.shape[:-1] + (1,))\n    \n    # Ensure extension is a tensor with the last dimension of size 1\n    if extension.shape[-1] != 1:\n        raise ValueError(\"extension must have the last dimension of size 1.\")\n    \n    # Concatenate the points with their corresponding depths\n    unprojected_points = torch.cat((points_in_cam_canonical, extension), dim=-1)\n    \n    return unprojected_points\n\n# Example usage:\npoints = torch.tensor([[0.5, 0.5], [1.0, 1.0]])\nextension = torch.tensor([[2.0], [3.0]])\nunprojected_points = unproject_points_z1(points, extension)\nprint(unprojected_points)\n```\n\n### Explanation:\n\n1. **Input Validation:**\n   - The function first checks if the `points_in_cam_canonical` tensor has a last dimension of size 2, which is necessary for representing 2D points.\n   - If the `extension` tensor is not provided, it defaults to a tensor of ones with the same batch dimensions as `points_in_cam_canonical`, but with a last dimension of size 1.\n\n2. **Concatenation:**\n   - The function concatenates the 2D points with their corresponding depth values from the `extension` tensor along the last dimension, resulting in 3D points.\n\n3. **Output:**\n   - The function returns a tensor of shape (..., 3), where each point is represented in 3D space as `[x, y, depth]`.\n\nThis implementation is flexible and can handle batches of points, making it suitable for various applications in computer vision and graphics where such transformations are common.",
    "prompt": "Generate a Python function called unproject_points_z1 that unprojects one or more points from the canonical z=1 plane into the camera frame. The function takes in a Tensor called points_in_cam_canonical representing the points to unproject with shape (..., 2) and an optional Tensor called extension representing the extension (depth) of the points with shape (..., 1). The function returns a Tensor representing the unprojected points with shape (..., 3). An example usage of the function is provided where points and extension are tensors, and the output is a tensor of unprojected points.",
    "function_name": "unproject_points_z1",
    "ground_truth": "kornia/geometry/camera/projection_z1.py",
    "test": "tests/geometry/camera/test_projections.py::TestProjectionZ1",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}