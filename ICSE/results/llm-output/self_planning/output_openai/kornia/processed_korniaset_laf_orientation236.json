{
    "result": "Here's the Python function `set_laf_orientation` that implements the steps you outlined. This function takes a tensor of Local Affine Frames (LAFs) and a tensor of angles in degrees, and returns the LAFs oriented according to the specified angles:\n\n```python\nimport torch\n\ndef set_laf_orientation(LAF, angles_degrees):\n    # Convert angles from degrees to radians\n    angles_radians = angles_degrees * (torch.pi / 180.0)\n    \n    # Compute the rotation matrices\n    cos_theta = torch.cos(angles_radians)\n    sin_theta = torch.sin(angles_radians)\n    \n    # Create rotation matrices\n    rotation_matrices = torch.zeros_like(LAF[:, :, :2, :2])\n    rotation_matrices[:, :, 0, 0] = cos_theta.squeeze(-1)\n    rotation_matrices[:, :, 0, 1] = -sin_theta.squeeze(-1)\n    rotation_matrices[:, :, 1, 0] = sin_theta.squeeze(-1)\n    rotation_matrices[:, :, 1, 1] = cos_theta.squeeze(-1)\n    \n    # Apply rotation to the LAFs\n    oriented_LAFs = torch.zeros_like(LAF)\n    oriented_LAFs[:, :, :2, :2] = torch.matmul(rotation_matrices, LAF[:, :, :2, :2])\n    oriented_LAFs[:, :, :2, 2] = LAF[:, :, :2, 2]  # Keep the translation part unchanged\n    \n    return oriented_LAFs\n\n# Example usage:\n# LAF = torch.randn((B, N, 2, 3))  # Example LAF tensor\n# angles_degrees = torch.randn((B, N, 1))  # Example angles tensor\n# oriented_LAFs = set_laf_orientation(LAF, angles_degrees)\n```\n\n### Explanation:\n\n1. **Convert Angles to Radians:**\n   - The function first converts the input angles from degrees to radians because trigonometric functions in PyTorch use radians.\n\n2. **Compute Rotation Matrices:**\n   - For each angle, the function computes the corresponding 2x2 rotation matrix using the cosine and sine of the angle.\n\n3. **Apply Rotation:**\n   - The function extracts the 2x2 part of each LAF and multiplies it by the computed rotation matrix to apply the rotation.\n\n4. **Reconstruct Oriented LAFs:**\n   - The rotated 2x2 matrix is combined with the original translation part (the last column of the LAF) to form the oriented LAF.\n\n5. **Return Oriented LAFs:**\n   - Finally, the function returns the tensor containing the oriented LAFs.\n\nThis function should work efficiently with PyTorch tensors and can be used in a deep learning pipeline where LAFs need to be oriented according to specific angles.",
    "prompt": "Generate a Python function called set_laf_orientation that changes the orientation of the Local Affine Frames (LAFs). The function takes in two arguments: LAF, a tensor of shape (B, N, 2, 3) representing the LAFs, and angles_degrees, a tensor of shape (B, N, 1) representing the angles in degrees. The function returns a tensor of shape (B, N, 2, 3) representing the LAFs oriented with the specified angles. T",
    "function_name": "set_laf_orientation",
    "ground_truth": "kornia/feature/laf.py",
    "test": "tests/feature/test_laf.py::TestSetLAFOri",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Detection",
    "data": "Image"
}