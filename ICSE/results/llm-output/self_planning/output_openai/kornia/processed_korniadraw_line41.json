{
    "result": "Let's focus on implementing the `draw_line` function as described in your plan. This function will draw a line on an image represented as a PyTorch tensor. We'll use Bresenham's line algorithm to calculate the line coordinates, which is efficient for rasterizing lines on a grid.\n\nHere's the implementation:\n\n```python\nimport torch\n\ndef draw_line(image, p1, p2, color):\n    # Validate inputs\n    if not isinstance(image, torch.Tensor) or image.dim() != 3:\n        raise ValueError(\"Image must be a torch.Tensor with 3 dimensions (C, H, W).\")\n    \n    C, H, W = image.shape\n    \n    if not isinstance(color, torch.Tensor) or color.shape != (C,):\n        raise ValueError(\"Color must be a torch.Tensor with the same number of channels as the image.\")\n    \n    if isinstance(p1, torch.Tensor) and isinstance(p2, torch.Tensor):\n        if p1.dim() == 1 and p2.dim() == 1:\n            p1 = p1.unsqueeze(0)\n            p2 = p2.unsqueeze(0)\n        elif p1.dim() != 2 or p2.dim() != 2 or p1.shape[0] != p2.shape[0]:\n            raise ValueError(\"p1 and p2 must have shape (2,) or (B, 2) and the same batch size.\")\n    else:\n        raise ValueError(\"p1 and p2 must be torch.Tensors.\")\n    \n    # Ensure points are within bounds\n    p1 = p1.clamp(min=0, max=torch.tensor([W-1, H-1]))\n    p2 = p2.clamp(min=0, max=torch.tensor([W-1, H-1]))\n    \n    # Function to draw a line using Bresenham's algorithm\n    def bresenham_line(x0, y0, x1, y1):\n        points = []\n        dx = abs(x1 - x0)\n        dy = abs(y1 - y0)\n        sx = 1 if x0 < x1 else -1\n        sy = 1 if y0 < y1 else -1\n        err = dx - dy\n        \n        while True:\n            points.append((x0, y0))\n            if x0 == x1 and y0 == y1:\n                break\n            e2 = 2 * err\n            if e2 > -dy:\n                err -= dy\n                x0 += sx\n            if e2 < dx:\n                err += dx\n                y0 += sy\n        return points\n    \n    # Draw lines for each pair of points in the batch\n    for i in range(p1.shape[0]):\n        x0, y0 = p1[i].int().tolist()\n        x1, y1 = p2[i].int().tolist()\n        line_points = bresenham_line(x0, y0, x1, y1)\n        \n        for x, y in line_points:\n            if 0 <= x < W and 0 <= y < H:\n                image[:, y, x] = color\n    \n    return image\n\n# Example usage:\n# image = torch.zeros((3, 100, 100))  # A black image with 3 channels\n# p1 = torch.tensor([10, 10])\n# p2 = torch.tensor([90, 90])\n# color = torch.tensor([1.0, 0.0, 0.0])  # Red color\n# image_with_line = draw_line(image, p1, p2, color)\n```\n\n### Explanation:\n1. **Input Validation**: The function checks that the image is a 3D tensor and that the color has the same number of channels as the image. It also ensures that `p1` and `p2` are tensors with appropriate shapes.\n\n2. **Clamping Points**: The start and end points are clamped to ensure they lie within the image boundaries.\n\n3. **Bresenham's Line Algorithm**: This algorithm is used to calculate the integer coordinates of the line between two points. It efficiently determines which pixels should be colored to form a straight line.\n\n4. **Drawing the Line**: For each point on the line, the corresponding pixel in the image is updated with the specified color.\n\n5. **Return**: The function returns the modified image with the line drawn on it.",
    "prompt": "Create a Python function called draw_line that draws a single line into an image. The function takes in four parameters: image (a torch.Tensor representing the input image with shape (C,H,W)), p1 (the start point [x y] of the line with shape (2, ) or (B, 2)), p2 (the end point [x y] of the line with shape (2, ) or (B, 2)), and color (the color of the line with shape (C) where C is the number of channels of the image). The function returns the image with the drawn line.\n\nEnsure that the input points p1 and p2 are 2D points with shape (2, ) or (B, 2) and have the same batch sizes. Check that the points are within the bounds of the image. The image must have 3 dimensions (C,H,W) and the color must have the same number of channels as the image.\n\nThe function calculates the coordinates of the line based on the start and end points, and then updates the image with the specified color along the line. The updated image is returned as the output.",
    "function_name": "draw_line",
    "ground_truth": "kornia/utils/draw.py",
    "test": "tests/utils/test_draw.py",
    "class": "",
    "stage": "Inference",
    "task": "",
    "data": "Image"
}