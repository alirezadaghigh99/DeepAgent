{
    "result": "Let's focus on implementing the `invert` function as described in your request. This function will invert the values of an input image tensor using a maximum value tensor, ensuring that both inputs are tensors and handling broadcasting appropriately. Here's how you can implement it:\n\n```python\nimport torch\n\ndef invert(input_image, max_value=None):\n    # Step 1: Check Input Types\n    assert isinstance(input_image, torch.Tensor), \"Input image must be a tensor.\"\n    if max_value is not None:\n        assert isinstance(max_value, torch.Tensor), \"Maximum value must be a tensor.\"\n\n    # Step 2: Set default max_value if not provided\n    if max_value is None:\n        max_value = torch.tensor(1.0, dtype=input_image.dtype, device=input_image.device)\n\n    # Step 3: Invert Image Values\n    inverted_image = max_value - input_image\n\n    # Step 4: Return Tensor\n    return inverted_image\n\n# Example usage:\nimg = torch.rand(1, 2, 4, 4)\nprint(invert(img).shape)  # Output: torch.Size([1, 2, 4, 4])\n\nimg = 255. * torch.rand(1, 2, 3, 4, 4)\nprint(invert(img, torch.as_tensor(255.)).shape)  # Output: torch.Size([1, 2, 3, 4, 4])\n\nimg = torch.rand(1, 3, 4, 4)\nprint(invert(img, torch.as_tensor([[[[1.]]]])).shape)  # Output: torch.Size([1, 3, 4, 4])\n```\n\n### Explanation:\n\n1. **Check Input Types**: The function first checks if both `input_image` and `max_value` (if provided) are tensors. If not, it raises an `AssertionError`.\n\n2. **Set Default `max_value`**: If `max_value` is not provided, it defaults to a tensor with a value of 1.0, matching the data type and device of the `input_image`.\n\n3. **Invert Image Values**: The inversion is performed by subtracting the `input_image` from the `max_value`. This operation uses broadcasting, so `max_value` can be a scalar or a tensor that can be broadcasted to the shape of `input_image`.\n\n4. **Return Tensor**: The function returns the inverted image tensor, which has the same shape as the `input_image`.\n\nThis implementation should meet the requirements and handle the provided examples correctly.",
    "prompt": "Generate a Python function called invert that takes in an input image tensor and an optional maximum value tensor, and returns the inverted values of the input image tensor by its maximum value. The input image tensor should have an arbitrary shape, while the maximum value tensor should have a shape that matches the input tensor shape or can work with broadcasting. The function should raise an AssertionError if the input image or maximum value is not a tensor. The output should be a tensor with the same shape as the input image tensor. >>> img = torch.rand(1, 2, 4, 4)\n        >>> invert(img).shape\n        torch.Size([1, 2, 4, 4])\n\n        >>> img = 255. * torch.rand(1, 2, 3, 4, 4)\n        >>> invert(img, torch.as_tensor(255.)).shape\n        torch.Size([1, 2, 3, 4, 4])\n\n        >>> img = torch.rand(1, 3, 4, 4)\n        >>> invert(img, torch.as_tensor([[[[1.]]]])).shape\n        torch.Size([1, 3, 4, 4])",
    "function_name": "invert",
    "ground_truth": "kornia/enhance/adjust.py",
    "test": "tests/geometry/epipolar/test_fundamental.py::TestFindFundamental",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}