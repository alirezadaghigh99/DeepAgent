{
    "result": "To implement the `undistort_image` function in Python, we need to handle the image distortion correction using the intrinsic camera matrix and distortion coefficients. The function will use PyTorch for tensor operations and will require a custom implementation or a library to handle the distortion correction. Since PyTorch does not natively support distortion correction like OpenCV, we will outline a method using OpenCV's distortion correction capabilities, which can be interfaced with PyTorch tensors.\n\nHere's a complete implementation using OpenCV to handle the distortion correction:\n\n```python\nimport torch\nimport cv2\nimport numpy as np\n\ndef undistort_image(image, K, dist):\n    # Extract dimensions\n    batch_size, channels, height, width = image.shape\n    \n    # Prepare output tensor\n    undistorted_images = torch.empty_like(image)\n    \n    for i in range(batch_size):\n        # Extract individual image, intrinsic matrix, and distortion coefficients\n        img = image[i].permute(1, 2, 0).cpu().numpy()  # Convert to HWC and numpy\n        k_matrix = K[i].cpu().numpy()\n        dist_coeffs = dist[i].cpu().numpy()\n        \n        # Compute the optimal new camera matrix\n        new_camera_matrix, _ = cv2.getOptimalNewCameraMatrix(k_matrix, dist_coeffs, (width, height), 1, (width, height))\n        \n        # Undistort the image\n        undistorted_img = cv2.undistort(img, k_matrix, dist_coeffs, None, new_camera_matrix)\n        \n        # Convert back to CHW and torch tensor\n        undistorted_img = torch.from_numpy(undistorted_img).permute(2, 0, 1)\n        \n        # Store the result\n        undistorted_images[i] = undistorted_img\n    \n    return undistorted_images\n\n# Example usage\nimg = torch.rand(1, 3, 5, 5)\nK = torch.eye(3)[None]\ndist_coeff = torch.rand(1, 5)  # Assuming 5 distortion coefficients for demonstration\nout = undistort_image(img, K, dist_coeff)\nprint(out.shape)\n```\n\n### Key Points:\n\n1. **OpenCV Integration**: We use OpenCV's `cv2.undistort` function to handle the distortion correction. This function requires the image to be in a NumPy array format, so we convert the PyTorch tensor to a NumPy array.\n\n2. **Image Format Conversion**: The input image is converted from PyTorch's CHW format to OpenCV's HWC format for processing, and then back to CHW after undistortion.\n\n3. **Camera Matrix and Distortion Coefficients**: These are extracted for each image in the batch and converted to NumPy arrays for compatibility with OpenCV.\n\n4. **Batch Processing**: The function iterates over each image in the batch, applies the undistortion, and stores the result.\n\n5. **Handling Distortion Coefficients**: The example assumes 5 distortion coefficients, which is common for radial and tangential distortion models. Adjust the number of coefficients as needed for your specific use case.\n\nThis implementation leverages OpenCV's robust distortion correction capabilities while maintaining the flexibility of PyTorch for tensor operations.",
    "prompt": "Generate a Python function called undistort_image that compensates an image for lens distortion. The function takes in three inputs: image (a torch.Tensor representing the input image with shape (*, C, H, W)), K (a torch.Tensor representing the intrinsic camera matrix with shape (*, 3, 3)), and dist (a torch.Tensor representing the distortion coefficients with shape (*, n)). The distortion coefficients include radial, tangential, thin prism, and tilt distortion models.\n\nThe function returns an undistorted image with the same shape as the input image (*, C, H, W). \n\nFor example:\n```python\nimg = torch.rand(1, 3, 5, 5)\nK = torch.eye(3)[None]\ndist_coeff = torch.rand(1, 4)\nout = undistort_image(img, K, dist_coeff)\nout.shape\n```\n\nThe output shape of the undistorted image will be torch.Size([1, 3, 5, 5).",
    "function_name": "undistort_image",
    "ground_truth": "kornia/geometry/calibration/undistort.py",
    "test": "tests/geometry/calibration/test_undistort.py::TestUndistortImage",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Image"
}