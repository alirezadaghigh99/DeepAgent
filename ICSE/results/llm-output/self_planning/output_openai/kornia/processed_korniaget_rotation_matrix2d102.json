{
    "result": "Let's focus on implementing the `get_rotation_matrix2d` function as described in your request. This function will compute the affine transformation matrix for 2D rotation based on the given center, angle, and scale. We'll ensure that the inputs are tensors and have the correct shapes before performing the calculations. Here's how you can implement this function in Python using PyTorch:\n\n```python\nimport torch\nimport math\n\ndef get_rotation_matrix2d(center: torch.Tensor, angle: torch.Tensor, scale: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Calculate the affine matrix of 2D rotation.\n\n    Args:\n        center (torch.Tensor): Center of the rotation in the source image with shape (B, 2).\n        angle (torch.Tensor): Rotation angle in degrees with shape (B).\n        scale (torch.Tensor): Scale factor for x, y scaling with shape (B, 2).\n\n    Returns:\n        torch.Tensor: The affine matrix of 2D rotation with shape (B, 2, 3).\n    \"\"\"\n    # Validate input shapes\n    assert center.shape[1] == 2, \"Center must have shape (B, 2)\"\n    assert angle.dim() == 1, \"Angle must have shape (B)\"\n    assert scale.shape[1] == 2, \"Scale must have shape (B, 2)\"\n    \n    # Convert angle from degrees to radians\n    angle_rad = angle * math.pi / 180.0\n    \n    # Calculate cos and sin of angles\n    cos_a = torch.cos(angle_rad)\n    sin_a = torch.sin(angle_rad)\n    \n    # Prepare the rotation matrix\n    B = center.shape[0]\n    rotation_matrix = torch.zeros((B, 2, 3), dtype=center.dtype, device=center.device)\n    \n    # Fill in the rotation matrix\n    rotation_matrix[:, 0, 0] = cos_a * scale[:, 0]\n    rotation_matrix[:, 0, 1] = -sin_a * scale[:, 1]\n    rotation_matrix[:, 1, 0] = sin_a * scale[:, 0]\n    rotation_matrix[:, 1, 1] = cos_a * scale[:, 1]\n    \n    # Calculate translation to keep the center in place\n    rotation_matrix[:, 0, 2] = center[:, 0] - rotation_matrix[:, 0, 0] * center[:, 0] - rotation_matrix[:, 0, 1] * center[:, 1]\n    rotation_matrix[:, 1, 2] = center[:, 1] - rotation_matrix[:, 1, 0] * center[:, 0] - rotation_matrix[:, 1, 1] * center[:, 1]\n    \n    return rotation_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    # Sample input values\n    center = torch.tensor([[50.0, 50.0], [30.0, 30.0]])\n    angle = torch.tensor([45.0, 90.0])\n    scale = torch.tensor([[1.0, 1.0], [0.5, 0.5]])\n    \n    # Get the rotation matrices\n    rotation_matrices = get_rotation_matrix2d(center, angle, scale)\n    print(rotation_matrices)\n```\n\n### Explanation:\n1. **Input Validation**: We ensure that the inputs have the correct shapes. `center` should be of shape `(B, 2)`, `angle` should be a 1D tensor of shape `(B)`, and `scale` should be of shape `(B, 2)`.\n\n2. **Angle Conversion**: The angle is converted from degrees to radians since trigonometric functions in PyTorch expect radians.\n\n3. **Rotation Matrix Calculation**: For each batch, we compute the rotation matrix using the cosine and sine of the angle, adjusted by the scale factors.\n\n4. **Translation Adjustment**: The translation part of the affine matrix is calculated to ensure the rotation center remains fixed.\n\n5. **Example Usage**: An example is provided to demonstrate how to use the function with sample input values.",
    "prompt": "Generate a Python function called get_rotation_matrix2d that calculates an affine matrix of 2D rotation. The function takes three inputs: center (center of the rotation in the source image with shape (B, 2)), angle (rotation angle in degrees with shape (B)), and scale (scale factor for x, y scaling with shape (B, 2)). \n\nThe function returns the affine matrix of 2D rotation with shape (B, 2, 3). The rotation matrix is calculated based on the provided center, angle, and scale values. The transformation maps the rotation center to itself, but adjustments can be made if needed.\n\nEnsure that the inputs are of type Tensor and have the correct shapes before performing the calculations. The function also includes an example usage with sample input values. This function is often used in conjunction with the warp_affine function.",
    "function_name": "get_rotation_matrix2d",
    "ground_truth": "kornia/geometry/transform/imgwarp.py",
    "test": "tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Classification",
    "data": "Image"
}