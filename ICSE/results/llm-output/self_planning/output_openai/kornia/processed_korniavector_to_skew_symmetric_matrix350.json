{
    "result": "Here's a detailed implementation of the `vector_to_skew_symmetric_matrix` function in Python using PyTorch, following the steps you outlined:\n\n```python\nimport torch\n\ndef vector_to_skew_symmetric_matrix(v):\n    # Step 1: Input Validation\n    # Check if the input is a PyTorch Tensor\n    if not isinstance(v, torch.Tensor):\n        raise ValueError(\"Input must be a PyTorch Tensor.\")\n    \n    # Check the shape of the input tensor\n    if v.ndim == 1 and v.shape[0] == 3:\n        # Single vector case\n        v = v.unsqueeze(0)  # Add a batch dimension\n    elif v.ndim != 2 or v.shape[1] != 3:\n        raise ValueError(\"Input must be of shape (3,) or (B, 3).\")\n    \n    # Step 2: Convert Vector to Skew-Symmetric Matrix\n    # Extract components\n    x, y, z = v[:, 0], v[:, 1], v[:, 2]\n    \n    # Create skew-symmetric matrices\n    zero = torch.zeros_like(x)\n    skew_matrices = torch.stack([\n        torch.stack([zero, -z, y], dim=-1),\n        torch.stack([z, zero, -x], dim=-1),\n        torch.stack([-y, x, zero], dim=-1)\n    ], dim=-2)\n    \n    # Step 3: Return the Result\n    # If the input was a single vector, remove the batch dimension\n    if skew_matrices.shape[0] == 1:\n        skew_matrices = skew_matrices.squeeze(0)\n    \n    return skew_matrices\n\n# Example usage:\n# For a single vector\nv_single = torch.tensor([1.0, 2.0, 3.0])\nprint(\"Skew-symmetric matrix for a single vector:\")\nprint(vector_to_skew_symmetric_matrix(v_single))\n\n# For a batch of vectors\nv_batch = torch.tensor([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\nprint(\"\\nSkew-symmetric matrices for a batch of vectors:\")\nprint(vector_to_skew_symmetric_matrix(v_batch))\n```\n\n### Explanation:\n\n1. **Input Validation**:\n   - The function first checks if the input is a PyTorch Tensor. If not, it raises a `ValueError`.\n   - It then checks the shape of the tensor. If the tensor is a single vector of shape `(3,)`, it adds a batch dimension to make it `(1, 3)`. If the tensor is not of shape `(B, 3)`, it raises a `ValueError`.\n\n2. **Convert Vector to Skew-Symmetric Matrix**:\n   - The function extracts the components `x`, `y`, and `z` from the input tensor.\n   - It constructs the skew-symmetric matrix using these components. The matrix is constructed using `torch.stack` to ensure the correct shape and dimensions.\n\n3. **Return the Result**:\n   - If the input was a single vector, the function removes the added batch dimension before returning the result.\n\nThis implementation handles both single vectors and batches of vectors, converting them into their corresponding skew-symmetric matrices while ensuring input validity.",
    "prompt": "Create a Python function called vector_to_skew_symmetric_matrix that converts a 3D vector into its corresponding skew-symmetric matrix. The input should be a PyTorch Tensor of shape (B, 3) or (3,), representing a batch of 3D vectors or a single 3D vector. The function should return a PyTorch Tensor of shape (B, 3, 3) or (3, 3) containing the skew-symmetric matrices. It should include error handling to ensure the input vector has the correct shape and raise a ValueError if it does not",
    "function_name": "vector_to_skew_symmetric_matrix",
    "ground_truth": "kornia/geometry/conversions.py#L1490",
    "test": "tests/geometry/test_conversions.py::test_vector_to_skew_symmetric_matrix",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}