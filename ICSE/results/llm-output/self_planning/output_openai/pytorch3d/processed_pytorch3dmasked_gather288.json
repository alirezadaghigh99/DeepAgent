{
    "result": "The `masked_gather` function you've described is designed to handle the gathering of points from a tensor based on indices, with special handling for padding indices represented by `-1`. Let's walk through the implementation step-by-step:\n\n1. **Validate Input Dimensions**: The function first checks if the batch dimensions of `points` and `idx` match. If they don't, it raises a `ValueError`. This ensures that the function can correctly process the input tensors.\n\n2. **Replace `-1` Indices**: The function creates a copy of `idx` and replaces all `-1` values with `0`. This allows the function to gather valid points from the `points` tensor, as `-1` is used to indicate padding and doesn't correspond to a valid index.\n\n3. **Gather Points**: The function uses `torch.gather` to collect points from the `points` tensor based on the modified indices. The `unsqueeze` and `expand` operations ensure that the gathered points have the correct shape.\n\n4. **Set Gathered Values for `-1` Indices to `0.0`**: The function creates a mask to identify where the original `idx` had `-1` values. It then uses this mask to set the corresponding gathered points to `0.0`.\n\n5. **Return the Gathered Points Tensor**: Finally, the function returns the tensor containing the gathered points, with the appropriate values set to `0.0` for the original `-1` indices.\n\nHere's the complete implementation:\n\n```python\nimport torch\n\ndef masked_gather(points, idx):\n    # Validate input dimensions\n    if points.size(0) != idx.size(0):\n        raise ValueError(\"Batch dimensions of points and idx must match.\")\n    \n    # Replace -1 indices with 0\n    idx_replaced = idx.clone()\n    idx_replaced[idx_replaced == -1] = 0\n    \n    # Gather points using the modified indices\n    gathered_points = torch.gather(points, 1, idx_replaced.unsqueeze(-1).expand(-1, -1, points.size(-1)))\n    \n    # Create a mask for original -1 indices\n    mask = (idx == -1).unsqueeze(-1).expand_as(gathered_points)\n    \n    # Set gathered values corresponding to original -1 indices to 0.0\n    gathered_points[mask] = 0.0\n    \n    return gathered_points\n\n# Example usage:\n# points = torch.tensor([[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]]])\n# idx = torch.tensor([[0, -1, 2], [1, 0, -1]])\n# result = masked_gather(points, idx)\n# print(result)\n```\n\nThis function is useful in scenarios where you need to gather data from a tensor based on indices, while handling padding indices gracefully. The use of PyTorch's tensor operations ensures that the function is efficient and can handle tensors of various shapes.",
    "prompt": "Write a Python function `masked_gather` that collects points from a tensor `points` based on indices provided in `idx`, where some indices might be `-1` to indicate padding. The function should replace `-1` indices with `0`, gather the corresponding points, and then set the gathered values corresponding to the original `-1` indices to `0.0`. Ensure that `points` and `idx` have matching batch dimensions, and raise a `ValueError` if they do not. The function should handle different shapes of `idx` and return the gathered points tensor.",
    "function_name": "masked_gather",
    "ground_truth": "pytorch3d/ops/utils.py",
    "test": "tests/test_sample_farthest_points.py",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Image"
}