{
    "result": "Let's focus on implementing the `det_curve` function as described. This function will compute the false positive rate (FPR) and false negative rate (FNR) for different probability thresholds in a binary classification task. Here's how you can implement it in Python:\n\n```python\nimport numpy as np\nfrom sklearn.metrics import roc_curve\n\ndef det_curve(y_true, y_score, pos_label=None, sample_weight=None):\n    \"\"\"\n    Compute error rates for different probability thresholds in a binary classification task.\n\n    Parameters:\n    - y_true: ndarray of shape (n_samples), representing the true binary labels.\n    - y_score: ndarray of shape (n_samples), representing target scores.\n    - pos_label: int, float, bool, or str, default=None, indicating the label of the positive class.\n    - sample_weight: array-like of shape (n_samples), default=None, representing sample weights.\n\n    Returns:\n    - fpr: ndarray of shape (n_thresholds), representing the false positive rate.\n    - fnr: ndarray of shape (n_thresholds), representing the false negative rate.\n    - thresholds: ndarray of shape (n_thresholds), representing decreasing score values.\n    \"\"\"\n    # Compute the false positive rate, true positive rate, and thresholds\n    fpr, tpr, thresholds = roc_curve(y_true, y_score, pos_label=pos_label, sample_weight=sample_weight)\n    \n    # Calculate false negative rate\n    fnr = 1 - tpr\n    \n    return fpr, fnr, thresholds\n\n# Example usage\nif __name__ == \"__main__\":\n    # Sample data\n    y_true = np.array([0, 0, 1, 1])\n    y_score = np.array([0.1, 0.4, 0.35, 0.8])\n    \n    # Compute DET curve\n    fpr, fnr, thresholds = det_curve(y_true, y_score, pos_label=1)\n    \n    # Print results\n    print(\"False Positive Rate:\", fpr)\n    print(\"False Negative Rate:\", fnr)\n    print(\"Thresholds:\", thresholds)\n```\n\n### Explanation:\n\n1. **Import Libraries**: We use `numpy` for array handling and `roc_curve` from `sklearn.metrics` to compute the ROC curve, which provides the FPR, TPR, and thresholds.\n\n2. **Function Parameters**:\n   - `y_true`: True binary labels.\n   - `y_score`: Target scores (probabilities or decision function values).\n   - `pos_label`: Specifies the positive class label.\n   - `sample_weight`: Optional weights for each sample.\n\n3. **Compute ROC Curve**: The `roc_curve` function computes the FPR, TPR, and thresholds. The TPR is used to calculate the FNR as `1 - TPR`.\n\n4. **Return Values**: The function returns the FPR, FNR, and thresholds.\n\n5. **Example Usage**: The example demonstrates how to use the `det_curve` function with sample data.\n\nThis implementation provides a straightforward way to evaluate the trade-offs between false positives and false negatives at various thresholds in a binary classification task.",
    "prompt": "Generate a Python function called det_curve that computes error rates for different probability thresholds in a binary classification task. The function takes in the following parameters:\n\n- y_true: ndarray of shape (n_samples), representing the true binary labels.\n- y_score: ndarray of shape (n_samples), representing target scores.\n- pos_label: int, float, bool, or str, default=None, indicating the label of the positive class.\n- sample_weight: array-like of shape (n_samples), default=None, representing sample weights.\n\nThe function returns the following outputs:\n\n- fpr: ndarray of shape (n_thresholds), representing the false positive rate.\n- fnr: ndarray of shape (n_thresholds), representing the false negative rate.\n- thresholds: ndarray of shape (n_thresholds), representing decreasing score values.\n\nThe det_curve function is used for evaluating ranking and error tradeoffs in binary classification tasks. It is recommended to read more about it in the User Guide. Additionally, the function provides examples on how to use it with sample data.",
    "function_name": "det_curve",
    "ground_truth": "sklearn/metrics/_ranking.py",
    "test": "sklearn/metrics/tests/test_ranking.py",
    "class": "",
    "stage": "Evaluating&Metrics",
    "task": "Classification",
    "data": ""
}