{
    "result": "Here's a detailed implementation of the `train_test_split` function, incorporating input validation, shuffling, and optional stratification:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef train_test_split(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None):\n    # Input validation\n    n_samples = len(arrays[0])\n    for array in arrays:\n        if len(array) != n_samples:\n            raise ValueError(\"All input arrays must have the same number of samples.\")\n    \n    if test_size is None and train_size is None:\n        test_size = 0.25  # Default test size\n\n    if test_size is not None and train_size is not None:\n        if isinstance(test_size, float) and isinstance(train_size, float):\n            if test_size + train_size > 1.0:\n                raise ValueError(\"The sum of test_size and train_size should not exceed 1.0.\")\n        elif isinstance(test_size, int) and isinstance(train_size, int):\n            if test_size + train_size > n_samples:\n                raise ValueError(\"The sum of test_size and train_size should not exceed the number of samples.\")\n    \n    if test_size is not None:\n        if isinstance(test_size, float):\n            n_test = int(test_size * n_samples)\n        else:\n            n_test = test_size\n    else:\n        n_test = n_samples - train_size\n\n    if train_size is not None:\n        if isinstance(train_size, float):\n            n_train = int(train_size * n_samples)\n        else:\n            n_train = train_size\n    else:\n        n_train = n_samples - n_test\n\n    if n_train + n_test > n_samples:\n        raise ValueError(\"The sum of train_size and test_size exceeds the number of samples.\")\n\n    if shuffle:\n        rng = np.random.default_rng(seed=random_state)\n        indices = rng.permutation(n_samples)\n    else:\n        indices = np.arange(n_samples)\n\n    if stratify is not None:\n        if len(stratify) != n_samples:\n            raise ValueError(\"Stratify array must have the same length as input arrays.\")\n        \n        # Stratification logic\n        unique_classes, class_indices = np.unique(stratify, return_inverse=True)\n        train_indices = []\n        test_indices = []\n\n        for cls in unique_classes:\n            cls_indices = np.where(class_indices == cls)[0]\n            if shuffle:\n                rng.shuffle(cls_indices)\n            cls_n_test = int(np.round(len(cls_indices) * n_test / n_samples))\n            cls_n_train = len(cls_indices) - cls_n_test\n\n            train_indices.extend(cls_indices[:cls_n_train])\n            test_indices.extend(cls_indices[cls_n_train:cls_n_train + cls_n_test])\n\n        train_indices = np.array(train_indices)\n        test_indices = np.array(test_indices)\n    else:\n        train_indices = indices[:n_train]\n        test_indices = indices[n_train:n_train + n_test]\n\n    result = []\n    for array in arrays:\n        train_data = array[train_indices]\n        test_data = array[test_indices]\n        result.extend([train_data, test_data])\n\n    return result\n\n# Example usage:\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n```\n\n### Key Features:\n1. **Input Validation**: Ensures all input arrays have the same length and validates `test_size` and `train_size`.\n2. **Shuffle**: Uses a random number generator with an optional seed for reproducibility.\n3. **Stratification**: Maintains the distribution of classes in the train and test sets if `stratify` is provided.\n4. **Flexible Split Sizes**: Supports both float and integer values for `test_size` and `train_size`.\n\nThis implementation should cover most use cases for splitting datasets into training and testing subsets, with options for shuffling and stratification. Adjustments can be made to handle specific requirements or edge cases.",
    "prompt": "Generate a Python function called train_test_split that splits arrays or matrices into random train and test subsets. The function takes in multiple arrays, test_size, train_size, random_state, shuffle, and stratify as parameters. It returns a list containing the train-test split of inputs. The function also includes input validation, shuffling, and stratification options.",
    "function_name": "train_test_split",
    "ground_truth": "sklearn/model_selection/_split.py",
    "test": "sklearn/model_selection/tests/test_split.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": ""
}