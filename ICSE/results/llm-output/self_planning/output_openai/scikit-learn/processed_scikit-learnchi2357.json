{
    "result": "Here's the complete implementation of the `chi2` function, which computes chi-squared statistics between each non-negative feature and class. This function follows the steps outlined in your request:\n\n```python\nimport numpy as np\nfrom scipy.sparse import issparse\nfrom sklearn.preprocessing import LabelBinarizer\nfrom scipy.stats import chi2 as chi2_dist\n\ndef chi2(X, y):\n    # Convert y to a binary matrix representation\n    lb = LabelBinarizer()\n    Y = lb.fit_transform(y)\n    \n    # Handle the case where there is only one class\n    if Y.shape[1] == 1:\n        Y = np.hstack([1 - Y, Y])\n    \n    # Number of samples and features\n    n_samples, n_features = X.shape\n    n_classes = Y.shape[1]\n    \n    # Initialize arrays to store chi2 statistics and p-values\n    chi2_stats = np.zeros(n_features)\n    p_values = np.zeros(n_features)\n    \n    # Iterate over each feature\n    for i in range(n_features):\n        if issparse(X):\n            # Handle sparse matrix case\n            observed = np.array([np.bincount(X[:, i].toarray().ravel(), weights=Y[:, j], minlength=2) for j in range(n_classes)])\n        else:\n            # Handle dense matrix case\n            observed = np.array([np.bincount(X[:, i], weights=Y[:, j], minlength=2) for j in range(n_classes)])\n        \n        # Calculate the expected frequencies\n        feature_count = np.sum(observed, axis=0)\n        class_count = np.sum(observed, axis=1)\n        total_count = np.sum(feature_count)\n        \n        expected = np.outer(class_count, feature_count) / total_count\n        \n        # Compute chi-squared statistic and p-value\n        chi2_stat = ((observed - expected) ** 2 / expected).sum()\n        p_value = chi2_dist.sf(chi2_stat, df=(n_classes - 1))\n        \n        chi2_stats[i] = chi2_stat\n        p_values[i] = p_value\n    \n    return chi2_stats, p_values\n```\n\n### Explanation:\n\n1. **LabelBinarizer**: This is used to convert the target vector `y` into a binary matrix representation, where each column corresponds to a class. This is necessary for handling multi-class problems.\n\n2. **Observed Frequencies**: For each feature, the observed frequency of each class is calculated using `np.bincount`. This function counts the number of occurrences of each value in an array, weighted by the class membership.\n\n3. **Expected Frequencies**: These are calculated under the assumption of independence between features and classes. The expected frequency is derived from the product of the marginal sums of the observed frequencies.\n\n4. **Chi-Squared Statistic**: The chi-squared statistic is computed using the formula \\((O - E)^2 / E\\), where \\(O\\) is the observed frequency and \\(E\\) is the expected frequency.\n\n5. **P-Value**: The p-value is calculated using the chi-squared distribution's survival function (`sf`), which gives the probability of observing a chi-squared statistic as extreme as the one calculated.\n\nThis function efficiently computes the chi-squared statistics and p-values for each feature, allowing you to assess the relationship between features and class labels.",
    "prompt": "Generate a Python function called chi2 that computes chi-squared statistics between each non-negative feature and class. The function takes two parameters: X, an array-like or sparse matrix of shape (n_samples, n_features) representing sample vectors, and y, an array-like of shape (n_samples,) representing target vector (class labels). The function returns two arrays: chi2, an ndarray of shape (n_features,) containing Chi2 statistics for each feature, and p_values, an ndarray of shape (n_features,) containing p-values for each feature. The complexity of the algorithm is O(n_classes * n_features). The function uses the LabelBinarizer to handle sparse representation for Y and performs calculations to determine observed and expected values before calling the _chisquare function.",
    "function_name": "chi2",
    "ground_truth": "sklearn/feature_selection/_univariate_selection.py",
    "test": "sklearn/feature_selection/tests/test_chi2.py",
    "class": "",
    "stage": "Evaluating&Metrics",
    "task": "Classification",
    "data": "Table"
}