{
    "result": "Here's the implementation of the `confusion_matrix` function based on the steps you provided:\n\n```python\nimport numpy as np\n\ndef confusion_matrix(y_true, y_pred, labels=None, sample_weight=None, normalize=None):\n    # Ensure y_true and y_pred are numpy arrays\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    \n    # Determine the unique labels\n    if labels is None:\n        labels = np.unique(np.concatenate((y_true, y_pred)))\n    else:\n        labels = np.asarray(labels)\n    \n    n_classes = len(labels)\n    label_to_index = {label: index for index, label in enumerate(labels)}\n    \n    # Initialize the confusion matrix\n    cm = np.zeros((n_classes, n_classes), dtype=np.float64)\n    \n    # Populate the confusion matrix\n    for i, (true, pred) in enumerate(zip(y_true, y_pred)):\n        if true in label_to_index and pred in label_to_index:\n            weight = sample_weight[i] if sample_weight is not None else 1\n            cm[label_to_index[true], label_to_index[pred]] += weight\n    \n    # Normalize the confusion matrix if required\n    with np.errstate(all='ignore'):\n        if normalize == 'true':\n            cm = cm / cm.sum(axis=1, keepdims=True)\n        elif normalize == 'pred':\n            cm = cm / cm.sum(axis=0, keepdims=True)\n        elif normalize == 'all':\n            cm = cm / cm.sum()\n    \n    # Replace NaNs with zeros (in case of division by zero)\n    cm = np.nan_to_num(cm)\n    \n    return cm\n```\n\n### Explanation:\n\n1. **Input Parsing**: The function ensures `y_true` and `y_pred` are numpy arrays for easy manipulation.\n\n2. **Label Determination**: If `labels` are not provided, it determines the unique labels from `y_true` and `y_pred` and sorts them. This defines the size of the confusion matrix.\n\n3. **Matrix Initialization**: A square matrix of size `(n_classes, n_classes)` is initialized to zero.\n\n4. **Matrix Population**: The function iterates over each pair of true and predicted labels, updating the corresponding entry in the confusion matrix. If `sample_weight` is provided, it adjusts the count by the weight.\n\n5. **Normalization**: If `normalize` is specified, the matrix values are adjusted:\n   - `'true'`: Normalizes by the number of true instances for each class (row-wise).\n   - `'pred'`: Normalizes by the number of predicted instances for each class (column-wise).\n   - `'all'`: Normalizes by the total number of instances.\n\n6. **NaN Handling**: Any NaN values resulting from division by zero during normalization are replaced with zeros.\n\n7. **Return**: The function returns the computed confusion matrix.",
    "prompt": "Generate a Python function called confusion_matrix that Compute confusion matrix to evaluate the accuracy of a classification.\n\n    By definition a confusion matrix :math:`C` is such that :math:`C_{i, j}`\n    is equal to the number of observations known to be in group :math:`i` and\n    predicted to be in group :math:`j`.\n\n    Thus in binary classification, the count of true negatives is\n    :math:`C_{0,0}`, false negatives is :math:`C_{1,0}`, true positives is\n    :math:`C_{1,1}` and false positives is :math:`C_{0,1}`.\n\n\n    Parameters\n    ----------\n    y_true : array-like of shape (n_samples,)\n        Ground truth (correct) target values.\n\n    y_pred : array-like of shape (n_samples,)\n        Estimated targets as returned by a classifier.\n\n    labels : array-like of shape (n_classes), default=None\n        List of labels to index the matrix. This may be used to reorder\n        or select a subset of labels.\n        If ``None`` is given, those that appear at least once\n        in ``y_true`` or ``y_pred`` are used in sorted order.\n\n    sample_weight : array-like of shape (n_samples,), default=None\n        Sample weights.\n\n        .. versionadded:: 0.18\n\n    normalize : {'true', 'pred', 'all'}, default=None\n        Normalizes confusion matrix over the true (rows), predicted (columns)\n        conditions or all the population. If None, confusion matrix will not be\n        normalized.\n\n    Returns\n    -------\n    C : ndarray of shape (n_classes, n_classes)\n        Confusion matrix whose i-th row and j-th\n        column entry indicates the number of\n        samples with true label being i-th class\n        and predicted label being j-th class.",
    "function_name": "confusion_matrix",
    "ground_truth": "sklearn/metrics/_classification.py",
    "test": "sklearn/metrics/tests/test_classification.py::test_zero_division_nan_no_warning",
    "class": "",
    "stage": "Evaluating&Metrics",
    "task": "",
    "data": ""
}