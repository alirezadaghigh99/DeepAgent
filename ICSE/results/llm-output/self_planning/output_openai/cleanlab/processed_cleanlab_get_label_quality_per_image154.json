{
    "result": "Let's implement the function `_get_label_quality_per_image` based on the provided plan. This function will compute the label quality score for an image using the \"softmin\" method by default. Here's how you can implement it:\n\n```python\nimport numpy as np\n\ndef _get_label_quality_per_image(pixel_scores, method=\"softmin\", temperature=0.1):\n    # Step 1: Validate Inputs\n    if pixel_scores is None or len(pixel_scores) == 0:\n        raise Exception(\"pixel_scores cannot be None or empty.\")\n    if temperature is None or temperature == 0:\n        raise Exception(\"temperature must be a non-zero value.\")\n    if method != \"softmin\":\n        raise Exception(f\"Unsupported method '{method}'. Only 'softmin' is supported.\")\n\n    # Step 2: Compute Label Quality Score using the softmin method\n    # Softmin is computed as: exp(-x / temperature) / sum(exp(-x / temperature))\n    exp_scores = np.exp(-pixel_scores / temperature)\n    softmin_scores = exp_scores / np.sum(exp_scores)\n\n    # The label quality score is the weighted sum of pixel scores using softmin weights\n    label_quality_score = np.sum(softmin_scores * pixel_scores)\n\n    # Step 3: Return Score\n    return label_quality_score\n\n# Example usage:\n# pixel_scores = np.array([0.9, 0.8, 0.7, 0.6, 0.5])\n# score = _get_label_quality_per_image(pixel_scores)\n# print(\"Label Quality Score:\", score)\n```\n\n### Explanation:\n- **Input Validation**: The function first checks if `pixel_scores` is `None` or empty, and if `temperature` is `None` or zero. It raises an exception if any of these conditions are met. It also checks if the `method` is \"softmin\" and raises an exception if it's not.\n- **Softmin Calculation**: The softmin function is used to emphasize lower-quality pixel labels. It is computed using the formula: `exp(-x / temperature) / sum(exp(-x / temperature))`. This gives more weight to lower scores when the temperature is low.\n- **Label Quality Score**: The final label quality score is computed as the weighted sum of the pixel scores using the softmin weights.\n- **Return**: The computed label quality score is returned as a float.\n\nThis function should work as expected for the given requirements. You can test it with different `pixel_scores` and `temperature` values to see how it behaves.",
    "prompt": "Create a Python function _get_label_quality_per_image that computes the label quality score for an image based on per-pixel label quality scores. The function uses the \"softmin\" method by default, which emphasizes the lowest-quality pixel labels more heavily in the calculation.\n\nParameters:\npixel_scores: A NumPy array containing per-pixel label quality scores, flattened into a 1D array of shape (N,), where N is the number of pixels in the image.\nmethod: A string specifying the method used to calculate the label quality score. Currently, only the \"softmin\" method is supported. This parameter is optional and defaults to \"softmin\".\ntemperature: A float that determines the temperature of the softmin function. This parameter controls how much weight is given to lower-quality pixel labels. Lower values emphasize the lowest scores more, while higher values average the scores more evenly. The default value is 0.1.\nReturns:\nA float representing the label quality score for the image, ranging from 0 (lowest quality) to 1 (highest quality).If pixel_scores is None, empty, or if temperature is 0 or None, the function raises an Exception with a descriptive error message.\nIf an unsupported method is specified, an exception is raised with a message indicating the correct method to use.",
    "function_name": "_get_label_quality_per_image",
    "ground_truth": "cleanlab/segmentation/rank.py#L204",
    "test": "tests/test_segmentation.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "segmentation",
    "data": "Image"
}