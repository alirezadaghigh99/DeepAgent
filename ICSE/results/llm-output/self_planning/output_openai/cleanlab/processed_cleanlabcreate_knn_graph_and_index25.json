{
    "result": "Here's a detailed implementation of the `create_knn_graph_and_index` function, including handling for exact duplicates and usage examples:\n\n```python\nimport numpy as np\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.sparse import csr_matrix\n\ndef create_knn_graph_and_index(features, n_neighbors=5, metric='euclidean', correct_duplicates=False, **kwargs):\n    # Step 2: Construct the KNN Search Index\n    knn = NearestNeighbors(n_neighbors=n_neighbors, metric=metric, **kwargs)\n    knn.fit(features)\n    \n    # Step 3: Calculate the KNN Graph\n    distances, indices = knn.kneighbors(features)\n    \n    # Create a sparse adjacency matrix\n    n_samples = features.shape[0]\n    row_indices = np.repeat(np.arange(n_samples), n_neighbors)\n    col_indices = indices.flatten()\n    data = distances.flatten()\n    \n    adjacency_matrix = csr_matrix((data, (row_indices, col_indices)), shape=(n_samples, n_samples))\n    \n    # Step 4: Correct Exact Duplicates (if needed)\n    if correct_duplicates:\n        # Find unique rows and their indices\n        unique_features, unique_indices = np.unique(features, axis=0, return_inverse=True)\n        \n        # Recompute the KNN graph for unique features\n        unique_knn = NearestNeighbors(n_neighbors=n_neighbors, metric=metric, **kwargs)\n        unique_knn.fit(unique_features)\n        unique_distances, unique_indices = unique_knn.kneighbors(unique_features)\n        \n        # Create a new sparse adjacency matrix for unique features\n        unique_row_indices = np.repeat(np.arange(unique_features.shape[0]), n_neighbors)\n        unique_col_indices = unique_indices.flatten()\n        unique_data = unique_distances.flatten()\n        \n        unique_adjacency_matrix = csr_matrix((unique_data, (unique_row_indices, unique_col_indices)), shape=(unique_features.shape[0], unique_features.shape[0]))\n        \n        # Map the unique adjacency matrix back to the original feature indices\n        adjacency_matrix = unique_adjacency_matrix[unique_indices, :][:, unique_indices]\n    \n    # Step 5: Return Results\n    return adjacency_matrix, knn\n\n# Step 6: Provide Usage Examples\nif __name__ == \"__main__\":\n    # Example usage\n    features = np.array([[0, 0], [1, 1], [1, 0], [0, 1], [0, 0]])\n    adjacency_matrix, knn_index = create_knn_graph_and_index(features, n_neighbors=2, correct_duplicates=True)\n    print(\"Adjacency Matrix:\\n\", adjacency_matrix.toarray())\n    print(\"KNN Index:\", knn_index)\n```\n\n### Explanation:\n\n1. **Handling Duplicates:**\n   - If `correct_duplicates` is `True`, the function identifies unique feature vectors and computes the KNN graph for these unique vectors. It then maps the results back to the original feature indices to ensure the adjacency matrix reflects the correct relationships.\n\n2. **Sparse Matrix Construction:**\n   - The adjacency matrix is constructed using `scipy.sparse.csr_matrix`, which is efficient for storing large, sparse matrices.\n\n3. **Usage Example:**\n   - The example demonstrates how to use the function with a small feature array, including a duplicate point, and how to handle duplicates.\n\nThis implementation provides a robust solution for creating a KNN graph and index, with optional handling for exact duplicates.",
    "prompt": "Generate a Python function called create_knn_graph_and_index that calculates the KNN graph from input features. The function takes in a feature array, optional parameters for the number of nearest neighbors and distance metric, a boolean flag for correcting exact duplicates, and additional keyword arguments for the search index constructor. \n\nThe function returns a tuple containing a sparse, weighted adjacency matrix representing the KNN graph of the feature array and a k-nearest neighbors search object fitted to the input feature array. The function also includes examples demonstrating its usage with numpy arrays.",
    "function_name": "create_knn_graph_and_index",
    "ground_truth": "cleanlab/internal/neighbor/knn_graph.py",
    "test": "tests/internal/neighbor/test_neighbor.py",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": ""
}