{
    "result": "Let's implement the `get_empty_config` function as described in the plan. This function will create an instance of `NNCFConfig` with specified parameters and a nested function to handle input information. Note that the `NNCFConfig` class is assumed to be part of a library or framework, so we'll define a simple mock version for demonstration purposes.\n\nHere's the implementation:\n\n```python\n# Mock class for NNCFConfig to demonstrate the function\nclass NNCFConfig:\n    def __init__(self):\n        self.config = {}\n\n    def update(self, new_config):\n        self.config.update(new_config)\n\n    def __repr__(self):\n        return f\"NNCFConfig({self.config})\"\n\ndef get_empty_config(model_size=4, input_sample_sizes=None, input_info=None):\n    # Step 1: Set default for `input_sample_sizes`\n    if input_sample_sizes is None:\n        input_sample_sizes = [1, 1, 4, 4]\n\n    # Step 2: Nested function `_create_input_info`\n    def _create_input_info():\n        return [{\"sample_size\": size} for size in input_sample_sizes]\n\n    # Step 3: Create NNCFConfig instance\n    config = NNCFConfig()\n    config.update({\n        \"model\": \"empty_config\",\n        \"model_size\": model_size,\n        \"input_info\": input_info if input_info is not None else _create_input_info()\n    })\n\n    # Step 4: Return configured instance\n    return config\n\n# Example usage\nconfig = get_empty_config()\nprint(config)\n```\n\n### Explanation:\n\n1. **Default for `input_sample_sizes`:** If `input_sample_sizes` is not provided, it defaults to `[1, 1, 4, 4]`.\n\n2. **Nested Function `_create_input_info`:** This function generates a list of dictionaries, each containing a \"sample_size\" key, based on the `input_sample_sizes`.\n\n3. **Create and Update `NNCFConfig`:** An instance of `NNCFConfig` is created and updated with the specified keys. If `input_info` is provided, it is used; otherwise, the result of `_create_input_info()` is used.\n\n4. **Return Configured Instance:** The configured `NNCFConfig` instance is returned.\n\nThis implementation assumes that `NNCFConfig` is a class that can be instantiated and updated with a dictionary. The mock class provided here is for demonstration purposes and should be replaced with the actual class from the relevant library or framework in a real-world scenario.",
    "prompt": "Generate a Python function called get_empty_config that takes in three optional parameters: model_size (default value of 4), input_sample_sizes (a list or tuple of integers, default value of None), and input_info (a dictionary, default value of None). The function returns an instance of NNCFConfig.\n\nIf input_sample_sizes is None, it is set to [1, 1, 4, 4]. The function also contains a nested function _create_input_info that creates a list of dictionaries with the key \"sample_size\" based on the input_sample_sizes parameter.\n\nThe NNCFConfig instance is created and updated with the keys \"model\" set to \"empty_config\", \"model_size\" set to the model_size parameter, and \"input_info\" set to input_info if it is provided, otherwise it is set to the result of calling _create_input_info(). The final output is the configured NNCFConfig instance.",
    "function_name": "get_empty_config",
    "ground_truth": "tests/torch/helpers.py",
    "test": "tests/torch/quantization/test_algo_quantization.py",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": ""
}