{
    "result": "To implement the `generate_global_features` function, we need to follow the outlined steps. Here's the complete implementation in Python:\n\n```python\nimport numpy as np\nfrom rdkit import Chem\nfrom rdkit.Chem import AllChem\n\n# Assuming GraphConvConstants is defined somewhere with FEATURE_GENERATORS\nclass GraphConvConstants:\n    FEATURE_GENERATORS = {\n        'MorganFingerprint': AllChem.GetMorganFingerprintAsBitVect,\n        # Add other feature generators as needed\n    }\n\ndef generate_global_features(mol, features_generators, replace_token=0):\n    \"\"\"\n    Generate global features for a given RDKit molecule using specified feature generators.\n\n    Parameters:\n    - mol: RDKit molecule object.\n    - features_generators: List of feature generator names.\n    - replace_token: Value to replace NaN values in the feature array.\n\n    Returns:\n    - global_features_array: Numpy array of global features.\n    \"\"\"\n    global_features = []\n\n    # Check if the molecule has heavy atoms\n    if mol.GetNumHeavyAtoms() == 0:\n        # Use a dummy molecule (methane) to determine feature length\n        mol = Chem.MolFromSmiles('C')\n\n    for generator_name in features_generators:\n        if generator_name in GraphConvConstants.FEATURE_GENERATORS:\n            generator = GraphConvConstants.FEATURE_GENERATORS[generator_name]\n            # Featurize the molecule\n            features = generator(mol, radius=2, nBits=2048)  # Example parameters for Morgan\n            # Convert to list and append to global features\n            global_features.extend(list(features))\n\n    # Convert to numpy array\n    global_features_array = np.array(global_features, dtype=float)\n\n    # Replace NaN values with the specified replace_token\n    global_features_array = np.nan_to_num(global_features_array, nan=replace_token)\n\n    return global_features_array\n\n# Example usage\n# mol = Chem.MolFromSmiles('CCO')  # Example molecule\n# features_generators = ['MorganFingerprint']\n# features = generate_global_features(mol, features_generators)\n# print(features)\n```\n\n### Explanation:\n\n1. **Feature Generators**: The `GraphConvConstants.FEATURE_GENERATORS` dictionary maps feature generator names to their corresponding RDKit functions. You can add more feature generators as needed.\n\n2. **Molecule Check**: If the input molecule has no heavy atoms, a dummy molecule (methane) is used to ensure the feature length is consistent.\n\n3. **Feature Generation**: For each feature generator in the list, the function checks if it's available in `GraphConvConstants.FEATURE_GENERATORS`. If available, it uses the generator to featurize the molecule and appends the features to the `global_features` list.\n\n4. **Numpy Conversion and NaN Replacement**: The `global_features` list is converted to a numpy array, and any NaN values are replaced with the specified `replace_token`.\n\n5. **Return**: The function returns the `global_features_array`, which is a numpy array containing the global features of the input molecule.\n\nThis implementation assumes that the feature generators are compatible with the RDKit molecule object and that they return a list or array of features. Adjust the parameters of the feature generators as needed for your specific use case.",
    "prompt": "Generate a Python function called generate_global_features that takes in a RDKit molecule (mol) and a list of feature generators (features_generators) as input. The function returns an array of global features as a numpy array.\n\nThe function loops through the list of feature generators and checks if they are available in the GraphConvConstants.FEATURE_GENERATORS. If a generator is available, it featurizes the molecule using the generator and appends the features to the global_features list. If the molecule has no heavy atoms, it uses a dummy molecule (methane) to determine the length of the features.\n\nThe function then converts the global_features list to a numpy array and replaces any NaN values with a specified replace_token value.\n\nThe output of the function is the global_features_array, which is a numpy array containing the global features of the input molecule.",
    "function_name": "generate_global_features",
    "ground_truth": "deepchem/feat/molecule_featurizers/dmpnn_featurizer.py",
    "test": "deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": ""
}