{
    "result": "The `get_badge_embeddings` function is designed to transform embeddings based on class probabilities, which is useful for the BADGE strategy in active learning. Let's walk through the implementation step-by-step, ensuring it handles both multi-class and binary classification scenarios correctly.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\nclass BADGE(EmbeddingBasedQueryStrategy):\n    def __init__(self, num_classes):\n        self.num_classes = num_classes\n\n    def get_badge_embeddings(self, embeddings, proba):\n        # Number of samples\n        num_samples = embeddings.shape[0]\n        \n        # If multi-class, expand and scale embeddings\n        if self.num_classes > 2:\n            # Initialize an empty list to store the expanded embeddings\n            badge_embeddings = []\n            \n            for i in range(num_samples):\n                # Get the original embedding and probabilities for the current sample\n                original_embedding = embeddings[i]\n                probabilities = proba[i]\n                \n                # Find the index of the most likely class\n                most_likely_class = np.argmax(probabilities)\n                \n                # Create a scaled embedding for each class\n                for c in range(self.num_classes):\n                    if c == most_likely_class:\n                        # Scale by (1 - probability) for the most likely class\n                        scaled_embedding = original_embedding * (1 - probabilities[c])\n                    else:\n                        # Scale by negative probability for other classes\n                        scaled_embedding = original_embedding * (-probabilities[c])\n                    \n                    # Append the scaled embedding to the list\n                    badge_embeddings.append(scaled_embedding)\n            \n            # Convert the list to a numpy array\n            badge_embeddings = np.array(badge_embeddings)\n        \n        else:\n            # For binary classification, return the original embeddings\n            badge_embeddings = embeddings\n        \n        return badge_embeddings\n```\n\n### Explanation:\n\n1. **Initialization**: The function starts by determining the number of samples from the shape of the `embeddings` array.\n\n2. **Multi-Class Handling**:\n   - For each sample, the function iterates over each class.\n   - It scales the embedding by `(1 - probability)` for the most likely class and by `-probability` for all other classes.\n   - This scaling is done to emphasize the most likely class while considering the influence of other classes.\n   - The scaled embeddings for each class are appended to a list, which is later converted to a numpy array.\n\n3. **Binary Handling**:\n   - If the problem is binary (i.e., `num_classes` is 2), the function simply returns the original embeddings without modification. This is because binary classification does not require the expansion of embeddings across multiple classes.\n\n4. **Output**: The function returns a 2D numpy array where each row corresponds to a scaled embedding. This array can be used in the BADGE strategy for selecting informative samples in active learning.\n\nThis implementation ensures that the embeddings are appropriately scaled and expanded for multi-class problems, while maintaining simplicity for binary problems.",
    "prompt": "Write a Python function `get_badge_embeddings` for the `BADGE` class. This function should calculate embeddings scaled by class probabilities, enabling the use of the BADGE strategy for batch active learning. The function takes `embeddings` and `proba` (predicted class probabilities) as input and returns the `badge_embeddings`. For multi-class problems, the embeddings are expanded and scaled for each class; for binary problems, the original embeddings are returned.\n\n```python\nclass BADGE(EmbeddingBasedQueryStrategy):\n    def __init__(self, num_classes):\n        self.num_classes = num_classes\n\n    def get_badge_embeddings(self, embeddings, proba):\n``` \n\nThe `get_badge_embeddings` function should generate an embedding matrix where each original embedding is scaled by the negative class probabilities, except for the most likely class, which is scaled differently. For multi-class classification, this scaling is performed for each class, creating a larger embedding matrix. The output is a 2D numpy array where each row corresponds to an embedding.",
    "function_name": "get_badge_embeddings",
    "ground_truth": "small_text/integrations/pytorch/query_strategies/strategies.py",
    "test": "tests/integration/small_text/integrations/pytorch/query_strategies/test_query_strategies.py::QueryStrategiesTest",
    "class": "BADGE",
    "stage": "Text",
    "task": "Classification",
    "data": "Evaluation/metrics"
}