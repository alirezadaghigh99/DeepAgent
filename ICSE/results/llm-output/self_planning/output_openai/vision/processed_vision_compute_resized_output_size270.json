{
    "result": "Here's the function `_compute_resized_output_size` that follows the outlined steps to calculate the new size of an image after resizing. It handles different configurations and constraints, ensuring that the resized dimensions are calculated correctly and any invalid input is flagged with an appropriate error message.\n\n```python\ndef _compute_resized_output_size(image_size, size=None, max_size=None, allow_size_none=False):\n    # Validate image_size\n    if not isinstance(image_size, (list, tuple)) or len(image_size) != 2:\n        raise ValueError(\"image_size must be a list or tuple of two positive integers.\")\n    \n    original_height, original_width = image_size\n    \n    # Handle case where size is None\n    if size is None:\n        if not allow_size_none:\n            raise ValueError(\"size cannot be None unless allow_size_none is True.\")\n        return [original_height, original_width]\n    \n    # Determine new size based on size parameter\n    if isinstance(size, int):\n        if size <= 0:\n            raise ValueError(\"size must be a positive integer.\")\n        # Calculate scale based on the smaller dimension\n        scale = size / min(original_height, original_width)\n        new_height = int(original_height * scale)\n        new_width = int(original_width * scale)\n    elif isinstance(size, (list, tuple)) and len(size) == 2:\n        new_height, new_width = size\n        if new_height <= 0 or new_width <= 0:\n            raise ValueError(\"Both dimensions in size must be positive integers.\")\n    else:\n        raise ValueError(\"size must be an integer or a list/tuple of two integers.\")\n    \n    # Apply max_size constraint if provided\n    if max_size is not None:\n        if not isinstance(max_size, int) or max_size <= 0:\n            raise ValueError(\"max_size must be a positive integer.\")\n        max_dimension = max(new_height, new_width)\n        if max_dimension > max_size:\n            scale = max_size / max_dimension\n            new_height = int(new_height * scale)\n            new_width = int(new_width * scale)\n    \n    return [new_height, new_width]\n```\n\n### Key Points:\n- **Input Validation**: The function checks that `image_size` is a list or tuple of two positive integers. It also validates `size` and `max_size` to ensure they are positive integers or lists/tuples of two positive integers.\n- **Handling `size`**: If `size` is `None`, the function checks `allow_size_none` to decide whether to return the original size or raise an error. If `size` is an integer, it scales the image based on the smaller dimension. If `size` is a list/tuple of two integers, it directly uses those dimensions.\n- **Applying `max_size`**: If `max_size` is provided, the function ensures that the longer edge of the new size does not exceed `max_size` by adjusting the scale accordingly.\n- **Error Handling**: The function raises `ValueError` for any invalid input or configuration, ensuring robust error handling.",
    "prompt": "Write a Python function `_compute_resized_output_size` that calculates the new size of an image after resizing, based on the original `image_size` (height and width). The function accepts parameters: `size`, an optional list specifying the desired size of the smaller edge or both dimensions; `max_size`, an optional integer that limits the size of the longer edge; and `allow_size_none`, a boolean that permits `size` to be `None` (only used in version 2). The function should handle different cases where `size` is `None`, a single value, or a pair of values, and return a list with the new height and width. The function should include checks to raise a `ValueError` if `size` is `None` but `max_size` is not an integer, if `max_size` is smaller than the requested size, or if any other invalid configuration is encountered.",
    "function_name": "_compute_resized_output_size",
    "ground_truth": "torchvision/transforms/functional.py#L357",
    "test": "test/test_transforms.py::test_resize",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}