{
    "result": "The function `_box_xyxy_to_xywh` is designed to convert bounding boxes from the `(x1, y1, x2, y2)` format to the `(x, y, w, h)` format using PyTorch tensors. Let's go through the implementation step-by-step:\n\n```python\nimport torch\n\ndef _box_xyxy_to_xywh(boxes):\n    \"\"\"\n    Convert bounding boxes from (x1, y1, x2, y2) format to (x, y, w, h) format.\n\n    Parameters:\n    - boxes: A tensor of shape (N, 4) representing bounding boxes in (x1, y1, x2, y2) format.\n\n    Returns:\n    - A tensor of shape (N, 4) representing bounding boxes in (x, y, w, h) format.\n    \"\"\"\n    # Ensure the input is a tensor\n    if not isinstance(boxes, torch.Tensor):\n        raise TypeError(\"Input boxes should be a torch.Tensor\")\n\n    # Check the shape of the input tensor\n    if boxes.shape[1] != 4:\n        raise ValueError(\"Input boxes should have shape (N, 4)\")\n\n    # Extract x1, y1, x2, y2\n    x1, y1, x2, y2 = boxes[:, 0], boxes[:, 1], boxes[:, 2], boxes[:, 3]\n\n    # Compute x, y, w, h\n    x = x1\n    y = y1\n    w = x2 - x1\n    h = y2 - y1\n\n    # Stack the results into a new tensor\n    boxes_xywh = torch.stack((x, y, w, h), dim=1)\n\n    return boxes_xywh\n```\n\n### Explanation:\n\n1. **Input Parsing**:\n   - The function accepts a tensor `boxes` with shape `(N, 4)`, where `N` is the number of bounding boxes. Each bounding box is represented by four values: `(x1, y1, x2, y2)`.\n\n2. **Type and Shape Checking**:\n   - The function checks if the input is a PyTorch tensor. If not, it raises a `TypeError`.\n   - It also checks if the second dimension of the tensor is 4, ensuring each bounding box has four coordinates. If not, it raises a `ValueError`.\n\n3. **Conversion Logic**:\n   - The coordinates `(x1, y1, x2, y2)` are extracted from the input tensor.\n   - The top-left corner `(x, y)` is directly taken as `(x1, y1)`.\n   - The width `w` is calculated as `x2 - x1`.\n   - The height `h` is calculated as `y2 - y1`.\n\n4. **Output Construction**:\n   - The new bounding box format `(x, y, w, h)` is constructed by stacking these values along the second dimension using `torch.stack`.\n\n5. **Return the Result**:\n   - The function returns the new tensor `boxes_xywh` containing the converted bounding boxes.\n\nThis function is useful in computer vision tasks where bounding box formats need to be converted for different algorithms or frameworks.",
    "prompt": "Write a Python function _box_xyxy_to_xywh that converts bounding boxes from the (x1, y1, x2, y2) format, where (x1, y1) and (x2, y2) represent the top-left and bottom-right corners, to the (x, y, w, h) format, where (x, y) represents the top-left corner and (w, h) represents the width and height. The function should return a tensor with the converted bounding boxes.",
    "function_name": "_box_xyxy_to_xywh",
    "ground_truth": "torchvision/ops/_box_convert.py",
    "test": "test/test_ops.py::TestBoxConvert",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Detection",
    "data": "Image"
}