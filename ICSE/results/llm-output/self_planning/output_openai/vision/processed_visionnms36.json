{
    "result": "Here's the implementation of the `nms` function using PyTorch's `torchvision` library to perform non-maximum suppression (NMS) on a set of bounding boxes. This function will remove lower-scoring boxes that have a high overlap with higher-scoring boxes based on the specified IoU threshold.\n\n```python\nimport torch\nfrom torchvision.ops import nms as torchvision_nms\n\ndef nms(boxes, scores, iou_threshold):\n    \"\"\"\n    Perform non-maximum suppression (NMS) on bounding boxes.\n\n    Args:\n        boxes (Tensor): A tensor of shape [N, 4] representing bounding box coordinates in (x1, y1, x2, y2) format.\n        scores (Tensor): A tensor of shape [N] containing scores for each box.\n        iou_threshold (float): IoU threshold for suppression.\n\n    Returns:\n        Tensor: An int64 tensor containing the indices of the boxes that have been kept after NMS, sorted in decreasing order of scores.\n    \"\"\"\n    # Ensure necessary operations are available\n    if not hasattr(torchvision_nms, '__call__'):\n        raise RuntimeError(\"NMS operation is not available in torchvision.\")\n\n    # Perform NMS\n    indices = torchvision_nms(boxes, scores, iou_threshold)\n\n    return indices\n\n# Example usage:\n# boxes = torch.tensor([[x1, y1, x2, y2], ...], dtype=torch.float32)\n# scores = torch.tensor([score1, score2, ...], dtype=torch.float32)\n# iou_threshold = 0.5\n# kept_indices = nms(boxes, scores, iou_threshold)\n```\n\n### Explanation:\n\n1. **Import Libraries**: We import `torch` and `nms` from `torchvision.ops`.\n\n2. **Function Definition**: The `nms` function takes three arguments:\n   - `boxes`: A tensor of shape `[N, 4]` containing the coordinates of the bounding boxes.\n   - `scores`: A tensor of shape `[N]` containing the scores for each bounding box.\n   - `iou_threshold`: A float specifying the IoU threshold for suppression.\n\n3. **Check for NMS Availability**: We ensure that the `nms` function is available in `torchvision`. If not, a `RuntimeError` is raised.\n\n4. **Perform NMS**: We call `torchvision_nms` with the provided boxes, scores, and IoU threshold. This function returns the indices of the boxes that are kept after applying NMS.\n\n5. **Return Indices**: The function returns the indices of the boxes that have been kept, sorted in decreasing order of their scores.\n\nThis implementation leverages PyTorch's efficient NMS operation, which is optimized for performance and widely used in object detection tasks.",
    "prompt": "Generate a Python function called nms that performs non-maximum suppression (NMS) on a set of bounding boxes based on their intersection-over-union (IoU) values. The function takes three inputs: boxes (a Tensor of shape [N, 4] representing bounding box coordinates in (x1, y1, x2, y2) format), scores (a Tensor of shape [N] containing scores for each box), and iou_threshold (a float value specifying the IoU threshold for suppression).\n\nThe function iteratively removes lower scoring boxes that have an IoU greater than the specified threshold with another higher scoring box. The output is an int64 Tensor containing the indices of the boxes that have been kept after NMS, sorted in decreasing order of scores. Additionally, the function logs API usage and ensures that necessary operations are available before performing NMS using PyTorch's torchvision library.",
    "function_name": "nms",
    "ground_truth": "torchvision/ops/boxes.py",
    "test": "test/test_ops.py::TestNMS",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Detection",
    "data": "Image"
}