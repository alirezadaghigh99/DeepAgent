{
    "result": "The function `convert_image_dtype` is designed to convert a PyTorch tensor image from one data type to another while appropriately scaling the values. Below is the implementation of the function based on the steps you provided:\n\n```python\nimport torch\n\ndef convert_image_dtype(image: torch.Tensor, dtype: torch.dtype) -> torch.Tensor:\n    # Step 1: Input Validation\n    if not isinstance(image, torch.Tensor):\n        raise TypeError(\"Input image must be a torch.Tensor\")\n    \n    if not isinstance(dtype, torch.dtype):\n        raise TypeError(\"Target dtype must be a torch.dtype\")\n    \n    current_dtype = image.dtype\n\n    # Step 2: Determine Conversion Type\n    if torch.is_floating_point(image):\n        # Step 6: Handle Unsupported Conversions\n        if dtype in [torch.int32, torch.int64] and current_dtype in [torch.float32, torch.float64]:\n            raise RuntimeError(\"Conversion from float32/float64 to int32/int64 is not supported due to potential overflow.\")\n        \n        # Step 5: Handle Float to Integer Conversion\n        if not torch.is_floating_point(dtype):\n            max_val = torch.iinfo(dtype).max\n            image = torch.clamp(image * max_val, 0, max_val).to(dtype)\n    \n    else:\n        # Step 4: Handle Integer to Float Conversion\n        if torch.is_floating_point(dtype):\n            max_val = torch.iinfo(current_dtype).max\n            image = image.to(dtype) / max_val\n        \n        # Step 3: Handle Integer to Integer Conversion\n        else:\n            current_max = torch.iinfo(current_dtype).max\n            target_max = torch.iinfo(dtype).max\n            scale_factor = target_max / current_max\n            image = (image.to(dtype) * scale_factor).to(dtype)\n    \n    # Step 7: Return the Converted Image\n    return image\n```\n\n### Explanation:\n\n1. **Input Validation**: The function checks if the input `image` is a `torch.Tensor` and if `dtype` is a valid `torch.dtype`.\n\n2. **Determine Conversion Type**: The function identifies whether the conversion is between integer types, from integer to float, or from float to integer.\n\n3. **Integer to Integer Conversion**: If both the current and target data types are integers, the function scales the values to maintain the relative range.\n\n4. **Integer to Float Conversion**: When converting from an integer type to a float type, the function scales the integer values to the range [0, 1].\n\n5. **Float to Integer Conversion**: When converting from a float type to an integer type, the function scales the float values to the range of the target integer type and clamps the values to ensure they fit within the range.\n\n6. **Handle Unsupported Conversions**: The function raises a `RuntimeError` for unsupported conversions that might lead to overflow errors.\n\n7. **Return the Converted Image**: The function returns the converted image tensor after performing the necessary scaling and type conversion.\n\nThis implementation ensures that the conversion between different data types is handled correctly, with appropriate scaling and error handling for unsupported conversions.",
    "prompt": "Create a Python function called convert_image_dtype that Convert a tensor image to the given ``dtype`` and scale the values accordingly\n    This function does not support PIL Image.\n\n    Args:\n        image (torch.Tensor): Image to be converted\n        dtype (torch.dtype): Desired data type of the output\n\n    Returns:\n        Tensor: Converted image\n\n    .. note::\n\n        When converting from a smaller to a larger integer ``dtype`` the maximum values are **not** mapped exactly.\n        If converted back and forth, this mismatch has no effect.\n\n    Raises:\n        RuntimeError: When trying to cast :class:`torch.float32` to :class:`torch.int32` or :class:`torch.int64` as\n            well as for trying to cast :class:`torch.float64` to :class:`torch.int64`. These conversions might lead to\n            overflow errors since the floating point ``dtype`` cannot store consecutive integers over the whole range\n            of the integer ``dtype``.",
    "function_name": "convert_image_dtype",
    "ground_truth": "torchvision/transforms/functional.py",
    "test": "test/test_transforms_tensor.py::test_convert_image_dtype",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}