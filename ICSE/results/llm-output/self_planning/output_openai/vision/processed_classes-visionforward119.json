{
    "result": "Here's the complete implementation of the `RandomPerspectiveTransform` class with the `forward` method, which applies a random perspective transformation to an image based on a given probability:\n\n```python\nimport random\nfrom PIL import Image\nimport torchvision.transforms.functional as F\nfrom torchvision.transforms import InterpolationMode\nfrom collections.abc import Sequence\nimport numbers\n\nclass RandomPerspectiveTransform:\n    def __init__(self, distortion_scale=0.5, p=0.5, interpolation=InterpolationMode.BILINEAR, fill=0):\n        super().__init__()\n        self.p = p\n        self.interpolation = interpolation\n        self.distortion_scale = distortion_scale\n\n        if fill is None:\n            fill = 0\n        elif not isinstance(fill, (Sequence, numbers.Number)):\n            raise TypeError(\"Fill should be either a sequence or a number.\")\n\n        self.fill = fill\n\n    def forward(self, img):\n        # Check if we should apply the transformation\n        if random.random() > self.p:\n            return img\n\n        # Get image dimensions\n        if isinstance(img, Image.Image):\n            width, height = img.size\n        else:\n            # Assuming img is a Tensor with shape [..., H, W]\n            width, height = img.shape[-1], img.shape[-2]\n\n        # Generate random parameters for perspective transformation\n        startpoints, endpoints = self._get_random_perspective_params(width, height)\n\n        # Apply the perspective transformation\n        transformed_img = F.perspective(img, startpoints, endpoints, self.interpolation, self.fill)\n\n        return transformed_img\n\n    def _get_random_perspective_params(self, width, height):\n        # Calculate the distortion based on the distortion scale\n        half_width = width // 2\n        half_height = height // 2\n        topleft = (random.randint(0, int(self.distortion_scale * half_width)),\n                   random.randint(0, int(self.distortion_scale * half_height)))\n        topright = (random.randint(width - int(self.distortion_scale * half_width), width),\n                    random.randint(0, int(self.distortion_scale * half_height)))\n        botright = (random.randint(width - int(self.distortion_scale * half_width), width),\n                    random.randint(height - int(self.distortion_scale * half_height), height))\n        botleft = (random.randint(0, int(self.distortion_scale * half_width)),\n                   random.randint(height - int(self.distortion_scale * half_height), height))\n\n        startpoints = [(0, 0), (width, 0), (width, height), (0, height)]\n        endpoints = [topleft, topright, botright, botleft]\n\n        return startpoints, endpoints\n```\n\n### Explanation:\n\n1. **Probability Check**: The transformation is applied only if a random number is less than `p`. This ensures that the transformation is applied with the specified probability.\n\n2. **Image Dimensions**: The dimensions of the image are extracted. If the image is a PIL Image, `img.size` is used. If it's a Tensor, the shape is used to get the width and height.\n\n3. **Random Parameters**: The `_get_random_perspective_params` method generates random points for the perspective transformation based on the `distortion_scale`. This method calculates the four corners of the transformed image by randomly offsetting the original corners.\n\n4. **Transformation**: The `F.perspective` function from `torchvision.transforms.functional` is used to apply the perspective transformation using the calculated start and end points.\n\n5. **Return**: The transformed image is returned, maintaining the same type and shape as the input.\n\nThis implementation uses the PIL library for image handling and torchvision for transformations. Adjustments may be needed if using different libraries or frameworks.",
    "prompt": "Generate a Python function called `forward` that performs a random perspective transformation on an input image with a given probability. The input is a PIL Image or Tensor expected to have shape [..., H, W], and the output is a randomly transformed image of the same type and shape.\n\n```python\nclass RandomPerspectiveTransform:\n    def __init__(self, distortion_scale=0.5, p=0.5, interpolation=InterpolationMode.BILINEAR, fill=0):\n        super().__init__()\n        self.p = p\n\n        if isinstance(interpolation, int):\n            interpolation = _interpolation_modes_from_int(interpolation)\n\n        self.interpolation = interpolation\n        self.distortion_scale = distortion_scale\n\n        if fill is None:\n            fill = 0\n        elif not isinstance(fill, (Sequence, numbers.Number)):\n            raise TypeError(\"Fill should be either a sequence or a number.\")\n\n        self.fill = fill\n\n    def forward(self, img):\n```",
    "function_name": "forward",
    "ground_truth": "torchvision/transforms/transforms.py",
    "test": "test/test_transforms.py::test_randomperspective_fill",
    "class": "RandomPerspectiveTransform",
    "stage": "Image",
    "task": "",
    "data": "Training"
}