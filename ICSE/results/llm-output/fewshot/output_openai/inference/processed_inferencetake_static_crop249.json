{
    "result": "Certainly! Below is a Python function `take_static_crop` that takes an image as a numpy array and crop parameters as a dictionary. The function calculates the pixel coordinates based on the percentage values provided and returns the cropped image as a numpy array.\n\n```python\nimport numpy as np\n\ndef take_static_crop(image: np.ndarray, crop_params: dict) -> np.ndarray:\n    \"\"\"\n    Crop an image based on specified crop parameters.\n\n    Args:\n        image (np.ndarray): Input image as a numpy array with shape (H, W, C) or (H, W).\n        crop_params (dict): Dictionary containing crop parameters with keys 'x_min', 'y_min', 'x_max', 'y_max'.\n                            The values should be percentages (0 to 1) of the image dimensions.\n\n    Returns:\n        np.ndarray: Cropped image as a numpy array.\n    \"\"\"\n    # Validate crop_params\n    required_keys = {'x_min', 'y_min', 'x_max', 'y_max'}\n    if not required_keys.issubset(crop_params):\n        raise ValueError(f\"crop_params must contain the keys: {required_keys}\")\n\n    # Get image dimensions\n    height, width = image.shape[:2]\n\n    # Calculate pixel coordinates for cropping\n    x_min = int(crop_params['x_min'] * width)\n    y_min = int(crop_params['y_min'] * height)\n    x_max = int(crop_params['x_max'] * width)\n    y_max = int(crop_params['y_max'] * height)\n\n    # Ensure coordinates are within image bounds\n    x_min = max(0, min(x_min, width))\n    y_min = max(0, min(y_min, height))\n    x_max = max(0, min(x_max, width))\n    y_max = max(0, min(y_max, height))\n\n    # Crop the image\n    cropped_image = image[y_min:y_max, x_min:x_max]\n\n    return cropped_image\n```\n\n### Explanation:\n- **Input Validation**: The function first checks if the `crop_params` dictionary contains all the required keys: `'x_min'`, `'y_min'`, `'x_max'`, and `'y_max'`.\n- **Image Dimensions**: It retrieves the height and width of the input image.\n- **Pixel Coordinates Calculation**: The function calculates the pixel coordinates for cropping by multiplying the percentage values by the image dimensions.\n- **Bounds Checking**: It ensures that the calculated coordinates are within the bounds of the image dimensions.\n- **Cropping**: Finally, it slices the image array to obtain the cropped image and returns it.\n\nThis function can handle both grayscale and color images, as it does not assume a specific number of channels.",
    "prompt": "Create a Python function called take_static_crop that takes in an image as a numpy array and crop parameters as a dictionary containing x_min, y_min, x_max, and y_max values as percentages of the image dimensions. The function should return a cropped version of the input image based on the specified crop parameters. The output should be a numpy array representing the cropped image.",
    "function_name": "take_static_crop",
    "ground_truth": "inference/core/utils/preprocess.py",
    "test": "tests/inference/unit_tests/core/utils/test_preprocess.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Segmentation",
    "data": "Image"
}