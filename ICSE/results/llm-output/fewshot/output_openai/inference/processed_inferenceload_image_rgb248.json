{
    "result": "To create the `load_image_rgb` function as described, you can follow the structure below. This function will use a hypothetical `load_image` function to load the image and check its format. If the image is in BGR format, it will convert it to RGB. Here's how you can implement it:\n\n```python\nimport numpy as np\n\ndef load_image(value, disable_preproc_auto_orient=False):\n    \"\"\"\n    Hypothetical function to load an image. This function should return a NumPy array\n    and a boolean indicating whether the image is in BGR format.\n    \n    Args:\n        value: The input value to load the image from.\n        disable_preproc_auto_orient (bool): Whether to disable automatic orientation preprocessing.\n    \n    Returns:\n        image (np.ndarray): The loaded image.\n        is_bgr (bool): Whether the image is in BGR format.\n    \"\"\"\n    # Placeholder implementation\n    # In a real scenario, this function would load the image from the given value\n    # and determine if it is in BGR format.\n    image = np.random.rand(100, 100, 3)  # Dummy image data\n    is_bgr = True  # Assume the image is in BGR format for demonstration\n    return image, is_bgr\n\ndef load_image_rgb(value, disable_preproc_auto_orient=False):\n    \"\"\"\n    Load an image and convert it to RGB format if necessary.\n\n    Args:\n        value: The input value to load the image from.\n        disable_preproc_auto_orient (bool): Whether to disable automatic orientation preprocessing.\n\n    Returns:\n        np.ndarray: The loaded image in RGB format.\n    \"\"\"\n    image, is_bgr = load_image(value, disable_preproc_auto_orient)\n\n    if is_bgr:\n        # Convert BGR to RGB by reversing the last dimension\n        image = image[..., ::-1]\n\n    return image\n\n# Example usage\nimage_rgb = load_image_rgb(\"path/to/image.jpg\")\n```\n\n### Explanation:\n- **`load_image` Function**: This is a placeholder function that simulates loading an image and determining if it is in BGR format. In a real implementation, this function would handle the actual image loading logic.\n- **`load_image_rgb` Function**: This function calls `load_image` to get the image and its format. If the image is in BGR format, it converts it to RGB by reversing the last dimension of the array.\n- **Conversion Logic**: The conversion from BGR to RGB is done using `image[..., ::-1]`, which reverses the order of the last dimension (the color channels).\n\nThis code assumes that the `load_image` function is implemented elsewhere and correctly identifies whether the image is in BGR format.",
    "prompt": "Create a Python function called load_image_rgb that takes in a value of any type and a boolean disable_preproc_auto_orient as input. The function returns a NumPy array representing the loaded image in RGB format. The function internally calls another function load_image to load the image and determine if it is in BGR format. If the image is in BGR format, it converts it to RGB. The output of the function is the loaded image in RGB format.",
    "function_name": "load_image_rgb",
    "ground_truth": "inference/core/utils/image_utils.py",
    "test": "tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Classification",
    "data": "image"
}