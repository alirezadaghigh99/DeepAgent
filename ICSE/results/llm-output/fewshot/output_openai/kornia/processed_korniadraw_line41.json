{
    "result": "To create a function `draw_line` that draws a line on an image using PyTorch, you can follow the structure and style of the examples provided. Here's how you can implement this function:\n\n```python\nimport torch\nfrom typing import Union\n\ndef draw_line(\n    image: torch.Tensor,\n    p1: Union[torch.Tensor, torch.Tensor],\n    p2: Union[torch.Tensor, torch.Tensor],\n    color: torch.Tensor\n) -> torch.Tensor:\n    \"\"\"\n    Draws a line on a given image from point p1 to point p2 with the specified color.\n\n    Args:\n        image (torch.Tensor): Input image tensor of shape (C, H, W).\n        p1 (torch.Tensor): Start point of the line, shape (2,) or (B, 2).\n        p2 (torch.Tensor): End point of the line, shape (2,) or (B, 2).\n        color (torch.Tensor): Color of the line, shape (C).\n\n    Returns:\n        torch.Tensor: Image tensor with the line drawn.\n    \"\"\"\n    if image.dim() != 3:\n        raise ValueError(\"Image must have 3 dimensions (C, H, W).\")\n    if color.shape[0] != image.shape[0]:\n        raise ValueError(\"Color must have the same number of channels as the image.\")\n    if p1.shape != p2.shape:\n        raise ValueError(\"Start and end points must have the same shape.\")\n    if p1.shape[-1] != 2:\n        raise ValueError(\"Points must be 2D with shape (2,) or (B, 2).\")\n\n    # Ensure points are within image bounds\n    _, H, W = image.shape\n    p1 = p1.clamp(min=0, max=torch.tensor([W-1, H-1]))\n    p2 = p2.clamp(min=0, max=torch.tensor([W-1, H-1]))\n\n    # Draw line using Bresenham's algorithm\n    def bresenham_line(x0, y0, x1, y1):\n        points = []\n        dx = abs(x1 - x0)\n        dy = abs(y1 - y0)\n        sx = 1 if x0 < x1 else -1\n        sy = 1 if y0 < y1 else -1\n        err = dx - dy\n\n        while True:\n            points.append((x0, y0))\n            if x0 == x1 and y0 == y1:\n                break\n            e2 = 2 * err\n            if e2 > -dy:\n                err -= dy\n                x0 += sx\n            if e2 < dx:\n                err += dx\n                y0 += sy\n        return points\n\n    if p1.dim() == 1:\n        # Single line\n        x0, y0 = p1.int().tolist()\n        x1, y1 = p2.int().tolist()\n        line_points = bresenham_line(x0, y0, x1, y1)\n        for x, y in line_points:\n            image[:, y, x] = color\n    else:\n        # Batch of lines\n        for i in range(p1.shape[0]):\n            x0, y0 = p1[i].int().tolist()\n            x1, y1 = p2[i].int().tolist()\n            line_points = bresenham_line(x0, y0, x1, y1)\n            for x, y in line_points:\n                image[:, y, x] = color\n\n    return image\n```\n\n### Explanation:\n- **Input Validation**: The function checks that the image has three dimensions, the color has the same number of channels as the image, and the points `p1` and `p2` have the correct shape.\n- **Clamping Points**: The points are clamped to ensure they lie within the image boundaries.\n- **Bresenham's Algorithm**: This algorithm is used to calculate the points along the line between `p1` and `p2`. It is efficient and works well for integer-based grid systems like image pixels.\n- **Drawing the Line**: The calculated points are used to update the image tensor with the specified color.\n\nThis function should work for both single lines and batches of lines, as long as the input points are provided in the correct shape.",
    "prompt": "Create a Python function called draw_line that draws a single line into an image. The function takes in four parameters: image (a torch.Tensor representing the input image with shape (C,H,W)), p1 (the start point [x y] of the line with shape (2, ) or (B, 2)), p2 (the end point [x y] of the line with shape (2, ) or (B, 2)), and color (the color of the line with shape (C) where C is the number of channels of the image). The function returns the image with the drawn line.\n\nEnsure that the input points p1 and p2 are 2D points with shape (2, ) or (B, 2) and have the same batch sizes. Check that the points are within the bounds of the image. The image must have 3 dimensions (C,H,W) and the color must have the same number of channels as the image.\n\nThe function calculates the coordinates of the line based on the start and end points, and then updates the image with the specified color along the line. The updated image is returned as the output.",
    "function_name": "draw_line",
    "ground_truth": "kornia/utils/draw.py",
    "test": "tests/utils/test_draw.py",
    "class": "",
    "stage": "Inference",
    "task": "",
    "data": "Image"
}