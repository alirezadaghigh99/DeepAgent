{
    "result": "To create a function called `set_laf_orientation` that changes the orientation of Local Affine Frames (LAFs), you can follow these steps. The function will take in two arguments: `LAF`, a tensor of shape `(B, N, 2, 3)` representing the LAFs, and `angles_degrees`, a tensor of shape `(B, N, 1)` representing the angles in degrees. The function will return a tensor of the same shape as `LAF`, with the LAFs oriented according to the specified angles.\n\nHere's how you can implement this function:\n\n```python\nimport torch\n\ndef set_laf_orientation(LAF: torch.Tensor, angles_degrees: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Adjusts the orientation of Local Affine Frames (LAFs) based on specified angles.\n\n    Args:\n        LAF (torch.Tensor): Tensor of shape (B, N, 2, 3) representing the LAFs.\n        angles_degrees (torch.Tensor): Tensor of shape (B, N, 1) representing the angles in degrees.\n\n    Returns:\n        torch.Tensor: Tensor of shape (B, N, 2, 3) representing the oriented LAFs.\n    \"\"\"\n    # Convert angles from degrees to radians\n    angles_radians = torch.deg2rad(angles_degrees)\n\n    # Compute the rotation matrices\n    cos_angles = torch.cos(angles_radians)\n    sin_angles = torch.sin(angles_radians)\n\n    # Create rotation matrices of shape (B, N, 2, 2)\n    rotation_matrices = torch.stack([\n        torch.cat([cos_angles, -sin_angles], dim=-1),\n        torch.cat([sin_angles, cos_angles], dim=-1)\n    ], dim=-2)\n\n    # Apply the rotation to the LAFs\n    # LAF[:, :, :2, :2] contains the affine part of the LAFs\n    oriented_LAF = LAF.clone()\n    oriented_LAF[:, :, :2, :2] = torch.matmul(rotation_matrices, LAF[:, :, :2, :2])\n\n    return oriented_LAF\n```\n\n### Explanation:\n\n1. **Convert Angles to Radians**: Since trigonometric functions in PyTorch use radians, we first convert the input angles from degrees to radians using `torch.deg2rad`.\n\n2. **Compute Rotation Matrices**: For each angle, we compute the corresponding 2D rotation matrix. The rotation matrix for an angle \u03b8 is:\n   \\[\n   \\begin{bmatrix}\n   \\cos(\\theta) & -\\sin(\\theta) \\\\\n   \\sin(\\theta) & \\cos(\\theta)\n   \\end{bmatrix}\n   \\]\n\n3. **Apply Rotation**: We apply the rotation matrices to the affine part of the LAFs (the first two rows and columns of each LAF). This is done using matrix multiplication.\n\n4. **Return Oriented LAFs**: The function returns the LAFs with the updated orientation.",
    "prompt": "Generate a Python function called set_laf_orientation that changes the orientation of the Local Affine Frames (LAFs). The function takes in two arguments: LAF, a tensor of shape (B, N, 2, 3) representing the LAFs, and angles_degrees, a tensor of shape (B, N, 1) representing the angles in degrees. The function returns a tensor of shape (B, N, 2, 3) representing the LAFs oriented with the specified angles. T",
    "function_name": "set_laf_orientation",
    "ground_truth": "kornia/feature/laf.py",
    "test": "tests/feature/test_laf.py::TestSetLAFOri",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Detection",
    "data": "Image"
}