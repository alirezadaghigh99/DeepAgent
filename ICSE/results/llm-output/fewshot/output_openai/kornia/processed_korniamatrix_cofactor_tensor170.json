{
    "result": "To create a Python function `matrix_cofactor_tensor` that computes the cofactor matrix for a given tensor of matrices with shape `(*, 3, 3)`, we can use PyTorch for tensor operations. The cofactor matrix is the transpose of the matrix of minors, where each minor is the determinant of a 2x2 submatrix. Here's how you can implement this function:\n\n```python\nimport torch\n\ndef matrix_cofactor_tensor(matrix: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Computes the cofactor matrix for a given tensor of matrices with shape `(*, 3, 3)`.\n\n    Args:\n        matrix (torch.Tensor): A tensor of shape `(*, 3, 3)` representing the input matrices.\n\n    Returns:\n        torch.Tensor: A tensor containing the cofactor matrices of the input matrices.\n\n    Raises:\n        Exception: If all input matrices are singular (i.e., their determinants are zero).\n    \"\"\"\n    if matrix.shape[-2:] != (3, 3):\n        raise ValueError(\"Input tensor must have shape (*, 3, 3)\")\n\n    # Calculate the determinant of each 3x3 matrix\n    det = torch.det(matrix)\n\n    # Check if all matrices are singular\n    if torch.all(det == 0):\n        raise Exception(\"All input matrices are singular (determinants are zero).\")\n\n    # Calculate the cofactor matrix\n    cofactor_matrix = torch.empty_like(matrix)\n\n    # Iterate over the last two dimensions to compute the cofactor for each element\n    for i in range(3):\n        for j in range(3):\n            # Create a mask to select the 2x2 submatrix\n            submatrix = matrix[..., torch.arange(3) != i, :][:, :, torch.arange(3) != j]\n            # Calculate the determinant of the 2x2 submatrix\n            minor = torch.det(submatrix)\n            # Calculate the cofactor\n            cofactor_matrix[..., i, j] = ((-1) ** (i + j)) * minor\n\n    # Transpose the cofactor matrix to get the adjugate\n    cofactor_matrix = cofactor_matrix.transpose(-1, -2)\n\n    return cofactor_matrix\n```\n\n### Explanation:\n- **Input Validation**: The function first checks if the input tensor has the correct shape `(*, 3, 3)`.\n- **Determinant Check**: It calculates the determinant of each 3x3 matrix and raises an exception if all matrices are singular.\n- **Cofactor Calculation**: For each element in the 3x3 matrix, it computes the minor by taking the determinant of the corresponding 2x2 submatrix. The cofactor is then calculated by applying the sign change based on the position.\n- **Transpose**: The cofactor matrix is transposed to get the adjugate matrix, which is the cofactor matrix for a 3x3 matrix.\n\nThis function uses PyTorch's tensor operations to efficiently compute the cofactor matrices for a batch of 3x3 matrices.",
    "prompt": "Create a Python function `matrix_cofactor_tensor` that:\n\n- Computes the cofactor matrix for a given tensor of matrices with shape `(*, 3, 3)`.\n- Accepts a single parameter:\n  - `matrix`: A tensor of shape `(*, 3, 3)` representing the input matrices.\n- Returns a tensor containing the cofactor matrices of the input matrices.\n\nErrors:\n- Raises an `Exception` if all input matrices are singular (i.e., their determinants are zero).",
    "function_name": "matrix_cofactor_tensor",
    "ground_truth": "kornia/geometry/epipolar/numeric.py#L31",
    "test": "tests/geometry/epipolar/test_essential.py::TestDecomposeEssentialMatrixNoSVD",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": ""
}