{
    "result": "To create a function `undistort_image` that compensates for lens distortion in an image, you can use OpenCV's distortion correction functions. However, since the input and output are expected to be PyTorch tensors, you'll need to convert between PyTorch tensors and NumPy arrays, as OpenCV primarily operates on NumPy arrays. Here's how you can implement this function:\n\n```python\nimport torch\nimport cv2\nimport numpy as np\n\ndef undistort_image(image: torch.Tensor, K: torch.Tensor, dist: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Compensates an image for lens distortion.\n\n    Args:\n        image (torch.Tensor): Input image tensor with shape (*, C, H, W).\n        K (torch.Tensor): Intrinsic camera matrix with shape (*, 3, 3).\n        dist (torch.Tensor): Distortion coefficients with shape (*, n).\n\n    Returns:\n        torch.Tensor: Undistorted image with the same shape as the input image (*, C, H, W).\n    \"\"\"\n    # Convert the input image to a NumPy array\n    image_np = image.permute(0, 2, 3, 1).cpu().numpy()  # Convert to (N, H, W, C) for OpenCV\n\n    # Convert the camera matrix and distortion coefficients to NumPy arrays\n    K_np = K.cpu().numpy()\n    dist_np = dist.cpu().numpy()\n\n    # Initialize an output array for the undistorted image\n    undistorted_images = []\n\n    # Process each image in the batch\n    for i in range(image_np.shape[0]):\n        # Get the current image, camera matrix, and distortion coefficients\n        img = image_np[i]\n        k = K_np[i]\n        d = dist_np[i]\n\n        # Undistort the image using OpenCV\n        h, w = img.shape[:2]\n        new_camera_matrix, _ = cv2.getOptimalNewCameraMatrix(k, d, (w, h), 1, (w, h))\n        undistorted_img = cv2.undistort(img, k, d, None, new_camera_matrix)\n\n        # Append the undistorted image to the list\n        undistorted_images.append(undistorted_img)\n\n    # Convert the list of undistorted images back to a PyTorch tensor\n    undistorted_images_np = np.stack(undistorted_images, axis=0)\n    undistorted_images_tensor = torch.from_numpy(undistorted_images_np).permute(0, 3, 1, 2)  # Convert back to (N, C, H, W)\n\n    return undistorted_images_tensor\n\n# Example usage\nimg = torch.rand(1, 3, 5, 5)\nK = torch.eye(3)[None]\ndist_coeff = torch.rand(1, 4)\nout = undistort_image(img, K, dist_coeff)\nprint(out.shape)  # Should print: torch.Size([1, 3, 5, 5])\n```\n\n### Explanation:\n- **Input Conversion**: The input image tensor is converted to a NumPy array with shape `(N, H, W, C)` to be compatible with OpenCV functions.\n- **Camera Matrix and Distortion Coefficients**: These are also converted to NumPy arrays.\n- **Undistortion Process**: For each image in the batch, OpenCV's `cv2.undistort` function is used to correct the distortion.\n- **Output Conversion**: The undistorted images are converted back to a PyTorch tensor with the original shape `(N, C, H, W)`.\n\nThis function assumes that the distortion coefficients are compatible with OpenCV's distortion model, which typically includes radial and tangential distortion coefficients. If you have additional distortion models (like thin prism or tilt), you may need to adjust the function to handle those specifically.",
    "prompt": "Generate a Python function called undistort_image that compensates an image for lens distortion. The function takes in three inputs: image (a torch.Tensor representing the input image with shape (*, C, H, W)), K (a torch.Tensor representing the intrinsic camera matrix with shape (*, 3, 3)), and dist (a torch.Tensor representing the distortion coefficients with shape (*, n)). The distortion coefficients include radial, tangential, thin prism, and tilt distortion models.\n\nThe function returns an undistorted image with the same shape as the input image (*, C, H, W). \n\nFor example:\n```python\nimg = torch.rand(1, 3, 5, 5)\nK = torch.eye(3)[None]\ndist_coeff = torch.rand(1, 4)\nout = undistort_image(img, K, dist_coeff)\nout.shape\n```\n\nThe output shape of the undistorted image will be torch.Size([1, 3, 5, 5).",
    "function_name": "undistort_image",
    "ground_truth": "kornia/geometry/calibration/undistort.py",
    "test": "tests/geometry/calibration/test_undistort.py::TestUndistortImage",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Image"
}