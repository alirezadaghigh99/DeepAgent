{
    "result": "Here's a Python function `convert_points_from_homogeneous` that converts points from homogeneous to Euclidean space. This function takes a tensor `points` with shape `(B, N, D)` and an optional `eps` parameter to avoid division by zero. It returns a tensor of shape `(B, N, D-1)` representing the points in Euclidean space. The function raises a `TypeError` if the input is not a tensor and a `ValueError` if the input tensor has fewer than two dimensions.\n\n```python\nimport torch\n\ndef convert_points_from_homogeneous(points: torch.Tensor, eps: float = 1e-10) -> torch.Tensor:\n    \"\"\"\n    Convert points from homogeneous to Euclidean space.\n\n    Args:\n        points (torch.Tensor): A tensor of shape (B, N, D) representing points in homogeneous coordinates.\n        eps (float): A small value to avoid division by zero. Defaults to 1e-10.\n\n    Returns:\n        torch.Tensor: A tensor of shape (B, N, D-1) representing points in Euclidean space.\n\n    Raises:\n        TypeError: If the input is not a tensor.\n        ValueError: If the input tensor has fewer than two dimensions.\n    \"\"\"\n    if not isinstance(points, torch.Tensor):\n        raise TypeError(\"Input must be a torch.Tensor.\")\n    \n    if points.dim() < 2:\n        raise ValueError(\"Input tensor must have at least two dimensions.\")\n    \n    # Extract the last dimension as the homogeneous coordinate\n    homogeneous_coord = points[..., -1:]\n    \n    # Avoid division by zero by adding eps\n    homogeneous_coord = torch.where(homogeneous_coord.abs() < eps, torch.tensor(eps, device=points.device), homogeneous_coord)\n    \n    # Convert to Euclidean coordinates by dividing by the homogeneous coordinate\n    euclidean_points = points[..., :-1] / homogeneous_coord\n    \n    return euclidean_points\n```\n\n### Explanation:\n- **Input Validation**: The function first checks if the input is a tensor and if it has at least two dimensions. If not, it raises appropriate exceptions.\n- **Homogeneous to Euclidean Conversion**: The function extracts the last dimension of the tensor as the homogeneous coordinate. It then divides the other dimensions by this coordinate to convert the points to Euclidean space.\n- **Avoiding Division by Zero**: The `eps` parameter is used to avoid division by zero by replacing very small values in the homogeneous coordinate with `eps`.",
    "prompt": "Create a function `convert_points_from_homogeneous` that converts points from homogeneous to Euclidean space. The function takes a tensor `points` with shape `(B, N, D)` and an optional `eps` parameter to avoid division by zero. It returns a tensor of shape `(B, N, D-1)` representing the points in Euclidean space. A `TypeError` is raised if the input is not a tensor, and a `ValueError` is raised if the input tensor has fewer than two dimensions.",
    "function_name": "convert_points_from_homogeneous",
    "ground_truth": "kornia/geometry/conversions.py",
    "test": "tests/geometry/test_conversions.py::TestConvertPointsFromHomogeneous",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Detection",
    "data": "Image"
}