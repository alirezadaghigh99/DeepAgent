{
    "result": "Certainly! Below is a Python function called `resize` that resizes an input `torch.Tensor` to a specified size using various parameters such as interpolation method, alignment, side, and antialiasing. The function includes error handling for input validation and an example usage.\n\n```python\nimport torch\nimport torch.nn.functional as F\n\ndef resize(\n    input_tensor: torch.Tensor,\n    size: Union[int, Tuple[int, int]],\n    interpolation: str = \"bilinear\",\n    align_corners: Optional[bool] = None,\n    side: str = \"both\",\n    antialias: bool = False\n) -> torch.Tensor:\n    \"\"\"\n    Resizes an input torch.Tensor to a specified size.\n\n    Args:\n        input_tensor (torch.Tensor): The input tensor of shape (C, H, W) or (N, C, H, W).\n        size (int or Tuple[int, int]): Desired output size. If int, a square output is produced.\n        interpolation (str): Interpolation method. Options: \"nearest\", \"bilinear\", \"bicubic\". Default is \"bilinear\".\n        align_corners (bool, optional): If True, the corner pixels of the input and output tensors are aligned.\n        side (str): Side for resizing. Options: \"both\", \"height\", \"width\". Default is \"both\".\n        antialias (bool): If True, applies antialiasing. Default is False.\n\n    Returns:\n        torch.Tensor: Resized tensor with the specified size.\n\n    Raises:\n        ValueError: If the input tensor is not 3D or 4D, or if the side parameter is invalid.\n    \"\"\"\n    if input_tensor.dim() not in {3, 4}:\n        raise ValueError(\"Input tensor must be 3D (C, H, W) or 4D (N, C, H, W).\")\n\n    if isinstance(size, int):\n        size = (size, size)\n\n    if side not in {\"both\", \"height\", \"width\"}:\n        raise ValueError(\"Invalid side parameter. Choose from 'both', 'height', 'width'.\")\n\n    if side == \"height\":\n        size = (size[0], input_tensor.shape[-1])\n    elif side == \"width\":\n        size = (input_tensor.shape[-2], size[1])\n\n    resized_tensor = F.interpolate(\n        input_tensor,\n        size=size,\n        mode=interpolation,\n        align_corners=align_corners,\n        recompute_scale_factor=False,\n        antialias=antialias\n    )\n\n    return resized_tensor\n\n# Example usage\nif __name__ == \"__main__\":\n    # Create a random tensor of shape (3, 64, 64)\n    input_tensor = torch.rand(3, 64, 64)\n\n    # Resize the tensor to (128, 128) using bilinear interpolation\n    resized_tensor = resize(input_tensor, size=(128, 128), interpolation=\"bilinear\")\n\n    print(\"Original size:\", input_tensor.shape)\n    print(\"Resized size:\", resized_tensor.shape)\n```\n\n### Explanation:\n- **Input Validation**: The function checks if the input tensor is either 3D or 4D. It also validates the `side` parameter.\n- **Size Handling**: If `size` is an integer, it is converted to a tuple for square resizing. The `side` parameter allows resizing only the height or width while keeping the other dimension unchanged.\n- **Interpolation**: The function supports \"nearest\", \"bilinear\", and \"bicubic\" interpolation methods.\n- **Antialiasing**: The `antialias` flag is used to apply antialiasing during resizing.\n- **Example Usage**: Demonstrates how to use the `resize` function with a random tensor.",
    "prompt": "Generate a Python function called resize that resizes an input torch.Tensor to a specified size using various parameters such as interpolation method, alignment, side, and antialiasing. The function takes in the input tensor, desired output size, interpolation method (default is \"bilinear\"), alignment flag, side for resizing, and antialiasing flag. It returns the resized tensor with the specified size. The function includes error handling for input validation and an example usage.",
    "function_name": "resize",
    "ground_truth": "kornia/geometry/transform/affwarp.py",
    "test": "tests/geometry/transform/test_affine.py::TestResize",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}