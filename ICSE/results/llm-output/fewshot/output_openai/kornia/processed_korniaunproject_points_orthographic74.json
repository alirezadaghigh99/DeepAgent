{
    "result": "To create the `unproject_points_orthographic` function, you need to combine the `points_in_camera` and `extension` tensors along the last dimension to form a new tensor with shape `(..., 3)`. This can be achieved using PyTorch's `torch.cat` function. Here's how you can implement this function:\n\n```python\nimport torch\n\ndef unproject_points_orthographic(points_in_camera: torch.Tensor, extension: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Unprojects points from the canonical z=1 plane into the camera frame.\n\n    Args:\n        points_in_camera (Tensor): Tensor of shape (..., 2) representing the points to unproject.\n        extension (Tensor): Tensor of shape (..., 1) representing the extension of the points.\n\n    Returns:\n        Tensor: Unprojected points with shape (..., 3).\n    \"\"\"\n    # Concatenate the points_in_camera and extension along the last dimension\n    unprojected_points = torch.cat((points_in_camera, extension), dim=-1)\n    return unprojected_points\n\n# Example usage\npoints = torch.tensor([1., 2.])\nextension = torch.tensor([3.])\nresult = unproject_points_orthographic(points, extension)\nprint(result)  # Output: tensor([1., 2., 3.])\n```\n\n### Explanation:\n- **Input Tensors**: The function takes two input tensors: `points_in_camera` with shape `(..., 2)` and `extension` with shape `(..., 1)`.\n- **Concatenation**: The `torch.cat` function is used to concatenate these tensors along the last dimension (`dim=-1`), resulting in a tensor with shape `(..., 3)`.\n- **Output**: The function returns the concatenated tensor, which represents the unprojected points in the camera frame.",
    "prompt": "Create a Python function called unproject_points_orthographic that unprojects points from the canonical z=1 plane into the camera frame. The function takes in two parameters: points_in_camera, a Tensor representing the points to unproject with shape (..., 2), and extension, a Tensor representing the extension of the points to unproject with shape (..., 1). The function returns a Tensor representing the unprojected points with shape (..., 3). \n\nFor example:\npoints = torch.tensor([1., 2.])\nextension = torch.tensor([3.])\nunproject_points_orthographic(points, extension) should return tensor([1., 2., 3.])",
    "function_name": "unproject_points_orthographic",
    "ground_truth": "kornia/geometry/camera/projection_orthographic.py",
    "test": "tests/geometry/camera/test_projections.py::TestProjectionOrthographic",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Image"
}