{
    "result": "Here's a Python function `rgb_to_rgba` that converts an image from RGB to RGBA:\n\n```python\nimport torch\n\ndef rgb_to_rgba(image: torch.Tensor, alpha_val: Union[float, torch.Tensor]) -> torch.Tensor:\n    \"\"\"\n    Convert an image from RGB to RGBA.\n\n    Args:\n        image (torch.Tensor): RGB Image to be converted to RGBA of shape :math:`(*, 3, H, W)`.\n        alpha_val (Union[float, torch.Tensor]): A float number for the alpha value or a tensor\n          of shape :math:`(*, 1, H, W)`.\n\n    Returns:\n        torch.Tensor: RGBA version of the image with shape :math:`(*, 4, H, W)`.\n\n    .. note:: The current functionality is NOT supported by Torchscript.\n\n    Example:\n        >>> input = torch.rand(2, 3, 4, 5)\n        >>> output = rgb_to_rgba(input, 1.) # 2x4x4x5\n    \"\"\"\n    if image.shape[-3] != 3:\n        raise ValueError(\"Input image must have 3 channels in the last dimension for RGB format.\")\n\n    if isinstance(alpha_val, float):\n        alpha_val = torch.full_like(image[:, :1, :, :], alpha_val)\n\n    if alpha_val.shape != image[:, :1, :, :].shape:\n        raise ValueError(\"Alpha value must be a float or a tensor of shape :math:`(*, 1, H, W)`.\")\n\n    rgba_image = torch.cat((image, alpha_val), dim=-3)\n    return rgba_image\n```\n\n### Explanation:\n- **Input Validation**: The function first checks if the input image has 3 channels, which is required for an RGB image.\n- **Alpha Value Handling**: If `alpha_val` is a float, it is converted to a tensor with the same shape as the input image's spatial dimensions. If it's already a tensor, its shape is validated.\n- **Concatenation**: The RGB image and the alpha channel are concatenated along the channel dimension to form an RGBA image.\n- **Output**: The function returns the RGBA image with the added alpha channel.",
    "prompt": "Generate a Python function called rgb_to_rgba that Convert an image from RGB to RGBA.\n\n    Args:\n        image: RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.\n        alpha_val (float, torch.Tensor): A float number for the alpha value or a tensor\n          of shape :math:`(*,1,H,W)`.\n\n    Returns:\n        RGBA version of the image with shape :math:`(*,4,H,W)`.\n\n    .. note:: The current functionality is NOT supported by Torchscript.\n\n    Example:\n        >>> input = torch.rand(2, 3, 4, 5)\n        >>> output = rgb_to_rgba(input, 1.) # 2x4x4x5",
    "function_name": "rgb_to_rgba",
    "ground_truth": "kornia/color/rgb.py",
    "test": "tests/color/test_rgb.py::TestRgbToRgba",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}