{
    "result": "Here's a Python function `rgb_to_grayscale` that converts an RGB image to its grayscale version, following the specifications you provided:\n\n```python\nimport torch\n\ndef rgb_to_grayscale(image: torch.Tensor, rgb_weights: torch.Tensor = None) -> torch.Tensor:\n    \"\"\"\n    Convert an RGB image to its grayscale version.\n\n    Args:\n        image (Tensor): Input image tensor with shape (*, 3, H, W).\n        rgb_weights (Tensor, optional): Weights for the RGB channels. The sum should be 1.\n\n    Returns:\n        Tensor: Grayscale image with shape (*, 1, H, W).\n\n    Raises:\n        ValueError: If the input tensor does not have the correct shape.\n        TypeError: If the input tensor has an unsupported data type.\n    \"\"\"\n    if image.ndim < 3 or image.shape[-3] != 3:\n        raise ValueError(\"Input image must have shape (*, 3, H, W).\")\n\n    if image.dtype == torch.uint8:\n        default_weights = torch.tensor([76, 150, 29], dtype=torch.float32) / 255\n    elif image.dtype.is_floating_point:\n        default_weights = torch.tensor([0.299, 0.587, 0.114], dtype=image.dtype)\n    else:\n        raise TypeError(\"Unsupported image data type. Supported types are uint8 and floating-point.\")\n\n    if rgb_weights is None:\n        rgb_weights = default_weights\n    else:\n        if rgb_weights.shape != (3,):\n            raise ValueError(\"rgb_weights must be a tensor of shape (3,).\")\n        if not torch.isclose(rgb_weights.sum(), torch.tensor(1.0, dtype=rgb_weights.dtype)):\n            raise ValueError(\"The sum of rgb_weights must be 1.\")\n\n    # Ensure the weights are in the same device and dtype as the image\n    rgb_weights = rgb_weights.to(image.device, dtype=image.dtype)\n\n    # Convert to grayscale\n    grayscale = (image * rgb_weights.view(1, 3, 1, 1)).sum(dim=-3, keepdim=True)\n\n    return grayscale\n```\n\n### Key Points:\n- **Input Validation**: The function checks if the input image has the correct shape and raises a `ValueError` if not. It also checks the data type of the image and raises a `TypeError` for unsupported types.\n- **Default Weights**: The function uses different default weights based on the data type of the image (`uint8` or floating-point).\n- **Grayscale Conversion**: The function multiplies the RGB channels by the weights and sums them to get the grayscale image.\n- **Output Shape**: The grayscale image is returned with shape `(*, 1, H, W)`.",
    "prompt": "Create a Python function `rgb_to_grayscale` that converts an RGB image to its grayscale version. The function should:\n\n- Accept an `image` tensor with shape `(*, 3, H, W)` representing the RGB image.\n- Optionally accept `rgb_weights`, a tensor containing weights for the RGB channels. The sum of these weights should be 1.\n- If `rgb_weights` is not provided, default weights based on the image data type should be used: `[76, 150, 29]` for `uint8` images and `[0.299, 0.587, 0.114]` for floating-point images.\n- Validate that the input tensor has the correct shape and raise a `ValueError` if not.\n- Convert the RGB image to grayscale using the provided or default weights.\n- Return the grayscale image with shape `(*, 1, H, W)`.\n\nEnsure that the function handles different image data types correctly and raises a `TypeError` for unsupported types.",
    "function_name": "rgb_to_grayscale",
    "ground_truth": "kornia/color/gray.py",
    "test": "tests/color/test_gray.py::TestRgbToGrayscale",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}