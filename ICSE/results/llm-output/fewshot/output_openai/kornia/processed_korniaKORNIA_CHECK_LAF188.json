{
    "result": "To create a function called `KORNIA_CHECK_LAF` that checks whether a Local Affine Frame (LAF) tensor has a valid shape, you can follow the structure of the examples provided. Here's how you can implement this function:\n\n```python\nimport torch\n\ndef KORNIA_CHECK_LAF(laf: torch.Tensor, raises: bool = True) -> bool:\n    \"\"\"\n    Check if the input tensor 'laf' has a valid shape for a Local Affine Frame (LAF).\n\n    Args:\n        laf (Tensor): The input tensor expected to have shape (B, N, 2, 3).\n        raises (bool): If True, raise an Exception if the shape is invalid.\n\n    Returns:\n        bool: True if the shape is valid, otherwise False.\n\n    Raises:\n        ValueError: If 'raises' is True and the shape of 'laf' is invalid.\n    \"\"\"\n    if laf.ndim != 4 or laf.shape[2:] != (2, 3):\n        if raises:\n            raise ValueError(f\"Invalid LAF shape: {laf.shape}. Expected shape (B, N, 2, 3).\")\n        return False\n    return True\n\n# Example usage\nlafs = torch.rand(2, 10, 2, 3)\nprint(KORNIA_CHECK_LAF(lafs))  # Should return True\n```\n\n### Explanation:\n- **Function Definition**: The function `KORNIA_CHECK_LAF` takes two parameters: `laf`, which is a tensor, and `raises`, a boolean that determines whether an exception should be raised if the shape is invalid.\n- **Shape Check**: The function checks if the tensor `laf` has four dimensions and if the last two dimensions are `(2, 3)`.\n- **Exception Handling**: If the shape is invalid and `raises` is `True`, a `ValueError` is raised with a descriptive message. If `raises` is `False`, the function simply returns `False`.\n- **Return Value**: The function returns `True` if the shape is valid, otherwise `False`.\n\nThis function can be used to ensure that tensors representing Local Affine Frames have the correct shape before further processing.",
    "prompt": "Generate a Python function called KORNIA_CHECK_LAF that checks whether a Local Affine Frame (laf) tensor has a valid shape. The function takes in a tensor called laf and a boolean raises indicating whether an exception should be raised upon failure. If the input laf does not have a shape (B,N,2,3) and raises is True, an Exception will be raised.\n\nExample:\nlafs = torch.rand(2, 10, 2, 3)\nKORNIA_CHECK_LAF(lafs) should return True.",
    "function_name": "KORNIA_CHECK_LAF",
    "ground_truth": "kornia/core/check.py",
    "test": "tests/core/test_check.py::TestCheckLaf",
    "class": "",
    "stage": "Model Construction",
    "task": "Detection",
    "data": "Image"
}