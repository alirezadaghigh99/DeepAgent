{
    "result": "Certainly! Below is a Python function called `scale_intrinsics` that scales the focal length and center of projection in a camera matrix by a given scale factor. The function handles both float and tensor scale factors and returns the scaled camera matrix with the same shape as the input.\n\n```python\nimport torch\n\ndef scale_intrinsics(camera_matrix: torch.Tensor, scale_factor: Union[float, torch.Tensor]) -> torch.Tensor:\n    \"\"\"\n    Scales the focal length and center of projection in the camera matrix by the given scale factor.\n\n    Args:\n        camera_matrix (torch.Tensor): A tensor of shape (B, 3, 3) containing intrinsic parameters.\n        scale_factor (Union[float, torch.Tensor]): A scale factor to apply to the focal length and center of projection.\n\n    Returns:\n        torch.Tensor: The scaled camera matrix with the same shape as the input (B, 3, 3).\n    \"\"\"\n    if not isinstance(camera_matrix, torch.Tensor):\n        raise TypeError(\"camera_matrix must be a torch.Tensor\")\n    \n    if not isinstance(scale_factor, (float, torch.Tensor)):\n        raise TypeError(\"scale_factor must be a float or torch.Tensor\")\n    \n    if camera_matrix.shape[-2:] != (3, 3):\n        raise ValueError(\"camera_matrix must have shape (B, 3, 3)\")\n    \n    # Ensure scale_factor is a tensor for consistent operations\n    if isinstance(scale_factor, float):\n        scale_factor = torch.tensor(scale_factor, dtype=camera_matrix.dtype, device=camera_matrix.device)\n    \n    # Scale the focal length and center of projection\n    scaled_camera_matrix = camera_matrix.clone()\n    scaled_camera_matrix[:, 0, 0] *= scale_factor  # Scale fx\n    scaled_camera_matrix[:, 1, 1] *= scale_factor  # Scale fy\n    scaled_camera_matrix[:, 0, 2] *= scale_factor  # Scale cx\n    scaled_camera_matrix[:, 1, 2] *= scale_factor  # Scale cy\n\n    return scaled_camera_matrix\n```\n\n### Explanation:\n- **Input Validation**: The function checks if the `camera_matrix` is a `torch.Tensor` and if the `scale_factor` is either a `float` or `torch.Tensor`. It also ensures that the `camera_matrix` has the correct shape `(B, 3, 3)`.\n- **Scale Factor Handling**: If the `scale_factor` is a float, it is converted to a `torch.Tensor` to ensure consistent operations.\n- **Scaling**: The function scales the focal lengths (`fx`, `fy`) and the center of projection (`cx`, `cy`) by the `scale_factor`.\n- **Output**: The function returns the scaled camera matrix with the same shape as the input.",
    "prompt": "Create a Python function called scale_intrinsics that takes in a camera matrix (with shape (B, 3, 3)) containing intrinsic parameters and a scale factor (either a float or a tensor) as input. The function scales the focal length and center of projection in the camera matrix by the given scale factor. \n\nThe function then returns the scaled camera matrix with the same shape as the input (B, 3, 3).",
    "function_name": "scale_intrinsics",
    "ground_truth": "kornia/geometry/epipolar/projection.py",
    "test": "tests/geometry/epipolar/test_projection.py::TestScaleIntrinsics",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}