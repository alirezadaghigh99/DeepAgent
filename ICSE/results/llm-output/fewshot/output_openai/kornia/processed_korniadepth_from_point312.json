{
    "result": "To create a function `depth_from_point` that returns the depth of a point transformed by a rigid transform, you can follow the structure and style of the examples provided. Here's how you can implement this function in Python:\n\n```python\nimport torch\n\ndef depth_from_point(R: torch.Tensor, t: torch.Tensor, X: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Return the depth of a point transformed by a rigid transform.\n\n    Args:\n        R (Tensor): The rotation matrix with shape (*, 3, 3).\n        t (Tensor): The translation vector with shape (*, 3, 1).\n        X (Tensor): The 3D points with shape (*, 3).\n\n    Returns:\n        Tensor: The depth value per point with shape (*, 1).\n    \"\"\"\n    # Ensure the input tensors have the correct shapes\n    if R.shape[-2:] != (3, 3):\n        raise ValueError(\"Rotation matrix R must have shape (*, 3, 3)\")\n    if t.shape[-2:] != (3, 1):\n        raise ValueError(\"Translation vector t must have shape (*, 3, 1)\")\n    if X.shape[-1] != 3:\n        raise ValueError(\"3D points X must have shape (*, 3)\")\n\n    # Apply the rigid transformation\n    transformed_points = torch.matmul(R, X.unsqueeze(-1)) + t\n\n    # Extract the depth (z-coordinate) from the transformed points\n    depth = transformed_points[..., 2, :]\n\n    return depth\n```\n\n### Explanation:\n- **Inputs**:\n  - `R`: A rotation matrix with shape `(*, 3, 3)`, where `*` represents any number of leading dimensions.\n  - `t`: A translation vector with shape `(*, 3, 1)`.\n  - `X`: A set of 3D points with shape `(*, 3)`.\n\n- **Output**:\n  - The function returns the depth (z-coordinate) of each point after applying the rigid transformation, with shape `(*, 1)`.\n\n- **Implementation Details**:\n  - The function first checks that the input tensors have the correct shapes.\n  - It then applies the rigid transformation to the points by multiplying the rotation matrix `R` with the points `X` and adding the translation vector `t`.\n  - Finally, it extracts the z-coordinate (depth) from the transformed points and returns it.",
    "prompt": "Write a python function depth_from_point that Return the depth of a point transformed by a rigid transform.\n\n    Args:\n       R: The rotation matrix with shape :math:`(*, 3, 3)`.\n       t: The translation vector with shape :math:`(*, 3, 1)`.\n       X: The 3d points with shape :math:`(*, 3)`.\n\n    Returns:\n       The depth value per point with shape :math:`(*, 1)`.",
    "function_name": "depth_from_point",
    "ground_truth": "kornia/geometry/epipolar/projection.py#L151",
    "test": "tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution",
    "class": "",
    "stage": "Inference",
    "task": "Prediction",
    "data": "Image"
}