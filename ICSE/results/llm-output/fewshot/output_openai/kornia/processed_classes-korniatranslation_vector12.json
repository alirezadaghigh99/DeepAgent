{
    "result": "To generate the `translation_vector` function for the `PinholeCamera` class, you need to extract the translation component from the extrinsics matrix. The extrinsics matrix typically has the shape `(B, 4, 4)` for a batch of `B` cameras, where the last column represents the translation vector in homogeneous coordinates. Here's how you can implement the `translation_vector` function:\n\n```python\nimport torch\nfrom torch import Tensor\n\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n\n    def translation_vector(self) -> Tensor:\n        \"\"\"\n        Returns the translation vector from the extrinsics matrix.\n\n        Returns:\n            Tensor: A tensor of shape (B, 3, 1) representing the translation vector.\n        \"\"\"\n        # Extract the translation vector from the extrinsics matrix\n        # The translation vector is the last column of the extrinsics matrix, excluding the last row\n        translation = self._extrinsics[:, :3, 3].unsqueeze(-1)\n        return translation\n```\n\n### Explanation:\n- The extrinsics matrix is assumed to have the shape `(B, 4, 4)`, where `B` is the batch size.\n- The translation vector is located in the last column of the extrinsics matrix, specifically in the first three rows.\n- We use slicing `self._extrinsics[:, :3, 3]` to extract the translation components for all cameras in the batch.\n- The `unsqueeze(-1)` operation is used to add an extra dimension, resulting in a tensor of shape `(B, 3, 1)`.",
    "prompt": "Generate the `translation_vector` function for the following class to return the translation vector from the extrinsics matrix. The function should take `self` as input and return a tensor with shape `(B, 3, 1)`.\n\n```python\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n```",
    "function_name": "translation_vector",
    "ground_truth": "kornia/geometry/camera/pinhole.py",
    "test": "tests/geometry/camera/test_pinhole.py",
    "class": "PinholeCamera",
    "stage": "Image",
    "task": "",
    "data": "Inference"
}