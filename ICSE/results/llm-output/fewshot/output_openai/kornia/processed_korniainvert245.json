{
    "result": "To create the `invert` function as described, you can follow these steps. The function will take an input image tensor and an optional maximum value tensor, and it will return the inverted values of the input image tensor. The function will also include checks to ensure that the inputs are tensors. Here's how you can implement it:\n\n```python\nimport torch\n\ndef invert(image: torch.Tensor, max_value: Optional[torch.Tensor] = None) -> torch.Tensor:\n    \"\"\"\n    Inverts the values of the input image tensor by its maximum value.\n\n    Args:\n        image (torch.Tensor): The input image tensor with arbitrary shape.\n        max_value (torch.Tensor, optional): The maximum value tensor. It should have a shape\n                                            that matches the input tensor shape or can work with broadcasting.\n\n    Returns:\n        torch.Tensor: A tensor with the same shape as the input image tensor, containing the inverted values.\n\n    Raises:\n        AssertionError: If the input image or maximum value is not a tensor.\n    \"\"\"\n    # Ensure the inputs are tensors\n    assert isinstance(image, torch.Tensor), \"The input image must be a tensor.\"\n    if max_value is not None:\n        assert isinstance(max_value, torch.Tensor), \"The maximum value must be a tensor.\"\n\n    # If max_value is not provided, use the maximum value of the image tensor\n    if max_value is None:\n        max_value = image.max()\n\n    # Invert the image values\n    inverted_image = max_value - image\n\n    return inverted_image\n\n# Example usage:\n# img = torch.rand(1, 2, 4, 4)\n# print(invert(img).shape)  # torch.Size([1, 2, 4, 4])\n\n# img = 255. * torch.rand(1, 2, 3, 4, 4)\n# print(invert(img, torch.as_tensor(255.)).shape)  # torch.Size([1, 2, 3, 4, 4])\n\n# img = torch.rand(1, 3, 4, 4)\n# print(invert(img, torch.as_tensor([[[[1.]]]])).shape)  # torch.Size([1, 3, 4, 4])\n```\n\nThis function checks if the inputs are tensors and uses broadcasting to handle the maximum value tensor if provided. If no maximum value is given, it defaults to the maximum value of the input image tensor. The function then calculates the inverted image by subtracting the image values from the maximum value.",
    "prompt": "Generate a Python function called invert that takes in an input image tensor and an optional maximum value tensor, and returns the inverted values of the input image tensor by its maximum value. The input image tensor should have an arbitrary shape, while the maximum value tensor should have a shape that matches the input tensor shape or can work with broadcasting. The function should raise an AssertionError if the input image or maximum value is not a tensor. The output should be a tensor with the same shape as the input image tensor. >>> img = torch.rand(1, 2, 4, 4)\n        >>> invert(img).shape\n        torch.Size([1, 2, 4, 4])\n\n        >>> img = 255. * torch.rand(1, 2, 3, 4, 4)\n        >>> invert(img, torch.as_tensor(255.)).shape\n        torch.Size([1, 2, 3, 4, 4])\n\n        >>> img = torch.rand(1, 3, 4, 4)\n        >>> invert(img, torch.as_tensor([[[[1.]]]])).shape\n        torch.Size([1, 3, 4, 4])",
    "function_name": "invert",
    "ground_truth": "kornia/enhance/adjust.py",
    "test": "tests/geometry/epipolar/test_fundamental.py::TestFindFundamental",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}