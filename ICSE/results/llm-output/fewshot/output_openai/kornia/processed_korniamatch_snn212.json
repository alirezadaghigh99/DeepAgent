{
    "result": "To create the `match_snn` function as described, we need to implement a nearest neighbor search that checks the ratio of the distances between the first and second nearest neighbors. Here's how you can implement this function in Python using PyTorch:\n\n```python\nimport torch\n\ndef match_snn(desc1: torch.Tensor, desc2: torch.Tensor, th: float = 0.8, dm: torch.Tensor = None):\n    \"\"\"\n    Matches descriptors from desc1 to desc2 using the SNN ratio test.\n\n    Args:\n        desc1 (torch.Tensor): Tensor of shape (B1, D) representing the first batch of descriptors.\n        desc2 (torch.Tensor): Tensor of shape (B2, D) representing the second batch of descriptors.\n        th (float): Threshold for the SNN ratio test. Defaults to 0.8.\n        dm (torch.Tensor, optional): Precomputed distance matrix of shape (B1, B2). Defaults to None.\n\n    Returns:\n        Tuple[torch.Tensor, torch.Tensor]: \n            - Descriptor distances of matching descriptors, shape (B3, 1).\n            - Long tensor indexes of matching descriptors in desc1 and desc2, shape (B3, 2).\n    \"\"\"\n    if desc2.size(0) < 2:\n        return torch.empty((0, 1)), torch.empty((0, 2), dtype=torch.long)\n\n    if dm is None:\n        # Compute the distance matrix if not provided\n        dm = torch.cdist(desc1, desc2)\n\n    # Sort distances to find the nearest and second nearest neighbors\n    sorted_distances, sorted_indices = torch.sort(dm, dim=1)\n\n    # Get the nearest and second nearest distances\n    nearest_distances = sorted_distances[:, 0]\n    second_nearest_distances = sorted_distances[:, 1]\n\n    # Apply the SNN ratio test\n    ratio = nearest_distances / second_nearest_distances\n    valid_matches = ratio <= th\n\n    # Get the indices of valid matches\n    desc1_indices = torch.arange(desc1.size(0))[valid_matches]\n    desc2_indices = sorted_indices[valid_matches, 0]\n\n    # Get the distances of valid matches\n    valid_distances = nearest_distances[valid_matches].unsqueeze(1)\n\n    # Combine indices into a single tensor\n    match_indices = torch.stack((desc1_indices, desc2_indices), dim=1)\n\n    return valid_distances, match_indices\n```\n\n### Explanation:\n\n1. **Input Validation**: The function first checks if `desc2` has fewer than two descriptors. If so, it returns empty results because the ratio test requires at least two neighbors.\n\n2. **Distance Matrix Calculation**: If a precomputed distance matrix `dm` is not provided, it calculates the pairwise Euclidean distances between `desc1` and `desc2` using `torch.cdist`.\n\n3. **Nearest Neighbor Search**: It sorts the distances to find the nearest and second nearest neighbors for each descriptor in `desc1`.\n\n4. **Ratio Test**: It computes the ratio of the nearest to the second nearest distance and checks if it is less than or equal to the threshold `th`.\n\n5. **Result Compilation**: It collects the indices and distances of descriptors that pass the ratio test and returns them.\n\nThis function efficiently finds matches between two sets of descriptors using the SNN ratio test, which is commonly used in feature matching tasks in computer vision.",
    "prompt": "Create a Python function `match_snn` that takes in two tensors, `desc1` and `desc2`, representing batches of descriptors, a threshold `th` = 0.8, and an optional precomputed distance matrix `dm`. The function returns the distances and indices of descriptors from `desc1` that have nearest neighbors in `desc2`, satisfying the condition that the ratio of the first to the second nearest neighbor distance is less than or equal to `th`. If `desc2` has fewer than two descriptors, or if no matches meet the ratio threshold, the function returns an empty result. It checks the validity of the input shapes and then identifies the matching descriptors and their corresponding distances.Return:\n        - Descriptor distance of matching descriptors, shape of :math:`(B3, 1)`.\n        - Long tensor indexes of matching descriptors in desc1 and desc2. Shape: :math:`(B3, 2)`,\n          where 0 <= B3 <= B1.",
    "function_name": "match_snn",
    "ground_truth": "kornia/feature/matching.py#L48",
    "test": "tests/feature/test_matching.py::TestMatchSNN",
    "class": "",
    "stage": "Evaluating&Metrics",
    "task": "Detection",
    "data": "Image"
}