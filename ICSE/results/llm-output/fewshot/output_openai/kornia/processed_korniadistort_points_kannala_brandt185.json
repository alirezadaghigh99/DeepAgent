{
    "result": "To implement the `distort_points_kannala_brandt` function using the Kannala-Brandt distortion model, we need to apply the distortion model to the input points. The Kannala-Brandt model is a fisheye lens model that distorts points based on a set of parameters. Here's how you can implement this function in Python using PyTorch:\n\n```python\nimport torch\n\ndef distort_points_kannala_brandt(projected_points_in_camera_z1_plane: torch.Tensor, params: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Distorts points from the canonical z=1 plane into the camera frame using the Kannala-Brandt model.\n\n    Args:\n        projected_points_in_camera_z1_plane (Tensor): Points to distort with shape (..., 2).\n        params (Tensor): Parameters of the Kannala-Brandt distortion model with shape (..., 8).\n\n    Returns:\n        Tensor: Distorted points with shape (..., 2).\n    \"\"\"\n    # Extract parameters\n    fx, fy, cx, cy, k1, k2, k3, k4 = params\n\n    # Extract x and y coordinates\n    x, y = projected_points_in_camera_z1_plane[..., 0], projected_points_in_camera_z1_plane[..., 1]\n\n    # Compute the radial distance from the center\n    r = torch.sqrt(x**2 + y**2)\n\n    # Compute the distortion factor using the Kannala-Brandt model\n    theta = torch.atan(r)\n    theta_d = theta + k1 * theta**3 + k2 * theta**5 + k3 * theta**7 + k4 * theta**9\n\n    # Avoid division by zero\n    r = torch.where(r == 0, torch.tensor(1.0, dtype=r.dtype, device=r.device), r)\n\n    # Compute the distorted coordinates\n    x_distorted = (theta_d / r) * x\n    y_distorted = (theta_d / r) * y\n\n    # Apply intrinsic parameters to get the final distorted points\n    x_final = fx * x_distorted + cx\n    y_final = fy * y_distorted + cy\n\n    return torch.stack((x_final, y_final), dim=-1)\n\n# Example usage\npoints = torch.tensor([319.5, 239.5])  # center of a 640x480 image\nparams = torch.tensor([1000.0, 1000.0, 320.0, 280.0, 0.1, 0.01, 0.001, 0.0001])\ndistorted_points = distort_points_kannala_brandt(points, params)\nprint(distorted_points)\n```\n\n### Explanation:\n- **Parameters**: The function takes two inputs: `projected_points_in_camera_z1_plane` and `params`. The `params` tensor contains the intrinsic camera parameters (`fx`, `fy`, `cx`, `cy`) and the distortion coefficients (`k1`, `k2`, `k3`, `k4`).\n- **Radial Distance**: The radial distance `r` is computed from the x and y coordinates of the input points.\n- **Distortion Model**: The distortion is applied using the Kannala-Brandt model, which involves computing `theta` and `theta_d`.\n- **Avoid Division by Zero**: A check is added to avoid division by zero when `r` is zero.\n- **Final Distorted Points**: The distorted x and y coordinates are computed and adjusted using the intrinsic parameters to get the final distorted points.\n\nThis implementation should give you the distorted points as per the Kannala-Brandt model.",
    "prompt": "Generate a Python function called distort_points_kannala_brandt that distorts one or more points from the canonical z=1 plane into the camera frame using the Kannala-Brandt model. The function takes two inputs: projected_points_in_camera_z1_plane, a Tensor representing the points to distort with shape (..., 2), and params, a Tensor representing the parameters of the Kannala-Brandt distortion model with shape (..., 8). The function returns a Tensor representing the distorted points with shape (..., 2). \n\nFor example:\n```python\npoints = torch.tensor([319.5, 239.5])  # center of a 640x480 image\nparams = torch.tensor([1000.0, 1000.0, 320.0, 280.0, 0.1, 0.01, 0.001, 0.0001])\ndistort_points_kannala_brandt(points, params)\n```\nOutput:\n```\ntensor([1982.6832, 1526.3619])\n```",
    "function_name": "distort_points_kannala_brandt",
    "ground_truth": "kornia/geometry/camera/distortion_kannala_brandt.py",
    "test": "tests/geometry/camera/test_distortion.py::TestDistortionKannalaBrandt",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}