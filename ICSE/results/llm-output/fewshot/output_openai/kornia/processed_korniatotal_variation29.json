{
    "result": "Here's a Python function called `total_variation` that computes the Total Variation of an input image tensor. This function includes error checking for input types and reduction options, and it calculates the Total Variation by taking the absolute differences of neighboring pixels along the height and width dimensions:\n\n```python\nimport torch\n\ndef total_variation(image: torch.Tensor, reduction: str = 'sum') -> torch.Tensor:\n    \"\"\"\n    Compute the Total Variation of an input image tensor.\n\n    Args:\n        image (Tensor): Input image tensor with shape (*, H, W).\n        reduction (str): Specifies the reduction to apply to the output: 'sum' or 'mean'.\n                         Defaults to 'sum'.\n\n    Returns:\n        Tensor: A tensor with shape (*) representing the Total Variation of the input image.\n    \"\"\"\n    if not isinstance(image, torch.Tensor):\n        raise TypeError(\"Input image must be a torch.Tensor.\")\n    \n    if reduction not in ['sum', 'mean']:\n        raise ValueError(\"Reduction must be either 'sum' or 'mean'.\")\n\n    # Calculate differences along the height and width dimensions\n    diff_h = torch.abs(image[..., 1:, :] - image[..., :-1, :])\n    diff_w = torch.abs(image[..., :, 1:] - image[..., :, :-1])\n\n    # Sum the differences\n    total_var = diff_h.sum(dim=(-2, -1)) + diff_w.sum(dim=(-2, -1))\n\n    if reduction == 'mean':\n        total_var = total_var / (image.size(-2) * image.size(-1))\n\n    return total_var\n```\n\n### Explanation:\n- **Input Validation**: The function checks if the input is a `torch.Tensor` and if the `reduction` parameter is either `'sum'` or `'mean'`.\n- **Total Variation Calculation**: The function calculates the absolute differences between neighboring pixels along the height and width dimensions.\n- **Reduction**: Depending on the `reduction` parameter, the function either sums or averages the total variation values.\n- **Output**: The function returns a tensor with the same batch dimensions as the input, representing the total variation for each image in the batch.",
    "prompt": "Generate a Python function called total_variation that computes the Total Variation of an input image tensor. The function takes in an image tensor with shape (*, H, W) and an optional reduction parameter that specifies whether to return the sum or mean of the output. The function returns a tensor with shape (*). The Total Variation is calculated by taking the absolute differences of neighboring pixels in the image tensor along the height and width dimensions. The output is then either summed or averaged based on the reduction parameter. The function includes error checking for input types and reduction options.",
    "function_name": "total_variation",
    "ground_truth": "kornia/losses/total_variation.py",
    "test": "tests/losses/test_total_variation.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Segmentation",
    "data": "Image"
}