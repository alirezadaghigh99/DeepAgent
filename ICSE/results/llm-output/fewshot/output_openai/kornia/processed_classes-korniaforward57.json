{
    "result": "To implement the `forward` method for the `AdjustHue` class, you need to adjust the hue of an RGB image tensor. The hue adjustment can be achieved by converting the RGB image to the HSV (Hue, Saturation, Value) color space, modifying the hue channel, and then converting it back to RGB. Here's how you can implement this:\n\n```python\nimport torch\nfrom torch import Tensor\nfrom torchvision.transforms.functional import rgb_to_hsv, hsv_to_rgb\n\nclass AdjustHue(Module):\n    def __init__(self, hue_factor: float):\n        super().__init__()\n        self.hue_factor = hue_factor\n\n    def forward(self, input: Tensor) -> Tensor:\n        # Ensure the input is a float tensor with values in [0, 1]\n        if not input.is_floating_point():\n            raise TypeError(\"Input tensor should be a float tensor with values in [0, 1]\")\n        \n        # Convert RGB to HSV\n        hsv_image = rgb_to_hsv(input)\n        \n        # Adjust the hue channel\n        h, s, v = hsv_image.unbind(dim=-3)\n        h = (h + self.hue_factor) % 1.0  # Ensure hue stays within [0, 1]\n        \n        # Recombine the channels\n        adjusted_hsv = torch.stack((h, s, v), dim=-3)\n        \n        # Convert back to RGB\n        adjusted_rgb = hsv_to_rgb(adjusted_hsv)\n        \n        return adjusted_rgb\n```\n\n### Explanation:\n1. **Input Validation**: The method checks if the input tensor is a floating-point tensor with values in the range [0, 1]. This is important because the hue adjustment calculations assume this range.\n\n2. **RGB to HSV Conversion**: The input RGB image is converted to the HSV color space using `rgb_to_hsv`. This allows for easy manipulation of the hue channel.\n\n3. **Hue Adjustment**: The hue channel is adjusted by adding the `hue_factor`. The result is wrapped using modulo 1 to ensure it remains within the valid range [0, 1].\n\n4. **Recombination and Conversion**: The adjusted HSV image is recombined and converted back to RGB using `hsv_to_rgb`.\n\nThis implementation assumes that the `hue_factor` is a float value that represents the amount by which to adjust the hue, where positive values shift the hue forward and negative values shift it backward.",
    "prompt": "**Task:** Write the `forward` method for the `AdjustHue` class. This method should adjust the hue of the input image tensor by a specified hue factor.\n**Class Context:**\n```python\nclass AdjustHue(Module):\n    def forward(self, input: Tensor) -> Tensor:\n        # Implement this function\n```\n- The method should apply the hue adjustment to the input tensor using the provided `hue_factor`.\n- The input tensor is expected to be an RGB image with pixel values in the range [0, 1] and of shape `(*, 3, H, W)`\nThis prompt instructs the user to implement the `forward` method for adjusting the hue of an image tensor using the provided `hue_factor`.",
    "function_name": "forward",
    "ground_truth": "kornia/enhance/adjust.py",
    "test": "tests/enhance/test_adjust.py::TestAdjustHue",
    "class": "AdjustHue",
    "stage": "Image",
    "task": "",
    "data": "Training"
}