{
    "result": "Certainly! Below is a Python function called `spatial_gradient` that computes the first-order image derivative in both x and y directions using a Sobel operator or simple finite differences. The function includes parameters for the mode, order, and normalization, and it returns the derivatives of the input feature map. I've also included examples demonstrating its usage.\n\n```python\nimport torch\nimport torch.nn.functional as F\n\ndef spatial_gradient(image: torch.Tensor, mode: str = 'sobel', order: int = 1, normalized: bool = True) -> torch.Tensor:\n    \"\"\"\n    Computes the first-order image derivative in both x and y directions using a Sobel operator or finite differences.\n\n    Args:\n        image (Tensor): Input image tensor with shape (B, C, H, W).\n        mode (str): Derivatives modality, either 'sobel' or 'diff'. Defaults to 'sobel'.\n        order (int): Order of the derivatives. Currently, only first-order derivatives are supported. Defaults to 1.\n        normalized (bool): Whether to normalize the output. Defaults to True.\n\n    Returns:\n        Tensor: Derivatives of the input feature map with shape (B, C, 2, H, W).\n    \"\"\"\n    if order != 1:\n        raise ValueError(\"Currently, only first-order derivatives are supported.\")\n\n    if mode not in ['sobel', 'diff']:\n        raise ValueError(\"Mode must be either 'sobel' or 'diff'.\")\n\n    B, C, H, W = image.shape\n\n    if mode == 'sobel':\n        # Sobel kernels for x and y directions\n        sobel_x = torch.tensor([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)\n        sobel_y = torch.tensor([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 3)\n\n        grad_x = F.conv2d(image, sobel_x, padding=1, groups=C)\n        grad_y = F.conv2d(image, sobel_y, padding=1, groups=C)\n\n    elif mode == 'diff':\n        # Finite difference kernels for x and y directions\n        diff_x = torch.tensor([[-1, 0, 1]], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)\n        diff_y = torch.tensor([[-1], [0], [1]], dtype=image.dtype, device=image.device).view(1, 1, 3, 1)\n\n        grad_x = F.conv2d(image, diff_x, padding=(0, 1), groups=C)\n        grad_y = F.conv2d(image, diff_y, padding=(1, 0), groups=C)\n\n    if normalized:\n        grad_x = grad_x / 8.0\n        grad_y = grad_y / 8.0\n\n    # Stack gradients along a new dimension\n    gradients = torch.stack((grad_x, grad_y), dim=2)\n\n    return gradients\n\n# Example usage\nif __name__ == \"__main__\":\n    # Create a random image tensor with shape (B, C, H, W)\n    image = torch.rand(1, 1, 5, 5)\n\n    # Compute spatial gradients using Sobel operator\n    sobel_gradients = spatial_gradient(image, mode='sobel')\n    print(\"Sobel Gradients:\\n\", sobel_gradients)\n\n    # Compute spatial gradients using finite differences\n    diff_gradients = spatial_gradient(image, mode='diff')\n    print(\"Finite Difference Gradients:\\n\", diff_gradients)\n```\n\n### Explanation:\n- **Input Parameters:**\n  - `image`: The input image tensor with shape (B, C, H, W).\n  - `mode`: Specifies the method for computing derivatives ('sobel' or 'diff').\n  - `order`: The order of derivatives (currently only supports first-order).\n  - `normalized`: Determines whether the output is normalized.\n\n- **Output:**\n  - Returns a tensor with the derivatives of the input feature map, having shape (B, C, 2, H, W).\n\n- **Examples:**\n  - The example usage demonstrates how to compute spatial gradients using both the Sobel operator and finite differences.",
    "prompt": "Generate a Python function called spatial_gradient that computes the first-order image derivative in both x and y using a Sobel operator. The function takes in an input image tensor with shape (B, C, H, W), a mode parameter specifying the derivatives modality (either 'sobel' or 'diff'), an order parameter indicating the order of the derivatives, and a normalized parameter determining whether the output is normalized. The function returns the derivatives of the input feature map with shape (B, C, 2, H, W). The function also includes examples demonstrating its usage.",
    "function_name": "spatial_gradient",
    "ground_truth": "kornia/filters/sobel.py",
    "test": "tests/filters/test_sobel.py::TestSpatialGradient",
    "class": "",
    "stage": "Training",
    "task": "",
    "data": "Image"
}