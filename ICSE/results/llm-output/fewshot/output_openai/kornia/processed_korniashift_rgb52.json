{
    "result": "To create the `shift_rgb` function as described, we need to ensure that the function checks for valid input, applies the specified shifts to each channel, and clamps the output values between 0 and 1. Here's how you can implement this function:\n\n```python\nimport torch\n\ndef shift_rgb(image: torch.Tensor, r_shift: torch.Tensor, g_shift: torch.Tensor, b_shift: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Shifts the RGB channels of an image tensor.\n\n    Args:\n        image (torch.Tensor): Input image tensor of shape (N, C, H, W) where C is 3.\n        r_shift (torch.Tensor): Shift values for the red channel of shape (N).\n        g_shift (torch.Tensor): Shift values for the green channel of shape (N).\n        b_shift (torch.Tensor): Shift values for the blue channel of shape (N).\n\n    Returns:\n        torch.Tensor: Modified image tensor with the same shape as the input.\n    \"\"\"\n    # Check if the input image is a valid tensor and a color image\n    if not isinstance(image, torch.Tensor):\n        raise TypeError(\"Image must be a torch.Tensor.\")\n    if image.dim() != 4 or image.size(1) != 3:\n        raise ValueError(\"Image must have shape (N, 3, H, W) for RGB images.\")\n\n    # Check if the shift tensors are valid\n    if not (isinstance(r_shift, torch.Tensor) and isinstance(g_shift, torch.Tensor) and isinstance(b_shift, torch.Tensor)):\n        raise TypeError(\"Shift values must be torch.Tensors.\")\n    if r_shift.size(0) != image.size(0) or g_shift.size(0) != image.size(0) or b_shift.size(0) != image.size(0):\n        raise ValueError(\"Shift tensors must have the same batch size as the image.\")\n\n    # Apply the shifts to each channel\n    shifted_image = image.clone()\n    shifted_image[:, 0, :, :] += r_shift.view(-1, 1, 1)\n    shifted_image[:, 1, :, :] += g_shift.view(-1, 1, 1)\n    shifted_image[:, 2, :, :] += b_shift.view(-1, 1, 1)\n\n    # Clamp the output values between 0 and 1\n    shifted_image = torch.clamp(shifted_image, 0, 1)\n\n    return shifted_image\n\n# Example usage\nimage = torch.tensor([[[[0.2000, 0.0000]],\n                      [[0.3000, 0.5000]],\n                      [[0.4000, 0.7000]]],\n                     [[[0.2000, 0.7000]],\n                      [[0.0000, 0.8000]],\n                      [[0.2000, 0.3000]]]])\n\nr_shift = torch.tensor([0.1000, 0.1000])\ng_shift = torch.tensor([0.3000, 0.3000])\nb_shift = torch.tensor([-0.3000, -0.3000])\n\nshifted_image = shift_rgb(image, r_shift, g_shift, b_shift)\nprint(shifted_image)\n```\n\n### Explanation:\n- **Input Validation**: The function first checks if the input image is a tensor and if it has the correct shape for an RGB image. It also checks that the shift tensors are valid and have the correct batch size.\n- **Channel Shifting**: The function applies the specified shifts to each channel of the image. The shifts are applied by adding the shift values to the corresponding channels.\n- **Clamping**: After applying the shifts, the function clamps the values of the image to ensure they remain between 0 and 1.\n- **Return**: The function returns the modified image tensor.",
    "prompt": "Generate a Python function named shift_rgb that shifts the RGB channels of an image. The function takes the following inputs: an image tensor of shape (N, C, H, W), where C is 3 (indicating an RGB image), and three tensors r_shift, g_shift, and b_shift of shape (N) that represent the shift values for the red, green, and blue channels, respectively.\n\nThe function should:\n\nVerify that the image is a valid tensor and a color image.\nApply the shifts to each channel.\nEnsure the output values are clamped between 0 and 1.\nReturn the modified image as a tensor of the same shape.\nThe function should handle errors by checking the tensor types and confirming that the input image is an RGB image.\"\nexample of input : image = tensor([[[[0.2000, 0.0000]],\n\n         [[0.3000, 0.5000]],\n\n         [[0.4000, 0.7000]]],\n\n\n        [[[0.2000, 0.7000]],\n\n         [[0.0000, 0.8000]],\n\n         [[0.2000, 0.3000]]]]), r_shift = tensor([0.1000]), g_shift = tensor([0.3000]), b_shift = tensor([-0.3000])",
    "function_name": "shift_rgb",
    "ground_truth": "kornia/enhance/shift_rgb.py",
    "test": "tests/enhance/test_shift_rgb.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Classification",
    "data": "Image"
}