{
    "result": "To create a function that converts a quaternion to an axis-angle representation, you can follow these steps. The quaternion is expected to be in the format \\((w, x, y, z)\\), where \\(w\\) is the scalar part and \\((x, y, z)\\) is the vector part. The axis-angle representation consists of a rotation axis and an angle of rotation. Here's how you can implement this in Python using PyTorch:\n\n```python\nimport torch\n\ndef quaternion_to_axis_angle(quaternion: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Convert a quaternion to an axis-angle representation.\n\n    Args:\n        quaternion (Tensor): A tensor of shape (N, 4) or (4,) representing quaternions in (w, x, y, z) format.\n\n    Returns:\n        Tensor: A tensor of shape (N, 3) or (3,) representing the axis-angle of rotation.\n    \"\"\"\n    if not isinstance(quaternion, torch.Tensor):\n        raise TypeError(\"Input must be a torch.Tensor.\")\n    \n    if quaternion.ndim == 1:\n        quaternion = quaternion.unsqueeze(0)\n    \n    if quaternion.shape[1] != 4:\n        raise ValueError(\"Input tensor must have shape (N, 4) or (4,).\")\n    \n    w, x, y, z = quaternion.unbind(dim=1)\n    \n    # Compute the angle of rotation\n    angle = 2 * torch.acos(w)\n    \n    # Compute the axis of rotation\n    sin_half_angle = torch.sqrt(1 - w**2)\n    axis = torch.stack((x, y, z), dim=1)\n    \n    # Avoid division by zero\n    axis = torch.where(sin_half_angle.unsqueeze(1) > 1e-6, axis / sin_half_angle.unsqueeze(1), axis)\n    \n    # Combine axis and angle\n    axis_angle = axis * angle.unsqueeze(1)\n    \n    return axis_angle.squeeze(0) if axis_angle.shape[0] == 1 else axis_angle\n\n# Example usage:\nquaternion = torch.tensor([1., 0., 0., 0.])\nprint(quaternion_to_axis_angle(quaternion))  # Output: tensor([0., 0., 0.])\n```\n\n### Explanation:\n- **Input Validation**: The function first checks if the input is a tensor and whether it has the correct shape.\n- **Unpacking**: The quaternion is unpacked into its components \\(w, x, y, z\\).\n- **Angle Calculation**: The angle of rotation is calculated as \\(2 \\cdot \\text{acos}(w)\\).\n- **Axis Calculation**: The axis of rotation is calculated by normalizing the vector part \\((x, y, z)\\) by the sine of half the angle. A small threshold is used to avoid division by zero.\n- **Output**: The function returns the axis-angle representation, which is a tensor of the same batch size as the input, with each quaternion converted to a 3D vector representing the axis-angle.",
    "prompt": "Generate a Python function called quaternion_to_axis_angle that converts a quaternion vector to an axis angle of rotation in radians. The input is a tensor called quaternion with quaternions in (w, x, y, z) format. The output is a tensor with the axis angle of rotation. The function checks if the input is a tensor and has a shape of Nx4 or 4. It then unpacks the input and computes the conversion using mathematical operations. The final output is a tensor with the axis angle values.Example:\n        >>> quaternion = tensor((1., 0., 0., 0.))\n        >>> quaternion_to_axis_angle(quaternion)\n        tensor([0., 0., 0.])",
    "function_name": "quaternion_to_axis_angle",
    "ground_truth": "kornia/geometry/conversions.py",
    "test": "tests/geometry/test_conversions.py::TestQuaternionToAngleAxis",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Image"
}