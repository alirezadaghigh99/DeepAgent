{
    "result": "To generate the `project` function for the `PinholeCamera` class, we need to transform a 3D point in world coordinates into 2D camera coordinates using the camera's intrinsic and extrinsic parameters. The intrinsic parameters define the camera's internal characteristics, such as focal length and principal point, while the extrinsic parameters define the camera's position and orientation in the world.\n\nHere's how you can implement the `project` function:\n\n```python\nimport torch\nfrom torch import Tensor\n\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n\n    def project(self, point_3d: Tensor) -> Tensor:\n        \"\"\"\n        Projects a 3D point in world coordinates onto the 2D camera plane.\n\n        Args:\n            point_3d (Tensor): Tensor of shape (*, 3) representing 3D points in world coordinates.\n\n        Returns:\n            Tensor: Tensor of shape (*, 2) representing the (u, v) camera coordinates.\n        \"\"\"\n        # Convert 3D points to homogeneous coordinates by adding a 1 in the last dimension\n        ones = torch.ones((*point_3d.shape[:-1], 1), dtype=point_3d.dtype, device=point_3d.device)\n        point_3d_homogeneous = torch.cat((point_3d, ones), dim=-1)\n\n        # Apply extrinsic transformation to convert world coordinates to camera coordinates\n        point_camera_homogeneous = point_3d_homogeneous @ self._extrinsics.T\n\n        # Apply intrinsic transformation to project onto the 2D camera plane\n        point_2d_homogeneous = point_camera_homogeneous @ self._intrinsics.T\n\n        # Convert from homogeneous to Cartesian coordinates\n        u = point_2d_homogeneous[..., 0] / point_2d_homogeneous[..., 2]\n        v = point_2d_homogeneous[..., 1] / point_2d_homogeneous[..., 2]\n\n        # Stack the u and v coordinates to get the final 2D points\n        point_2d = torch.stack((u, v), dim=-1)\n\n        return point_2d\n```\n\n### Explanation:\n1. **Homogeneous Coordinates**: We first convert the 3D points to homogeneous coordinates by appending a 1 to each point. This allows us to use matrix multiplication for transformations.\n\n2. **Extrinsic Transformation**: We apply the extrinsic matrix to transform the 3D world coordinates into the camera's coordinate system.\n\n3. **Intrinsic Transformation**: We then apply the intrinsic matrix to project the 3D camera coordinates onto the 2D image plane.\n\n4. **Homogeneous to Cartesian**: Finally, we convert the homogeneous 2D coordinates back to Cartesian coordinates by dividing by the third component (depth).\n\n5. **Output**: The function returns the 2D camera coordinates `(u, v)` for each input 3D point.",
    "prompt": "\"Generate the `project` function for the following class to project a 3D point in world coordinates onto the 2D camera plane. The input is `self` and a `point_3d` tensor with shape `(*, 3)`, and the output is a tensor of `(u, v)` camera coordinates with shape `(*, 2)`.\n\n```python\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n```\"",
    "function_name": "project",
    "ground_truth": "kornia/geometry/camera/pinhole.py",
    "test": "tests/geometry/camera/test_pinhole.py",
    "class": "PinholeCamera",
    "stage": "Image",
    "task": "",
    "data": "pre-post process"
}