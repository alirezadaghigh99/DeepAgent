{
    "result": "To create a function called `unproject_points_z1` that unprojects points from the canonical z=1 plane into the camera frame, we need to consider the input and output shapes and how the unprojection is performed. The function will take a tensor of points in the canonical plane and an optional tensor for the depth (extension) and return a tensor of unprojected points.\n\nHere's how you can implement this function:\n\n```python\nimport torch\n\ndef unproject_points_z1(points_in_cam_canonical: torch.Tensor, extension: Optional[torch.Tensor] = None) -> torch.Tensor:\n    \"\"\"\n    Unprojects points from the canonical z=1 plane into the camera frame.\n\n    Args:\n        points_in_cam_canonical (Tensor): Tensor of shape (..., 2) representing points in the canonical z=1 plane.\n        extension (Tensor, optional): Tensor of shape (..., 1) representing the depth of the points. Defaults to None.\n\n    Returns:\n        Tensor: Unprojected points with shape (..., 3).\n    \"\"\"\n    # Ensure the points_in_cam_canonical has the correct shape\n    if points_in_cam_canonical.shape[-1] != 2:\n        raise ValueError(\"points_in_cam_canonical must have shape (..., 2)\")\n\n    # If extension is not provided, assume a default depth of 1\n    if extension is None:\n        extension = torch.ones(points_in_cam_canonical.shape[:-1] + (1,), dtype=points_in_cam_canonical.dtype, device=points_in_cam_canonical.device)\n\n    # Ensure the extension has the correct shape\n    if extension.shape[-1] != 1:\n        raise ValueError(\"extension must have shape (..., 1)\")\n\n    # Concatenate the points with the extension to form the unprojected points\n    unprojected_points = torch.cat((points_in_cam_canonical, extension), dim=-1)\n\n    return unprojected_points\n\n# Example usage\npoints = torch.tensor([[0.5, 0.5], [0.2, 0.3]])\nextension = torch.tensor([[2.0], [3.0]])\nunprojected_points = unproject_points_z1(points, extension)\nprint(unprojected_points)\n```\n\n### Explanation:\n- **Input Tensors**: The function takes `points_in_cam_canonical` with shape `(..., 2)` and an optional `extension` with shape `(..., 1)`.\n- **Default Extension**: If `extension` is not provided, it defaults to a tensor of ones, assuming a depth of 1.\n- **Concatenation**: The function concatenates the `points_in_cam_canonical` with the `extension` along the last dimension to form the unprojected points with shape `(..., 3)`.\n- **Example Usage**: The example demonstrates how to use the function with sample tensors for points and extension.",
    "prompt": "Generate a Python function called unproject_points_z1 that unprojects one or more points from the canonical z=1 plane into the camera frame. The function takes in a Tensor called points_in_cam_canonical representing the points to unproject with shape (..., 2) and an optional Tensor called extension representing the extension (depth) of the points with shape (..., 1). The function returns a Tensor representing the unprojected points with shape (..., 3). An example usage of the function is provided where points and extension are tensors, and the output is a tensor of unprojected points.",
    "function_name": "unproject_points_z1",
    "ground_truth": "kornia/geometry/camera/projection_z1.py",
    "test": "tests/geometry/camera/test_projections.py::TestProjectionZ1",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}