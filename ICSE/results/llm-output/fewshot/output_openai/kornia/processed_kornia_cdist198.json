{
    "result": "Here's a Python function `_cdist` that implements the described functionality:\n\n```python\nimport torch\n\ndef _cdist(d1: torch.Tensor, d2: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Calculate the pairwise Euclidean distance between two tensors, d1 and d2.\n    \n    If both tensors are not safe for Metal Performance Shaders (MPS), use torch.cdist.\n    Otherwise, manually compute the Euclidean distances using matrix operations.\n\n    Args:\n        d1 (torch.Tensor): First tensor.\n        d2 (torch.Tensor): Second tensor.\n\n    Returns:\n        torch.Tensor: A tensor containing the pairwise distances.\n    \"\"\"\n    # Check if tensors are safe for MPS\n    if not (d1.is_mps and d2.is_mps):\n        # Use torch.cdist if not safe for MPS\n        return torch.cdist(d1, d2)\n\n    # Manually compute Euclidean distances\n    # Compute squared distances\n    d1_squared = torch.sum(d1 ** 2, dim=1, keepdim=True)\n    d2_squared = torch.sum(d2 ** 2, dim=1, keepdim=True)\n\n    # Perform matrix multiplication and compute distances\n    distances_squared = d1_squared - 2 * torch.mm(d1, d2.t()) + d2_squared.t()\n    \n    # Clamp to ensure no negative values and take square root\n    distances = torch.sqrt(torch.clamp(distances_squared, min=0.0))\n\n    return distances\n```\n\n### Explanation:\n- **MPS Check**: The function first checks if both tensors are safe for Metal Performance Shaders (MPS). If not, it uses `torch.cdist` directly.\n- **Manual Computation**:\n  - **Squared Distances**: It calculates the squared sum of each tensor along the specified dimension.\n  - **Matrix Multiplication**: It uses matrix multiplication to compute the pairwise squared distances.\n  - **Clamping and Square Root**: The result is clamped to ensure non-negative values before taking the square root to get the final Euclidean distances.",
    "prompt": "Create a Python function `_cdist` that:\n\n- Takes two parameters:\n  - `d1`: A tensor.\n  - `d2`: Another tensor.\n- The function calculates the pairwise Euclidean distance between `d1` and `d2` similar to `torch.cdist`.\n- If both tensors are not safe for Metal Performance Shaders (MPS), the function will use `torch.cdist` directly.\n- Otherwise, the function manually computes the Euclidean distances using matrix operations:\n  - Computes the squared distance for each tensor.\n  - Repeats the squared distances and performs matrix multiplication.\n  - Clamps the result to a minimum of 0.0 and takes the square root to get the final distances.\n- Returns the computed distance matrix.",
    "function_name": "_cdist",
    "ground_truth": "kornia/feature/matching.py",
    "test": "tests/feature/test_matching.py::TestMatchSMNN",
    "class": "",
    "stage": "Inference",
    "task": "Detection",
    "data": "Image"
}