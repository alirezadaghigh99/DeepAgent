{
    "result": "Certainly! Below is a Python function `vector_to_skew_symmetric_matrix` that converts a 3D vector into its corresponding skew-symmetric matrix. The function handles both single vectors and batches of vectors, and includes error handling to ensure the input has the correct shape.\n\n```python\nimport torch\n\ndef vector_to_skew_symmetric_matrix(v: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Converts a 3D vector or a batch of 3D vectors into their corresponding skew-symmetric matrices.\n\n    Args:\n        v (torch.Tensor): A tensor of shape (B, 3) or (3,), representing a batch of 3D vectors or a single 3D vector.\n\n    Returns:\n        torch.Tensor: A tensor of shape (B, 3, 3) or (3, 3) containing the skew-symmetric matrices.\n\n    Raises:\n        ValueError: If the input tensor does not have the correct shape.\n    \"\"\"\n    if v.ndim == 1:\n        if v.shape[0] != 3:\n            raise ValueError(\"Input vector must have shape (3,) for a single 3D vector.\")\n        v = v.unsqueeze(0)  # Convert to shape (1, 3) for consistent processing\n\n    elif v.ndim == 2:\n        if v.shape[1] != 3:\n            raise ValueError(\"Input tensor must have shape (B, 3) for a batch of 3D vectors.\")\n    else:\n        raise ValueError(\"Input tensor must have shape (B, 3) or (3,).\")\n\n    # Extract components\n    x, y, z = v[:, 0], v[:, 1], v[:, 2]\n\n    # Create skew-symmetric matrices\n    zero = torch.zeros_like(x)\n    skew_matrices = torch.stack([\n        torch.stack([zero, -z, y], dim=-1),\n        torch.stack([z, zero, -x], dim=-1),\n        torch.stack([-y, x, zero], dim=-1)\n    ], dim=-2)\n\n    return skew_matrices.squeeze(0) if skew_matrices.shape[0] == 1 else skew_matrices\n\n# Example usage:\n# Single vector\nv_single = torch.tensor([1.0, 2.0, 3.0])\nskew_single = vector_to_skew_symmetric_matrix(v_single)\nprint(skew_single)\n\n# Batch of vectors\nv_batch = torch.tensor([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\nskew_batch = vector_to_skew_symmetric_matrix(v_batch)\nprint(skew_batch)\n```\n\nThis function first checks the dimensionality and shape of the input tensor to ensure it is either a single 3D vector or a batch of 3D vectors. It then constructs the skew-symmetric matrices using the components of the vectors. The function handles both single vectors and batches by adjusting the shape accordingly.",
    "prompt": "Create a Python function called vector_to_skew_symmetric_matrix that converts a 3D vector into its corresponding skew-symmetric matrix. The input should be a PyTorch Tensor of shape (B, 3) or (3,), representing a batch of 3D vectors or a single 3D vector. The function should return a PyTorch Tensor of shape (B, 3, 3) or (3, 3) containing the skew-symmetric matrices. It should include error handling to ensure the input vector has the correct shape and raise a ValueError if it does not",
    "function_name": "vector_to_skew_symmetric_matrix",
    "ground_truth": "kornia/geometry/conversions.py#L1490",
    "test": "tests/geometry/test_conversions.py::test_vector_to_skew_symmetric_matrix",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}