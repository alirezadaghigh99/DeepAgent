{
    "result": "To create a function `draw_rectangle` that draws rectangles on a batch of image tensors, we need to handle the input parameters and ensure that the function can process the batch of images and rectangles correctly. Below is a Python function that implements this functionality:\n\n```python\nimport torch\n\ndef draw_rectangle(\n    image: torch.Tensor,\n    rectangle: torch.Tensor,\n    color: Optional[torch.Tensor] = None,\n    fill: bool = False\n) -> torch.Tensor:\n    \"\"\"\n    Draws rectangles on a batch of image tensors.\n\n    Args:\n        image (Tensor): A tensor of shape (B, C, H, W).\n        rectangle (Tensor): A tensor of shape (B, N, 4) with rectangle coordinates (x1, y1, x2, y2).\n        color (Tensor, optional): A tensor specifying the color of the rectangles.\n                                  Can be of shape (1,), (3,), (B, N, 1), or (B, N, 3).\n        fill (bool, optional): Whether to fill the rectangles. Defaults to False.\n\n    Returns:\n        Tensor: The modified image tensor with rectangles drawn.\n    \"\"\"\n    assert image.dim() == 4, \"Image tensor must be of shape (B, C, H, W)\"\n    assert rectangle.dim() == 3 and rectangle.size(2) == 4, \"Rectangle tensor must be of shape (B, N, 4)\"\n    assert image.size(0) == rectangle.size(0), \"Batch size of image and rectangle tensors must match\"\n\n    B, C, H, W = image.shape\n    _, N, _ = rectangle.shape\n\n    # Default color is white\n    if color is None:\n        color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)\n\n    # Broadcast color to match the shape (B, N, C)\n    if color.dim() == 1:\n        color = color.view(1, 1, -1).expand(B, N, -1)\n    elif color.dim() == 2:\n        color = color.view(B, N, -1)\n    elif color.dim() == 3:\n        color = color.view(B, N, C)\n    else:\n        raise ValueError(\"Color tensor must be of shape (1,), (3,), (B, N, 1), or (B, N, 3)\")\n\n    for b in range(B):\n        for n in range(N):\n            x1, y1, x2, y2 = rectangle[b, n].int()\n            rect_color = color[b, n]\n\n            if fill:\n                image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)\n            else:\n                # Draw borders\n                image[b, :, y1, x1:x2] = rect_color\n                image[b, :, y2-1, x1:x2] = rect_color\n                image[b, :, y1:y2, x1] = rect_color\n                image[b, :, y1:y2, x2-1] = rect_color\n\n    return image\n```\n\n### Explanation:\n\n1. **Input Validation**: The function checks that the input tensors have the correct dimensions and that the batch sizes match.\n\n2. **Color Handling**: The function supports different shapes for the color tensor and broadcasts it to match the shape `(B, N, C)`.\n\n3. **Rectangle Drawing**: The function iterates over each image in the batch and each rectangle, drawing either filled rectangles or just the borders based on the `fill` flag.\n\n4. **In-place Modification**: The function modifies the input image tensor in place and returns it for convenience.\n\nThis function should work for drawing rectangles on a batch of images, with flexibility in specifying colors and whether to fill the rectangles.",
    "prompt": "Create a Python function draw_rectangle that draws one or more rectangles on a batch of image tensors. The function accepts the following parameters:\n\nimage: A tensor of shape (B, C, H, W), where B is the batch size, C is the number of channels, H is the height, and W is the width of the images.\nrectangle: A tensor of shape (B, N, 4), where N is the number of rectangles per image, and each rectangle is defined by four coordinates (x1, y1, x2, y2) corresponding to the top-left and bottom-right corners.\ncolor: An optional tensor specifying the color of the rectangles. It can be of various shapes: (1,), (3,), (B, N, 1), or (B, N, 3). If the image has 3 channels and the color tensor has 1 channel, the color will be broadcasted.\nfill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.\nThe function modifies the input image tensor in place, drawing the specified rectangles according to the provided parameters. It also returns the modified image tensor for convenience.\n\nError Handling:\nRaise an AssertionError if the batch size of the image tensor does not match the batch size of the rectangle tensor.\nRaise an AssertionError if the number of points in the rectangle tensor is not 4.",
    "function_name": "draw_rectangle",
    "ground_truth": "kornia/utils/draw.py",
    "test": "tests/utils/test_draw.py::TestDrawRectangle",
    "class": "",
    "stage": "Inference",
    "task": "Detection",
    "data": "Image"
}