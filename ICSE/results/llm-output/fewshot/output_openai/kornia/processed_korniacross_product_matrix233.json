{
    "result": "To complete the `cross_product_matrix` function, you need to construct a skew-symmetric matrix for each vector in the input tensor. A skew-symmetric matrix for a vector \\([a, b, c]\\) is given by:\n\n\\[\n\\begin{bmatrix}\n0 & -c & b \\\\\nc & 0 & -a \\\\\n-b & a & 0\n\\end{bmatrix}\n\\]\n\nHere's how you can implement this in Python using PyTorch:\n\n```python\nimport torch\n\ndef cross_product_matrix(x: torch.Tensor) -> torch.Tensor:\n    # Ensure the last dimension is 3\n    if not x.shape[-1] == 3:\n        raise AssertionError(f\"Expected last dimension to be 3, but got {x.shape[-1]}\")\n\n    # Extract components\n    a, b, c = x[..., 0], x[..., 1], x[..., 2]\n\n    # Construct the skew-symmetric matrix\n    zero = torch.zeros_like(a)\n    cross_prod_matrix = torch.stack([\n        torch.stack([zero, -c, b], dim=-1),\n        torch.stack([c, zero, -a], dim=-1),\n        torch.stack([-b, a, zero], dim=-1)\n    ], dim=-2)\n\n    return cross_prod_matrix\n\n# Example usage:\n# x = torch.tensor([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\n# result = cross_product_matrix(x)\n# print(result)\n```\n\nThis function first checks if the last dimension of the input tensor is 3, raising an `AssertionError` if not. It then extracts the components of the vector and constructs the skew-symmetric matrix using PyTorch's `stack` function to build the matrix for each vector in the input tensor. The result is a tensor of shape `(*, 3, 3)`, where `*` represents any leading dimensions of the input tensor.",
    "prompt": "Create a Python function `cross_product_matrix` that:\n\n- Constructs the cross-product matrix (a skew-symmetric matrix) for a given vector.\n- Accepts a single parameter:\n  - `x`: A tensor of shape `(*, 3)` representing the input vector(s).\n- Returns a tensor containing the constructed cross-product matrix with shape `(*, 3, 3)`.\n\nErrors:\n- Raises an `AssertionError` if the last dimension of the input tensor is not equal to 3.\ndef cross_product_matrix(x: torch.Tensor) -> torch.Tensor:\n      if not x.shape[-1] == 3:\n        raise AssertionError(x.shape)\n## complete",
    "function_name": "cross_product_matrix",
    "ground_truth": "kornia/geometry/epipolar/numeric.py#L8",
    "test": "tests/geometry/epipolar/test_numeric.py::TestSkewSymmetric",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Image"
}