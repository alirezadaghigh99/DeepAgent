{
    "result": "Certainly! Below is a Python function `quaternion_to_rotation_matrix` that converts a quaternion to a rotation matrix. The function takes a tensor `quaternion` as input, normalizes it, and then computes the corresponding rotation matrix.\n\n```python\nimport torch\n\ndef quaternion_to_rotation_matrix(quaternion: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Converts a quaternion to a rotation matrix.\n\n    Args:\n        quaternion (torch.Tensor): Tensor of shape (*, 4) containing quaternions in (w, x, y, z) format.\n\n    Returns:\n        torch.Tensor: Rotation matrix of shape (*, 3, 3).\n    \"\"\"\n    # Normalize the quaternion\n    quaternion = quaternion / quaternion.norm(dim=-1, keepdim=True)\n\n    # Unpack the quaternion components\n    w, x, y, z = quaternion.unbind(dim=-1)\n\n    # Compute the rotation matrix elements\n    xx = x * x\n    yy = y * y\n    zz = z * z\n    xy = x * y\n    xz = x * z\n    yz = y * z\n    wx = w * x\n    wy = w * y\n    wz = w * z\n\n    # Construct the rotation matrix\n    rotation_matrix = torch.stack([\n        1 - 2 * (yy + zz), 2 * (xy - wz), 2 * (xz + wy),\n        2 * (xy + wz), 1 - 2 * (xx + zz), 2 * (yz - wx),\n        2 * (xz - wy), 2 * (yz + wx), 1 - 2 * (xx + yy)\n    ], dim=-1).reshape(*quaternion.shape[:-1], 3, 3)\n\n    return rotation_matrix\n\n# Example usage\nquaternion = torch.tensor([0., 0., 0., 1.])\nrotation_matrix = quaternion_to_rotation_matrix(quaternion)\nprint(rotation_matrix)\n```\n\n### Explanation:\n1. **Normalization**: The quaternion is normalized to ensure it represents a valid rotation.\n2. **Unpacking**: The components of the quaternion `(w, x, y, z)` are extracted.\n3. **Matrix Computation**: The elements of the rotation matrix are computed using the standard formula for converting a quaternion to a rotation matrix.\n4. **Reshape**: The resulting elements are reshaped into a 3x3 matrix.\n5. **Example Usage**: An example is provided to demonstrate how to use the function.\n\nThis function can handle batches of quaternions as well, thanks to the use of PyTorch's tensor operations.",
    "prompt": "Generate a Python function called quaternion_to_rotation_matrix that converts a quaternion to a rotation matrix. The input is a tensor called quaternion containing a quaternion in (w, x, y, z) format with shape (*, 4). The output is a rotation matrix of shape (*, 3, 3). The function first normalizes the input quaternion, then unpacks its components to compute the conversion using specific mathematical operations. Finally, it reshapes the output matrix and returns it. An example usage of the function is provided in the code snippet. >>> quaternion = tensor((0., 0., 0., 1.))\n        >>> quaternion_to_rotation_matrix(quaternion)\n        tensor([[-1.,  0.,  0.],\n                [ 0., -1.,  0.],\n                [ 0.,  0.,  1.]])",
    "function_name": "quaternion_to_rotation_matrix",
    "ground_truth": "kornia/geometry/conversions.py",
    "test": "tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Image"
}