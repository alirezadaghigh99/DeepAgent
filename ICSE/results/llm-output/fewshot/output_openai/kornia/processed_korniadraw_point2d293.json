{
    "result": "Here's a Python function `draw_point2d` that sets specified `[x, y]` coordinates in an image tensor to a given color. This function handles both grayscale and multi-channel images, ensuring that the color tensor matches the image's channels:\n\n```python\nimport torch\n\ndef draw_point2d(\n    image: torch.Tensor,\n    points: torch.Tensor,\n    color: torch.Tensor\n) -> torch.Tensor:\n    \"\"\"\n    Sets specified [x, y] coordinates in an image tensor to a given color.\n\n    Args:\n        image (Tensor): Image tensor of shape (H, W) for grayscale or (C, H, W) for multi-channel.\n        points (Tensor): Tensor of shape (N, 2) containing [x, y] coordinates.\n        color (Tensor): Color tensor of shape (C,) for multi-channel or a single value for grayscale.\n\n    Returns:\n        Tensor: Modified image tensor with the points colored.\n    \"\"\"\n    if image.dim() == 2:\n        # Grayscale image\n        for point in points:\n            x, y = point\n            image[y, x] = color\n    elif image.dim() == 3:\n        # Multi-channel image\n        C, H, W = image.shape\n        if color.shape[0] != C:\n            raise ValueError(\"Color tensor must match the number of channels in the image.\")\n        for point in points:\n            x, y = point\n            image[:, y, x] = color\n    else:\n        raise ValueError(\"Image tensor must be either 2D (H, W) or 3D (C, H, W).\")\n\n    return image\n```\n\n### Explanation:\n- **Input Parameters:**\n  - `image`: The input image tensor, which can be either grayscale `(H, W)` or multi-channel `(C, H, W)`.\n  - `points`: A tensor containing the `[x, y]` coordinates where the color should be applied.\n  - `color`: A tensor representing the color to apply. It should match the number of channels in the image.\n\n- **Functionality:**\n  - The function first checks the dimensionality of the image to determine if it's grayscale or multi-channel.\n  - For grayscale images, it directly sets the pixel value at each specified point to the given color.\n  - For multi-channel images, it ensures the color tensor matches the number of channels and then sets the pixel values at each specified point.\n  \n- **Error Handling:**\n  - The function raises a `ValueError` if the image tensor is not 2D or 3D, or if the color tensor does not match the number of channels in a multi-channel image.",
    "prompt": "Write a Python function `draw_point2d` that sets specified `[x, y]` coordinates in an image tensor to a given color. The image can be either grayscale `(H, W)` or multi-channel `(C, H, W)`, and the color tensor must match the image's channels. The function should return the modified image with the points colored.",
    "function_name": "draw_point2d",
    "ground_truth": "kornia/utils/draw.py",
    "test": "tests/utils/test_draw.py::TestDrawPoint",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Detection",
    "data": "Image"
}