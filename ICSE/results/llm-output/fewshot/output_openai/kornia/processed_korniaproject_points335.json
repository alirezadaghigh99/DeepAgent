{
    "result": "To create the `project_points` function, we need to perform a matrix multiplication between the 3D points and the camera matrix to project the points onto the 2D camera plane. Here's how you can implement this function in Python using PyTorch:\n\n```python\nimport torch\n\ndef project_points(points_3d: torch.Tensor, camera_matrix: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Projects 3D points onto a 2D camera plane using a camera matrix.\n\n    Args:\n        points_3d (torch.Tensor): Tensor of shape (*, 3) representing 3D points.\n        camera_matrix (torch.Tensor): Tensor of shape (*, 3, 3) representing the camera matrix.\n\n    Returns:\n        torch.Tensor: Tensor of shape (*, 2) representing the projected 2D camera coordinates.\n    \"\"\"\n    # Ensure the points are in homogeneous coordinates by adding a dimension\n    points_3d_homogeneous = torch.cat((points_3d, torch.ones_like(points_3d[..., :1])), dim=-1)\n\n    # Perform matrix multiplication to project the points\n    projected_points_homogeneous = torch.matmul(points_3d_homogeneous.unsqueeze(-2), camera_matrix).squeeze(-2)\n\n    # Convert from homogeneous coordinates to 2D coordinates\n    u = projected_points_homogeneous[..., 0] / projected_points_homogeneous[..., 2]\n    v = projected_points_homogeneous[..., 1] / projected_points_homogeneous[..., 2]\n\n    # Stack the u and v coordinates to get the final 2D points\n    projected_points_2d = torch.stack((u, v), dim=-1)\n\n    return projected_points_2d\n\n# Example usage\nif __name__ == \"__main__\":\n    # Create a random 3D point\n    point_3d = torch.tensor([[1.0, 2.0, 3.0]])\n\n    # Use an identity matrix as the camera matrix\n    camera_matrix = torch.eye(3).unsqueeze(0)\n\n    # Project the 3D point onto the 2D camera plane\n    projected_point = project_points(point_3d, camera_matrix)\n\n    print(\"Projected 2D point:\", projected_point)\n```\n\n### Explanation:\n- **Homogeneous Coordinates**: The 3D points are converted to homogeneous coordinates by appending a 1 to each point. This is necessary for the matrix multiplication with the camera matrix.\n- **Matrix Multiplication**: The 3D points in homogeneous coordinates are multiplied by the camera matrix to get the projected points in homogeneous 2D coordinates.\n- **Conversion to 2D**: The homogeneous 2D coordinates are converted to regular 2D coordinates by dividing by the third coordinate (z-coordinate).\n- **Example Usage**: The example demonstrates projecting a single 3D point using an identity matrix as the camera matrix, which should result in the same point being returned in 2D space.",
    "prompt": "Generate a Python function called project_points that takes in a 3D point tensor and a camera matrix tensor as input. The function projects the 3D point onto the 2D camera plane using the camera matrix. The input tensor for the 3D point should have shape (*, 3) and the camera matrix tensor should have shape (*, 3, 3). The function returns a tensor of (u, v) camera coordinates with shape (*, 2). An example usage of the function is provided where a random 3D point and an identity matrix as the camera matrix are used to project the point onto the camera plane, resulting in a tensor of camera coordinates.",
    "function_name": "project_points",
    "ground_truth": "kornia/geometry/camera/perspective.py",
    "test": "tests/geometry/camera/test_projections.py::TestProjectionZ1",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Segmentation",
    "data": "Image"
}