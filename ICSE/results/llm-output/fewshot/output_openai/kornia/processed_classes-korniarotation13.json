{
    "result": "To generate the `rt_matrix` function for the `PinholeCamera` class, we need to understand that the rotation-translation matrix is a combination of a rotation matrix and a translation vector. This matrix is typically used to transform points from one coordinate space to another, such as from world coordinates to camera coordinates.\n\nHere's how you can implement the `rt_matrix` function for the `PinholeCamera` class:\n\n```python\nimport torch\nfrom torch import Tensor\n\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n\n    def rt_matrix(self) -> Tensor:\n        \"\"\"\n        Returns the 3x4 rotation-translation matrix.\n\n        The extrinsics matrix is assumed to be a 4x4 matrix where the top-left 3x3 part is the rotation\n        and the top-right 3x1 part is the translation.\n\n        Returns:\n            Tensor of shape (B, 3, 4) where B is the batch size.\n        \"\"\"\n        # Assuming extrinsics is a 4x4 matrix\n        # Extract the rotation (3x3) and translation (3x1) components\n        rotation = self._extrinsics[:, :3, :3]  # Shape: (B, 3, 3)\n        translation = self._extrinsics[:, :3, 3:]  # Shape: (B, 3, 1)\n\n        # Concatenate the rotation and translation to form the 3x4 matrix\n        rt_matrix = torch.cat((rotation, translation), dim=2)  # Shape: (B, 3, 4)\n\n        return rt_matrix\n```\n\n### Explanation:\n- **Extrinsics Matrix**: The extrinsics matrix is typically a 4x4 matrix that includes both rotation and translation. The top-left 3x3 part is the rotation matrix, and the top-right 3x1 part is the translation vector.\n- **Rotation-Translation Matrix**: The `rt_matrix` function extracts the rotation and translation components from the extrinsics matrix and concatenates them to form a 3x4 matrix.\n- **Batch Dimension**: The function assumes that the extrinsics matrix has a batch dimension `B`, allowing for multiple cameras or transformations to be processed simultaneously.\n\nThis implementation assumes that the extrinsics matrix is provided in a standard format. Adjustments may be necessary if the format differs.",
    "prompt": "Generate the rt_matrix function that Return the 3x4 rotation-translation matrix  for following class.\n\n        Returns:\n            tensor of shape :math:`(B, 3, 4)`.     ```python\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        se",
    "function_name": "rotation",
    "ground_truth": "kornia/geometry/camera/pinhole.py",
    "test": "tests/geometry/camera/test_pinhole.py",
    "class": "PinholeCamera",
    "stage": "Image",
    "task": "",
    "data": "pre-post process"
}