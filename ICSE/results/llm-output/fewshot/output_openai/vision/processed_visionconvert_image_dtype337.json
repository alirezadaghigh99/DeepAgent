{
    "result": "Certainly! Below is a Python function named `convert_image_dtype` that converts a tensor image to a specified data type (`dtype`) and scales the values accordingly. This function does not support PIL Images and includes error handling for specific conversions that might lead to overflow errors.\n\n```python\nimport torch\n\ndef convert_image_dtype(image: torch.Tensor, dtype: torch.dtype) -> torch.Tensor:\n    \"\"\"\n    Convert a tensor image to the given dtype and scale the values accordingly.\n    \n    This function does not support PIL Image.\n\n    Args:\n        image (torch.Tensor): Image to be converted.\n        dtype (torch.dtype): Desired data type of the output.\n\n    Returns:\n        torch.Tensor: Converted image.\n\n    Raises:\n        RuntimeError: When trying to cast torch.float32 to torch.int32 or torch.int64 as\n            well as for trying to cast torch.float64 to torch.int64. These conversions might lead to\n            overflow errors since the floating point dtype cannot store consecutive integers over the whole range\n            of the integer dtype.\n    \"\"\"\n    if not isinstance(image, torch.Tensor):\n        raise TypeError(\"Input image must be a torch.Tensor\")\n\n    if image.dtype == dtype:\n        return image\n\n    if image.is_floating_point():\n        if dtype in (torch.int32, torch.int64):\n            raise RuntimeError(\n                f\"Converting from {image.dtype} to {dtype} can lead to overflow errors.\"\n            )\n        # Scale float to float\n        if dtype.is_floating_point:\n            return image.to(dtype)\n        # Scale float to int\n        return (image * 255).to(dtype)\n\n    # Scale int to float\n    if dtype.is_floating_point:\n        return image.to(dtype) / 255\n\n    # Scale int to int\n    input_max = torch.iinfo(image.dtype).max\n    output_max = torch.iinfo(dtype).max\n    return (image.to(dtype) * (output_max / input_max)).round()\n\n# Example usage:\n# image = torch.rand(3, 256, 256, dtype=torch.float32)\n# converted_image = convert_image_dtype(image, torch.uint8)\n```\n\n### Key Points:\n- **Type Checking**: The function checks if the input is a `torch.Tensor`.\n- **No Conversion Needed**: If the input image is already of the desired `dtype`, it returns the image as is.\n- **Floating Point to Integer**: Raises a `RuntimeError` for specific conversions that might lead to overflow errors.\n- **Scaling**: The function scales the image values appropriately when converting between different data types.\n- **Example Usage**: An example usage is provided to demonstrate how to use the function.",
    "prompt": "Create a Python function called convert_image_dtype that Convert a tensor image to the given ``dtype`` and scale the values accordingly\n    This function does not support PIL Image.\n\n    Args:\n        image (torch.Tensor): Image to be converted\n        dtype (torch.dtype): Desired data type of the output\n\n    Returns:\n        Tensor: Converted image\n\n    .. note::\n\n        When converting from a smaller to a larger integer ``dtype`` the maximum values are **not** mapped exactly.\n        If converted back and forth, this mismatch has no effect.\n\n    Raises:\n        RuntimeError: When trying to cast :class:`torch.float32` to :class:`torch.int32` or :class:`torch.int64` as\n            well as for trying to cast :class:`torch.float64` to :class:`torch.int64`. These conversions might lead to\n            overflow errors since the floating point ``dtype`` cannot store consecutive integers over the whole range\n            of the integer ``dtype``.",
    "function_name": "convert_image_dtype",
    "ground_truth": "torchvision/transforms/functional.py",
    "test": "test/test_transforms_tensor.py::test_convert_image_dtype",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}