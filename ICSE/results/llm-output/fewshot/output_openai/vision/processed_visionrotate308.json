{
    "result": "Here's a Python function `rotate` that rotates an image by a specified angle. This function handles both PIL Images and PyTorch Tensors, and it includes options for interpolation, expansion, center of rotation, and fill value:\n\n```python\nfrom typing import Optional, Union, Sequence\nimport torch\nfrom torchvision.transforms import InterpolationMode\nfrom PIL import Image\n\ndef rotate(\n    img: Union[Image.Image, torch.Tensor],\n    angle: float,\n    interpolation: InterpolationMode = InterpolationMode.NEAREST,\n    expand: bool = False,\n    center: Optional[Sequence[float]] = None,\n    fill: Optional[Union[float, Sequence[float]]] = None\n) -> Union[Image.Image, torch.Tensor]:\n    \"\"\"\n    Rotate the image by angle.\n\n    Args:\n        img (PIL Image or Tensor): Image to be rotated.\n        angle (float): Rotation angle value in degrees, counter-clockwise.\n        interpolation (InterpolationMode): Desired interpolation enum defined by\n            :class:`torchvision.transforms.InterpolationMode`. Default is ``InterpolationMode.NEAREST``.\n            If input is Tensor, only ``InterpolationMode.NEAREST``, ``InterpolationMode.BILINEAR`` are supported.\n            The corresponding Pillow integer constants, e.g. ``PIL.Image.BILINEAR`` are accepted as well.\n        expand (bool, optional): Optional expansion flag.\n            If true, expands the output image to make it large enough to hold the entire rotated image.\n            If false or omitted, make the output image the same size as the input image.\n            Note that the expand flag assumes rotation around the center and no translation.\n        center (sequence, optional): Optional center of rotation. Origin is the upper left corner.\n            Default is the center of the image.\n        fill (sequence or number, optional): Pixel fill value for the area outside the transformed\n            image. If given a number, the value is used for all bands respectively.\n\n    Returns:\n        PIL Image or Tensor: Rotated image.\n    \"\"\"\n    if not isinstance(angle, (int, float)):\n        raise TypeError(\"Argument angle should be int or float\")\n\n    if center is not None and not isinstance(center, (list, tuple)):\n        raise TypeError(\"Argument center should be a sequence\")\n\n    if isinstance(img, Image.Image):\n        return img.rotate(angle, resample=interpolation.value, expand=expand, center=center, fillcolor=fill)\n    elif isinstance(img, torch.Tensor):\n        if img.ndim < 2:\n            raise ValueError(\"Tensor should have at least 2 dimensions\")\n        if interpolation not in [InterpolationMode.NEAREST, InterpolationMode.BILINEAR]:\n            raise ValueError(\"Only NEAREST and BILINEAR interpolation modes are supported for Tensors\")\n\n        # Convert to PIL Image for rotation\n        img_pil = Image.fromarray(img.numpy())\n        img_rotated = img_pil.rotate(angle, resample=interpolation.value, expand=expand, center=center, fillcolor=fill)\n        \n        # Convert back to Tensor\n        return torch.from_numpy(np.array(img_rotated))\n    else:\n        raise TypeError(\"img should be a PIL Image or a Tensor\")\n```\n\n### Key Points:\n- **Interpolation**: The function supports different interpolation modes, but for Tensors, only `NEAREST` and `BILINEAR` are supported.\n- **Expand**: The `expand` parameter determines whether the output image should be expanded to fit the entire rotated image.\n- **Center**: The center of rotation can be specified; otherwise, it defaults to the center of the image.\n- **Fill**: The `fill` parameter specifies the pixel value for areas outside the transformed image.\n- **Type Checking**: The function includes type checks to ensure that the inputs are valid.",
    "prompt": "Write a python function rotate that Rotate the image by angle.\n    If the image is torch Tensor, it is expected\n    to have [..., H, W] shape, where ... means an arbitrary number of leading dimensions.\n\n    Args:\n        img (PIL Image or Tensor): image to be rotated.\n        angle (number): rotation angle value in degrees, counter-clockwise.\n        interpolation (InterpolationMode): Desired interpolation enum defined by\n            :class:`torchvision.transforms.InterpolationMode`. Default is ``InterpolationMode.NEAREST``.\n            If input is Tensor, only ``InterpolationMode.NEAREST``, ``InterpolationMode.BILINEAR`` are supported.\n            The corresponding Pillow integer constants, e.g. ``PIL.Image.BILINEAR`` are accepted as well.\n        expand (bool, optional): Optional expansion flag.\n            If true, expands the output image to make it large enough to hold the entire rotated image.\n            If false or omitted, make the output image the same size as the input image.\n            Note that the expand flag assumes rotation around the center and no translation.\n        center (sequence, optional): Optional center of rotation. Origin is the upper left corner.\n            Default is the center of the image.\n        fill (sequence or number, optional): Pixel fill value for the area outside the transformed\n            image. If given a number, the value is used for all bands respectively. Returns:\n        PIL Image or Tensor: Rotated image.\n\n    if not torch.jit.is_scripting() and not torch.jit.is_tracing():\n        _log_api_usage_once(rotate)\n\n    if isinstance(interpolation, int):\n        interpolation = _interpolation_modes_from_int(interpolation)\n    elif not isinstance(interpolation, InterpolationMode):\n        raise TypeError(\n            \"Argument interpolation should be a InterpolationMode or a corresponding Pillow integer constant\"\n        )\n\n    if not isinstance(angle, (int, float)):\n        raise TypeError(\"Argument angle should be int or float\")\n\n    if center is not None and not isinstance(center, (list, tuple)):\n        raise TypeError(\"Argument center should be a sequence\")",
    "function_name": "rotate",
    "ground_truth": "torchvision/transforms/functional.py",
    "test": "test/test_functional_tensor.py::TestRotate::test_rotate",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}