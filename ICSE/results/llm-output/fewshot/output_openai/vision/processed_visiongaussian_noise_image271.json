{
    "result": "Here's a Python function `gaussian_noise_image` that adds Gaussian noise to an input image tensor. The function checks that the input tensor is of a floating-point dtype and that `sigma` is non-negative, raising a `ValueError` if these conditions are not met. It also includes an option to clip the output values to the [0, 1] range.\n\n```python\nimport torch\n\ndef gaussian_noise_image(\n    image: torch.Tensor,\n    mean: float = 0.0,\n    sigma: float = 0.1,\n    clip: bool = True\n) -> torch.Tensor:\n    \"\"\"\n    Adds Gaussian noise to an input image tensor.\n\n    Args:\n        image (torch.Tensor): Input image tensor with floating-point dtype.\n        mean (float): Mean of the Gaussian noise. Defaults to 0.0.\n        sigma (float): Standard deviation of the Gaussian noise. Defaults to 0.1.\n        clip (bool): Whether to clip the output values to the [0, 1] range. Defaults to True.\n\n    Returns:\n        torch.Tensor: Noisy image tensor.\n\n    Raises:\n        ValueError: If the input tensor is not of a floating-point dtype or if sigma is negative.\n    \"\"\"\n    if not image.is_floating_point():\n        raise ValueError(f\"Input tensor is expected to be in float dtype, got dtype={image.dtype}\")\n    if sigma < 0:\n        raise ValueError(f\"sigma shouldn't be negative. Got {sigma}\")\n\n    # Generate Gaussian noise\n    noise = torch.randn_like(image) * sigma + mean\n\n    # Add noise to the image\n    noisy_image = image + noise\n\n    # Clip the values to the [0, 1] range if required\n    if clip:\n        noisy_image = torch.clamp(noisy_image, 0.0, 1.0)\n\n    return noisy_image\n```\n\nThis function uses PyTorch to generate Gaussian noise and add it to the input image tensor. The `torch.randn_like` function is used to create a noise tensor with the same shape as the input image, and the noise is scaled by `sigma` and shifted by `mean`. The `torch.clamp` function is used to clip the values to the [0, 1] range if the `clip` parameter is set to `True`.",
    "prompt": "Write a Python function `gaussian_noise_image` that adds Gaussian noise to an input image tensor. The function should accept the following parameters: `image` (a float tensor), `mean` (mean of the Gaussian noise, defaulting to 0.0), `sigma` (standard deviation of the Gaussian noise, defaulting to 0.1), and `clip` (a boolean indicating whether to clip the output values to the [0, 1] range, defaulting to `True`). The function should return the noisy image tensor. Ensure that the input tensor is of a floating-point dtype and that `sigma` is non-negative, raising a `ValueError` if these conditions are not met.  if not image.is_floating_point():\n        raise ValueError(f\"Input tensor is expected to be in float dtype, got dtype={image.dtype}\")\n    if sigma < 0:\n        raise ValueError(f\"sigma shouldn't be negative. Got {sigma}\")",
    "function_name": "gaussian_noise_image",
    "ground_truth": "torchvision/transforms/v2/functional/_misc.py",
    "test": "test/test_transforms_v2.py::TestGaussianNoise",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Segmentation",
    "data": "Image"
}