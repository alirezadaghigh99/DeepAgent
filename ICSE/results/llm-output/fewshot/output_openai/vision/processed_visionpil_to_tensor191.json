{
    "result": "Certainly! Below is a Python function `pil_to_tensor` that converts a PIL Image to a tensor, following the specifications you provided:\n\n```python\nimport torch\nfrom PIL import Image\nimport numpy as np\n\ndef pil_to_tensor(pic: Image.Image) -> torch.Tensor:\n    \"\"\"\n    Converts a PIL Image to a tensor of the same type.\n\n    Args:\n        pic (PIL.Image.Image): The input PIL Image.\n\n    Returns:\n        torch.Tensor: The converted tensor.\n\n    Raises:\n        TypeError: If the input is not a PIL Image.\n    \"\"\"\n    if not isinstance(pic, Image.Image):\n        raise TypeError(f\"Input should be a PIL Image. Got {type(pic)}\")\n\n    # Check if the input is an accimage Image\n    if hasattr(pic, 'accimage'):\n        # Convert accimage to a numpy array and then to a tensor\n        np_array = np.array(pic)\n        return torch.from_numpy(np_array).to(torch.uint8)\n\n    # Convert PIL Image to a numpy array\n    np_array = np.array(pic, copy=True)\n\n    # Convert numpy array to a tensor\n    tensor = torch.from_numpy(np_array)\n\n    # Rearrange dimensions if necessary (e.g., HWC to CHW)\n    if pic.mode == 'RGB':\n        tensor = tensor.permute(2, 0, 1)  # Convert HWC to CHW\n\n    return tensor\n```\n\n### Key Points:\n- **Type Checking**: The function checks if the input is a PIL Image and raises a `TypeError` if not.\n- **Accimage Handling**: If the input is an accimage Image, it converts it to a numpy array and then to a tensor of type `uint8`.\n- **PIL Image Conversion**: For standard PIL Images, it converts the image to a numpy array, then to a tensor, and rearranges the dimensions from HWC (Height, Width, Channels) to CHW (Channels, Height, Width) if the image is in RGB mode.\n- **Deep Copy**: The conversion to a numpy array is done with `copy=True` to ensure a deep copy of the underlying data.",
    "prompt": "Generate a Python function called pil_to_tensor that converts a PIL Image to a tensor of the same type. The input parameter is a PIL Image called pic. The function does not support torchscript. It performs a deep copy of the underlying array. If the input is not a PIL Image, a TypeError is raised. If the input is an accimage Image, the function returns a tensor of type uint8. Otherwise, it converts the PIL Image to a tensor, rearranges the dimensions, and returns the tensor.",
    "function_name": "pil_to_tensor",
    "ground_truth": "torchvision/transforms/functional.py",
    "test": "test/test_transforms.py::TestToTensor::test_pil_to_tensor",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}