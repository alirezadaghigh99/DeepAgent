{
    "result": "To create the `_get_inverse_affine_matrix` function, we need to compute the affine transformation matrix considering rotation, scaling, shearing, and translation. Then, if the `inverted` flag is set to `True`, we return the inverse of this matrix. Here's how you can implement this function:\n\n```python\nimport math\nfrom typing import List\n\ndef _get_inverse_affine_matrix(\n    center: List[float],\n    angle: float,\n    translate: List[float],\n    scale: float,\n    shear: List[float],\n    inverted: bool\n) -> List[float]:\n    \"\"\"\n    Computes the inverse affine transformation matrix for image processing.\n\n    Args:\n        center (List[float]): The center of the rotation, given as [cx, cy].\n        angle (float): The angle of rotation in degrees.\n        translate (List[float]): The translation values [tx, ty].\n        scale (float): The scaling factor.\n        shear (List[float]): The shear angles [sx, sy].\n        inverted (bool): Flag indicating whether to return the inverted matrix.\n\n    Returns:\n        List[float]: A list of 6 float values representing the computed affine transformation matrix.\n\n    Raises:\n        ValueError: If input lists do not have the expected lengths or if invalid data types are provided.\n    \"\"\"\n    if len(center) != 2 or len(translate) != 2 or len(shear) != 2:\n        raise ValueError(\"Input lists must have exactly two elements.\")\n\n    cx, cy = center\n    tx, ty = translate\n    sx, sy = shear\n\n    # Convert angles from degrees to radians\n    angle_rad = math.radians(angle)\n    sx_rad = math.radians(sx)\n    sy_rad = math.radians(sy)\n\n    # Compute rotation matrix components\n    cos_a = math.cos(angle_rad)\n    sin_a = math.sin(angle_rad)\n\n    # Compute shear matrix components\n    tan_sx = math.tan(sx_rad)\n    tan_sy = math.tan(sy_rad)\n\n    # Compute the affine transformation matrix\n    a = cos_a / scale\n    b = sin_a / scale\n    c = -sin_a / scale\n    d = cos_a / scale\n\n    # Apply shear\n    a += tan_sy * b\n    d += tan_sx * c\n\n    # Compute translation\n    tx = tx - cx * a - cy * b + cx\n    ty = ty - cx * c - cy * d + cy\n\n    # Affine matrix\n    matrix = [a, b, tx, c, d, ty]\n\n    if inverted:\n        # Compute the inverse of the affine matrix\n        det = a * d - b * c\n        if det == 0:\n            raise ValueError(\"The affine transformation matrix is not invertible.\")\n\n        inv_a = d / det\n        inv_b = -b / det\n        inv_c = -c / det\n        inv_d = a / det\n        inv_tx = (b * ty - d * tx) / det\n        inv_ty = (c * tx - a * ty) / det\n\n        matrix = [inv_a, inv_b, inv_tx, inv_c, inv_d, inv_ty]\n\n    return matrix\n```\n\n### Key Points:\n- **Input Validation**: The function checks if the input lists have the correct lengths and raises a `ValueError` if they don't.\n- **Angle Conversion**: Angles are converted from degrees to radians for trigonometric calculations.\n- **Matrix Calculation**: The affine transformation matrix is calculated using rotation, scaling, and shearing.\n- **Inversion**: If the `inverted` flag is `True`, the function calculates the inverse of the affine matrix.\n- **Error Handling**: The function raises an error if the matrix is not invertible (i.e., determinant is zero).",
    "prompt": "Create a Python function _get_inverse_affine_matrix that computes the inverse matrix for an affine transformation used in image processing. The function should take in parameters including the center of rotation, the angle of rotation, translation values, scale, shear angles, and a boolean to indicate whether the matrix should be inverted. The function computes the affine transformation matrix by considering rotation, scaling, shearing, and translation, and then returns the inverse of this matrix if the inverted flag is set to True. Ensure to handle errors such as invalid input types or values.\n\nInputs:\n\ncenter (List[float]): The center of the rotation, given as [cx, cy].\nangle (float): The angle of rotation in degrees.\ntranslate (List[float]): The translation values [tx, ty].\nscale (float): The scaling factor.\nshear (List[float]): The shear angles [sx, sy].\ninverted (bool): Flag indicating whether to return the inverted matrix.\nOutputs:\n\nReturns a list of 6 float values representing the computed affine transformation matrix.\nError Handling:\n\nEnsure the function properly handles cases where input lists do not have the expected lengths or when invalid data types are provided.",
    "function_name": "_get_inverse_affine_matrix",
    "ground_truth": "torchvision/transforms/functional.py",
    "test": "test/test_transforms.py::TestAffine::test_transformation_range",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}