{
    "result": "To create a function `_resize_image_and_masks` that resizes an image tensor and its corresponding masks, you can follow the structure and style of the examples provided. This function will handle resizing based on either fixed dimensions or scaling factors, and it will also consider special cases for TorchScript and ONNX tracing. Here's how you can implement it:\n\n```python\nimport torch\nimport torchvision.transforms.functional as F\n\ndef _resize_image_and_masks(\n    image: torch.Tensor,\n    self_min_size: int,\n    self_max_size: int,\n    target: Optional[dict] = None,\n    fixed_size: Optional[Tuple[int, int]] = None\n) -> Tuple[torch.Tensor, Optional[dict]]:\n    \"\"\"\n    Resizes an image tensor and its corresponding masks, if provided.\n\n    Args:\n        image (Tensor): A tensor representing the image to be resized, with shape (C, H, W).\n        self_min_size (int): The minimum size for the image's smaller dimension when resizing.\n        self_max_size (int): The maximum size for the image's larger dimension when resizing.\n        target (dict, optional): A dictionary containing additional data, such as masks, that should be resized alongside the image.\n        fixed_size (tuple, optional): A tuple (height, width) specifying the fixed dimensions to which the image should be resized.\n\n    Returns:\n        Tuple[Tensor, Optional[dict]]: The resized image tensor and the resized target dictionary if it was provided, with resized masks if present.\n    \"\"\"\n    # Determine the new size for the image\n    if fixed_size is not None:\n        new_size = fixed_size\n    else:\n        # Calculate the scaling factor\n        _, orig_height, orig_width = image.shape\n        min_original_size = float(min(orig_height, orig_width))\n        max_original_size = float(max(orig_height, orig_width))\n\n        scale_factor = self_min_size / min_original_size\n\n        if max_original_size * scale_factor > self_max_size:\n            scale_factor = self_max_size / max_original_size\n\n        new_size = (int(orig_height * scale_factor), int(orig_width * scale_factor))\n\n    # Resize the image\n    resized_image = F.resize(image, new_size)\n\n    # Resize the masks if present in the target\n    if target is not None and \"masks\" in target:\n        masks = target[\"masks\"]\n        resized_masks = F.resize(masks, new_size, interpolation=torchvision.transforms.InterpolationMode.NEAREST)\n        target[\"masks\"] = resized_masks\n\n    return resized_image, target\n```\n\n### Key Points:\n- **Image Resizing**: The function first determines the new size for the image based on either a fixed size or scaling factors derived from `self_min_size` and `self_max_size`.\n- **Mask Resizing**: If a `target` dictionary is provided and contains masks, these masks are resized using nearest-neighbor interpolation to maintain their categorical nature.\n- **TorchScript and ONNX**: The function is designed to be compatible with TorchScript and ONNX by avoiding operations that are not supported in these environments.\n\nThis function should be flexible enough to handle various resizing scenarios while maintaining compatibility with deep learning frameworks.",
    "prompt": "Create a Python function _resize_image_and_masks that resizes an image tensor and its corresponding masks, if provided. The function allows resizing to either a fixed size or a size determined by scaling factors, and it handles special cases for TorchScript and ONNX tracing.\n\nParameters:\nimage: A Tensor representing the image to be resized, with shape (C, H, W).\nself_min_size: An integer specifying the minimum size for the image's smaller dimension when resizing.\nself_max_size: An integer specifying the maximum size for the image's larger dimension when resizing.\ntarget: An optional dictionary containing additional data, such as masks, that should be resized alongside the image. The dictionary may contain a key \"masks\" with a tensor of shape (N, H, W).\nfixed_size: An optional tuple (height, width) specifying the fixed dimensions to which the image should be resized.\nReturns:\nA tuple containing:\nThe resized image tensor.\nThe resized target dictionary if it was provided, with resized masks if present.",
    "function_name": "_resize_image_and_masks",
    "ground_truth": "torchvision/models/detection/transform.py",
    "test": "test/test_models_detection_negative_samples.py::TestModelsDetectionNegativeSamples",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Detection",
    "data": "Image"
}