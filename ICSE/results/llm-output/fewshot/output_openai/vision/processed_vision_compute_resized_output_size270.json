{
    "result": "Here's a Python function `_compute_resized_output_size` that calculates the new size of an image after resizing, based on the original `image_size` (height and width). The function handles different cases for the `size` parameter and includes checks for various invalid configurations:\n\n```python\ndef _compute_resized_output_size(\n    image_size: Tuple[int, int],\n    size: Optional[Union[int, Tuple[int, int]]] = None,\n    max_size: Optional[int] = None,\n    allow_size_none: bool = False\n) -> List[int]:\n    \"\"\"\n    Calculate the new size of an image after resizing.\n\n    Args:\n        image_size (Tuple[int, int]): Original image size as (height, width).\n        size (Optional[Union[int, Tuple[int, int]]]): Desired size of the smaller edge or both dimensions.\n        max_size (Optional[int]): Maximum size of the longer edge.\n        allow_size_none (bool): Allow `size` to be `None`.\n\n    Returns:\n        List[int]: New image size as [new_height, new_width].\n\n    Raises:\n        ValueError: If `size` is `None` and `max_size` is not an integer, or if `max_size` is smaller than the requested size.\n    \"\"\"\n    if size is None:\n        if not allow_size_none:\n            raise ValueError(\"`size` cannot be `None` unless `allow_size_none` is True.\")\n        if max_size is None:\n            raise ValueError(\"`max_size` must be an integer if `size` is `None`.\")\n        # If size is None and max_size is provided, scale the image to fit within max_size\n        max_dim = max(image_size)\n        scale = max_size / max_dim\n        new_size = [int(dim * scale) for dim in image_size]\n    elif isinstance(size, int):\n        # Resize the smaller edge to `size` while maintaining aspect ratio\n        min_dim = min(image_size)\n        scale = size / min_dim\n        new_size = [int(dim * scale) for dim in image_size]\n        if max_size is not None and max(new_size) > max_size:\n            scale = max_size / max(new_size)\n            new_size = [int(dim * scale) for dim in new_size]\n    elif isinstance(size, (tuple, list)) and len(size) == 2:\n        new_size = list(size)\n        if max_size is not None and max(new_size) > max_size:\n            raise ValueError(\"`max_size` must be greater than or equal to the requested size.\")\n    else:\n        raise ValueError(\"`size` must be an int, a tuple of two ints, or `None`.\")\n\n    return new_size\n```\n\n### Explanation:\n- **Parameters**:\n  - `image_size`: A tuple representing the original image dimensions (height, width).\n  - `size`: Can be `None`, an integer, or a tuple of two integers. It specifies the desired size.\n  - `max_size`: An optional integer that limits the size of the longer edge.\n  - `allow_size_none`: A boolean that allows `size` to be `None`.\n\n- **Functionality**:\n  - If `size` is `None`, the function checks if `allow_size_none` is `True` and if `max_size` is provided. It scales the image to fit within `max_size`.\n  - If `size` is an integer, it resizes the smaller edge to `size` while maintaining the aspect ratio. It also checks if the resized dimensions exceed `max_size`.\n  - If `size` is a tuple of two integers, it directly uses these as the new dimensions, checking against `max_size`.\n  - Raises `ValueError` for invalid configurations, such as when `size` is `None` without `allow_size_none` being `True`, or when `max_size` is smaller than the requested size.",
    "prompt": "Write a Python function `_compute_resized_output_size` that calculates the new size of an image after resizing, based on the original `image_size` (height and width). The function accepts parameters: `size`, an optional list specifying the desired size of the smaller edge or both dimensions; `max_size`, an optional integer that limits the size of the longer edge; and `allow_size_none`, a boolean that permits `size` to be `None` (only used in version 2). The function should handle different cases where `size` is `None`, a single value, or a pair of values, and return a list with the new height and width. The function should include checks to raise a `ValueError` if `size` is `None` but `max_size` is not an integer, if `max_size` is smaller than the requested size, or if any other invalid configuration is encountered.",
    "function_name": "_compute_resized_output_size",
    "ground_truth": "torchvision/transforms/functional.py#L357",
    "test": "test/test_transforms.py::test_resize",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}