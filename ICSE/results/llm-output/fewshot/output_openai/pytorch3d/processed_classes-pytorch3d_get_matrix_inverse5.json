{
    "result": "To implement the `_get_matrix_inverse` function for the `Translate` class, you need to create an inverse transformation matrix. For a translation matrix, the inverse is simply a translation in the opposite direction. Here's how you can implement this:\n\n```python\n    def _get_matrix_inverse(self) -> torch.Tensor:\n        \"\"\"\n        Returns the inverse of the translation matrix stored in self._matrix.\n        \n        The inverse of a translation matrix is obtained by negating the translation components.\n        \n        Returns:\n            torch.Tensor: The inverse translation matrix.\n        \"\"\"\n        # Clone the original matrix to avoid modifying it\n        inverse_matrix = self._matrix.clone()\n        \n        # Negate the translation components (located in the last row, first three columns)\n        inverse_matrix[:, 3, :3] = -self._matrix[:, 3, :3]\n        \n        return inverse_matrix\n```\n\n### Explanation:\n- **Cloning the Matrix**: We start by cloning `self._matrix` to ensure that we do not modify the original matrix.\n- **Negating the Translation Components**: The translation components are located in the last row and the first three columns of the matrix. By negating these components, we effectively create the inverse of the translation.\n- **Return the Inverse Matrix**: Finally, we return the modified matrix as the inverse.\n\nThis function assumes that `self._matrix` is a batch of 4x4 matrices, where each matrix represents a translation in 3D space. The inverse of a translation matrix is simply a translation in the opposite direction, which is achieved by negating the translation vector.",
    "prompt": "Generate the `_get_matrix_inverse` function for the following class that returns the inverse of `self._matrix`. The function should create an inverse mask, apply it to the matrix, and return the result. The output should be a tensor.\n\n```python\nclass Translate(Transform3d):\n    def __init__(\n        self,\n        x,\n        y=None,\n        z=None,\n        dtype: torch.dtype = torch.float32,\n        device: Optional[Device] = None,\n    ) -> None:\n        xyz = _handle_input(x, y, z, dtype, device, \"Translate\")\n        super().__init__(device=xyz.device, dtype=dtype)\n        N = xyz.shape[0]\n\n        mat = torch.eye(4, dtype=dtype, device=self.device)\n        mat = mat.view(1, 4, 4).repeat(N, 1, 1)\n        mat[:, 3, :3] = xyz\n        self._matrix = mat\n\n    def _get_matrix_inverse(self) -> torch.Tensor:\n```",
    "function_name": "_get_matrix_inverse",
    "ground_truth": "pytorch3d/transforms/transform3d.py",
    "test": "tests/test_transforms.py::TestRotate",
    "class": "Translate",
    "stage": "Tabular",
    "task": "",
    "data": "pre-post process"
}