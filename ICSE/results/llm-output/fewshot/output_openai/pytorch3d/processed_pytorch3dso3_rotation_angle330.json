{
    "result": "Certainly! Below is a Python function `so3_rotation_angle` that calculates rotation angles from a batch of 3x3 rotation matrices using PyTorch. The function can return either the angle in radians or the cosine of the angle, and it includes checks and clamping to handle numerical stability:\n\n```python\nimport torch\n\ndef so3_rotation_angle(\n    R: torch.Tensor,\n    eps: float = 1e-4,\n    cos_angle: bool = False,\n    cos_bound: float = 1e-4,\n) -> torch.Tensor:\n    \"\"\"\n    Calculate rotation angles from a batch of 3x3 rotation matrices.\n\n    Args:\n        R (torch.Tensor): A tensor of shape (N, 3, 3) representing a batch of rotation matrices.\n        eps (float): A small epsilon value to handle numerical stability.\n        cos_angle (bool): If True, return the cosine of the rotation angle instead of the angle itself.\n        cos_bound (float): A small value to clamp the cosine of the angle to avoid non-finite outputs.\n\n    Returns:\n        torch.Tensor: A tensor of shape (N,) containing the rotation angles in radians or their cosines.\n    \"\"\"\n    if R.ndim != 3 or R.shape[1:] != (3, 3):\n        raise ValueError(\"Input must be a batch of 3x3 matrices.\")\n\n    # Calculate the trace of each 3x3 matrix\n    trace = R[:, 0, 0] + R[:, 1, 1] + R[:, 2, 2]\n\n    # Calculate the cosine of the rotation angle\n    cos_theta = (trace - 1) / 2\n\n    # Clamp the cosine to avoid numerical issues\n    cos_theta = torch.clamp(cos_theta, -1 + cos_bound, 1 - cos_bound)\n\n    if cos_angle:\n        return cos_theta\n\n    # Calculate the rotation angle in radians\n    angle = torch.acos(cos_theta)\n\n    return angle\n```\n\n### Key Features:\n- **Input Validation**: Ensures the input tensor `R` is a batch of 3x3 matrices.\n- **Trace Calculation**: Uses the trace of each matrix to compute the cosine of the rotation angle.\n- **Clamping**: Clamps the cosine values to prevent numerical instability when using `acos`.\n- **Flexible Output**: Can return either the cosine of the angle or the angle in radians, based on the `cos_angle` flag.\n\nThis function is designed to handle edge cases and ensure robust computation of rotation angles from rotation matrices.",
    "prompt": "Generate the python so3_rotation_angle function with torch calculates rotation angles from a batch of 3x3 rotation matrices by using the trace of the matrices. It allows returning either the angle in radians or the cosine of the angle, which can help avoid numerical instability in certain cases. The function includes checks to ensure the input is correctly shaped as a batch of 3x3 matrices and that the trace of each matrix falls within a valid range. If these conditions are not met, it raises a ValueError. Additionally, the function can clamp the cosine of the rotation angle to prevent non-finite outputs during the calculation of the angle using acos, ensuring robust handling of edge cases and potential numerical issues.\ndef so3_rotation_angle(\n    R: torch.Tensor,\n    eps: float = 1e-4,\n    cos_angle: bool = False,\n    cos_bound: float = 1e-4,\n) -> torch.Tensor:",
    "function_name": "so3_rotation_angle",
    "ground_truth": "pytorch3d/transforms/so3.py",
    "test": "tests/test_so3.py::TestSO3",
    "class": "",
    "stage": "Inference",
    "task": "Prediction",
    "data": "Image"
}