{
    "result": "Here's a Python function that implements the behavior you described:\n\n```python\nimport numpy as np\n\ndef sample_n_k(n, k):\n    \"\"\"\n    Sample k distinct elements uniformly from the range 0 to n.\n\n    Args:\n        n (int): The upper bound of the range (exclusive).\n        k (int): The number of distinct elements to sample.\n\n    Returns:\n        np.ndarray: An array of k distinct elements sampled from the range 0 to n.\n\n    Raises:\n        ValueError: If k is larger than n, k is negative, or n is negative.\n    \"\"\"\n    if k > n or k < 0 or n < 0:\n        raise ValueError(\"k must be non-negative and less than or equal to n, and n must be non-negative.\")\n    \n    if k == 0:\n        return np.array([], dtype=int)\n    \n    if 3 * k >= n:\n        return np.random.choice(n, k, replace=False)\n    \n    # Sample 2k elements and ensure they are distinct\n    sampled_elements = set()\n    while len(sampled_elements) < k:\n        sampled_elements.update(np.random.choice(n, 2 * k, replace=False))\n    \n    return np.array(list(sampled_elements)[:k])\n\n# Example usage:\n# result = sample_n_k(10, 3)\n# print(result)\n```\n\n### Explanation:\n- **Input Validation**: The function first checks if `k` is larger than `n`, if `k` is negative, or if `n` is negative, raising a `ValueError` if any of these conditions are true.\n- **Return Empty Array**: If `k` is 0, the function returns an empty NumPy array.\n- **Sampling Strategy**:\n  - If `3 * k >= n`, it uses `np.random.choice` to sample `k` elements without replacement.\n  - Otherwise, it samples `2k` elements and ensures they are distinct by using a set. It continues sampling until it has at least `k` distinct elements, then returns the first `k` elements.",
    "prompt": "Generate a Python function called sample_n_k that samples k distinct elements uniformly from the range 0 to n. The inputs are two integers, n and k. The function will raise a ValueError if k is larger than n or is negative. If k is 0, the function will return an empty NumPy array. If 3 times k is greater than or equal to n, the function will use NumPy's random.choice function to sample k elements without replacement. Otherwise, the function will sample 2k elements and ensure that they are distinct before returning the first k elements. The output of the function is a NumPy array containing k distinct elements sampled from the range 0 to n.",
    "function_name": "sample_n_k",
    "ground_truth": "pfrl/utils/random.py",
    "test": "tests/utils_tests/test_random.py::TestSampleNK::test_fast",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Table"
}