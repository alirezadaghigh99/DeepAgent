{
    "result": "Here's a Python function called `load_image` that meets the specified requirements. This function uses the PIL library to handle image loading and processing:\n\n```python\nfrom PIL import Image\nimport numpy as np\nimport logging\n\ndef load_image(image_file: str, target_size: Optional[Tuple[int, int]] = None, grayscale: bool = False, img_formats: List[str] = ['JPEG', 'PNG', 'BMP', 'GIF']) -> Optional[np.ndarray]:\n    \"\"\"\n    Load an image from a specified path and return it as an array.\n\n    Args:\n        image_file (str): Path to the image file.\n        target_size (Tuple[int, int], optional): Size to resize the input image to. Defaults to None.\n        grayscale (bool, optional): Whether to convert the image to grayscale. Defaults to False.\n        img_formats (List[str]): List of allowed image formats that can be loaded.\n\n    Returns:\n        np.ndarray: Processed image as an array, or None if loading fails or format is not allowed.\n    \"\"\"\n    try:\n        with Image.open(image_file) as img:\n            # Check if the image format is allowed\n            if img.format not in img_formats:\n                logging.warning(f\"Image format {img.format} is not allowed. Allowed formats: {img_formats}\")\n                return None\n\n            # Convert to grayscale if specified\n            if grayscale:\n                img = img.convert('L')\n            \n            # Resize the image if target_size is specified\n            if target_size is not None:\n                img = img.resize(target_size, Image.ANTIALIAS)\n\n            # Convert the image to a numpy array\n            img_array = np.array(img)\n            return img_array\n\n    except Exception as e:\n        logging.warning(f\"An error occurred while loading the image: {e}\")\n        return None\n```\n\n### Key Points:\n- **Image Loading**: The function uses `Image.open()` from the PIL library to open the image file.\n- **Format Check**: It checks if the image format is in the allowed list (`img_formats`). If not, it logs a warning and returns `None`.\n- **Grayscale Conversion**: If `grayscale` is `True`, the image is converted to grayscale using `img.convert('L')`.\n- **Resizing**: If `target_size` is provided, the image is resized using `img.resize()`.\n- **Exception Handling**: Any exceptions during the process are caught, a warning is logged, and `None` is returned.",
    "prompt": "Generate a Python function called load_image that loads an image from a specified path and returns an array version of the image. The function takes the following arguments:\n- image_file: Path to the image file.\n- target_size: Size to resize the input image to (optional).\n- grayscale: A boolean indicating whether to grayscale the image (optional).\n- img_formats: List of allowed image formats that can be loaded.\n\nThe function first opens the image file using the PIL library and checks if the image format is allowed based on the img_formats argument. If the format is not allowed, a warning is logged and None is returned. If the format is allowed, the function preprocesses the image by resizing and grayscaling it if specified, and then returns the processed image as an array.\n\nIf any exceptions occur during the image loading process, a warning is logged and None is returned.",
    "function_name": "load_image",
    "ground_truth": "imagededup/utils/image_utils.py",
    "test": "tests/test_image_utils.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}