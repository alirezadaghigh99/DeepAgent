{
    "result": "To create the `get_empty_config` function as described, you can follow the structure and logic outlined in your request. Here's how you can implement it:\n\n```python\nfrom typing import Optional, List, Tuple, Dict, Union\n\nclass NNCFConfig:\n    def __init__(self):\n        self.config = {}\n\n    def update(self, new_config: Dict):\n        self.config.update(new_config)\n\n    def __repr__(self):\n        return str(self.config)\n\ndef get_empty_config(\n    model_size: int = 4,\n    input_sample_sizes: Optional[Union[List[int], Tuple[int, ...]]] = None,\n    input_info: Optional[Dict] = None\n) -> NNCFConfig:\n    \"\"\"\n    Generate an NNCFConfig instance with specified parameters.\n\n    Args:\n        model_size (int): The size of the model. Defaults to 4.\n        input_sample_sizes (List[int] or Tuple[int], optional): Sample sizes for input. Defaults to None.\n        input_info (Dict, optional): Additional input information. Defaults to None.\n\n    Returns:\n        NNCFConfig: Configured NNCFConfig instance.\n    \"\"\"\n    if input_sample_sizes is None:\n        input_sample_sizes = [1, 1, 4, 4]\n\n    def _create_input_info():\n        return [{\"sample_size\": input_sample_sizes}]\n\n    config = NNCFConfig()\n    config.update({\n        \"model\": \"empty_config\",\n        \"model_size\": model_size,\n        \"input_info\": input_info if input_info is not None else _create_input_info()\n    })\n\n    return config\n\n# Example usage\nconfig = get_empty_config()\nprint(config)\n```\n\n### Explanation:\n\n1. **NNCFConfig Class**: A simple class to mimic the behavior of a configuration object. It has an `update` method to add new configuration settings and a `__repr__` method for easy printing.\n\n2. **get_empty_config Function**:\n   - **Parameters**:\n     - `model_size`: An integer with a default value of 4.\n     - `input_sample_sizes`: An optional list or tuple of integers. Defaults to `None`, and if `None`, it is set to `[1, 1, 4, 4]`.\n     - `input_info`: An optional dictionary. If not provided, it is generated using the `_create_input_info` function.\n   \n   - **Nested Function `_create_input_info`**: This function creates a list of dictionaries with the key `\"sample_size\"` based on the `input_sample_sizes` parameter.\n\n3. **Configuration Update**: The `NNCFConfig` instance is updated with the specified keys and values, and the final configuration is returned.\n\nThis implementation should meet the requirements you specified for generating a configuration object with the given parameters.",
    "prompt": "Generate a Python function called get_empty_config that takes in three optional parameters: model_size (default value of 4), input_sample_sizes (a list or tuple of integers, default value of None), and input_info (a dictionary, default value of None). The function returns an instance of NNCFConfig.\n\nIf input_sample_sizes is None, it is set to [1, 1, 4, 4]. The function also contains a nested function _create_input_info that creates a list of dictionaries with the key \"sample_size\" based on the input_sample_sizes parameter.\n\nThe NNCFConfig instance is created and updated with the keys \"model\" set to \"empty_config\", \"model_size\" set to the model_size parameter, and \"input_info\" set to input_info if it is provided, otherwise it is set to the result of calling _create_input_info(). The final output is the configured NNCFConfig instance.",
    "function_name": "get_empty_config",
    "ground_truth": "tests/torch/helpers.py",
    "test": "tests/torch/quantization/test_algo_quantization.py",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": ""
}