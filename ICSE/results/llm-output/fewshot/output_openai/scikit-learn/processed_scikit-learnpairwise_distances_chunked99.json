{
    "result": "To create a function called `pairwise_distances_chunked` that generates a distance matrix chunk by chunk with optional reduction, we can leverage the `pairwise_distances_chunked` function from `scikit-learn`. This function is designed to handle large datasets by computing pairwise distances in chunks, which helps manage memory usage. Below is an implementation of the function along with examples of usage both with and without a reduction function:\n\n```python\nfrom sklearn.metrics import pairwise_distances_chunked\nimport numpy as np\n\ndef pairwise_distances_chunked_custom(X, Y=None, reduce_func=None, metric='euclidean', n_jobs=None, working_memory=None, **kwds):\n    \"\"\"\n    Generate a distance matrix chunk by chunk with optional reduction.\n\n    Parameters:\n    - X: array-like of shape (n_samples_X, n_features)\n    - Y: array-like of shape (n_samples_Y, n_features), optional\n    - reduce_func: callable, optional\n        Function to apply on each chunk of the distance matrix.\n    - metric: str or callable, default='euclidean'\n    - n_jobs: int, optional\n    - working_memory: int, optional\n    - **kwds: additional keyword arguments for the metric function\n\n    Yields:\n    - A contiguous slice of the distance matrix, optionally processed by reduce_func.\n    \"\"\"\n    # Use scikit-learn's pairwise_distances_chunked to handle chunking\n    for chunk in pairwise_distances_chunked(X, Y, reduce_func=reduce_func, metric=metric, n_jobs=n_jobs, working_memory=working_memory, **kwds):\n        yield chunk\n\n# Example usage without reduce_func\nX = np.random.random((100, 5))\nY = np.random.random((100, 5))\n\n# Calculate pairwise distances in chunks\nfor chunk in pairwise_distances_chunked_custom(X, Y, metric='euclidean'):\n    print(chunk)\n\n# Example usage with reduce_func to find neighbors within a radius\ndef neighbors_within_radius(dist_chunk, radius=0.5):\n    return [np.where(chunk <= radius)[0] for chunk in dist_chunk]\n\n# Calculate pairwise distances and apply reduce_func\nfor neighbors in pairwise_distances_chunked_custom(X, Y, reduce_func=lambda chunk: neighbors_within_radius(chunk, radius=0.5), metric='euclidean'):\n    print(neighbors)\n\n# Example usage with reduce_func to calculate average distance\ndef average_distance(dist_chunk):\n    return np.mean(dist_chunk, axis=1)\n\n# Calculate pairwise distances and apply reduce_func\nfor avg_dist in pairwise_distances_chunked_custom(X, Y, reduce_func=average_distance, metric='euclidean'):\n    print(avg_dist)\n```\n\n### Explanation:\n\n- **Function Parameters:**\n  - `X` and `Y`: Input data arrays. If `Y` is not provided, the function computes distances within `X`.\n  - `reduce_func`: An optional function to process each chunk of the distance matrix.\n  - `metric`: The distance metric to use (e.g., 'euclidean').\n  - `n_jobs`: Number of jobs to run in parallel.\n  - `working_memory`: Memory size to use for each chunk.\n  - `**kwds`: Additional keyword arguments for the metric function.\n\n- **Yielding Chunks:**\n  - The function yields each chunk of the distance matrix, optionally processed by `reduce_func`.\n\n- **Examples:**\n  - Without `reduce_func`: Simply yields chunks of the distance matrix.\n  - With `reduce_func`: Demonstrates how to find neighbors within a radius and calculate average distances.\n\nThis implementation provides a flexible way to handle large datasets by processing them in manageable chunks, with the option to apply custom processing functions to each chunk.",
    "prompt": "Generate a Python function called pairwise_distances_chunked that generates a distance matrix chunk by chunk with optional reduction. The function takes in parameters X, Y, reduce_func, metric, n_jobs, working_memory, and additional keyword parameters. It calculates pairwise distances in working_memory-sized chunks and applies reduce_func on each chunk if provided. The function yields a contiguous slice of the distance matrix, optionally processed by reduce_func. The function also includes examples of usage without reduce_func and with reduce_func for retrieving neighbors and average distance within a radius.",
    "function_name": "pairwise_distances_chunked",
    "ground_truth": "sklearn/metrics/pairwise.py",
    "test": "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Table"
}