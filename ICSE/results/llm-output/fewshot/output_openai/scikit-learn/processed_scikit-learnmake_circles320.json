{
    "result": "Here's a Python function `make_circles` that generates a dataset with a large circle containing a smaller circle in 2D. This function includes parameters for the number of samples, shuffling, noise, random state, and the scale factor between the circles. It also includes examples of how to use the function:\n\n```python\nimport numpy as np\nfrom sklearn.utils import check_random_state\n\ndef make_circles(n_samples=100, shuffle=True, noise=None, random_state=None, factor=0.8):\n    \"\"\"\n    Generate a large circle containing a smaller circle in 2D.\n\n    Parameters:\n    - n_samples: int or tuple, default=100\n        Number of samples to generate. If an int, it is the total number of samples.\n        If a tuple, it should contain two elements specifying the number of samples\n        in the outer and inner circles respectively.\n    - shuffle: bool, default=True\n        Whether to shuffle the samples.\n    - noise: float, default=None\n        Standard deviation of Gaussian noise added to the data.\n    - random_state: int, RandomState instance, or None, default=None\n        Determines random number generation for dataset shuffling and noise.\n    - factor: float, default=0.8\n        Scale factor between the inner and outer circles.\n\n    Returns:\n    - X: ndarray of shape (n_samples, 2)\n        The generated samples.\n    - y: ndarray of shape (n_samples,)\n        The integer labels (0 or 1) for class membership of each sample.\n    \"\"\"\n    if isinstance(n_samples, int):\n        n_samples_out = n_samples // 2\n        n_samples_in = n_samples - n_samples_out\n    elif isinstance(n_samples, tuple):\n        if len(n_samples) != 2:\n            raise ValueError(\"When a tuple, n_samples must have exactly two elements.\")\n        n_samples_out, n_samples_in = n_samples\n    else:\n        raise TypeError(\"n_samples must be an int or a tuple of two ints.\")\n\n    rs = check_random_state(random_state)\n\n    # Generate outer circle\n    linspace_out = np.linspace(0, 2 * np.pi, n_samples_out, endpoint=False)\n    outer_circle = np.c_[np.cos(linspace_out), np.sin(linspace_out)]\n\n    # Generate inner circle\n    linspace_in = np.linspace(0, 2 * np.pi, n_samples_in, endpoint=False)\n    inner_circle = factor * np.c_[np.cos(linspace_in), np.sin(linspace_in)]\n\n    X = np.vstack([outer_circle, inner_circle])\n    y = np.hstack([np.zeros(n_samples_out, dtype=int), np.ones(n_samples_in, dtype=int)])\n\n    if shuffle:\n        indices = rs.permutation(n_samples_out + n_samples_in)\n        X, y = X[indices], y[indices]\n\n    if noise is not None:\n        X += rs.normal(scale=noise, size=X.shape)\n\n    return X, y\n\n# Example usage:\nX, y = make_circles(n_samples=(100, 50), shuffle=True, noise=0.05, random_state=42, factor=0.5)\nprint(\"Shape of X:\", X.shape)\nprint(\"Shape of y:\", y.shape)\n```\n\n### Explanation:\n- **n_samples**: Can be an integer or a tuple. If it's an integer, the function splits the samples equally between the outer and inner circles. If it's a tuple, it specifies the number of samples for each circle.\n- **shuffle**: If `True`, the samples are shuffled.\n- **noise**: Adds Gaussian noise to the data if specified.\n- **random_state**: Ensures reproducibility of the dataset generation.\n- **factor**: Determines the relative size of the inner circle compared to the outer circle.\n\nThe function returns the generated samples `X` and their corresponding labels `y`. The example usage demonstrates how to generate the dataset and check the shapes of `X` and `y`.",
    "prompt": "Generate a Python function called make_circles that creates a dataset with a large circle containing a smaller circle in 2D. The function takes the following parameters:\n\n- n_samples: an integer or a tuple specifying the number of points in the outer and inner circles.\n- shuffle: a boolean indicating whether to shuffle the samples.\n- noise: a float representing the standard deviation of Gaussian noise added to the data.\n- random_state: an integer, RandomState instance, or None for reproducible random number generation.\n- factor: a float specifying the scale factor between the inner and outer circles.\n\nThe function returns two arrays:\n- X: an ndarray of shape (n_samples, 2) containing the generated samples.\n- y: an ndarray of shape (n_samples,) with integer labels (0 or 1) for the class membership of each sample.\n\nThe function also includes examples of how to use it, including generating the dataset and accessing the shapes of X and y.if len(n_samples) != 2:\n            raise ValueError(\"When a tuple, n_samples must have exactly two elements.\")",
    "function_name": "make_circles",
    "ground_truth": "sklearn/datasets/_samples_generator.py",
    "test": "sklearn/datasets/tests/test_samples_generator.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Classification",
    "data": ""
}