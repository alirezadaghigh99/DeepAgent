{
    "result": "To create a function called `det_curve` that computes error rates for different probability thresholds in a binary classification task, you can follow the structure below. This function will calculate the false positive rate (FPR), false negative rate (FNR), and the thresholds based on the provided scores and true labels. Here's how you can implement it:\n\n```python\nimport numpy as np\nfrom sklearn.utils import check_consistent_length\nfrom sklearn.utils import column_or_1d\nfrom sklearn.utils.multiclass import type_of_target\n\ndef det_curve(y_true, y_score, pos_label=None, sample_weight=None):\n    \"\"\"\n    Compute error rates for different probability thresholds in a binary classification task.\n\n    Parameters:\n    - y_true: ndarray of shape (n_samples), true binary labels.\n    - y_score: ndarray of shape (n_samples), target scores.\n    - pos_label: int, float, bool, or str, default=None, label of the positive class.\n    - sample_weight: array-like of shape (n_samples), default=None, sample weights.\n\n    Returns:\n    - fpr: ndarray of shape (n_thresholds), false positive rate.\n    - fnr: ndarray of shape (n_thresholds), false negative rate.\n    - thresholds: ndarray of shape (n_thresholds), decreasing score values.\n    \"\"\"\n    y_true = column_or_1d(y_true)\n    y_score = column_or_1d(y_score)\n    check_consistent_length(y_true, y_score, sample_weight)\n\n    # Determine the positive label\n    if pos_label is None:\n        pos_label = 1.0 if type_of_target(y_true) == 'binary' else y_true.max()\n\n    # Sort scores and corresponding truth values\n    desc_score_indices = np.argsort(y_score, kind=\"mergesort\")[::-1]\n    y_score = y_score[desc_score_indices]\n    y_true = y_true[desc_score_indices]\n    if sample_weight is not None:\n        sample_weight = sample_weight[desc_score_indices]\n\n    # Determine distinct thresholds\n    distinct_value_indices = np.where(np.diff(y_score))[0]\n    threshold_idxs = np.r_[distinct_value_indices, y_true.size - 1]\n\n    # Initialize true positive and false positive counts\n    tps = np.cumsum(y_true == pos_label, dtype=np.float64)\n    if sample_weight is not None:\n        tps *= sample_weight\n    fps = np.cumsum(y_true != pos_label, dtype=np.float64)\n    if sample_weight is not None:\n        fps *= sample_weight\n\n    # Calculate FPR and FNR\n    tps = tps[threshold_idxs]\n    fps = fps[threshold_idxs]\n    thresholds = y_score[threshold_idxs]\n\n    fnr = 1 - tps / tps[-1]\n    fpr = fps / fps[-1]\n\n    return fpr, fnr, thresholds\n\n# Example usage:\n# y_true = np.array([0, 0, 1, 1])\n# y_score = np.array([0.1, 0.4, 0.35, 0.8])\n# fpr, fnr, thresholds = det_curve(y_true, y_score)\n# print(\"FPR:\", fpr)\n# print(\"FNR:\", fnr)\n# print(\"Thresholds:\", thresholds)\n```\n\n### Explanation:\n- **Sorting and Thresholds**: The function sorts the scores in descending order and identifies distinct thresholds where the score changes.\n- **True Positive and False Positive Rates**: It calculates cumulative sums for true positives and false positives, which are then used to compute FPR and FNR.\n- **Sample Weights**: If provided, sample weights are applied to the true positive and false positive counts.\n- **Output**: The function returns the false positive rate, false negative rate, and the thresholds.\n\nThis function is useful for evaluating the trade-offs between different error rates in binary classification tasks.",
    "prompt": "Generate a Python function called det_curve that computes error rates for different probability thresholds in a binary classification task. The function takes in the following parameters:\n\n- y_true: ndarray of shape (n_samples), representing the true binary labels.\n- y_score: ndarray of shape (n_samples), representing target scores.\n- pos_label: int, float, bool, or str, default=None, indicating the label of the positive class.\n- sample_weight: array-like of shape (n_samples), default=None, representing sample weights.\n\nThe function returns the following outputs:\n\n- fpr: ndarray of shape (n_thresholds), representing the false positive rate.\n- fnr: ndarray of shape (n_thresholds), representing the false negative rate.\n- thresholds: ndarray of shape (n_thresholds), representing decreasing score values.\n\nThe det_curve function is used for evaluating ranking and error tradeoffs in binary classification tasks. It is recommended to read more about it in the User Guide. Additionally, the function provides examples on how to use it with sample data.",
    "function_name": "det_curve",
    "ground_truth": "sklearn/metrics/_ranking.py",
    "test": "sklearn/metrics/tests/test_ranking.py",
    "class": "",
    "stage": "Evaluating&Metrics",
    "task": "Classification",
    "data": ""
}