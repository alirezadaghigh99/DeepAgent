{
    "result": "Certainly! Below is a Python function `make_hastie_10_2` that generates a binary classification dataset as described in Hastie et al. 2009, Example 10.2. The function uses NumPy for array operations and includes an example usage to demonstrate its output.\n\n```python\nimport numpy as np\nfrom sklearn.utils import check_random_state\n\ndef make_hastie_10_2(n_samples=12000, random_state=None):\n    \"\"\"\n    Generate a binary classification dataset (Hastie et al., Example 10.2).\n\n    The dataset consists of 10 Gaussian features, and the target is 1 if the sum \n    of squares of features > 9.34, otherwise -1.\n\n    Args:\n        n_samples (int): Number of samples to generate. Defaults to 12000.\n        random_state (int, RandomState instance, or None): Determines random number generation for dataset creation. \n            Pass an int for reproducible output across multiple function calls. Defaults to None.\n\n    Returns:\n        X (ndarray): Input samples of shape (n_samples, 10) with standard independent Gaussian features.\n        y (ndarray): Output values of shape (n_samples,) where y[i] is 1 if the sum of X[i] squared is > 9.34, otherwise -1.\n    \"\"\"\n    rs = check_random_state(random_state)\n    \n    # Generate random samples from a standard normal distribution\n    X = rs.normal(size=(n_samples, 10))\n    \n    # Calculate the target values based on the condition\n    y = ((X ** 2).sum(axis=1) > 9.34).astype(np.float64, copy=False)\n    y[y == 0.0] = -1.0\n    \n    return X, y\n\n# Example usage\nif __name__ == \"__main__\":\n    X, y = make_hastie_10_2(n_samples=5, random_state=42)\n    print(\"X shape:\", X.shape)\n    print(\"y shape:\", y.shape)\n    print(\"First few X values:\\n\", X[:5])\n    print(\"First few y values:\", y[:5])\n```\n\n### Explanation:\n- **Functionality**: The function generates a dataset with 10 features per sample, where each feature is drawn from a standard normal distribution. The target value is determined by whether the sum of the squares of the features exceeds 9.34.\n- **Parameters**:\n  - `n_samples`: Specifies the number of samples to generate.\n  - `random_state`: Ensures reproducibility by controlling the random number generation.\n- **Returns**:\n  - `X`: A NumPy array of shape `(n_samples, 10)` containing the input features.\n  - `y`: A NumPy array of shape `(n_samples,)` containing the binary target values.\n- **Example Usage**: Demonstrates how to call the function and print the shapes and initial values of the generated data.",
    "prompt": "Generate a Python function called make_hastie_10_2 that generates data for binary classification as used in Hastie et al. 2009, Example 10.2. The function takes in the number of samples (n_samples) and a random state for reproducibility. It returns two arrays: X, which contains input samples of shape (n_samples, 10) with standard independent Gaussian features, and y, which contains output values of shape (n_samples,) defined by a specific condition. The target y[i] is set to 1 if the sum of X[i] squared is greater than 9.34, otherwise -1. The function utilizes numpy for array operations and includes references to related dataset approaches and literature. An example usage is provided to demonstrate the function's output shapes and initial values.",
    "function_name": "make_hastie_10_2",
    "ground_truth": "sklearn/datasets/_samples_generator.py",
    "test": "sklearn/datasets/tests/test_samples_generator.py",
    "class": "",
    "stage": "Model Construction",
    "task": "Classification",
    "data": "Table"
}