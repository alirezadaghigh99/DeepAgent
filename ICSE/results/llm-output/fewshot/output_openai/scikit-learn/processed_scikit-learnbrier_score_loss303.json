{
    "result": "Certainly! Below is a Python function that implements the `brier_score_loss` as described. This function calculates the Brier score loss for binary classification tasks, ensuring proper input validation and handling of optional parameters like sample weights and positive class labels.\n\n```python\nimport numpy as np\nfrom sklearn.utils import check_consistent_length, column_or_1d\nfrom sklearn.utils.validation import _deprecate_positional_args\n\n@_deprecate_positional_args\ndef brier_score_loss(y_true, y_proba, *, sample_weight=None, pos_label=None):\n    \"\"\"\n    Compute the Brier score loss.\n\n    The Brier score measures the mean squared difference between the predicted \n    probabilities and the actual binary outcomes. It is suitable for binary \n    classification tasks.\n\n    Parameters:\n    - y_true: array-like of shape (n_samples,)\n        True binary labels.\n    - y_proba: array-like of shape (n_samples,)\n        Predicted probabilities of the positive class.\n    - sample_weight: array-like of shape (n_samples,), default=None\n        Sample weights.\n    - pos_label: int or str, default=None\n        The label of the positive class. If None, the positive class is assumed \n        to be the greater label.\n\n    Returns:\n    - score: float\n        Brier score loss.\n    \"\"\"\n    y_true = column_or_1d(y_true)\n    y_proba = column_or_1d(y_proba)\n    check_consistent_length(y_true, y_proba, sample_weight)\n\n    if pos_label is None:\n        pos_label = np.unique(y_true)[1]  # Assume the greater label is positive\n\n    # Convert y_true to binary (0, 1) based on pos_label\n    y_true_binary = np.array(y_true == pos_label, dtype=np.float64)\n\n    # Check if y_proba is within [0, 1]\n    if np.any((y_proba < 0) | (y_proba > 1)):\n        raise ValueError(\"y_proba should be in the range [0, 1].\")\n\n    # Calculate the Brier score\n    loss = np.average((y_true_binary - y_proba) ** 2, weights=sample_weight)\n\n    return loss\n```\n\n### Key Features:\n- **Input Validation**: Ensures that `y_true` and `y_proba` are one-dimensional and of the same length. It also checks that `y_proba` values are within the [0, 1] range.\n- **Handling of `pos_label`**: If `pos_label` is not provided, the function assumes the greater label in `y_true` is the positive class.\n- **Sample Weights**: Supports optional sample weights to compute a weighted average of the Brier score.\n- **Error Handling**: Raises errors for invalid input types and values, ensuring robust usage in various scenarios.",
    "prompt": "The `brier_score_loss` function calculates the Brier score loss, which measures the mean squared difference between predicted probabilities and actual binary outcomes. The function supports binary classification and includes error handling for deprecated parameters, input type checking, and label consistency. Inputs include the true labels (`y_true`), predicted probabilities (`y_proba`), optional sample weights, and a parameter to define the positive class label (`pos_label`). The output is a float representing the Brier score loss. Errors are raised for incorrect input types, non-binary classification targets, and probability values outside the [0, 1] range.",
    "function_name": "brier_score_loss",
    "ground_truth": "sklearn/metrics/_classification.py",
    "test": "sklearn/metrics/tests/test_classification.py",
    "class": "",
    "stage": "Model Construction",
    "task": "Classification",
    "data": ""
}