{
    "result": "Here's a Python function `empty_result` that meets the specified requirements:\n\n```python\nimport numpy as np\nfrom scipy.sparse import csr_matrix\n\ndef empty_result(multi_label: bool, num_classes: int, return_prediction: bool = True, return_proba: bool = True):\n    \"\"\"\n    Generate an empty classification result.\n\n    Args:\n        multi_label (bool): Indicates a multi-label setting if True, otherwise a single-label setting if False.\n        num_classes (int): Number of classes.\n        return_prediction (bool): Whether to return an empty result of prediction. Defaults to True.\n        return_proba (bool): Whether to return an empty result of probabilities. Defaults to True.\n\n    Returns:\n        Tuple: Depending on the input flags, returns a tuple containing:\n            - predictions: An empty ndarray of predictions if return_prediction is True, with dtype np.int64.\n            - proba: An empty ndarray of probabilities if return_proba is True, with dtype float.\n\n    Raises:\n        ValueError: If neither return_prediction nor return_proba is True.\n    \"\"\"\n    if not return_prediction and not return_proba:\n        raise ValueError(\"Invalid usage: At least one of 'prediction' or 'proba' must be True\")\n\n    predictions = None\n    proba = None\n\n    if return_prediction:\n        if multi_label:\n            predictions = csr_matrix((0, num_classes), dtype=np.int64)\n        else:\n            predictions = np.empty((0,), dtype=np.int64)\n\n    if return_proba:\n        if multi_label:\n            proba = csr_matrix((0, num_classes), dtype=float)\n        else:\n            proba = np.empty((0, num_classes), dtype=float)\n\n    if return_prediction and return_proba:\n        return predictions, proba\n    elif return_prediction:\n        return predictions\n    else:\n        return proba\n```\n\n### Explanation:\n- **Parameters**:\n  - `multi_label`: Determines if the setting is multi-label or single-label.\n  - `num_classes`: Specifies the number of classes.\n  - `return_prediction` and `return_proba`: Flags to determine which empty results to return.\n  \n- **Functionality**:\n  - If `return_prediction` is `True`, it returns an empty array for predictions. For multi-label, it uses a sparse matrix (`csr_matrix`), and for single-label, it uses a 1D numpy array.\n  - If `return_proba` is `True`, it returns an empty array for probabilities. For multi-label, it uses a sparse matrix, and for single-label, it uses a 2D numpy array.\n  - If neither `return_prediction` nor `return_proba` is `True`, it raises a `ValueError`.",
    "prompt": "Generate a Python function called empty_result that returns an empty classification result. The function takes in the following parameters:\n- multi_label: a boolean indicating a multi-label setting if True, otherwise a single-label setting if False\n- num_classes: an integer representing the number of classes\n- return_prediction: a boolean, defaulting to True, indicating whether to return an empty result of prediction\n- return_proba: a boolean, defaulting to True, indicating whether to return an empty result of probabilities\n\nThe function ensures that at least one of 'prediction' and 'proba' must be True. It returns the following outputs:\n- predictions: an empty ndarray of predictions if return_prediction is True, with data type np.int64\n- proba: an empty ndarray of probabilities if return_proba is True, with data type float\n\nIf neither return_prediction nor return_proba is True, the function raises a ValueError(\"Invalid usage: At least one of \\'prediction\\' or \\'proba\\' must be True\") . Depending on the values of multi_label, return_prediction, and return_proba, the function returns empty arrays using either csr_matrix or np.empty.",
    "function_name": "empty_result",
    "ground_truth": "small_text/utils/classification.py",
    "test": "tests/unit/small_text/utils/test_classification.py::ClassificationUtilsTest",
    "class": "",
    "stage": "Evaluating&Metrics",
    "task": "Classification",
    "data": "Text"
}