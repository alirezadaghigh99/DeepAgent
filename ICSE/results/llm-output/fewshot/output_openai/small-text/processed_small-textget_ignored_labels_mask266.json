{
    "result": "Certainly! Below is a Python function `get_ignored_labels_mask` that implements the behavior you described. It checks whether `y` is a `csr_matrix` or a regular array and returns a boolean mask based on the presence of the `ignored_label_value`.\n\n```python\nimport numpy as np\nfrom scipy.sparse import csr_matrix, isspmatrix_csr\n\ndef get_ignored_labels_mask(y, ignored_label_value):\n    \"\"\"\n    Create a mask indicating which elements or rows contain the ignored label value.\n\n    Args:\n        y (csr_matrix or array-like): Input data, either a sparse matrix or a dense array.\n        ignored_label_value: The label value to be ignored.\n\n    Returns:\n        np.ndarray: A boolean array where each element is True if the corresponding\n                    element or row contains the ignored label value, and False otherwise.\n    \"\"\"\n    if isspmatrix_csr(y):\n        # For csr_matrix, check each row for the ignored label value\n        mask = np.array([ignored_label_value in y[row].toarray() for row in range(y.shape[0])])\n    else:\n        # For dense arrays, check each element for the ignored label value\n        mask = (y == ignored_label_value)\n\n    return mask\n```\n\n### Explanation:\n- **Input Parameters:**\n  - `y`: This can be either a `csr_matrix` or a dense array-like structure.\n  - `ignored_label_value`: The value that you want to check for in `y`.\n\n- **Functionality:**\n  - If `y` is a `csr_matrix`, the function iterates over each row and checks if the `ignored_label_value` is present in that row. It uses `toarray()` to convert the sparse row to a dense format for comparison.\n  - If `y` is not a `csr_matrix`, it assumes `y` is a dense array and directly compares each element to `ignored_label_value` to create the mask.\n\n- **Output:**\n  - The function returns a boolean array (`mask`) where each element is `True` if the corresponding element or row contains the `ignored_label_value`, and `False` otherwise.",
    "prompt": "Create a Python function called get_ignored_labels_mask that takes in two parameters: y (which can be either a csr_matrix or an array) and ignored_label_value. If y is a csr_matrix, the function will return an array where each element is True if any value in the corresponding row of y is equal to ignored_label_value, and False otherwise. If y is not a csr_matrix, the function will return an array where each element is True if the value in y is equal to ignored_label_value, and False otherwise.",
    "function_name": "get_ignored_labels_mask",
    "ground_truth": "small_text/utils/labels.py",
    "test": "tests/unit/small_text/utils/test_labels.py::LabelUtilsTest",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Classification",
    "data": "Text"
}