{
    "result": "Here's a Python function `_get_label_quality_per_image` that computes the label quality score for an image using the \"softmin\" method. This function takes into account the per-pixel label quality scores and emphasizes the lowest-quality pixel labels more heavily in the calculation:\n\n```python\nimport numpy as np\n\ndef _get_label_quality_per_image(pixel_scores, method='softmin', temperature=0.1):\n    \"\"\"\n    Computes the label quality score for an image based on per-pixel label quality scores.\n\n    Parameters:\n        pixel_scores (np.ndarray): A 1D array of shape (N,) containing per-pixel label quality scores.\n        method (str): The method used to calculate the label quality score. Defaults to \"softmin\".\n        temperature (float): The temperature of the softmin function. Defaults to 0.1.\n\n    Returns:\n        float: The label quality score for the image, ranging from 0 (lowest quality) to 1 (highest quality).\n\n    Raises:\n        Exception: If pixel_scores is None, empty, or if temperature is 0 or None.\n        Exception: If an unsupported method is specified.\n    \"\"\"\n    if pixel_scores is None or len(pixel_scores) == 0:\n        raise Exception(\"pixel_scores must be a non-empty array.\")\n    \n    if temperature is None or temperature == 0:\n        raise Exception(\"Temperature must be a non-zero value.\")\n    \n    if method != 'softmin':\n        raise Exception(\"Unsupported method. Currently, only 'softmin' is supported.\")\n    \n    # Compute the softmin\n    exp_scores = np.exp(-pixel_scores / temperature)\n    softmin_score = np.sum(exp_scores * pixel_scores) / np.sum(exp_scores)\n    \n    # Normalize the score to be between 0 and 1\n    min_score = np.min(pixel_scores)\n    max_score = np.max(pixel_scores)\n    normalized_score = (softmin_score - min_score) / (max_score - min_score) if max_score > min_score else 0.0\n    \n    return normalized_score\n```\n\n### Explanation:\n- **Input Validation**: The function checks if `pixel_scores` is `None` or empty, and if `temperature` is `0` or `None`. It raises an exception if any of these conditions are met.\n- **Method Check**: The function currently supports only the \"softmin\" method. If another method is specified, an exception is raised.\n- **Softmin Calculation**: The function calculates the softmin of the pixel scores using the specified temperature. The softmin emphasizes lower scores more heavily.\n- **Normalization**: The resulting score is normalized to be between 0 and 1, based on the minimum and maximum pixel scores. This ensures the output is within the desired range.",
    "prompt": "Create a Python function _get_label_quality_per_image that computes the label quality score for an image based on per-pixel label quality scores. The function uses the \"softmin\" method by default, which emphasizes the lowest-quality pixel labels more heavily in the calculation.\n\nParameters:\npixel_scores: A NumPy array containing per-pixel label quality scores, flattened into a 1D array of shape (N,), where N is the number of pixels in the image.\nmethod: A string specifying the method used to calculate the label quality score. Currently, only the \"softmin\" method is supported. This parameter is optional and defaults to \"softmin\".\ntemperature: A float that determines the temperature of the softmin function. This parameter controls how much weight is given to lower-quality pixel labels. Lower values emphasize the lowest scores more, while higher values average the scores more evenly. The default value is 0.1.\nReturns:\nA float representing the label quality score for the image, ranging from 0 (lowest quality) to 1 (highest quality).If pixel_scores is None, empty, or if temperature is 0 or None, the function raises an Exception with a descriptive error message.\nIf an unsupported method is specified, an exception is raised with a message indicating the correct method to use.",
    "function_name": "_get_label_quality_per_image",
    "ground_truth": "cleanlab/segmentation/rank.py#L204",
    "test": "tests/test_segmentation.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "segmentation",
    "data": "Image"
}