{
    "result": "Certainly! Below is a Python function that implements a confusion matrix without relying on `sklearn`. This function assumes that the true and predicted labels are both 1D numpy arrays and contain the same set of distinct class labels.\n\n```python\nimport numpy as np\n\ndef confusion_matrix(true, pred):\n    \"\"\"\n    Compute the confusion matrix to evaluate the accuracy of a classification.\n\n    Parameters\n    ----------\n    true : np.ndarray 1d\n        Contains true labels. Assumes true and pred contain the same set of distinct labels.\n    pred : np.ndarray 1d\n        Contains predicted labels. Labels must be in {0, 1, ..., K-1} for a dataset with K classes.\n\n    Returns\n    -------\n    confusion_matrix : np.ndarray (2D)\n        Matrix of confusion counts with true labels on rows and predicted labels on columns.\n    \"\"\"\n    if true.shape != pred.shape:\n        raise ValueError(\"true and pred must have the same shape\")\n\n    # Find the number of classes\n    num_classes = len(np.unique(true))\n    \n    # Initialize the confusion matrix\n    cm = np.zeros((num_classes, num_classes), dtype=int)\n\n    # Populate the confusion matrix\n    for t, p in zip(true, pred):\n        cm[t, p] += 1\n\n    return cm\n\n# Example usage:\n# true_labels = np.array([0, 1, 2, 2, 0, 1])\n# pred_labels = np.array([0, 2, 1, 2, 0, 1])\n# cm = confusion_matrix(true_labels, pred_labels)\n# print(cm)\n```\n\n### Explanation:\n- **Input Validation**: The function first checks if the `true` and `pred` arrays have the same shape. If not, it raises a `ValueError`.\n- **Number of Classes**: It determines the number of classes by finding the unique elements in the `true` array.\n- **Confusion Matrix Initialization**: A zero matrix of size `(num_classes, num_classes)` is initialized to store the counts.\n- **Matrix Population**: The function iterates over the `true` and `pred` arrays, incrementing the appropriate cell in the confusion matrix for each pair of true and predicted labels.\n- **Return**: The populated confusion matrix is returned.",
    "prompt": "Generate a Python function called confusion_matrix that iImplements a confusion matrix for true labels\n    and predicted labels. true and pred MUST BE the same length\n    and have the same distinct set of class labels represented.\n\n    Results are identical (and similar computation time) to:\n        \"sklearn.metrics.confusion_matrix\"\n\n    However, this function avoids the dependency on sklearn.\n\n    Parameters\n    ----------\n    true : np.ndarray 1d\n      Contains labels.\n      Assumes true and pred contains the same set of distinct labels.\n\n    pred : np.ndarray 1d\n      A discrete vector of noisy labels, i.e. some labels may be erroneous.\n      *Format requirements*: for dataset with K classes, labels must be in {0,1,...,K-1}.\n\n    Returns\n    -------\n    confusion_matrix : np.ndarray (2D)\n      matrix of confusion counts with true on rows and pred on columns",
    "function_name": "confusion_matrix",
    "ground_truth": "cleanlab/internal/util.py",
    "test": "tests/test_util.py",
    "class": "",
    "stage": "Evaluating&Metrics",
    "task": "Classification",
    "data": "Table"
}