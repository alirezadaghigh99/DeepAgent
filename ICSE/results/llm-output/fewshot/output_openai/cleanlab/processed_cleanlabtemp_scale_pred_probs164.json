{
    "result": "To implement the `temp_scale_pred_probs` function, you can follow these steps:\n\n1. **Clip the probabilities** to avoid taking the logarithm of zero.\n2. **Normalize the probabilities** to ensure they sum to 1 for each set of predictions.\n3. **Apply temperature scaling** by adjusting the logits (logarithm of probabilities) with the temperature factor.\n4. **Recompute the probabilities** using the softmax function.\n\nHere's how you can implement this:\n\n```python\nimport numpy as np\n\ndef temp_scale_pred_probs(pred_probs: np.ndarray, temp: float) -> np.ndarray:\n    \"\"\"\n    Adjust predicted probabilities using temperature scaling.\n\n    Args:\n        pred_probs (np.ndarray): 2D array of predicted probabilities.\n        temp (float): Temperature factor for scaling.\n\n    Returns:\n        np.ndarray: Scaled and normalized probabilities.\n    \"\"\"\n    # Clip probabilities to avoid log(0)\n    clipped_probs = np.clip(pred_probs, 1e-15, 1 - 1e-15)\n    \n    # Normalize probabilities\n    clipped_probs /= clipped_probs.sum(axis=1, keepdims=True)\n    \n    # Compute logits\n    logits = np.log(clipped_probs)\n    \n    # Apply temperature scaling\n    scaled_logits = logits / temp\n    \n    # Compute scaled probabilities using softmax\n    exp_scaled_logits = np.exp(scaled_logits)\n    scaled_probs = exp_scaled_logits / exp_scaled_logits.sum(axis=1, keepdims=True)\n    \n    return scaled_probs\n```\n\n### Explanation:\n\n- **Clipping**: The probabilities are clipped to a small value (`1e-15`) to prevent issues with taking the logarithm of zero.\n- **Normalization**: The probabilities are normalized to ensure they sum to 1 across each row.\n- **Logits Calculation**: The logarithm of the probabilities is taken to get the logits.\n- **Temperature Scaling**: The logits are divided by the temperature factor. A temperature less than 1 will make the predictions sharper, while a temperature greater than 1 will make them smoother.\n- **Softmax**: The scaled logits are exponentiated and normalized to get the final scaled probabilities.\n\nThis function will return the adjusted probabilities after applying temperature scaling.",
    "prompt": "You need to implement a function named `temp_scale_pred_probs` that adjusts predicted probabilities using a temperature scaling technique. Temperature factor less than 1 sharpens the predictions, making them more confident, while a temperature greater than 1 smoothens the predictions, making them less confident. The function takes a 2D NumPy array of predicted probabilities (`pred_probs`) and a float (`temp`) representing the temperature factor. The probabilities are first clipped to avoid logarithm of zero and normalized. Then, the temperature scaling is applied using the softmax function after taking the logarithm of the probabilities. The function returns the scaled and normalized probabilities as a 2D NumPy array.",
    "function_name": "temp_scale_pred_probs",
    "ground_truth": "cleanlab/internal/multiannotator_utils.py#L353",
    "test": "tests/test_multiannotator.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Classification",
    "data": "Table"
}