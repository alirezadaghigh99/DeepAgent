{
    "result": "Certainly! Below is a Python function `create_knn_graph_and_index` that calculates the K-Nearest Neighbors (KNN) graph from input features. It includes optional parameters for the number of nearest neighbors, distance metric, a flag for correcting exact duplicates, and additional keyword arguments for the search index constructor. The function returns a tuple containing a sparse, weighted adjacency matrix and a KNN search object. I've also included examples demonstrating its usage with numpy arrays.\n\n```python\nimport numpy as np\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.sparse import csr_matrix\n\ndef create_knn_graph_and_index(\n    features: np.ndarray,\n    n_neighbors: int = 5,\n    metric: str = 'euclidean',\n    correct_duplicates: bool = False,\n    **kwargs\n) -> Tuple[csr_matrix, NearestNeighbors]:\n    \"\"\"\n    Create a KNN graph and a KNN search index from input features.\n\n    Args:\n        features (np.ndarray): Input feature array of shape (n_samples, n_features).\n        n_neighbors (int): Number of nearest neighbors to consider. Defaults to 5.\n        metric (str): Distance metric to use. Defaults to 'euclidean'.\n        correct_duplicates (bool): Whether to correct for exact duplicates. Defaults to False.\n        **kwargs: Additional keyword arguments for the NearestNeighbors constructor.\n\n    Returns:\n        Tuple[csr_matrix, NearestNeighbors]: A tuple containing a sparse, weighted adjacency matrix\n                                             representing the KNN graph and a fitted KNN search object.\n    \"\"\"\n    # Initialize the NearestNeighbors object\n    knn = NearestNeighbors(n_neighbors=n_neighbors, metric=metric, **kwargs)\n    \n    # Fit the model to the features\n    knn.fit(features)\n    \n    # Find the k-neighbors for each sample\n    distances, indices = knn.kneighbors(features)\n    \n    # Correct for exact duplicates if required\n    if correct_duplicates:\n        for i in range(features.shape[0]):\n            unique_indices = np.unique(indices[i])\n            if len(unique_indices) < n_neighbors:\n                additional_indices = np.setdiff1d(np.arange(features.shape[0]), unique_indices)\n                indices[i, len(unique_indices):] = additional_indices[:n_neighbors - len(unique_indices)]\n    \n    # Create a sparse adjacency matrix\n    n_samples = features.shape[0]\n    row_indices = np.repeat(np.arange(n_samples), n_neighbors)\n    col_indices = indices.flatten()\n    data = distances.flatten()\n    \n    adjacency_matrix = csr_matrix((data, (row_indices, col_indices)), shape=(n_samples, n_samples))\n    \n    return adjacency_matrix, knn\n\n# Example usage\nif __name__ == \"__main__\":\n    # Generate some random data\n    np.random.seed(42)\n    features = np.random.rand(10, 3)\n\n    # Create KNN graph and index\n    adjacency_matrix, knn_index = create_knn_graph_and_index(features, n_neighbors=3)\n\n    # Print the adjacency matrix\n    print(\"Adjacency Matrix:\")\n    print(adjacency_matrix.toarray())\n\n    # Print the KNN index\n    print(\"\\nKNN Index:\")\n    print(knn_index)\n```\n\n### Explanation:\n- **Function Parameters:**\n  - `features`: The input feature array.\n  - `n_neighbors`: Number of nearest neighbors to consider.\n  - `metric`: Distance metric for calculating distances.\n  - `correct_duplicates`: Flag to correct for exact duplicates in the data.\n  - `**kwargs`: Additional arguments for the `NearestNeighbors` constructor.\n\n- **Return Values:**\n  - A sparse adjacency matrix representing the KNN graph.\n  - A fitted `NearestNeighbors` object.\n\n- **Example Usage:**\n  - The example demonstrates how to generate random data, create a KNN graph, and print the adjacency matrix and KNN index.",
    "prompt": "Generate a Python function called create_knn_graph_and_index that calculates the KNN graph from input features. The function takes in a feature array, optional parameters for the number of nearest neighbors and distance metric, a boolean flag for correcting exact duplicates, and additional keyword arguments for the search index constructor. \n\nThe function returns a tuple containing a sparse, weighted adjacency matrix representing the KNN graph of the feature array and a k-nearest neighbors search object fitted to the input feature array. The function also includes examples demonstrating its usage with numpy arrays.",
    "function_name": "create_knn_graph_and_index",
    "ground_truth": "cleanlab/internal/neighbor/knn_graph.py",
    "test": "tests/internal/neighbor/test_neighbor.py",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": ""
}