{
    "result": "Here's a Python function `noise_matrix_is_valid` that checks if a given noise matrix is learnable. The function includes detailed comments to explain each step:\n\n```python\nimport numpy as np\n\ndef noise_matrix_is_valid(noise_matrix: np.ndarray, py: np.ndarray, verbose: bool = False) -> bool:\n    \"\"\"\n    Check if the given noise_matrix is learnable, meaning it is possible to achieve\n    better than random performance for the amount of noise in the matrix.\n\n    Args:\n        noise_matrix (np.ndarray): A square matrix where each element represents the\n                                   probability of a label being flipped to another label.\n                                   The matrix should be of shape (C, C) where C is the number\n                                   of classes.\n        py (np.ndarray): A 1D array representing the prior probabilities of each class.\n                         The array should be of shape (C,).\n        verbose (bool): If True, print detailed information about the validation process.\n\n    Returns:\n        bool: True if the noise matrix is learnable, False otherwise.\n    \"\"\"\n    # Check if the noise matrix is square\n    if noise_matrix.shape[0] != noise_matrix.shape[1]:\n        if verbose:\n            print(\"The noise matrix is not square.\")\n        return False\n\n    # Check if the dimensions of py match the noise matrix\n    if noise_matrix.shape[0] != py.shape[0]:\n        if verbose:\n            print(\"The dimensions of py do not match the noise matrix.\")\n        return False\n\n    # Check if the noise matrix is a valid probability matrix\n    if not np.allclose(noise_matrix.sum(axis=1), 1):\n        if verbose:\n            print(\"The rows of the noise matrix do not sum to 1.\")\n        return False\n\n    # Calculate the effective noise rate\n    # The effective noise rate is the probability of a label being flipped to any other label\n    effective_noise_rate = 1 - np.trace(noise_matrix) / noise_matrix.shape[0]\n\n    # Calculate the expected random performance\n    # This is the performance expected if predictions are made randomly according to py\n    expected_random_performance = np.sum(py ** 2)\n\n    # Calculate the expected performance with the noise matrix\n    # This is the performance expected if predictions are made according to the noise matrix\n    expected_performance_with_noise = np.sum(np.diag(noise_matrix) * py)\n\n    if verbose:\n        print(f\"Effective noise rate: {effective_noise_rate}\")\n        print(f\"Expected random performance: {expected_random_performance}\")\n        print(f\"Expected performance with noise: {expected_performance_with_noise}\")\n\n    # The noise matrix is learnable if the expected performance with noise is greater\n    # than the expected random performance\n    is_learnable = expected_performance_with_noise > expected_random_performance\n\n    if verbose:\n        if is_learnable:\n            print(\"The noise matrix is learnable.\")\n        else:\n            print(\"The noise matrix is not learnable.\")\n\n    return is_learnable\n```\n\n### Explanation:\n- **Input Validation**: The function first checks if the noise matrix is square and if the dimensions of `py` match the noise matrix.\n- **Probability Matrix Check**: It ensures that each row of the noise matrix sums to 1, confirming it's a valid probability matrix.\n- **Effective Noise Rate**: This is calculated as the probability of a label being flipped to any other label.\n- **Expected Performances**: The function calculates the expected random performance and the expected performance with noise.\n- **Learnability Check**: The noise matrix is considered learnable if the expected performance with noise is greater than the expected random performance.",
    "prompt": "Generate a Python function called noise_matrix_is_valid that takes in a noise_matrix (np.ndarray), py (np.ndarray), and an optional verbose parameter. The function checks if the given noise_matrix is a learnable matrix, meaning it is possible to achieve better than random performance for the amount of noise in the matrix. The function calculates probabilities based on the input matrices and returns a boolean value indicating whether the noise matrix is learnable. The function includes detailed comments explaining the purpose of each step and the expected inputs and outputs.",
    "function_name": "noise_matrix_is_valid",
    "ground_truth": "cleanlab/benchmarking/noise_generation.py",
    "test": "tests/test_noise_generation.py",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": ""
}