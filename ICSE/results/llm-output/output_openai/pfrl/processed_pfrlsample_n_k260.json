{
    "result": "To implement the `sample_n_k` function, we need to handle several cases based on the values of `n` and `k`. Here's a step-by-step breakdown of the logic:\n\n1. **Input Validation**: Check if `k` is larger than `n` or if `k` is negative. If either condition is true, raise a `ValueError`.\n\n2. **Return an Empty Array**: If `k` is 0, return an empty NumPy array.\n\n3. **Sampling Strategy**:\n   - If `3 * k >= n`, use NumPy's `random.choice` to sample `k` elements without replacement from the range `[0, n)`.\n   - Otherwise, sample `2 * k` elements and ensure they are distinct. Then, return the first `k` elements from this distinct set.\n\nHere's the implementation of the `sample_n_k` function:\n\n```python\nimport numpy as np\n\ndef sample_n_k(n, k):\n    if k > n or k < 0:\n        raise ValueError(\"k must be non-negative and less than or equal to n.\")\n    \n    if k == 0:\n        return np.array([], dtype=int)\n    \n    if 3 * k >= n:\n        # Use numpy's random.choice to sample k elements without replacement\n        return np.random.choice(n, k, replace=False)\n    else:\n        # Sample 2k elements and ensure they are distinct\n        sampled_set = set()\n        while len(sampled_set) < k:\n            # Sample 2k elements\n            samples = np.random.choice(n, 2 * k, replace=True)\n            sampled_set.update(samples)\n        \n        # Convert the set to a list and return the first k elements\n        sampled_list = list(sampled_set)\n        return np.array(sampled_list[:k])\n\n# Example usage:\n# result = sample_n_k(10, 3)\n# print(result)\n```\n\n### Explanation:\n\n- **Input Validation**: The function first checks if `k` is valid. If not, it raises a `ValueError`.\n\n- **Empty Array**: If `k` is 0, it returns an empty array using `np.array([], dtype=int)`.\n\n- **Sampling with `random.choice`**: If `3 * k >= n`, it uses `np.random.choice` with `replace=False` to ensure the elements are distinct.\n\n- **Sampling 2k Elements**: If `3 * k < n`, it samples `2 * k` elements, adds them to a set to ensure uniqueness, and continues until the set has at least `k` elements. It then converts the set to a list and returns the first `k` elements.\n\nThis approach ensures that the function efficiently samples `k` distinct elements from the range `[0, n)`.",
    "prompt": "Generate a Python function called sample_n_k that samples k distinct elements uniformly from the range 0 to n. The inputs are two integers, n and k. The function will raise a ValueError if k is larger than n or is negative. If k is 0, the function will return an empty NumPy array. If 3 times k is greater than or equal to n, the function will use NumPy's random.choice function to sample k elements without replacement. Otherwise, the function will sample 2k elements and ensure that they are distinct before returning the first k elements. The output of the function is a NumPy array containing k distinct elements sampled from the range 0 to n.",
    "function_name": "sample_n_k",
    "ground_truth": "pfrl/utils/random.py",
    "test": "tests/utils_tests/test_random.py::TestSampleNK::test_fast",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Table"
}