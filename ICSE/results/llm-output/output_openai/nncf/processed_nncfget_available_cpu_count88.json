{
    "result": "To create a Python function that returns the number of CPUs in the system, you can use the `psutil` library, which provides an easy way to retrieve system and hardware information. If `psutil` is not available, you can fall back to using the `os` and `multiprocessing` modules. Here's how you can implement the `get_available_cpu_count` function:\n\n```python\nimport os\nimport multiprocessing\nimport psutil\n\ndef get_available_cpu_count(logical=True):\n    try:\n        # Use psutil if available\n        if psutil:\n            return psutil.cpu_count(logical=logical)\n        else:\n            # Fallback to os and multiprocessing\n            if logical:\n                return os.cpu_count() or 1\n            else:\n                return multiprocessing.cpu_count() or 1\n    except Exception as e:\n        # In case of any exception, return 1\n        return 1\n\n# Example usage:\n# print(get_available_cpu_count())  # Default is True, returns logical cores\n# print(get_available_cpu_count(logical=False))  # Returns physical cores\n```\n\n### Explanation:\n- **psutil.cpu_count(logical=True/False):** This function returns the number of logical or physical CPUs depending on the `logical` parameter. It is a reliable way to get CPU information.\n- **os.cpu_count():** This function returns the number of logical CPUs in the system. It is a good fallback if `psutil` is not available.\n- **multiprocessing.cpu_count():** This function also returns the number of logical CPUs and serves as another fallback.\n- **Exception Handling:** If any exception occurs during the execution, the function returns `1` as a safe default.\n\nThis function should work on most systems and provide a robust way to determine the number of CPUs available.",
    "prompt": "Generate a python function called get_available_cpu_count that returns the number of CPUs in the system. The input parameter is a boolean called logical, which determines whether to return the number of physical cores only (if False) or the number of logical cores (if True). The output is an integer representing the number of CPUs. If an exception occurs, the function will return 1. Default value of logical is True",
    "function_name": "get_available_cpu_count",
    "ground_truth": "nncf/common/utils/os.py",
    "test": "tests/common/utils/test_os.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": ""
}