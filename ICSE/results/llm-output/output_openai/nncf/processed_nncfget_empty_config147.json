{
    "result": "To achieve the desired functionality, we need to define a function `get_empty_config` that creates and returns an instance of `NNCFConfig`. This function will handle optional parameters and set default values as specified. Additionally, it will include a nested function `_create_input_info` to generate the input information based on the `input_sample_sizes` parameter.\n\nHere's how you can implement this:\n\n```python\nclass NNCFConfig:\n    def __init__(self):\n        self.config = {}\n\n    def update(self, new_config):\n        self.config.update(new_config)\n\n    def __repr__(self):\n        return f\"NNCFConfig({self.config})\"\n\ndef get_empty_config(model_size=4, input_sample_sizes=None, input_info=None):\n    if input_sample_sizes is None:\n        input_sample_sizes = [1, 1, 4, 4]\n\n    def _create_input_info():\n        return [{\"sample_size\": size} for size in input_sample_sizes]\n\n    nncf_config = NNCFConfig()\n    nncf_config.update({\n        \"model\": \"empty_config\",\n        \"model_size\": model_size,\n        \"input_info\": input_info if input_info is not None else _create_input_info()\n    })\n\n    return nncf_config\n\n# Example usage:\nconfig = get_empty_config()\nprint(config)\n```\n\n### Explanation:\n\n1. **NNCFConfig Class**: This is a simple class to mimic the behavior of a configuration object. It has an `update` method to add or modify configuration settings and a `__repr__` method for easy representation.\n\n2. **get_empty_config Function**:\n   - **Parameters**: It takes three optional parameters: `model_size`, `input_sample_sizes`, and `input_info`.\n   - **Default Values**: If `input_sample_sizes` is `None`, it defaults to `[1, 1, 4, 4]`.\n   - **Nested Function `_create_input_info`**: This function generates a list of dictionaries, each containing a \"sample_size\" key, based on the `input_sample_sizes`.\n   - **NNCFConfig Instance**: An instance of `NNCFConfig` is created and updated with the specified configuration settings.\n   - **Return**: The configured `NNCFConfig` instance is returned.\n\nThis setup allows you to create a configuration object with default or specified settings, making it flexible for different use cases.",
    "prompt": "Generate a Python function called get_empty_config that takes in three optional parameters: model_size (default value of 4), input_sample_sizes (a list or tuple of integers, default value of None), and input_info (a dictionary, default value of None). The function returns an instance of NNCFConfig.\n\nIf input_sample_sizes is None, it is set to [1, 1, 4, 4]. The function also contains a nested function _create_input_info that creates a list of dictionaries with the key \"sample_size\" based on the input_sample_sizes parameter.\n\nThe NNCFConfig instance is created and updated with the keys \"model\" set to \"empty_config\", \"model_size\" set to the model_size parameter, and \"input_info\" set to input_info if it is provided, otherwise it is set to the result of calling _create_input_info(). The final output is the configured NNCFConfig instance.",
    "function_name": "get_empty_config",
    "ground_truth": "tests/torch/helpers.py",
    "test": "tests/torch/quantization/test_algo_quantization.py",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": ""
}