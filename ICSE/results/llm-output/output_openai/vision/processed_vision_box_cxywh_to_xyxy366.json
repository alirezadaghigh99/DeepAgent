{
    "result": "To convert bounding boxes from the (cx, cy, w, h) format to the (x1, y1, x2, y2) format, you can use the following Python function. This function assumes that the input is a PyTorch tensor, which is commonly used in deep learning frameworks for handling such data. The function will compute the top-left and bottom-right corners based on the center coordinates and dimensions provided.\n\nHere's the implementation:\n\n```python\nimport torch\n\ndef _box_cxcywh_to_xyxy(boxes):\n    \"\"\"\n    Convert bounding boxes from (cx, cy, w, h) format to (x1, y1, x2, y2) format.\n\n    Args:\n        boxes (torch.Tensor): A tensor of shape (N, 4) where N is the number of boxes,\n                              and each box is represented by (cx, cy, w, h).\n\n    Returns:\n        torch.Tensor: A tensor of shape (N, 4) where each box is represented by (x1, y1, x2, y2).\n    \"\"\"\n    # Ensure the input is a tensor\n    if not isinstance(boxes, torch.Tensor):\n        raise TypeError(\"Input boxes should be a torch.Tensor\")\n\n    # Split the boxes into their components\n    cx, cy, w, h = boxes.unbind(-1)\n\n    # Calculate the top-left corner (x1, y1)\n    x1 = cx - 0.5 * w\n    y1 = cy - 0.5 * h\n\n    # Calculate the bottom-right corner (x2, y2)\n    x2 = cx + 0.5 * w\n    y2 = cy + 0.5 * h\n\n    # Stack the results back into a single tensor\n    return torch.stack((x1, y1, x2, y2), dim=-1)\n\n# Example usage:\n# boxes_cxcywh = torch.tensor([[50, 50, 20, 20], [30, 30, 10, 10]])\n# boxes_xyxy = _box_cxcywh_to_xyxy(boxes_cxcywh)\n# print(boxes_xyxy)\n```\n\n### Explanation:\n- **Input**: The function takes a tensor `boxes` of shape `(N, 4)`, where `N` is the number of bounding boxes. Each box is represented by `(cx, cy, w, h)`.\n- **Output**: The function returns a tensor of the same shape `(N, 4)`, where each box is represented by `(x1, y1, x2, y2)`.\n- **Computation**:\n  - `x1` and `y1` are calculated by subtracting half the width and height from the center coordinates `cx` and `cy`, respectively.\n  - `x2` and `y2` are calculated by adding half the width and height to the center coordinates `cx` and `cy`, respectively.\n- **Stacking**: The results are stacked along the last dimension to form the final output tensor.",
    "prompt": "Write a Python function _box_cxcywh_to_xyxy that converts bounding boxes from the (cx, cy, w, h) format, where (cx, cy) represents the center and (w, h) represents the width and height, to the (x1, y1, x2, y2) format, where (x1, y1) and (x2, y2) represent the top-left and bottom-right corners, respectively. The function should return a tensor with the converted bounding boxes.",
    "function_name": "_box_cxcywh_to_xyxy",
    "ground_truth": "torchvision/ops/_box_convert.py",
    "test": "test/test_ops.py::TestBoxConvert",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}