{
    "result": "To create a function that adds Gaussian noise to an image tensor, we need to ensure that the input tensor is of a floating-point type and that the standard deviation (`sigma`) is non-negative. The function will add Gaussian noise to the image and optionally clip the resulting values to the range [0, 1]. Here's how you can implement this:\n\n```python\nimport torch\n\ndef gaussian_noise_image(image, mean=0.0, sigma=0.1, clip=True):\n    \"\"\"\n    Adds Gaussian noise to an input image tensor.\n\n    Parameters:\n    - image (torch.Tensor): The input image tensor, expected to be of a floating-point dtype.\n    - mean (float): Mean of the Gaussian noise. Default is 0.0.\n    - sigma (float): Standard deviation of the Gaussian noise. Default is 0.1.\n    - clip (bool): Whether to clip the output values to the [0, 1] range. Default is True.\n\n    Returns:\n    - torch.Tensor: The noisy image tensor.\n    \"\"\"\n    if not image.is_floating_point():\n        raise ValueError(f\"Input tensor is expected to be in float dtype, got dtype={image.dtype}\")\n    if sigma < 0:\n        raise ValueError(f\"sigma shouldn't be negative. Got {sigma}\")\n\n    # Generate Gaussian noise\n    noise = torch.randn_like(image) * sigma + mean\n\n    # Add noise to the image\n    noisy_image = image + noise\n\n    # Clip the values to the [0, 1] range if required\n    if clip:\n        noisy_image = torch.clamp(noisy_image, 0.0, 1.0)\n\n    return noisy_image\n```\n\n### Explanation:\n\n1. **Input Validation**:\n   - The function checks if the input `image` tensor is of a floating-point type using `image.is_floating_point()`. If not, it raises a `ValueError`.\n   - It also checks if `sigma` is non-negative. If `sigma` is negative, it raises a `ValueError`.\n\n2. **Noise Generation**:\n   - Gaussian noise is generated using `torch.randn_like(image)`, which creates a tensor of the same shape as `image` with values drawn from a standard normal distribution (mean 0, variance 1).\n   - The noise is then scaled by `sigma` and shifted by `mean`.\n\n3. **Adding Noise**:\n   - The generated noise is added to the original image tensor.\n\n4. **Clipping**:\n   - If `clip` is `True`, the resulting noisy image is clipped to the range [0, 1] using `torch.clamp`.\n\nThis function is useful for data augmentation in machine learning tasks, where adding noise can help improve the robustness of models.",
    "prompt": "Write a Python function `gaussian_noise_image` that adds Gaussian noise to an input image tensor. The function should accept the following parameters: `image` (a float tensor), `mean` (mean of the Gaussian noise, defaulting to 0.0), `sigma` (standard deviation of the Gaussian noise, defaulting to 0.1), and `clip` (a boolean indicating whether to clip the output values to the [0, 1] range, defaulting to `True`). The function should return the noisy image tensor. Ensure that the input tensor is of a floating-point dtype and that `sigma` is non-negative, raising a `ValueError` if these conditions are not met.  if not image.is_floating_point():\n        raise ValueError(f\"Input tensor is expected to be in float dtype, got dtype={image.dtype}\")\n    if sigma < 0:\n        raise ValueError(f\"sigma shouldn't be negative. Got {sigma}\")",
    "function_name": "gaussian_noise_image",
    "ground_truth": "torchvision/transforms/v2/functional/_misc.py",
    "test": "test/test_transforms_v2.py::TestGaussianNoise",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Segmentation",
    "data": "Image"
}