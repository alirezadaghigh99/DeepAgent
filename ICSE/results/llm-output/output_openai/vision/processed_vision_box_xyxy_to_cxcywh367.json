{
    "result": "To convert bounding boxes from the (x1, y1, x2, y2) format to the (cx, cy, w, h) format, you can use the following Python function. This function assumes that you are using PyTorch for tensor operations. If you are using a different library, you may need to adjust the tensor operations accordingly.\n\nHere's the function:\n\n```python\nimport torch\n\ndef _box_xyxy_to_cxcywh(boxes):\n    \"\"\"\n    Convert bounding boxes from (x1, y1, x2, y2) format to (cx, cy, w, h) format.\n\n    Args:\n        boxes (torch.Tensor): A tensor of shape (N, 4) where N is the number of boxes,\n                              and each box is represented as (x1, y1, x2, y2).\n\n    Returns:\n        torch.Tensor: A tensor of shape (N, 4) where each box is represented as (cx, cy, w, h).\n    \"\"\"\n    # Ensure the input is a tensor\n    if not isinstance(boxes, torch.Tensor):\n        raise TypeError(\"Input boxes should be a torch.Tensor\")\n\n    # Calculate the center coordinates (cx, cy)\n    cx = (boxes[:, 0] + boxes[:, 2]) / 2.0\n    cy = (boxes[:, 1] + boxes[:, 3]) / 2.0\n\n    # Calculate the width (w) and height (h)\n    w = boxes[:, 2] - boxes[:, 0]\n    h = boxes[:, 3] - boxes[:, 1]\n\n    # Stack the results into a single tensor\n    converted_boxes = torch.stack((cx, cy, w, h), dim=1)\n\n    return converted_boxes\n\n# Example usage:\n# boxes_xyxy = torch.tensor([[0, 0, 2, 2], [1, 1, 3, 3]], dtype=torch.float32)\n# boxes_cxcywh = _box_xyxy_to_cxcywh(boxes_xyxy)\n# print(boxes_cxcywh)\n```\n\n### Explanation:\n- **Input**: The function takes a tensor `boxes` of shape (N, 4), where N is the number of bounding boxes. Each box is represented by its top-left (x1, y1) and bottom-right (x2, y2) corners.\n- **Output**: The function returns a tensor of shape (N, 4), where each box is represented by its center (cx, cy) and dimensions (w, h).\n- **Calculations**:\n  - The center coordinates `(cx, cy)` are calculated as the average of the respective corner coordinates.\n  - The width `w` is calculated as `x2 - x1`.\n  - The height `h` is calculated as `y2 - y1`.\n- **Stacking**: The results are stacked along the second dimension to form the final output tensor.",
    "prompt": "Write a Python function _box_xyxy_to_cxcywh that converts bounding boxes from the (x1, y1, x2, y2) format, where (x1, y1) and (x2, y2) represent the top-left and bottom-right corners, to the (cx, cy, w, h) format, where (cx, cy) represents the center and (w, h) represents the width and height. The function should return a tensor with the converted bounding boxes.",
    "function_name": "_box_xyxy_to_cxcywh",
    "ground_truth": "torchvision/ops/_box_convert.py",
    "test": "test/test_ops.py::TestBoxConvert",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}