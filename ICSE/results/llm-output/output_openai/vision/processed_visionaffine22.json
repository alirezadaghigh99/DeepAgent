{
    "result": "To create a Python function called `affine` that applies an affine transformation to an image while keeping the image center invariant, we can use the `PIL` library for image manipulation. The function will handle both `PIL.Image` and `torch.Tensor` inputs, allowing for flexibility in how images are processed. Here's how you can implement this function:\n\n```python\nfrom PIL import Image\nimport numpy as np\nimport torch\nimport torchvision.transforms.functional as F\n\ndef affine(img, angle, translate, scale, shear, interpolation=Image.BILINEAR, fill=0, center=None):\n    \"\"\"\n    Apply an affine transformation to an image while keeping the image center invariant.\n\n    Parameters:\n    - img: PIL Image or Tensor\n    - angle: Rotation angle in degrees\n    - translate: Tuple of horizontal and vertical translations\n    - scale: Overall scale factor\n    - shear: Tuple of shear angles (shear_x, shear_y)\n    - interpolation: Interpolation mode (default is Image.BILINEAR)\n    - fill: Pixel fill value for areas outside the transformed image\n    - center: Optional center of rotation (default is the center of the image)\n\n    Returns:\n    - Transformed image as a PIL Image or Tensor\n    \"\"\"\n    if isinstance(img, torch.Tensor):\n        # Convert tensor to PIL Image\n        img = F.to_pil_image(img)\n\n    # Get image size\n    width, height = img.size\n\n    # Default center is the center of the image\n    if center is None:\n        center = (width / 2, height / 2)\n\n    # Calculate the affine transformation matrix\n    # PIL expects the inverse of the transformation matrix\n    matrix = F._get_inverse_affine_matrix(center, angle, translate, scale, shear)\n\n    # Apply the affine transformation\n    transformed_img = img.transform(\n        (width, height),\n        Image.AFFINE,\n        matrix,\n        resample=interpolation,\n        fillcolor=fill\n    )\n\n    return transformed_img\n\n# Example usage:\n# img = Image.open('path_to_image.jpg')\n# transformed_img = affine(img, angle=30, translate=(10, 20), scale=1.0, shear=(5, 5))\n# transformed_img.show()\n```\n\n### Explanation:\n\n1. **Input Handling**: The function accepts either a `PIL.Image` or a `torch.Tensor`. If a tensor is provided, it is converted to a `PIL.Image` using `torchvision.transforms.functional.to_pil_image`.\n\n2. **Center Calculation**: If no center is provided, the default center of the image is used.\n\n3. **Affine Matrix Calculation**: The affine transformation matrix is calculated using the `_get_inverse_affine_matrix` function from `torchvision.transforms.functional`. This function computes the inverse of the transformation matrix, which is required by the `PIL.Image.transform` method.\n\n4. **Transformation Application**: The `transform` method of the `PIL.Image` class is used to apply the affine transformation. The `fillcolor` parameter is used to specify the fill value for areas outside the transformed image.\n\n5. **Return**: The transformed image is returned as a `PIL.Image`. If you need the result as a tensor, you can convert it back using `torchvision.transforms.functional.to_tensor`.\n\nThis function provides a flexible way to apply affine transformations to images, supporting various parameters for rotation, translation, scaling, and shearing.",
    "prompt": "Create a Python function called affine that applies an affine transformation on an image while keeping the image center invariant. The function takes in parameters such as img (PIL Image or Tensor), angle (rotation angle in degrees), translate (horizontal and vertical translations), scale (overall scale), shear (shear angle values), interpolation (desired interpolation mode), fill (pixel fill value for areas outside the transformed image), and center (optional center of rotation). The function returns the transformed image as a PIL Image or Tensor.",
    "function_name": "affine",
    "ground_truth": "torchvision/transforms/_functional_pil.py",
    "test": "test/test_transforms_tensor.py::TestAffine",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}