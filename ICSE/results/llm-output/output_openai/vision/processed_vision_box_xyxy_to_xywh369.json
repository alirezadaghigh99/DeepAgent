{
    "result": "To convert bounding boxes from the (x1, y1, x2, y2) format to the (x, y, w, h) format, you can use the following Python function. This function assumes that you are working with PyTorch tensors, which are commonly used in deep learning frameworks for handling such data. The function will take a tensor of bounding boxes in the (x1, y1, x2, y2) format and return a tensor in the (x, y, w, h) format.\n\nHere's the implementation:\n\n```python\nimport torch\n\ndef _box_xyxy_to_xywh(boxes):\n    \"\"\"\n    Convert bounding boxes from (x1, y1, x2, y2) format to (x, y, w, h) format.\n\n    Args:\n        boxes (torch.Tensor): A tensor of shape (N, 4) where N is the number of boxes,\n                              and each box is represented as (x1, y1, x2, y2).\n\n    Returns:\n        torch.Tensor: A tensor of shape (N, 4) where each box is represented as (x, y, w, h).\n    \"\"\"\n    # Ensure the input is a tensor\n    if not isinstance(boxes, torch.Tensor):\n        raise TypeError(\"Input boxes should be a torch.Tensor\")\n\n    # Calculate the width and height\n    w = boxes[:, 2] - boxes[:, 0]\n    h = boxes[:, 3] - boxes[:, 1]\n\n    # Calculate the top-left corner (x, y)\n    x = boxes[:, 0]\n    y = boxes[:, 1]\n\n    # Stack the results into a new tensor\n    boxes_xywh = torch.stack((x, y, w, h), dim=1)\n\n    return boxes_xywh\n\n# Example usage:\n# boxes_xyxy = torch.tensor([[10, 20, 30, 40], [50, 60, 70, 80]])\n# boxes_xywh = _box_xyxy_to_xywh(boxes_xyxy)\n# print(boxes_xywh)\n```\n\n### Explanation:\n- **Input**: The function takes a tensor `boxes` of shape (N, 4), where N is the number of bounding boxes. Each bounding box is represented by four values: (x1, y1, x2, y2).\n- **Output**: The function returns a tensor of the same shape (N, 4), where each bounding box is now represented by (x, y, w, h).\n- **Conversion**:\n  - `x` and `y` are simply the top-left corner coordinates (x1, y1).\n  - `w` (width) is calculated as `x2 - x1`.\n  - `h` (height) is calculated as `y2 - y1`.\n- **Stacking**: The `torch.stack` function is used to combine these calculated values into a new tensor with the desired format.\n\nThis function is efficient and leverages PyTorch's tensor operations to handle potentially large numbers of bounding boxes.",
    "prompt": "Write a Python function _box_xyxy_to_xywh that converts bounding boxes from the (x1, y1, x2, y2) format, where (x1, y1) and (x2, y2) represent the top-left and bottom-right corners, to the (x, y, w, h) format, where (x, y) represents the top-left corner and (w, h) represents the width and height. The function should return a tensor with the converted bounding boxes.",
    "function_name": "_box_xyxy_to_xywh",
    "ground_truth": "torchvision/ops/_box_convert.py",
    "test": "test/test_ops.py::TestBoxConvert",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Detection",
    "data": "Image"
}