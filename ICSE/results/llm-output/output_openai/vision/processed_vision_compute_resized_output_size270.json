{
    "result": "To implement the `_compute_resized_output_size` function, we need to handle various scenarios based on the input parameters. The function should calculate the new dimensions of an image while respecting the constraints provided by `size` and `max_size`. Here's how you can implement this function:\n\n```python\ndef _compute_resized_output_size(image_size, size=None, max_size=None, allow_size_none=False):\n    if not isinstance(image_size, (list, tuple)) or len(image_size) != 2:\n        raise ValueError(\"image_size must be a list or tuple of two integers (height, width).\")\n    \n    original_height, original_width = image_size\n\n    if size is None:\n        if not allow_size_none:\n            raise ValueError(\"size cannot be None unless allow_size_none is True.\")\n        if max_size is None:\n            raise ValueError(\"max_size must be an integer when size is None.\")\n        # If size is None and max_size is provided, we scale the image to fit within max_size\n        if original_height > original_width:\n            scale = max_size / float(original_height)\n        else:\n            scale = max_size / float(original_width)\n        new_height = int(original_height * scale)\n        new_width = int(original_width * scale)\n        return [new_height, new_width]\n\n    if isinstance(size, int):\n        # Resize the smaller edge to 'size' while maintaining aspect ratio\n        if original_height < original_width:\n            new_height = size\n            new_width = int(size * original_width / original_height)\n        else:\n            new_width = size\n            new_height = int(size * original_height / original_width)\n    elif isinstance(size, (list, tuple)) and len(size) == 2:\n        new_height, new_width = size\n    else:\n        raise ValueError(\"size must be an int or a list/tuple of two integers.\")\n\n    if max_size is not None:\n        if not isinstance(max_size, int):\n            raise ValueError(\"max_size must be an integer.\")\n        if max(new_height, new_width) > max_size:\n            # Scale down to fit within max_size\n            if new_height > new_width:\n                scale = max_size / float(new_height)\n            else:\n                scale = max_size / float(new_width)\n            new_height = int(new_height * scale)\n            new_width = int(new_width * scale)\n\n    return [new_height, new_width]\n\n# Example usage:\n# image_size = (800, 600)\n# print(_compute_resized_output_size(image_size, size=300, max_size=500))\n```\n\n### Explanation:\n\n1. **Input Validation**: The function first checks if `image_size` is a valid list or tuple of two integers. It also checks the validity of `size` and `max_size`.\n\n2. **Handling `size` as `None`**: If `size` is `None`, the function checks if `allow_size_none` is `True`. If `max_size` is provided, it scales the image to fit within `max_size` while maintaining the aspect ratio.\n\n3. **Handling `size` as an Integer**: If `size` is a single integer, the function resizes the smaller edge to `size` and adjusts the other dimension to maintain the aspect ratio.\n\n4. **Handling `size` as a Pair of Values**: If `size` is a list or tuple of two integers, it directly uses these as the new dimensions.\n\n5. **Applying `max_size` Constraint**: If `max_size` is provided, the function ensures that neither dimension exceeds `max_size`, scaling down if necessary.\n\n6. **Return**: The function returns the new dimensions as a list `[new_height, new_width]`.\n\nThis function should cover the various scenarios and constraints specified, raising appropriate errors for invalid configurations.",
    "prompt": "Write a Python function `_compute_resized_output_size` that calculates the new size of an image after resizing, based on the original `image_size` (height and width). The function accepts parameters: `size`, an optional list specifying the desired size of the smaller edge or both dimensions; `max_size`, an optional integer that limits the size of the longer edge; and `allow_size_none`, a boolean that permits `size` to be `None` (only used in version 2). The function should handle different cases where `size` is `None`, a single value, or a pair of values, and return a list with the new height and width. The function should include checks to raise a `ValueError` if `size` is `None` but `max_size` is not an integer, if `max_size` is smaller than the requested size, or if any other invalid configuration is encountered.",
    "function_name": "_compute_resized_output_size",
    "ground_truth": "torchvision/transforms/functional.py#L357",
    "test": "test/test_transforms.py::test_resize",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}