{
    "result": "To create the `unproject_points_orthographic` function, we need to take the 2D points from the canonical z=1 plane and extend them into 3D space using the provided extension values. The function will concatenate the 2D points with the extension along the last dimension to form 3D points.\n\nHere's how you can implement this function using PyTorch:\n\n```python\nimport torch\n\ndef unproject_points_orthographic(points_in_camera, extension):\n    \"\"\"\n    Unprojects 2D points from the canonical z=1 plane into 3D space using the given extension.\n\n    Args:\n        points_in_camera (Tensor): A tensor of shape (..., 2) representing the 2D points.\n        extension (Tensor): A tensor of shape (..., 1) representing the extension values.\n\n    Returns:\n        Tensor: A tensor of shape (..., 3) representing the unprojected 3D points.\n    \"\"\"\n    # Concatenate the 2D points with the extension along the last dimension\n    unprojected_points = torch.cat((points_in_camera, extension), dim=-1)\n    return unprojected_points\n\n# Example usage\npoints = torch.tensor([1., 2.])\nextension = torch.tensor([3.])\nresult = unproject_points_orthographic(points, extension)\nprint(result)  # Output: tensor([1., 2., 3.])\n```\n\n### Explanation:\n- **Input Tensors**: The function takes two input tensors: `points_in_camera` with shape `(..., 2)` and `extension` with shape `(..., 1)`.\n- **Concatenation**: The `torch.cat` function is used to concatenate the `points_in_camera` and `extension` tensors along the last dimension (`dim=-1`). This effectively appends the extension value as the z-coordinate to each 2D point, resulting in a 3D point.\n- **Output Tensor**: The resulting tensor has shape `(..., 3)`, representing the unprojected 3D points.\n\nThis function will work for any batch of 2D points and their corresponding extensions, allowing for flexible input shapes.",
    "prompt": "Create a Python function called unproject_points_orthographic that unprojects points from the canonical z=1 plane into the camera frame. The function takes in two parameters: points_in_camera, a Tensor representing the points to unproject with shape (..., 2), and extension, a Tensor representing the extension of the points to unproject with shape (..., 1). The function returns a Tensor representing the unprojected points with shape (..., 3). \n\nFor example:\npoints = torch.tensor([1., 2.])\nextension = torch.tensor([3.])\nunproject_points_orthographic(points, extension) should return tensor([1., 2., 3.])",
    "function_name": "unproject_points_orthographic",
    "ground_truth": "kornia/geometry/camera/projection_orthographic.py",
    "test": "tests/geometry/camera/test_projections.py::TestProjectionOrthographic",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Image"
}