{
    "result": "To create the `project_points_orthographic` function, we need to implement orthographic projection, which essentially involves dropping the z-coordinate of the points in the camera frame. This can be done using PyTorch to handle tensor operations. Here's how you can implement this function:\n\n```python\nimport torch\n\ndef project_points_orthographic(points_in_camera):\n    \"\"\"\n    Project one or more points from the camera frame into the canonical z=1 plane through orthographic projection.\n\n    Args:\n        points_in_camera: Tensor representing the points to project. \n                          It should have the shape (..., 3), where the last dimension represents (x, y, z).\n\n    Returns:\n        Tensor representing the projected points with shape (..., 2), where the last dimension represents (u, v).\n    \"\"\"\n    # Ensure the input is a tensor\n    if not isinstance(points_in_camera, torch.Tensor):\n        raise TypeError(\"points_in_camera must be a torch.Tensor\")\n\n    # Check if the last dimension is 3\n    if points_in_camera.shape[-1] != 3:\n        raise ValueError(\"The last dimension of points_in_camera must be 3, representing (x, y, z)\")\n\n    # Perform orthographic projection by selecting the first two coordinates (x, y)\n    projected_points = points_in_camera[..., :2]\n\n    return projected_points\n\n# Example usage\nif __name__ == \"__main__\":\n    points = torch.tensor([1., 2., 3.])\n    projected_points = project_points_orthographic(points)\n    print(projected_points)  # Output: tensor([1., 2.])\n```\n\n### Explanation:\n- **Input Validation**: The function first checks if the input is a PyTorch tensor and if its last dimension is of size 3, which corresponds to the (x, y, z) coordinates.\n- **Orthographic Projection**: The orthographic projection is performed by simply taking the first two components (x, y) of each point, effectively ignoring the z-coordinate.\n- **Output**: The function returns a tensor with the projected points, which have only the (u, v) coordinates.\n\nThis function can handle both single points and batches of points, as long as the last dimension of the input tensor is 3.",
    "prompt": "Create a Python function called project_points_orthographic that Project one or more points from the camera frame into the canonical z=1 plane through orthographic\n    projection.\n\n    .. math::\n        \\begin{bmatrix} u \\\\ v \\end{bmatrix} =\n        \\begin{bmatrix} x \\\\ y \\\\ z \\end{bmatrix}\n\n\n    Args:\n        points_in_camera: Tensor representing the points to project.\n\n    Returns:\n        Tensor representing the projected points.\n\n    Example:\n        >>> points = torch.tensor([1., 2., 3.])\n        >>> project_points_orthographic(points)\n        tensor([1., 2.])",
    "function_name": "project_points_orthographic",
    "ground_truth": "kornia/geometry/camera/projection_orthographic.py",
    "test": "tests/geometry/camera/test_projections.py::TestProjectionOrthographic",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Image"
}