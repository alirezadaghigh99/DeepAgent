{
    "result": "To convert an RGB image to HLS format using PyTorch, we need to implement a function that processes each pixel's RGB values and computes the corresponding HLS values. Below is the implementation of the `rgb_to_hls` function, which includes error handling for input type and shape:\n\n```python\nimport torch\n\ndef rgb_to_hls(image, eps=1e-10):\n    # Check if the input is a PyTorch tensor\n    if not isinstance(image, torch.Tensor):\n        raise TypeError(\"Input must be a PyTorch tensor.\")\n    \n    # Check if the input has the correct shape\n    if image.ndim < 3 or image.shape[-3] != 3:\n        raise ValueError(\"Input must have shape (*, 3, H, W).\")\n    \n    # Separate the RGB channels\n    r, g, b = image.unbind(dim=-3)\n    \n    # Calculate the max and min values across the RGB channels\n    max_rgb, _ = torch.max(image, dim=-3)\n    min_rgb, _ = torch.min(image, dim=-3)\n    \n    # Calculate luminance\n    l = (max_rgb + min_rgb) / 2\n    \n    # Calculate saturation\n    delta = max_rgb - min_rgb\n    s = torch.where(l < 0.5, delta / (max_rgb + min_rgb + eps), delta / (2 - max_rgb - min_rgb + eps))\n    \n    # Calculate hue\n    delta_r = (((max_rgb - r) / 6) + (delta / 2)) / (delta + eps)\n    delta_g = (((max_rgb - g) / 6) + (delta / 2)) / (delta + eps)\n    delta_b = (((max_rgb - b) / 6) + (delta / 2)) / (delta + eps)\n    \n    h = torch.zeros_like(l)\n    h = torch.where((max_rgb == r) & (delta != 0), delta_b - delta_g, h)\n    h = torch.where((max_rgb == g) & (delta != 0), (1 / 3) + delta_r - delta_b, h)\n    h = torch.where((max_rgb == b) & (delta != 0), (2 / 3) + delta_g - delta_r, h)\n    \n    h = torch.where(h < 0, h + 1, h)\n    h = torch.where(h > 1, h - 1, h)\n    \n    # Stack the H, L, S channels back together\n    hls_image = torch.stack((h, l, s), dim=-3)\n    \n    return hls_image\n\n# Example usage\nif __name__ == \"__main__\":\n    # Create a random RGB image tensor with shape (2, 3, 4, 4)\n    random_rgb_image = torch.rand(2, 3, 4, 4)\n    \n    # Convert the RGB image to HLS format\n    hls_image = rgb_to_hls(random_rgb_image)\n    \n    print(\"HLS Image Shape:\", hls_image.shape)\n    print(\"HLS Image:\", hls_image)\n```\n\n### Explanation:\n- **Input Validation**: The function first checks if the input is a PyTorch tensor and if it has the correct shape. If not, it raises appropriate errors.\n- **Channel Separation**: The RGB channels are separated using `unbind`.\n- **Luminance Calculation**: Luminance is calculated as the average of the maximum and minimum RGB values.\n- **Saturation Calculation**: Saturation is calculated based on the luminance and the difference between the max and min RGB values.\n- **Hue Calculation**: Hue is calculated using the differences between the RGB channels, with adjustments to ensure it falls within the range [0, 1].\n- **Output**: The HLS channels are stacked back together and returned as a tensor with the same shape as the input.\n\nThis function should work for any input tensor with shape `(*, 3, H, W)`, where `*` can be any number of leading dimensions.",
    "prompt": "Generate a Python function called rgb_to_hls that converts an RGB image to HLS format. The function takes in a PyTorch tensor called image representing the RGB image with shape (*, 3, H, W) and an epsilon value eps to avoid division by zero. The image data is assumed to be in the range of (0, 1).\n\nThe function returns the HLS version of the input image with the same shape (*, 3, H, W). If the input image is not a PyTorch tensor, a TypeError is raised. If the input size does not have a shape of (*, 3, H, W), a ValueError is raised.\n\nThe conversion process involves calculating the HLS components (hue, luminance, saturation) based on the RGB values of the input image. The resulting HLS image is returned as a PyTorch tensor.\n\nAn example usage of the rgb_to_hls function is provided in the code snippet, where a random input RGB image tensor is converted to HLS format. Raise the value error if there input not instance of image or there was a problem with shape",
    "function_name": "rgb_to_hls",
    "ground_truth": "kornia/color/hls.py",
    "test": "tests/color/test_hls.py::TestRgbToHls",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}