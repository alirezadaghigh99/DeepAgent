{
    "result": "To project a 3D point in world coordinates onto the 2D camera plane using a pinhole camera model, you need to apply both the extrinsic and intrinsic transformations. The extrinsic matrix transforms the 3D world coordinates to the camera coordinates, and the intrinsic matrix then projects these camera coordinates onto the 2D image plane.\n\nHere's how you can implement the `project` function for the `PinholeCamera` class:\n\n```python\nimport torch\nfrom torch import Tensor\n\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n\n    def project(self, point_3d: Tensor) -> Tensor:\n        # Ensure point_3d is in homogeneous coordinates\n        if point_3d.shape[-1] != 4:\n            ones = torch.ones((*point_3d.shape[:-1], 1), device=point_3d.device, dtype=point_3d.dtype)\n            point_3d_homogeneous = torch.cat((point_3d, ones), dim=-1)\n        else:\n            point_3d_homogeneous = point_3d\n\n        # Transform the 3D points from world coordinates to camera coordinates\n        point_camera = torch.matmul(point_3d_homogeneous, self._extrinsics.T)\n\n        # Project the 3D camera coordinates onto the 2D image plane\n        point_image_homogeneous = torch.matmul(point_camera, self._intrinsics.T)\n\n        # Convert from homogeneous to 2D coordinates\n        u = point_image_homogeneous[..., 0] / point_image_homogeneous[..., 2]\n        v = point_image_homogeneous[..., 1] / point_image_homogeneous[..., 2]\n\n        # Stack the u, v coordinates to get the final 2D points\n        point_2d = torch.stack((u, v), dim=-1)\n\n        return point_2d\n```\n\n### Explanation:\n\n1. **Homogeneous Coordinates**: The 3D points are first converted to homogeneous coordinates by appending a 1 to each point. This is necessary for matrix multiplication with the extrinsic matrix.\n\n2. **Extrinsic Transformation**: The extrinsic matrix is used to transform the 3D points from world coordinates to camera coordinates. This involves multiplying the homogeneous 3D points by the transpose of the extrinsic matrix.\n\n3. **Intrinsic Projection**: The intrinsic matrix is used to project the 3D camera coordinates onto the 2D image plane. This involves multiplying the camera coordinates by the transpose of the intrinsic matrix.\n\n4. **Normalization**: The resulting 2D points are in homogeneous coordinates, so they are normalized by dividing by the third coordinate to get the final `(u, v)` image coordinates.\n\nThis function assumes that the input `point_3d` tensor can have any leading dimensions, allowing for batch processing of multiple points. The function handles the conversion to homogeneous coordinates, applies the necessary transformations, and returns the 2D projected points.",
    "prompt": "\"Generate the `project` function for the following class to project a 3D point in world coordinates onto the 2D camera plane. The input is `self` and a `point_3d` tensor with shape `(*, 3)`, and the output is a tensor of `(u, v)` camera coordinates with shape `(*, 2)`.\n\n```python\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n```\"",
    "function_name": "project",
    "ground_truth": "kornia/geometry/camera/pinhole.py",
    "test": "tests/geometry/camera/test_pinhole.py",
    "class": "PinholeCamera",
    "stage": "Image",
    "task": "",
    "data": "pre-post process"
}