{
    "result": "To create a Python function called `deg2rad` that converts angles from degrees to radians, we need to ensure that the input is a tensor. Since you mentioned a tensor, I'll assume you're referring to a tensor from a library like PyTorch or TensorFlow. For this example, I'll use PyTorch, but the concept is similar for other libraries.\n\nHere's how you can implement the `deg2rad` function:\n\n```python\nimport torch\nfrom torch import Tensor\n\ndef deg2rad(tensor: Tensor) -> Tensor:\n    \"\"\"\n    Converts angles from degrees to radians.\n\n    Args:\n        tensor: Tensor of arbitrary shape.\n\n    Returns:\n        Tensor with same shape as input, with angles converted to radians.\n    \n    Raises:\n        TypeError: If the input is not a Tensor.\n    \"\"\"\n    if not isinstance(tensor, Tensor):\n        raise TypeError(f\"Input type is not a Tensor. Got {type(tensor)}\")\n    \n    # Convert degrees to radians\n    radians = tensor * (torch.pi / 180.0)\n    return radians\n\n# Example usage:\n# tensor = torch.tensor([0, 90, 180, 270, 360])\n# radians = deg2rad(tensor)\n# print(radians)\n```\n\n### Explanation:\n- **Import Statements**: We import `torch` and `Tensor` from PyTorch. If you're using TensorFlow, you would import from `tensorflow` instead.\n- **Function Definition**: The function `deg2rad` takes a tensor as input and returns a tensor with the same shape, with each element converted from degrees to radians.\n- **Type Checking**: We check if the input is an instance of `Tensor`. If not, a `TypeError` is raised.\n- **Conversion**: The conversion from degrees to radians is done using the formula: radians = degrees \u00d7 (\u03c0 / 180).\n- **Example Usage**: An example is provided to demonstrate how to use the function.\n\nThis function will work with any tensor of arbitrary shape, converting each element from degrees to radians.",
    "prompt": "Generate a Python function called deg2rad Function that converts angles from degrees to radians.\n\n    Args:\n        tensor: Tensor of arbitrary shape.\n\n    Returns:\n        tensor with same shape as input.\nif not isinstance(tensor, Tensor):\n        raise TypeError(f\"Input type is not a Tensor. Got {type(tensor)}\")",
    "function_name": "deg2rad",
    "ground_truth": "kornia/geometry/conversions.py#L83",
    "test": "tests/geometry/test_conversions.py::TestRadDegConversions::test_deg2rad_gradcheck",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": ""
}