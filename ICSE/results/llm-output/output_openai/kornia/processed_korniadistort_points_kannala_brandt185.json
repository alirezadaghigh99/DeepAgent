{
    "result": "To implement the `distort_points_kannala_brandt` function using the Kannala-Brandt distortion model, we need to apply the distortion to the points on the canonical z=1 plane. The Kannala-Brandt model is a fisheye lens model that uses a polynomial to describe the radial distortion. Here's how you can implement this in Python using PyTorch:\n\n```python\nimport torch\n\ndef distort_points_kannala_brandt(projected_points_in_camera_z1_plane, params):\n    # Extract parameters\n    fx, fy, cx, cy, k1, k2, k3, k4 = params[..., 0], params[..., 1], params[..., 2], params[..., 3], params[..., 4], params[..., 5], params[..., 6], params[..., 7]\n    \n    # Extract x and y from the input points\n    x = projected_points_in_camera_z1_plane[..., 0]\n    y = projected_points_in_camera_z1_plane[..., 1]\n    \n    # Compute the radius in the z=1 plane\n    r = torch.sqrt(x**2 + y**2)\n    \n    # Compute the distortion factor using the polynomial\n    theta = torch.atan(r)\n    theta_d = theta + k1 * theta**3 + k2 * theta**5 + k3 * theta**7 + k4 * theta**9\n    \n    # Avoid division by zero\n    r = torch.where(r == 0, torch.tensor(1e-8, dtype=r.dtype, device=r.device), r)\n    \n    # Compute the distorted radius\n    rd = torch.tan(theta_d)\n    \n    # Compute the distorted x and y\n    x_distorted = rd * (x / r)\n    y_distorted = rd * (y / r)\n    \n    # Apply intrinsic parameters to get the final distorted points\n    u = fx * x_distorted + cx\n    v = fy * y_distorted + cy\n    \n    # Stack the results to get the final output\n    distorted_points = torch.stack((u, v), dim=-1)\n    \n    return distorted_points\n\n# Example usage\npoints = torch.tensor([319.5, 239.5])  # center of a 640x480 image\nparams = torch.tensor([1000.0, 1000.0, 320.0, 280.0, 0.1, 0.01, 0.001, 0.0001])\ndistorted_points = distort_points_kannala_brandt(points, params)\nprint(distorted_points)\n```\n\n### Explanation:\n- **Parameters**: The function takes two inputs: `projected_points_in_camera_z1_plane` and `params`.\n  - `projected_points_in_camera_z1_plane` is a tensor of shape `(..., 2)` representing the x and y coordinates of points on the z=1 plane.\n  - `params` is a tensor of shape `(..., 8)` containing the intrinsic camera parameters and distortion coefficients.\n- **Kannala-Brandt Model**: This model uses a polynomial to describe the radial distortion. The distortion is applied to the angle `theta` which is the angle of the point from the optical axis.\n- **Distortion Calculation**: The distorted radius `rd` is calculated using the polynomial expansion of `theta_d`.\n- **Intrinsic Parameters**: The intrinsic parameters `fx`, `fy`, `cx`, and `cy` are used to map the distorted points back to the image plane.\n\nThis function should work for both single points and batches of points, thanks to the use of PyTorch's tensor operations.",
    "prompt": "Generate a Python function called distort_points_kannala_brandt that distorts one or more points from the canonical z=1 plane into the camera frame using the Kannala-Brandt model. The function takes two inputs: projected_points_in_camera_z1_plane, a Tensor representing the points to distort with shape (..., 2), and params, a Tensor representing the parameters of the Kannala-Brandt distortion model with shape (..., 8). The function returns a Tensor representing the distorted points with shape (..., 2). \n\nFor example:\n```python\npoints = torch.tensor([319.5, 239.5])  # center of a 640x480 image\nparams = torch.tensor([1000.0, 1000.0, 320.0, 280.0, 0.1, 0.01, 0.001, 0.0001])\ndistort_points_kannala_brandt(points, params)\n```\nOutput:\n```\ntensor([1982.6832, 1526.3619])\n```",
    "function_name": "distort_points_kannala_brandt",
    "ground_truth": "kornia/geometry/camera/distortion_kannala_brandt.py",
    "test": "tests/geometry/camera/test_distortion.py::TestDistortionKannalaBrandt",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}