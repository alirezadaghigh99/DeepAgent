{
    "result": "To project 3D points onto a 2D camera plane using a camera matrix, we can use homogeneous coordinates. The camera matrix is typically a 3x3 matrix that transforms 3D points into 2D points on the image plane. Here's how you can implement the `project_points` function in Python using PyTorch:\n\n```python\nimport torch\n\ndef project_points(points_3d, camera_matrix):\n    \"\"\"\n    Projects 3D points onto a 2D camera plane using the camera matrix.\n\n    Args:\n        points_3d (torch.Tensor): A tensor of shape (*, 3) representing 3D points.\n        camera_matrix (torch.Tensor): A tensor of shape (*, 3, 3) representing the camera matrix.\n\n    Returns:\n        torch.Tensor: A tensor of shape (*, 2) representing the projected 2D points.\n    \"\"\"\n    # Ensure the points are in homogeneous coordinates by adding a 1 to the end of each point\n    ones = torch.ones((*points_3d.shape[:-1], 1), dtype=points_3d.dtype, device=points_3d.device)\n    points_3d_homogeneous = torch.cat((points_3d, ones), dim=-1)\n\n    # Perform the matrix multiplication to project the points\n    projected_points_homogeneous = torch.matmul(points_3d_homogeneous.unsqueeze(-2), camera_matrix).squeeze(-2)\n\n    # Convert from homogeneous coordinates to 2D by dividing by the last coordinate\n    u = projected_points_homogeneous[..., 0] / projected_points_homogeneous[..., 2]\n    v = projected_points_homogeneous[..., 1] / projected_points_homogeneous[..., 2]\n\n    # Stack the u and v coordinates to get the final 2D points\n    projected_points_2d = torch.stack((u, v), dim=-1)\n\n    return projected_points_2d\n\n# Example usage\n# Random 3D point\npoint_3d = torch.tensor([[1.0, 2.0, 3.0]])\n\n# Identity matrix as the camera matrix\ncamera_matrix = torch.eye(3).unsqueeze(0)  # Adding batch dimension\n\n# Project the point onto the camera plane\nprojected_point = project_points(point_3d, camera_matrix)\n\nprint(\"Projected 2D point:\", projected_point)\n```\n\n### Explanation:\n- **Homogeneous Coordinates**: We convert the 3D points to homogeneous coordinates by appending a 1 to each point. This allows us to use matrix multiplication for the projection.\n- **Matrix Multiplication**: We multiply the homogeneous 3D points by the camera matrix to get the projected points in homogeneous 2D coordinates.\n- **Normalization**: We convert the homogeneous 2D coordinates back to Cartesian coordinates by dividing by the last coordinate.\n- **Batch Processing**: The function supports batch processing, allowing multiple points and camera matrices to be processed simultaneously.\n\nThis function assumes that the camera matrix is already in the correct form to project the points. In practice, the camera matrix might include intrinsic parameters like focal length and principal point offsets, which should be set according to your specific camera setup.",
    "prompt": "Generate a Python function called project_points that takes in a 3D point tensor and a camera matrix tensor as input. The function projects the 3D point onto the 2D camera plane using the camera matrix. The input tensor for the 3D point should have shape (*, 3) and the camera matrix tensor should have shape (*, 3, 3). The function returns a tensor of (u, v) camera coordinates with shape (*, 2). An example usage of the function is provided where a random 3D point and an identity matrix as the camera matrix are used to project the point onto the camera plane, resulting in a tensor of camera coordinates.",
    "function_name": "project_points",
    "ground_truth": "kornia/geometry/camera/perspective.py",
    "test": "tests/geometry/camera/test_projections.py::TestProjectionZ1",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Segmentation",
    "data": "Image"
}