{
    "result": "To create a Python function called `total_variation` that computes the Total Variation of an input image tensor, we need to consider the following steps:\n\n1. **Input Validation**: Ensure the input is a tensor and the reduction parameter is valid.\n2. **Compute Differences**: Calculate the absolute differences between neighboring pixels along the height and width dimensions.\n3. **Reduction**: Sum or average the computed differences based on the reduction parameter.\n4. **Return the Result**: The function should return a tensor with the appropriate shape.\n\nHere's how you can implement this function using PyTorch:\n\n```python\nimport torch\n\ndef total_variation(image_tensor, reduction='sum'):\n    \"\"\"\n    Computes the Total Variation of an input image tensor.\n\n    Parameters:\n    - image_tensor (torch.Tensor): The input image tensor with shape (*, H, W).\n    - reduction (str): Specifies the reduction method, either 'sum' or 'mean'.\n\n    Returns:\n    - torch.Tensor: A tensor with shape (*) representing the total variation.\n    \"\"\"\n    # Validate input type\n    if not isinstance(image_tensor, torch.Tensor):\n        raise TypeError(\"Input must be a torch.Tensor\")\n\n    # Validate reduction parameter\n    if reduction not in ['sum', 'mean']:\n        raise ValueError(\"Reduction must be either 'sum' or 'mean'\")\n\n    # Compute differences along the height and width dimensions\n    diff_h = torch.abs(image_tensor[..., 1:, :] - image_tensor[..., :-1, :])\n    diff_w = torch.abs(image_tensor[..., :, 1:] - image_tensor[..., :, :-1])\n\n    # Sum the differences\n    total_variation_value = diff_h.sum(dim=(-2, -1)) + diff_w.sum(dim=(-2, -1))\n\n    # Apply reduction\n    if reduction == 'mean':\n        num_elements = (image_tensor.size(-2) - 1) * image_tensor.size(-1) + \\\n                       (image_tensor.size(-1) - 1) * image_tensor.size(-2)\n        total_variation_value = total_variation_value / num_elements\n\n    return total_variation_value\n\n# Example usage:\n# image_tensor = torch.rand(3, 256, 256)  # Example image tensor\n# tv = total_variation(image_tensor, reduction='mean')\n# print(tv)\n```\n\n### Explanation:\n\n- **Input Validation**: The function checks if the input is a `torch.Tensor` and if the `reduction` parameter is either `'sum'` or `'mean'`.\n- **Compute Differences**: The function calculates the absolute differences between adjacent pixels along the height (`diff_h`) and width (`diff_w`) dimensions.\n- **Reduction**: Depending on the `reduction` parameter, the function either sums or averages the total variation values.\n- **Return**: The function returns the total variation as a tensor with the same leading dimensions as the input tensor.\n\nThis function is designed to handle image tensors with any number of leading dimensions, making it flexible for batch processing or multi-channel images.",
    "prompt": "Generate a Python function called total_variation that computes the Total Variation of an input image tensor. The function takes in an image tensor with shape (*, H, W) and an optional reduction parameter that specifies whether to return the sum or mean of the output. The function returns a tensor with shape (*). The Total Variation is calculated by taking the absolute differences of neighboring pixels in the image tensor along the height and width dimensions. The output is then either summed or averaged based on the reduction parameter. The function includes error checking for input types and reduction options.",
    "function_name": "total_variation",
    "ground_truth": "kornia/losses/total_variation.py",
    "test": "tests/losses/test_total_variation.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Segmentation",
    "data": "Image"
}