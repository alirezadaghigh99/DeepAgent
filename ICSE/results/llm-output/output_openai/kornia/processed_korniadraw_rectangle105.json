{
    "result": "To implement the `draw_rectangle` function, we need to handle the drawing of rectangles on a batch of image tensors. The function will take into account the batch size, the number of rectangles, and the color specifications. We'll use PyTorch for tensor operations, and we'll assume that the input tensors are PyTorch tensors.\n\nHere's how you can implement the `draw_rectangle` function:\n\n```python\nimport torch\n\ndef draw_rectangle(image, rectangle, color=None, fill=False):\n    # Check the batch size\n    B, C, H, W = image.shape\n    assert rectangle.shape[0] == B, \"Batch size of image and rectangle must match.\"\n    assert rectangle.shape[2] == 4, \"Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).\"\n    \n    # Default color to white if not provided\n    if color is None:\n        color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)\n    \n    # Handle different color shapes\n    if color.dim() == 1:\n        color = color.view(1, 1, -1)  # Shape (1, 1, C)\n    elif color.dim() == 2:\n        color = color.view(B, -1, 1)  # Shape (B, N, 1) or (B, N, 3)\n    \n    # Iterate over each image in the batch\n    for b in range(B):\n        for n in range(rectangle.shape[1]):\n            x1, y1, x2, y2 = rectangle[b, n]\n            x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)\n            \n            # Get the color for the current rectangle\n            if color.shape[-1] == 1:\n                rect_color = color[b, n, 0].expand(C)\n            else:\n                rect_color = color[b, n]\n            \n            # Draw the rectangle\n            if fill:\n                image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)\n            else:\n                # Draw borders\n                image[b, :, y1, x1:x2] = rect_color  # Top border\n                image[b, :, y2-1, x1:x2] = rect_color  # Bottom border\n                image[b, :, y1:y2, x1] = rect_color  # Left border\n                image[b, :, y1:y2, x2-1] = rect_color  # Right border\n    \n    return image\n\n# Example usage:\n# image = torch.zeros((2, 3, 100, 100), dtype=torch.uint8)  # Batch of 2 images, 3 channels, 100x100\n# rectangles = torch.tensor([[[10, 10, 50, 50], [60, 60, 90, 90]], [[20, 20, 70, 70], [30, 30, 80, 80]]])\n# color = torch.tensor([255, 0, 0])  # Red color\n# modified_image = draw_rectangle(image, rectangles, color, fill=False)\n```\n\n### Explanation:\n- **Assertions**: We first check that the batch size of the image and rectangle tensors match and that each rectangle is defined by exactly four coordinates.\n- **Color Handling**: We handle different shapes of the color tensor, ensuring it can be broadcasted correctly to match the image channels.\n- **Drawing**: We iterate over each image in the batch and each rectangle, drawing either filled rectangles or just borders based on the `fill` flag.\n- **In-place Modification**: The function modifies the input image tensor in place and also returns it for convenience.\n\nThis function should work for a variety of input shapes and configurations, allowing for flexible rectangle drawing on image batches.",
    "prompt": "Create a Python function draw_rectangle that draws one or more rectangles on a batch of image tensors. The function accepts the following parameters:\n\nimage: A tensor of shape (B, C, H, W), where B is the batch size, C is the number of channels, H is the height, and W is the width of the images.\nrectangle: A tensor of shape (B, N, 4), where N is the number of rectangles per image, and each rectangle is defined by four coordinates (x1, y1, x2, y2) corresponding to the top-left and bottom-right corners.\ncolor: An optional tensor specifying the color of the rectangles. It can be of various shapes: (1,), (3,), (B, N, 1), or (B, N, 3). If the image has 3 channels and the color tensor has 1 channel, the color will be broadcasted.\nfill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.\nThe function modifies the input image tensor in place, drawing the specified rectangles according to the provided parameters. It also returns the modified image tensor for convenience.\n\nError Handling:\nRaise an AssertionError if the batch size of the image tensor does not match the batch size of the rectangle tensor.\nRaise an AssertionError if the number of points in the rectangle tensor is not 4.",
    "function_name": "draw_rectangle",
    "ground_truth": "kornia/utils/draw.py",
    "test": "tests/utils/test_draw.py::TestDrawRectangle",
    "class": "",
    "stage": "Inference",
    "task": "Detection",
    "data": "Image"
}