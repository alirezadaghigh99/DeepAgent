{
    "result": "To create a function that converts a 3D vector into its corresponding skew-symmetric matrix using PyTorch, you can follow these steps. The function will handle both single vectors and batches of vectors, and it will include error handling to ensure the input has the correct shape.\n\nHere's the implementation:\n\n```python\nimport torch\n\ndef vector_to_skew_symmetric_matrix(v):\n    \"\"\"\n    Converts a 3D vector or a batch of 3D vectors into their corresponding skew-symmetric matrices.\n\n    Parameters:\n    v (torch.Tensor): A tensor of shape (B, 3) or (3,), representing a batch of 3D vectors or a single 3D vector.\n\n    Returns:\n    torch.Tensor: A tensor of shape (B, 3, 3) or (3, 3) containing the skew-symmetric matrices.\n\n    Raises:\n    ValueError: If the input tensor does not have the correct shape.\n    \"\"\"\n    if v.ndim == 1:\n        if v.shape[0] != 3:\n            raise ValueError(\"Input vector must have shape (3,) for a single 3D vector.\")\n        v = v.unsqueeze(0)  # Add batch dimension for consistent processing\n\n    elif v.ndim == 2:\n        if v.shape[1] != 3:\n            raise ValueError(\"Each vector in the batch must have shape (3,).\")\n    else:\n        raise ValueError(\"Input tensor must have shape (B, 3) or (3,).\")\n\n    # Extract components\n    x, y, z = v[:, 0], v[:, 1], v[:, 2]\n\n    # Create skew-symmetric matrices\n    zero = torch.zeros_like(x)\n    skew_matrices = torch.stack([\n        torch.stack([zero, -z, y], dim=-1),\n        torch.stack([z, zero, -x], dim=-1),\n        torch.stack([-y, x, zero], dim=-1)\n    ], dim=-2)\n\n    if skew_matrices.shape[0] == 1:\n        return skew_matrices.squeeze(0)  # Remove batch dimension if input was a single vector\n    return skew_matrices\n\n# Example usage:\n# Single vector\nv_single = torch.tensor([1.0, 2.0, 3.0])\nprint(vector_to_skew_symmetric_matrix(v_single))\n\n# Batch of vectors\nv_batch = torch.tensor([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\nprint(vector_to_skew_symmetric_matrix(v_batch))\n```\n\n### Explanation:\n- The function first checks the dimensionality of the input tensor `v`.\n- If `v` is a 1D tensor with shape `(3,)`, it is treated as a single vector, and a batch dimension is added for consistent processing.\n- If `v` is a 2D tensor with shape `(B, 3)`, it is treated as a batch of vectors.\n- The function raises a `ValueError` if the input tensor does not have the expected shape.\n- The skew-symmetric matrix is constructed using the components of the vector(s).\n- The function returns the skew-symmetric matrix, removing the batch dimension if the input was a single vector.",
    "prompt": "Create a Python function called vector_to_skew_symmetric_matrix that converts a 3D vector into its corresponding skew-symmetric matrix. The input should be a PyTorch Tensor of shape (B, 3) or (3,), representing a batch of 3D vectors or a single 3D vector. The function should return a PyTorch Tensor of shape (B, 3, 3) or (3, 3) containing the skew-symmetric matrices. It should include error handling to ensure the input vector has the correct shape and raise a ValueError if it does not",
    "function_name": "vector_to_skew_symmetric_matrix",
    "ground_truth": "kornia/geometry/conversions.py#L1490",
    "test": "tests/geometry/test_conversions.py::test_vector_to_skew_symmetric_matrix",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}