{
    "result": "To convert a 3D vector of axis-angle rotations to a 3x3 rotation matrix, we can use the Rodrigues' rotation formula. This formula provides a way to compute the rotation matrix from an axis and an angle. Here's how you can implement this in Python using PyTorch:\n\n```python\nimport torch\n\ndef axis_angle_to_rotation_matrix(axis_angle):\n    \"\"\"\n    Convert 3D vector of axis-angle rotations to 3x3 rotation matrices.\n\n    Args:\n        axis_angle: tensor of 3D vector of axis-angle rotations in radians with shape (N, 3).\n\n    Returns:\n        tensor of rotation matrices of shape (N, 3, 3).\n    \"\"\"\n    # Ensure the input is a tensor\n    axis_angle = torch.tensor(axis_angle, dtype=torch.float32)\n\n    # Get the angle (magnitude of the vector)\n    angles = torch.norm(axis_angle, dim=1, keepdim=True)\n\n    # Avoid division by zero by setting zero angles to one (the result will be identity matrix)\n    angles = torch.where(angles == 0, torch.ones_like(angles), angles)\n\n    # Normalize the axis\n    axis = axis_angle / angles\n\n    # Compute the components of the Rodrigues' rotation formula\n    cos_angles = torch.cos(angles)\n    sin_angles = torch.sin(angles)\n    one_minus_cos = 1 - cos_angles\n\n    # Extract the components of the axis\n    x, y, z = axis[:, 0], axis[:, 1], axis[:, 2]\n\n    # Compute the rotation matrix components\n    R = torch.zeros((axis_angle.shape[0], 3, 3), dtype=torch.float32)\n    R[:, 0, 0] = cos_angles + x * x * one_minus_cos\n    R[:, 0, 1] = x * y * one_minus_cos - z * sin_angles\n    R[:, 0, 2] = x * z * one_minus_cos + y * sin_angles\n    R[:, 1, 0] = y * x * one_minus_cos + z * sin_angles\n    R[:, 1, 1] = cos_angles + y * y * one_minus_cos\n    R[:, 1, 2] = y * z * one_minus_cos - x * sin_angles\n    R[:, 2, 0] = z * x * one_minus_cos - y * sin_angles\n    R[:, 2, 1] = z * y * one_minus_cos + x * sin_angles\n    R[:, 2, 2] = cos_angles + z * z * one_minus_cos\n\n    return R\n\n# Example usage\ninput = torch.tensor([[0., 0., 0.]])\nprint(axis_angle_to_rotation_matrix(input))\n\ninput = torch.tensor([[1.5708, 0., 0.]])\nprint(axis_angle_to_rotation_matrix(input))\n```\n\nThis function takes a tensor of axis-angle vectors and returns a tensor of corresponding rotation matrices. The Rodrigues' rotation formula is used to compute each rotation matrix. The function handles the case where the angle is zero by returning the identity matrix.",
    "prompt": "Write a python function axis_angle_to_rotation_matrix thatConvert 3d vector of axis-angle rotation to 3x3 rotation matrix.\n\n    Args:\n        axis_angle: tensor of 3d vector of axis-angle rotations in radians with shape :math:`(N, 3)`.\n\n    Returns:\n        tensor of rotation matrices of shape :math:`(N, 3, 3)`.\n\n    Example:\n        >>> input = tensor([[0., 0., 0.]])\n        >>> axis_angle_to_rotation_matrix(input)\n        tensor([[[1., 0., 0.],\n                 [0., 1., 0.],\n                 [0., 0., 1.]]])\n\n        >>> input = tensor([[1.5708, 0., 0.]])\n        >>> axis_angle_to_rotation_matrix(input)\n        tensor([[[ 1.0000e+00,  0.0000e+00,  0.0000e+00],\n                 [ 0.0000e+00, -3.6200e-06, -1.0000e+00],\n                 [ 0.0000e+00,  1.0000e+00, -3.6200e-06]]]]",
    "function_name": "axis_angle_to_rotation_matrix",
    "ground_truth": "kornia/geometry/conversions.py#L267",
    "test": "tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}