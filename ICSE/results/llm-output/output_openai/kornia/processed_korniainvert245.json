{
    "result": "To implement the `invert` function, we need to ensure that the input image and the maximum value are tensors. We will use PyTorch for tensor operations. The function will invert the image tensor values by subtracting them from the maximum value tensor. Broadcasting will be used if the maximum value tensor has a compatible shape.\n\nHere's the implementation of the `invert` function:\n\n```python\nimport torch\n\ndef invert(image_tensor, max_value_tensor=None):\n    # Check if the input image is a tensor\n    assert isinstance(image_tensor, torch.Tensor), \"Input image must be a tensor.\"\n    \n    # If max_value_tensor is not provided, use the maximum value of the image tensor\n    if max_value_tensor is None:\n        max_value_tensor = image_tensor.max()\n    else:\n        # Check if the max_value_tensor is a tensor\n        assert isinstance(max_value_tensor, torch.Tensor), \"Maximum value must be a tensor.\"\n    \n    # Invert the image tensor\n    inverted_tensor = max_value_tensor - image_tensor\n    \n    return inverted_tensor\n\n# Example usage\nimg1 = torch.rand(1, 2, 4, 4)\nprint(invert(img1).shape)  # Output: torch.Size([1, 2, 4, 4])\n\nimg2 = 255. * torch.rand(1, 2, 3, 4, 4)\nprint(invert(img2, torch.as_tensor(255.)).shape)  # Output: torch.Size([1, 2, 3, 4, 4])\n\nimg3 = torch.rand(1, 3, 4, 4)\nprint(invert(img3, torch.as_tensor([[[[1.]]]])).shape)  # Output: torch.Size([1, 3, 4, 4])\n```\n\n### Explanation:\n- **Assertions**: We use assertions to ensure that both the `image_tensor` and `max_value_tensor` are instances of `torch.Tensor`.\n- **Default Maximum Value**: If `max_value_tensor` is not provided, we use the maximum value of the `image_tensor` itself.\n- **Broadcasting**: The subtraction operation will automatically handle broadcasting if the shapes of `image_tensor` and `max_value_tensor` are compatible.\n- **Output**: The function returns the inverted tensor, which has the same shape as the input `image_tensor`.",
    "prompt": "Generate a Python function called invert that takes in an input image tensor and an optional maximum value tensor, and returns the inverted values of the input image tensor by its maximum value. The input image tensor should have an arbitrary shape, while the maximum value tensor should have a shape that matches the input tensor shape or can work with broadcasting. The function should raise an AssertionError if the input image or maximum value is not a tensor. The output should be a tensor with the same shape as the input image tensor. >>> img = torch.rand(1, 2, 4, 4)\n        >>> invert(img).shape\n        torch.Size([1, 2, 4, 4])\n\n        >>> img = 255. * torch.rand(1, 2, 3, 4, 4)\n        >>> invert(img, torch.as_tensor(255.)).shape\n        torch.Size([1, 2, 3, 4, 4])\n\n        >>> img = torch.rand(1, 3, 4, 4)\n        >>> invert(img, torch.as_tensor([[[[1.]]]])).shape\n        torch.Size([1, 3, 4, 4])",
    "function_name": "invert",
    "ground_truth": "kornia/enhance/adjust.py",
    "test": "tests/geometry/epipolar/test_fundamental.py::TestFindFundamental",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}