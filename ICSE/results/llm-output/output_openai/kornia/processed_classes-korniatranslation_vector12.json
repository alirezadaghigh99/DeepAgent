{
    "result": "To generate the `translation_vector` function for the `PinholeCamera` class, we need to extract the translation component from the extrinsics matrix. The extrinsics matrix typically has the shape `(B, 4, 4)` for a batch of `B` cameras, where the last column represents the translation vector in homogeneous coordinates. The translation vector is usually located in the first three rows of the last column of the extrinsics matrix.\n\nHere's how you can implement the `translation_vector` function:\n\n```python\nimport torch\nfrom torch import Tensor\n\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n\n    def translation_vector(self) -> Tensor:\n        # Extract the translation vector from the extrinsics matrix\n        # Assuming extrinsics is of shape (B, 4, 4)\n        return self._extrinsics[:, :3, 3:4]\n\n# Example usage:\n# B = batch size\n# intrinsics = torch.rand(B, 3, 3)\n# extrinsics = torch.rand(B, 4, 4)\n# height = torch.rand(B)\n# width = torch.rand(B)\n# camera = PinholeCamera(intrinsics, extrinsics, height, width)\n# translation = camera.translation_vector()\n# print(translation.shape)  # Should print torch.Size([B, 3, 1])\n```\n\nIn this implementation, the `translation_vector` function slices the extrinsics tensor to extract the translation component, which is the last column of the first three rows. The resulting tensor has the shape `(B, 3, 1)`, as required.",
    "prompt": "Generate the `translation_vector` function for the following class to return the translation vector from the extrinsics matrix. The function should take `self` as input and return a tensor with shape `(B, 3, 1)`.\n\n```python\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n```",
    "function_name": "translation_vector",
    "ground_truth": "kornia/geometry/camera/pinhole.py",
    "test": "tests/geometry/camera/test_pinhole.py",
    "class": "PinholeCamera",
    "stage": "Image",
    "task": "",
    "data": "Inference"
}