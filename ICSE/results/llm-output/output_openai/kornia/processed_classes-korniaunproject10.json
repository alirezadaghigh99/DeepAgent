{
    "result": "To generate the `unproject` function for the `PinholeCamera` class, we need to transform 2D pixel coordinates into 3D world coordinates using the camera's intrinsic and extrinsic parameters. The intrinsic matrix is used to convert pixel coordinates to camera coordinates, and the extrinsic matrix is used to transform these camera coordinates to world coordinates.\n\nHere's how you can implement the `unproject` function:\n\n```python\nimport torch\nfrom torch import Tensor\n\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n\n    def unproject(self, point_2d: Tensor, depth: Tensor) -> Tensor:\n        # Ensure the input tensors are of the correct shape\n        assert point_2d.shape[-1] == 2, \"point_2d should have shape (*, 2)\"\n        assert depth.shape[-1] == 1, \"depth should have shape (*, 1)\"\n        \n        # Inverse of the intrinsic matrix\n        intrinsics_inv = torch.inverse(self._intrinsics)\n        \n        # Convert 2D points to homogeneous coordinates\n        ones = torch.ones_like(point_2d[..., :1])\n        pixel_homogeneous = torch.cat((point_2d, ones), dim=-1)\n        \n        # Transform pixel coordinates to camera coordinates\n        camera_coords = torch.matmul(intrinsics_inv, pixel_homogeneous.unsqueeze(-1)).squeeze(-1)\n        \n        # Scale by depth to get the actual 3D coordinates in the camera frame\n        camera_coords *= depth\n        \n        # Convert camera coordinates to homogeneous coordinates\n        camera_homogeneous = torch.cat((camera_coords, ones), dim=-1)\n        \n        # Transform camera coordinates to world coordinates using the extrinsic matrix\n        world_coords_homogeneous = torch.matmul(self._extrinsics, camera_homogeneous.unsqueeze(-1)).squeeze(-1)\n        \n        # Return the (x, y, z) world coordinates\n        return world_coords_homogeneous[..., :3]\n```\n\n### Explanation:\n1. **Intrinsic Matrix Inversion**: We first compute the inverse of the intrinsic matrix to transform pixel coordinates to normalized camera coordinates.\n\n2. **Homogeneous Coordinates**: We convert the 2D pixel coordinates to homogeneous coordinates by appending a 1 to each point.\n\n3. **Camera Coordinates**: We transform the pixel coordinates to camera coordinates using the inverse intrinsic matrix. The result is scaled by the depth to obtain the actual 3D coordinates in the camera frame.\n\n4. **World Coordinates**: We convert the camera coordinates to world coordinates using the extrinsic matrix. The extrinsic matrix includes both rotation and translation, transforming from the camera frame to the world frame.\n\n5. **Output**: Finally, we return the (x, y, z) world coordinates by slicing the homogeneous coordinates.\n\nThis function assumes that the intrinsic and extrinsic matrices are properly defined and that the input tensors are of the correct shape.",
    "prompt": "Generate the `unproject` function for the following class to transform coordinates in the pixel frame to the world frame. The input is `self`, a `point_2d` tensor with shape `(*, 2)`, and a `depth` tensor with shape `(*, 1)`. The output is a tensor of `(x, y, z)` world coordinates with shape `(*, 3)`.\n\n```python\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n```",
    "function_name": "unproject",
    "ground_truth": "kornia/geometry/camera/pinhole.py",
    "test": "tests/geometry/camera/test_pinhole.py",
    "class": "PinholeCamera",
    "stage": "Image",
    "task": "",
    "data": "Inference"
}