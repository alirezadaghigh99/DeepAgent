{
    "result": "To implement the `match_nn` function as described, we will use PyTorch to handle tensor operations. The function will compute the nearest neighbors between two sets of descriptors, either using a precomputed distance matrix or by calculating it on the fly using `torch.cdist`. Here's how you can implement this function:\n\n```python\nimport torch\n\ndef _no_match(B1):\n    # Returns placeholder outputs when there are no matches\n    return torch.full((B1, 1), float('inf')), torch.full((B1, 2), -1, dtype=torch.long)\n\ndef match_nn(desc1, desc2, dm=None):\n    # Check if desc1 or desc2 is empty\n    if desc1.size(0) == 0 or desc2.size(0) == 0:\n        return _no_match(desc1.size(0))\n    \n    # Calculate the distance matrix if not provided\n    if dm is None:\n        dm = torch.cdist(desc1, desc2)\n    \n    # Find the nearest neighbors\n    min_distances, min_indices = torch.min(dm, dim=1)\n    \n    # Construct the indices tensor\n    indices = torch.arange(desc1.size(0), dtype=torch.long).unsqueeze(1)\n    matches = torch.cat((indices, min_indices.unsqueeze(1)), dim=1)\n    \n    # Return the distances and the indices\n    return min_distances.unsqueeze(1), matches\n\n# Example usage:\n# desc1 = torch.rand(5, 128)  # Example descriptor batch 1\n# desc2 = torch.rand(10, 128) # Example descriptor batch 2\n# distances, indices = match_nn(desc1, desc2)\n# print(distances)\n# print(indices)\n```\n\n### Explanation:\n\n1. **_no_match Function**: This helper function returns placeholder outputs when either `desc1` or `desc2` is empty. It returns a tensor of infinite distances and a tensor of indices filled with `-1`.\n\n2. **Distance Matrix Calculation**: If the distance matrix `dm` is not provided, it is computed using `torch.cdist`, which calculates the pairwise distances between the descriptors in `desc1` and `desc2`.\n\n3. **Finding Nearest Neighbors**: The function uses `torch.min` to find the minimum distance and the corresponding index in `desc2` for each descriptor in `desc1`.\n\n4. **Constructing the Indices Tensor**: The indices tensor is constructed by combining the indices of `desc1` with the indices of the nearest neighbors in `desc2`.\n\n5. **Return Values**: The function returns two tensors:\n   - A tensor of the minimum distances for each descriptor in `desc1`.\n   - A tensor of indices indicating the matching descriptors in `desc1` and `desc2`.\n\nThis function assumes that the input tensors have compatible shapes and does not include explicit error handling for incompatible inputs, as specified in the requirements.",
    "prompt": "Create a Python function `match_nn` that:\n\n- Takes three parameters:\n  - `desc1`: A tensor containing a batch of descriptors with shape `(B1, D)`.\n  - `desc2`: A tensor containing another batch of descriptors with shape `(B2, D)`.\n  - `dm`: An optional precomputed distance matrix tensor of shape `(B1, B2)`. If not provided, the function computes the distance matrix using `torch.cdist`.\n\n- The function finds the nearest neighbors in `desc2` for each vector in `desc1`:\n  - Checks if the input descriptors have the correct shapes.\n  - If either `desc1` or `desc2` is empty, it returns a placeholder output using `_no_match`.\n  - If `dm` is not provided, it calculates the distance matrix between `desc1` and `desc2`.\n  - Finds the minimum distances and their corresponding indices in `desc2` for each vector in `desc1`.\n  - Constructs a tensor containing the indices of matching descriptors in `desc1` and `desc2`.\n\n- Returns:\n  - A tensor of matching descriptor distances with shape `(B1, 1)`.\n  - A tensor of long indices of matching descriptors in `desc1` and `desc2` with shape `(B1, 2)`.\n\nErrors:\n- The function assumes that the input tensors have compatible shapes and does not include explicit error handling for incompatible inputs.",
    "function_name": "match_nn",
    "ground_truth": "kornia/feature/matching.py#L60",
    "test": "tests/feature/test_matching.py::TestMatchSNN",
    "class": "",
    "stage": "Evaluating&Metrics",
    "task": "",
    "data": "Image"
}