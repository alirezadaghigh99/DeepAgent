{
    "result": "To create a function `draw_line` that draws a line on an image represented as a PyTorch tensor, we need to ensure that the function handles both single and batched points, checks for valid input dimensions, and draws the line using a simple line drawing algorithm like Bresenham's line algorithm. Here's how you can implement this:\n\n```python\nimport torch\n\ndef draw_line(image, p1, p2, color):\n    # Check the image dimensions\n    if image.ndim != 3:\n        raise ValueError(\"Image must have 3 dimensions (C, H, W).\")\n    \n    C, H, W = image.shape\n    \n    # Check the color dimensions\n    if color.shape[0] != C:\n        raise ValueError(\"Color must have the same number of channels as the image.\")\n    \n    # Ensure p1 and p2 are tensors\n    p1 = torch.tensor(p1, dtype=torch.int32)\n    p2 = torch.tensor(p2, dtype=torch.int32)\n    \n    # Check the points dimensions\n    if p1.ndim == 1:\n        p1 = p1.unsqueeze(0)\n    if p2.ndim == 1:\n        p2 = p2.unsqueeze(0)\n    \n    if p1.shape != p2.shape:\n        raise ValueError(\"p1 and p2 must have the same shape.\")\n    \n    if p1.shape[1] != 2:\n        raise ValueError(\"p1 and p2 must have shape (2,) or (B, 2).\")\n    \n    # Function to draw a line using Bresenham's algorithm\n    def bresenham_line(x0, y0, x1, y1):\n        points = []\n        dx = abs(x1 - x0)\n        dy = abs(y1 - y0)\n        sx = 1 if x0 < x1 else -1\n        sy = 1 if y0 < y1 else -1\n        err = dx - dy\n        \n        while True:\n            points.append((x0, y0))\n            if x0 == x1 and y0 == y1:\n                break\n            e2 = err * 2\n            if e2 > -dy:\n                err -= dy\n                x0 += sx\n            if e2 < dx:\n                err += dx\n                y0 += sy\n        return points\n    \n    # Draw lines for each pair of points\n    for i in range(p1.shape[0]):\n        x0, y0 = p1[i].tolist()\n        x1, y1 = p2[i].tolist()\n        \n        # Check if points are within bounds\n        if not (0 <= x0 < W and 0 <= y0 < H and 0 <= x1 < W and 0 <= y1 < H):\n            raise ValueError(\"Points must be within the bounds of the image.\")\n        \n        # Get the line points\n        line_points = bresenham_line(x0, y0, x1, y1)\n        \n        # Draw the line on the image\n        for x, y in line_points:\n            image[:, y, x] = color\n    \n    return image\n```\n\n### Explanation:\n- **Input Validation**: The function first checks that the image has three dimensions and that the color has the same number of channels as the image.\n- **Point Handling**: It ensures that `p1` and `p2` are tensors and have the correct shape. If they are not batched, they are converted to a batch of size 1.\n- **Bresenham's Line Algorithm**: This algorithm is used to calculate the points on the line between two given points. It is efficient and works well for integer-based grid systems like image pixels.\n- **Drawing the Line**: For each pair of points, the function calculates the line points and updates the image tensor with the specified color.\n\nThis function should work for both single and batched points, provided the input dimensions are correct.",
    "prompt": "Create a Python function called draw_line that draws a single line into an image. The function takes in four parameters: image (a torch.Tensor representing the input image with shape (C,H,W)), p1 (the start point [x y] of the line with shape (2, ) or (B, 2)), p2 (the end point [x y] of the line with shape (2, ) or (B, 2)), and color (the color of the line with shape (C) where C is the number of channels of the image). The function returns the image with the drawn line.\n\nEnsure that the input points p1 and p2 are 2D points with shape (2, ) or (B, 2) and have the same batch sizes. Check that the points are within the bounds of the image. The image must have 3 dimensions (C,H,W) and the color must have the same number of channels as the image.\n\nThe function calculates the coordinates of the line based on the start and end points, and then updates the image with the specified color along the line. The updated image is returned as the output.",
    "function_name": "draw_line",
    "ground_truth": "kornia/utils/draw.py",
    "test": "tests/utils/test_draw.py",
    "class": "",
    "stage": "Inference",
    "task": "",
    "data": "Image"
}