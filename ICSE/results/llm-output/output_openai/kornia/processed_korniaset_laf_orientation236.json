{
    "result": "To create the `set_laf_orientation` function, we need to adjust the orientation of each Local Affine Frame (LAF) based on the given angles. The LAF is represented as a tensor of shape `(B, N, 2, 3)`, where `B` is the batch size, `N` is the number of LAFs, and each LAF is a 2x3 matrix. The angles are provided in degrees and need to be converted to radians for trigonometric calculations.\n\nThe orientation change involves creating a rotation matrix for each angle and applying it to the 2x2 part of each LAF. Here's how you can implement this:\n\n```python\nimport torch\n\ndef set_laf_orientation(LAF, angles_degrees):\n    # Convert angles from degrees to radians\n    angles_radians = angles_degrees * (torch.pi / 180.0)\n    \n    # Calculate the cosine and sine of the angles\n    cos_angles = torch.cos(angles_radians)\n    sin_angles = torch.sin(angles_radians)\n    \n    # Create the rotation matrices\n    rotation_matrices = torch.zeros_like(LAF[:, :, :2, :2])\n    rotation_matrices[:, :, 0, 0] = cos_angles.squeeze(-1)\n    rotation_matrices[:, :, 0, 1] = -sin_angles.squeeze(-1)\n    rotation_matrices[:, :, 1, 0] = sin_angles.squeeze(-1)\n    rotation_matrices[:, :, 1, 1] = cos_angles.squeeze(-1)\n    \n    # Apply the rotation to the 2x2 part of each LAF\n    oriented_LAF = LAF.clone()\n    oriented_LAF[:, :, :2, :2] = torch.matmul(rotation_matrices, LAF[:, :, :2, :2])\n    \n    return oriented_LAF\n\n# Example usage:\n# LAF = torch.randn(2, 3, 2, 3)  # Example LAF tensor with shape (B=2, N=3, 2, 3)\n# angles_degrees = torch.tensor([[[30.0], [45.0], [60.0]], [[90.0], [120.0], [150.0]]])  # Example angles\n# oriented_LAF = set_laf_orientation(LAF, angles_degrees)\n```\n\n### Explanation:\n- **Angles Conversion**: The angles are converted from degrees to radians because trigonometric functions in PyTorch use radians.\n- **Rotation Matrix**: For each angle, a 2x2 rotation matrix is constructed using the cosine and sine values.\n- **Matrix Multiplication**: The rotation matrix is applied to the 2x2 part of each LAF using matrix multiplication.\n- **Output**: The function returns the LAFs with updated orientations.\n\nThis function assumes that the input tensors are on the same device (CPU or GPU) and have compatible shapes. Adjustments may be needed if the tensors are on different devices or if additional error handling is required.",
    "prompt": "Generate a Python function called set_laf_orientation that changes the orientation of the Local Affine Frames (LAFs). The function takes in two arguments: LAF, a tensor of shape (B, N, 2, 3) representing the LAFs, and angles_degrees, a tensor of shape (B, N, 1) representing the angles in degrees. The function returns a tensor of shape (B, N, 2, 3) representing the LAFs oriented with the specified angles. T",
    "function_name": "set_laf_orientation",
    "ground_truth": "kornia/feature/laf.py",
    "test": "tests/feature/test_laf.py::TestSetLAFOri",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Detection",
    "data": "Image"
}