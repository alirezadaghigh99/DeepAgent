{
    "result": "To create a function `cross_product_matrix` that constructs a skew-symmetric matrix for a given vector, we can use the PyTorch library. The skew-symmetric matrix is used to compute the cross product of vectors in three-dimensional space. Here's how you can implement this function:\n\n```python\nimport torch\n\ndef cross_product_matrix(x: torch.Tensor) -> torch.Tensor:\n    # Ensure the last dimension of the input tensor is 3\n    if not x.shape[-1] == 3:\n        raise AssertionError(f\"Expected last dimension to be 3, but got {x.shape[-1]}\")\n    \n    # Extract the components of the vector\n    x1, x2, x3 = x[..., 0], x[..., 1], x[..., 2]\n    \n    # Construct the skew-symmetric matrix\n    zero = torch.zeros_like(x1)\n    cross_prod_matrix = torch.stack([\n        torch.stack([zero, -x3, x2], dim=-1),\n        torch.stack([x3, zero, -x1], dim=-1),\n        torch.stack([-x2, x1, zero], dim=-1)\n    ], dim=-2)\n    \n    return cross_prod_matrix\n\n# Example usage:\n# x = torch.tensor([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\n# result = cross_product_matrix(x)\n# print(result)\n```\n\n### Explanation:\n\n1. **Input Validation**: The function first checks if the last dimension of the input tensor `x` is 3. If not, it raises an `AssertionError`.\n\n2. **Extract Components**: The components of the vector are extracted using `x[..., 0]`, `x[..., 1]`, and `x[..., 2]`. This allows the function to handle batches of vectors.\n\n3. **Construct Skew-Symmetric Matrix**: The skew-symmetric matrix is constructed using the extracted components. The matrix is defined as:\n   \\[\n   \\begin{bmatrix}\n   0 & -x_3 & x_2 \\\\\n   x_3 & 0 & -x_1 \\\\\n   -x_2 & x_1 & 0\n   \\end{bmatrix}\n   \\]\n   This is done using `torch.stack` to create the matrix for each vector in the batch.\n\n4. **Return the Result**: The function returns the constructed skew-symmetric matrix with shape `(*, 3, 3)`, where `*` represents any additional dimensions in the input tensor.",
    "prompt": "Create a Python function `cross_product_matrix` that:\n\n- Constructs the cross-product matrix (a skew-symmetric matrix) for a given vector.\n- Accepts a single parameter:\n  - `x`: A tensor of shape `(*, 3)` representing the input vector(s).\n- Returns a tensor containing the constructed cross-product matrix with shape `(*, 3, 3)`.\n\nErrors:\n- Raises an `AssertionError` if the last dimension of the input tensor is not equal to 3.\ndef cross_product_matrix(x: torch.Tensor) -> torch.Tensor:\n      if not x.shape[-1] == 3:\n        raise AssertionError(x.shape)\n## complete",
    "function_name": "cross_product_matrix",
    "ground_truth": "kornia/geometry/epipolar/numeric.py#L8",
    "test": "tests/geometry/epipolar/test_numeric.py::TestSkewSymmetric",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Image"
}