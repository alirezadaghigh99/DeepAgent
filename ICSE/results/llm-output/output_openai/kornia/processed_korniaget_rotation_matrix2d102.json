{
    "result": "To create a function `get_rotation_matrix2d` that calculates an affine matrix for 2D rotation, we need to consider the center of rotation, the angle of rotation, and the scaling factors. The function will use PyTorch tensors to handle the input and output. Here's how you can implement this function:\n\n```python\nimport torch\nimport math\n\ndef get_rotation_matrix2d(center: torch.Tensor, angle: torch.Tensor, scale: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Calculate the affine matrix of 2D rotation.\n\n    Parameters:\n    - center: Tensor of shape (B, 2) representing the center of rotation.\n    - angle: Tensor of shape (B,) representing the rotation angle in degrees.\n    - scale: Tensor of shape (B, 2) representing the scale factor for x and y.\n\n    Returns:\n    - Tensor of shape (B, 2, 3) representing the affine transformation matrix.\n    \"\"\"\n    if not (center.ndim == 2 and center.shape[1] == 2):\n        raise ValueError(\"center must be of shape (B, 2)\")\n    if not (angle.ndim == 1):\n        raise ValueError(\"angle must be of shape (B,)\")\n    if not (scale.ndim == 2 and scale.shape[1] == 2):\n        raise ValueError(\"scale must be of shape (B, 2)\")\n\n    B = center.shape[0]\n    angle_rad = angle * math.pi / 180.0\n\n    cos_a = torch.cos(angle_rad)\n    sin_a = torch.sin(angle_rad)\n\n    # Create the rotation matrix components\n    a = cos_a * scale[:, 0]\n    b = sin_a * scale[:, 0]\n    c = -sin_a * scale[:, 1]\n    d = cos_a * scale[:, 1]\n\n    # Calculate the translation components\n    tx = center[:, 0] - a * center[:, 0] - c * center[:, 1]\n    ty = center[:, 1] - b * center[:, 0] - d * center[:, 1]\n\n    # Construct the affine transformation matrix\n    rotation_matrix = torch.zeros((B, 2, 3), dtype=center.dtype, device=center.device)\n    rotation_matrix[:, 0, 0] = a\n    rotation_matrix[:, 0, 1] = c\n    rotation_matrix[:, 0, 2] = tx\n    rotation_matrix[:, 1, 0] = b\n    rotation_matrix[:, 1, 1] = d\n    rotation_matrix[:, 1, 2] = ty\n\n    return rotation_matrix\n\n# Example usage\ncenter = torch.tensor([[50.0, 50.0], [30.0, 30.0]])\nangle = torch.tensor([45.0, 90.0])\nscale = torch.tensor([[1.0, 1.0], [0.5, 0.5]])\n\nrotation_matrices = get_rotation_matrix2d(center, angle, scale)\nprint(rotation_matrices)\n```\n\n### Explanation:\n- **Inputs**:\n  - `center`: A tensor of shape `(B, 2)` where `B` is the batch size, representing the center of rotation for each image.\n  - `angle`: A tensor of shape `(B,)` representing the rotation angle in degrees for each image.\n  - `scale`: A tensor of shape `(B, 2)` representing the scaling factors for the x and y axes for each image.\n\n- **Outputs**:\n  - A tensor of shape `(B, 2, 3)` representing the affine transformation matrix for each image in the batch.\n\n- **Process**:\n  - Convert the angle from degrees to radians.\n  - Compute the cosine and sine of the angle.\n  - Construct the affine transformation matrix using the rotation and scaling factors.\n  - Adjust the translation to ensure the center of rotation maps to itself.\n\nThis function is useful for tasks involving image transformations, such as data augmentation or geometric transformations in computer vision applications.",
    "prompt": "Generate a Python function called get_rotation_matrix2d that calculates an affine matrix of 2D rotation. The function takes three inputs: center (center of the rotation in the source image with shape (B, 2)), angle (rotation angle in degrees with shape (B)), and scale (scale factor for x, y scaling with shape (B, 2)). \n\nThe function returns the affine matrix of 2D rotation with shape (B, 2, 3). The rotation matrix is calculated based on the provided center, angle, and scale values. The transformation maps the rotation center to itself, but adjustments can be made if needed.\n\nEnsure that the inputs are of type Tensor and have the correct shapes before performing the calculations. The function also includes an example usage with sample input values. This function is often used in conjunction with the warp_affine function.",
    "function_name": "get_rotation_matrix2d",
    "ground_truth": "kornia/geometry/transform/imgwarp.py",
    "test": "tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Classification",
    "data": "Image"
}