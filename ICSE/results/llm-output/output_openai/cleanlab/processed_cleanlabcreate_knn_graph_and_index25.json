{
    "result": "To create a function `create_knn_graph_and_index` that calculates the K-Nearest Neighbors (KNN) graph from input features, we can use the `NearestNeighbors` class from the `scikit-learn` library. This function will allow for optional parameters such as the number of nearest neighbors, the distance metric, and a flag for correcting exact duplicates. Additionally, it will accept extra keyword arguments for the search index constructor.\n\nHere's how you can implement this function:\n\n```python\nimport numpy as np\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.sparse import csr_matrix\n\ndef create_knn_graph_and_index(features, n_neighbors=5, metric='euclidean', correct_duplicates=False, **kwargs):\n    \"\"\"\n    Create a KNN graph and a KNN search index from input features.\n\n    Parameters:\n    - features: np.ndarray, shape (n_samples, n_features)\n        The input feature array.\n    - n_neighbors: int, optional (default=5)\n        Number of nearest neighbors to use.\n    - metric: str, optional (default='euclidean')\n        The distance metric to use for the tree.\n    - correct_duplicates: bool, optional (default=False)\n        Whether to correct for exact duplicate points.\n    - **kwargs: additional keyword arguments for NearestNeighbors constructor.\n\n    Returns:\n    - adjacency_matrix: scipy.sparse.csr_matrix\n        Sparse weighted adjacency matrix representing the KNN graph.\n    - knn_search: NearestNeighbors\n        Fitted k-nearest neighbors search object.\n    \"\"\"\n    # Handle exact duplicates if required\n    if correct_duplicates:\n        features = np.unique(features, axis=0)\n\n    # Initialize the NearestNeighbors object\n    knn_search = NearestNeighbors(n_neighbors=n_neighbors, metric=metric, **kwargs)\n    knn_search.fit(features)\n\n    # Find the k-neighbors for each point\n    distances, indices = knn_search.kneighbors(features)\n\n    # Create a sparse adjacency matrix\n    n_samples = features.shape[0]\n    row_indices = np.repeat(np.arange(n_samples), n_neighbors)\n    col_indices = indices.flatten()\n    data = distances.flatten()\n\n    adjacency_matrix = csr_matrix((data, (row_indices, col_indices)), shape=(n_samples, n_samples))\n\n    return adjacency_matrix, knn_search\n\n# Example usage\nif __name__ == \"__main__\":\n    # Create a sample feature array\n    features = np.array([[0, 0], [1, 1], [1, 0], [0, 1], [2, 2]])\n\n    # Create the KNN graph and index\n    adjacency_matrix, knn_search = create_knn_graph_and_index(features, n_neighbors=2, metric='euclidean')\n\n    # Print the adjacency matrix\n    print(\"Adjacency Matrix:\")\n    print(adjacency_matrix.toarray())\n\n    # Print the neighbors for each point\n    print(\"\\nNeighbors for each point:\")\n    distances, indices = knn_search.kneighbors(features)\n    for i, (dist, ind) in enumerate(zip(distances, indices)):\n        print(f\"Point {i}:\")\n        for d, idx in zip(dist, ind):\n            print(f\"  Neighbor {idx} at distance {d}\")\n```\n\n### Explanation:\n- **Input Parameters:**\n  - `features`: The input feature array.\n  - `n_neighbors`: Number of nearest neighbors to consider.\n  - `metric`: The distance metric to use (e.g., 'euclidean', 'manhattan').\n  - `correct_duplicates`: If `True`, removes exact duplicate points from the feature array.\n  - `**kwargs`: Additional arguments for the `NearestNeighbors` constructor.\n\n- **Output:**\n  - `adjacency_matrix`: A sparse matrix representing the KNN graph.\n  - `knn_search`: A fitted `NearestNeighbors` object.\n\n- **Example Usage:**\n  - The example demonstrates how to use the function with a simple 2D feature array, printing both the adjacency matrix and the neighbors for each point.",
    "prompt": "Generate a Python function called create_knn_graph_and_index that calculates the KNN graph from input features. The function takes in a feature array, optional parameters for the number of nearest neighbors and distance metric, a boolean flag for correcting exact duplicates, and additional keyword arguments for the search index constructor. \n\nThe function returns a tuple containing a sparse, weighted adjacency matrix representing the KNN graph of the feature array and a k-nearest neighbors search object fitted to the input feature array. The function also includes examples demonstrating its usage with numpy arrays.",
    "function_name": "create_knn_graph_and_index",
    "ground_truth": "cleanlab/internal/neighbor/knn_graph.py",
    "test": "tests/internal/neighbor/test_neighbor.py",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": ""
}