{
    "result": "To determine if a noise matrix is learnable, we need to ensure that the matrix allows for better-than-random classification performance. A noise matrix is considered learnable if each class has a higher probability of being correctly classified than being misclassified. Here's a Python function that checks this condition:\n\n```python\nimport numpy as np\n\ndef noise_matrix_is_valid(noise_matrix: np.ndarray, py: np.ndarray, verbose: bool = False) -> bool:\n    \"\"\"\n    Check if the given noise_matrix is learnable, meaning it is possible to achieve\n    better than random performance for the amount of noise in the matrix.\n\n    Parameters:\n    - noise_matrix (np.ndarray): A square matrix where element (i, j) represents the\n      probability of class i being mislabeled as class j.\n    - py (np.ndarray): A 1D array representing the prior probabilities of each class.\n    - verbose (bool): If True, print detailed information about the validation process.\n\n    Returns:\n    - bool: True if the noise matrix is learnable, False otherwise.\n    \"\"\"\n    # Check if the noise_matrix is square\n    num_classes = noise_matrix.shape[0]\n    if noise_matrix.shape[0] != noise_matrix.shape[1]:\n        if verbose:\n            print(\"The noise matrix is not square.\")\n        return False\n\n    # Check if py has the same number of classes\n    if py.shape[0] != num_classes:\n        if verbose:\n            print(\"The prior probabilities vector py does not match the number of classes.\")\n        return False\n\n    # Check if each row of the noise matrix sums to 1 (valid probability distribution)\n    if not np.allclose(noise_matrix.sum(axis=1), 1):\n        if verbose:\n            print(\"Each row of the noise matrix must sum to 1.\")\n        return False\n\n    # Calculate the expected accuracy for each class\n    expected_accuracies = np.diag(noise_matrix) * py\n\n    # Calculate the expected random performance\n    random_performance = 1.0 / num_classes\n\n    # Check if the expected accuracy for each class is greater than random performance\n    for i, accuracy in enumerate(expected_accuracies):\n        if accuracy <= random_performance:\n            if verbose:\n                print(f\"Class {i} has an expected accuracy ({accuracy}) not greater than random performance ({random_performance}).\")\n            return False\n\n    if verbose:\n        print(\"The noise matrix is learnable.\")\n\n    return True\n```\n\n### Explanation:\n\n1. **Input Validation**:\n   - The function first checks if the `noise_matrix` is square, which is necessary for it to represent a valid confusion matrix.\n   - It also checks if the length of `py` matches the number of classes, ensuring that each class has a corresponding prior probability.\n\n2. **Probability Distribution Check**:\n   - Each row of the `noise_matrix` should sum to 1, as it represents a probability distribution over the possible labels for each true class.\n\n3. **Expected Accuracy Calculation**:\n   - The expected accuracy for each class is calculated as the product of the diagonal element of the noise matrix (probability of correct classification) and the prior probability of the class.\n\n4. **Learnability Check**:\n   - The function checks if the expected accuracy for each class is greater than the expected performance of random guessing, which is `1/num_classes`.\n\n5. **Verbose Output**:\n   - If `verbose` is set to `True`, the function provides detailed output about the validation process, which can help in debugging or understanding why a matrix is not learnable.\n\nThis function provides a basic check for the learnability of a noise matrix, assuming that better-than-random performance is a reasonable criterion for learnability.",
    "prompt": "Generate a Python function called noise_matrix_is_valid that takes in a noise_matrix (np.ndarray), py (np.ndarray), and an optional verbose parameter. The function checks if the given noise_matrix is a learnable matrix, meaning it is possible to achieve better than random performance for the amount of noise in the matrix. The function calculates probabilities based on the input matrices and returns a boolean value indicating whether the noise matrix is learnable. The function includes detailed comments explaining the purpose of each step and the expected inputs and outputs.",
    "function_name": "noise_matrix_is_valid",
    "ground_truth": "cleanlab/benchmarking/noise_generation.py",
    "test": "tests/test_noise_generation.py",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": ""
}