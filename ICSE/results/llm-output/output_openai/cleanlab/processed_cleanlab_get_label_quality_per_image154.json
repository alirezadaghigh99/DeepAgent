{
    "result": "To implement the `_get_label_quality_per_image` function, we need to calculate the label quality score using the \"softmin\" method. The \"softmin\" function is similar to the softmax function but emphasizes lower values more. Here's how you can implement this function in Python:\n\n```python\nimport numpy as np\n\ndef _get_label_quality_per_image(pixel_scores, method='softmin', temperature=0.1):\n    # Validate input\n    if pixel_scores is None or len(pixel_scores) == 0:\n        raise Exception(\"pixel_scores must be a non-empty NumPy array.\")\n    \n    if temperature is None or temperature == 0:\n        raise Exception(\"temperature must be a non-zero float.\")\n    \n    if method != 'softmin':\n        raise Exception(\"Unsupported method. Currently, only the 'softmin' method is supported.\")\n    \n    # Compute the softmin\n    # Softmin is computed as softmax(-x / temperature)\n    neg_pixel_scores = -pixel_scores / temperature\n    max_neg_pixel_score = np.max(neg_pixel_scores)  # For numerical stability\n    exp_scores = np.exp(neg_pixel_scores - max_neg_pixel_score)\n    softmin_scores = exp_scores / np.sum(exp_scores)\n    \n    # Calculate the label quality score\n    label_quality_score = np.sum(softmin_scores * pixel_scores)\n    \n    return label_quality_score\n\n# Example usage:\n# pixel_scores = np.array([0.8, 0.9, 0.7, 0.6])\n# quality_score = _get_label_quality_per_image(pixel_scores)\n# print(\"Label Quality Score:\", quality_score)\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if `pixel_scores` is `None` or empty, and if `temperature` is `None` or zero. It raises an exception with a descriptive error message if any of these conditions are met.\n\n2. **Method Check**: The function checks if the specified method is \"softmin\". If not, it raises an exception indicating that only the \"softmin\" method is supported.\n\n3. **Softmin Calculation**:\n   - The \"softmin\" is calculated by first negating the `pixel_scores` and dividing by the `temperature`.\n   - For numerical stability, the maximum of the negated scores is subtracted before applying the exponential function.\n   - The exponential scores are then normalized to sum to 1, resulting in the \"softmin\" scores.\n\n4. **Label Quality Score**: The final label quality score is computed as the weighted sum of the original `pixel_scores` using the \"softmin\" scores as weights.\n\nThis function will return a float representing the label quality score for the image, with lower scores being emphasized more due to the \"softmin\" method.",
    "prompt": "Create a Python function _get_label_quality_per_image that computes the label quality score for an image based on per-pixel label quality scores. The function uses the \"softmin\" method by default, which emphasizes the lowest-quality pixel labels more heavily in the calculation.\n\nParameters:\npixel_scores: A NumPy array containing per-pixel label quality scores, flattened into a 1D array of shape (N,), where N is the number of pixels in the image.\nmethod: A string specifying the method used to calculate the label quality score. Currently, only the \"softmin\" method is supported. This parameter is optional and defaults to \"softmin\".\ntemperature: A float that determines the temperature of the softmin function. This parameter controls how much weight is given to lower-quality pixel labels. Lower values emphasize the lowest scores more, while higher values average the scores more evenly. The default value is 0.1.\nReturns:\nA float representing the label quality score for the image, ranging from 0 (lowest quality) to 1 (highest quality).If pixel_scores is None, empty, or if temperature is 0 or None, the function raises an Exception with a descriptive error message.\nIf an unsupported method is specified, an exception is raised with a message indicating the correct method to use.",
    "function_name": "_get_label_quality_per_image",
    "ground_truth": "cleanlab/segmentation/rank.py#L204",
    "test": "tests/test_segmentation.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "segmentation",
    "data": "Image"
}