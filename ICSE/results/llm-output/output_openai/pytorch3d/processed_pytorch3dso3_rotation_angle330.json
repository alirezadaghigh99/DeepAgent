{
    "result": "Certainly! Below is a Python function `so3_rotation_angle` that calculates rotation angles from a batch of 3x3 rotation matrices using PyTorch. The function includes checks for input shape and trace validity, and it can return either the angle in radians or the cosine of the angle. It also clamps the cosine of the angle to handle numerical stability issues.\n\n```python\nimport torch\n\ndef so3_rotation_angle(\n    R: torch.Tensor,\n    eps: float = 1e-4,\n    cos_angle: bool = False,\n    cos_bound: float = 1e-4,\n) -> torch.Tensor:\n    \"\"\"\n    Calculate the rotation angles from a batch of 3x3 rotation matrices.\n\n    Args:\n        R (torch.Tensor): A batch of 3x3 rotation matrices of shape (N, 3, 3).\n        eps (float): A small epsilon value to handle numerical stability.\n        cos_angle (bool): If True, return the cosine of the angle instead of the angle itself.\n        cos_bound (float): A small value to clamp the cosine of the angle.\n\n    Returns:\n        torch.Tensor: A tensor of rotation angles or their cosines.\n    \"\"\"\n    if R.ndim != 3 or R.shape[1:] != (3, 3):\n        raise ValueError(\"Input must be a batch of 3x3 matrices with shape (N, 3, 3).\")\n\n    # Calculate the trace of each matrix\n    trace = R[:, 0, 0] + R[:, 1, 1] + R[:, 2, 2]\n\n    # Ensure the trace is within the valid range [-1, 3]\n    if not torch.all((trace >= -1.0 - eps) & (trace <= 3.0 + eps)):\n        raise ValueError(\"Trace of each matrix must be in the range [-1, 3].\")\n\n    # Calculate the cosine of the rotation angle\n    cos_theta = (trace - 1) / 2\n\n    # Clamp the cosine to the range [-1, 1] to avoid numerical issues\n    cos_theta = torch.clamp(cos_theta, -1.0 + cos_bound, 1.0 - cos_bound)\n\n    if cos_angle:\n        return cos_theta\n\n    # Calculate the rotation angle in radians\n    angle = torch.acos(cos_theta)\n\n    return angle\n```\n\n### Explanation:\n- **Input Validation**: The function checks if the input tensor `R` is a batch of 3x3 matrices. If not, it raises a `ValueError`.\n- **Trace Calculation**: The trace of each matrix is calculated as the sum of its diagonal elements.\n- **Trace Range Check**: The trace is checked to ensure it falls within the valid range for rotation matrices, which is `[-1, 3]`.\n- **Cosine Calculation**: The cosine of the rotation angle is derived from the trace.\n- **Clamping**: The cosine values are clamped to avoid numerical issues when using `acos`.\n- **Return Option**: The function can return either the cosine of the angle or the angle itself, based on the `cos_angle` flag.\n\nThis function is designed to handle edge cases and ensure numerical stability when working with rotation matrices.",
    "prompt": "Generate the python so3_rotation_angle function with torch calculates rotation angles from a batch of 3x3 rotation matrices by using the trace of the matrices. It allows returning either the angle in radians or the cosine of the angle, which can help avoid numerical instability in certain cases. The function includes checks to ensure the input is correctly shaped as a batch of 3x3 matrices and that the trace of each matrix falls within a valid range. If these conditions are not met, it raises a ValueError. Additionally, the function can clamp the cosine of the rotation angle to prevent non-finite outputs during the calculation of the angle using acos, ensuring robust handling of edge cases and potential numerical issues.\ndef so3_rotation_angle(\n    R: torch.Tensor,\n    eps: float = 1e-4,\n    cos_angle: bool = False,\n    cos_bound: float = 1e-4,\n) -> torch.Tensor:",
    "function_name": "so3_rotation_angle",
    "ground_truth": "pytorch3d/transforms/so3.py",
    "test": "tests/test_so3.py::TestSO3",
    "class": "",
    "stage": "Inference",
    "task": "Prediction",
    "data": "Image"
}