{
    "result": "To create the `camera_position_from_spherical_angles` function, we need to convert spherical coordinates (distance, elevation, azimuth) into Cartesian coordinates (x, y, z). The conversion formulas are:\n\n- \\( x = r \\cdot \\cos(\\text{elevation}) \\cdot \\cos(\\text{azimuth}) \\)\n- \\( y = r \\cdot \\cos(\\text{elevation}) \\cdot \\sin(\\text{azimuth}) \\)\n- \\( z = r \\cdot \\sin(\\text{elevation}) \\)\n\nWhere \\( r \\) is the distance from the target point. The angles can be specified in either degrees or radians, so we need to convert them to radians if they are given in degrees. We will use PyTorch for tensor operations and ensure that the inputs are broadcasted to the correct shape.\n\nHere's the implementation:\n\n```python\nimport torch\nfrom torch import Tensor\n\ndef camera_position_from_spherical_angles(\n    distance: float,\n    elevation: float,\n    azimuth: float,\n    degrees: bool = True,\n    device: str = \"cpu\"\n) -> Tensor:\n    # Convert angles to radians if they are in degrees\n    if degrees:\n        elevation = torch.tensor(elevation, device=device) * torch.pi / 180.0\n        azimuth = torch.tensor(azimuth, device=device) * torch.pi / 180.0\n    else:\n        elevation = torch.tensor(elevation, device=device)\n        azimuth = torch.tensor(azimuth, device=device)\n    \n    # Ensure distance is a tensor\n    distance = torch.tensor(distance, device=device)\n    \n    # Broadcast inputs to have shape (N, 1)\n    distance = distance.view(-1, 1)\n    elevation = elevation.view(-1, 1)\n    azimuth = azimuth.view(-1, 1)\n    \n    # Calculate Cartesian coordinates\n    x = distance * torch.cos(elevation) * torch.cos(azimuth)\n    y = distance * torch.cos(elevation) * torch.sin(azimuth)\n    z = distance * torch.sin(elevation)\n    \n    # Concatenate to form (N, 3) tensor\n    camera_position = torch.cat((x, y, z), dim=1)\n    \n    return camera_position\n\n# Example usage:\n# camera_position = camera_position_from_spherical_angles(10.0, 45.0, 30.0)\n# print(camera_position)\n```\n\nThis function takes the distance, elevation, and azimuth as inputs, converts the angles to radians if necessary, and computes the Cartesian coordinates. The inputs are broadcasted to ensure they have the correct shape for element-wise operations, and the result is returned as a PyTorch tensor with shape (N, 3).",
    "prompt": "Generate a Python function called camera_position_from_spherical_angles that calculates the location of the camera based on the distance away from the target point, the elevation and azimuth angles. The function takes in parameters distance (float), elevation (float), azimuth (float), degrees (bool = True), and device (Device = \"cpu\") and returns a torch.Tensor representing the (N, 3) xyz location of the camera. The angles can be specified in either degrees or radians, and the function handles broadcasting the input arguments to have shape (N, 1) before performing the calculations.",
    "function_name": "camera_position_from_spherical_angles",
    "ground_truth": "pytorch3d/renderer/cameras.py",
    "test": "tests/test_cameras.py",
    "class": "",
    "stage": "Model Construction",
    "task": "Detection",
    "data": "Image"
}