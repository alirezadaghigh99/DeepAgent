{
    "result": "To implement the `empty_result` function, we need to consider the different scenarios based on the input parameters. The function should handle both single-label and multi-label classification settings and return empty arrays for predictions and/or probabilities as specified by the parameters. Here's how you can implement this function:\n\n```python\nimport numpy as np\nfrom scipy.sparse import csr_matrix\n\ndef empty_result(multi_label, num_classes, return_prediction=True, return_proba=True):\n    if not return_prediction and not return_proba:\n        raise ValueError(\"Invalid usage: At least one of 'prediction' or 'proba' must be True\")\n    \n    predictions = None\n    proba = None\n    \n    if return_prediction:\n        if multi_label:\n            # For multi-label, use a sparse matrix for predictions\n            predictions = csr_matrix((0, num_classes), dtype=np.int64)\n        else:\n            # For single-label, use an empty array for predictions\n            predictions = np.empty((0,), dtype=np.int64)\n    \n    if return_proba:\n        if multi_label:\n            # For multi-label, use a sparse matrix for probabilities\n            proba = csr_matrix((0, num_classes), dtype=float)\n        else:\n            # For single-label, use an empty 2D array for probabilities\n            proba = np.empty((0, num_classes), dtype=float)\n    \n    if return_prediction and return_proba:\n        return predictions, proba\n    elif return_prediction:\n        return predictions\n    else:\n        return proba\n\n# Example usage:\n# result = empty_result(multi_label=True, num_classes=3, return_prediction=True, return_proba=False)\n```\n\n### Explanation:\n\n- **Parameters**:\n  - `multi_label`: Determines if the classification is multi-label or single-label.\n  - `num_classes`: Specifies the number of classes.\n  - `return_prediction`: If `True`, the function returns an empty prediction array.\n  - `return_proba`: If `True`, the function returns an empty probability array.\n\n- **Function Logic**:\n  - The function first checks if both `return_prediction` and `return_proba` are `False`. If so, it raises a `ValueError`.\n  - Depending on the `multi_label` flag, it creates either a sparse matrix (`csr_matrix`) or a NumPy array (`np.empty`) for predictions and probabilities.\n  - The function returns the appropriate empty arrays based on the `return_prediction` and `return_proba` flags.\n\nThis implementation ensures that the function behaves correctly for different combinations of input parameters and returns the expected empty structures.",
    "prompt": "Generate a Python function called empty_result that returns an empty classification result. The function takes in the following parameters:\n- multi_label: a boolean indicating a multi-label setting if True, otherwise a single-label setting if False\n- num_classes: an integer representing the number of classes\n- return_prediction: a boolean, defaulting to True, indicating whether to return an empty result of prediction\n- return_proba: a boolean, defaulting to True, indicating whether to return an empty result of probabilities\n\nThe function ensures that at least one of 'prediction' and 'proba' must be True. It returns the following outputs:\n- predictions: an empty ndarray of predictions if return_prediction is True, with data type np.int64\n- proba: an empty ndarray of probabilities if return_proba is True, with data type float\n\nIf neither return_prediction nor return_proba is True, the function raises a ValueError(\"Invalid usage: At least one of \\'prediction\\' or \\'proba\\' must be True\") . Depending on the values of multi_label, return_prediction, and return_proba, the function returns empty arrays using either csr_matrix or np.empty.",
    "function_name": "empty_result",
    "ground_truth": "small_text/utils/classification.py",
    "test": "tests/unit/small_text/utils/test_classification.py::ClassificationUtilsTest",
    "class": "",
    "stage": "Evaluating&Metrics",
    "task": "Classification",
    "data": "Text"
}