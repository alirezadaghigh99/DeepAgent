{
    "result": "To implement the `binomial_sampling` function for the `RBM` class, we will use TensorFlow to perform binomial sampling of hidden unit activations. The function will compare each probability in the input tensor `pr` with a random value sampled from a uniform distribution between 0 and 1. If the probability is greater than the random value, the output will be 1; otherwise, it will be 0.\n\nHere's how you can implement this function:\n\n```python\nimport tensorflow as tf\n\nclass RBM:\n    def __init__(self, possible_ratings, visible_units, hidden_units=500, keep_prob=0.7, init_stdv=0.1, learning_rate=0.004, minibatch_size=100, training_epoch=20, display_epoch=10, sampling_protocol=[50, 70, 80, 90, 100], debug=False, with_metrics=False, seed=42):\n        # Initialize the RBM parameters here if needed\n        pass\n\n    def binomial_sampling(self, pr):\n        \"\"\"\n        Perform binomial sampling of hidden unit activations using a rejection method.\n\n        Args:\n            pr (tf.Tensor): A tensor of conditional probabilities of the hidden units being active.\n\n        Returns:\n            tf.Tensor: A tensor of the same shape with values of 1 or 0.\n        \"\"\"\n        # Generate random values from a uniform distribution\n        random_values = tf.random.uniform(shape=tf.shape(pr), minval=0.0, maxval=1.0, dtype=tf.float32)\n\n        # Compare the probabilities with the random values\n        sampled_activations = tf.cast(pr > random_values, dtype=tf.float32)\n\n        return sampled_activations\n\n# Example usage:\n# rbm = RBM(possible_ratings=5, visible_units=100)\n# pr = tf.constant([[0.2, 0.8], [0.5, 0.3]], dtype=tf.float32)\n# sampled = rbm.binomial_sampling(pr)\n# print(sampled)\n```\n\n### Explanation:\n- **TensorFlow Operations**: We use TensorFlow operations to ensure that the function can be integrated into a TensorFlow computation graph if needed.\n- **Random Sampling**: `tf.random.uniform` generates random values between 0 and 1 with the same shape as the input tensor `pr`.\n- **Comparison**: We compare each element of `pr` with the corresponding random value. If the probability is greater than the random value, the result is `True` (which is cast to `1.0`), otherwise `False` (cast to `0.0`).\n- **Casting**: The result of the comparison is cast to `tf.float32` to match the expected output type.\n\nThis function can be used within the RBM class to perform sampling of hidden unit activations based on their conditional probabilities.",
    "prompt": "Generate a Python function `binomial_sampling` for the class `RBM` that performs binomial sampling of hidden unit activations using a rejection method. The function should take as input a tensor `pr`, which represents the conditional probabilities of the hidden units being active, and compare each probability with a random value sampled from a uniform distribution The input is `pr` (tf.Tensor, float32), and the output is a tensor of the same shape with values of `1` or `0`.\n```python\nclass RBM:\n    def __init__(self, possible_ratings, visible_units, hidden_units=500, keep_prob=0.7, init_stdv=0.1, learning_rate=0.004, minibatch_size=100, training_epoch=20, display_epoch=10, sampling_protocol=[50, 70, 80, 90, 100], debug=False, with_metrics=False, seed=42):\n        pass\n\n    def binomial_sampling(self, pr):\n        # Implement the function as described in the prompt\n```",
    "function_name": "binomial_sampling",
    "ground_truth": "recommenders/models/rbm/rbm.py",
    "test": "tests/unit/recommenders/models/test_rbm.py",
    "class": "RBM",
    "stage": "",
    "task": "Recommendation",
    "data": "pre-post process"
}