{
    "result": "Error",
    "prompt": "Create a Python function _resize_image_and_masks that resizes an image tensor and its corresponding masks, if provided. The function allows resizing to either a fixed size or a size determined by scaling factors, and it handles special cases for TorchScript and ONNX tracing.\n\nParameters:\nimage: A Tensor representing the image to be resized, with shape (C, H, W).\nself_min_size: An integer specifying the minimum size for the image's smaller dimension when resizing.\nself_max_size: An integer specifying the maximum size for the image's larger dimension when resizing.\ntarget: An optional dictionary containing additional data, such as masks, that should be resized alongside the image. The dictionary may contain a key \"masks\" with a tensor of shape (N, H, W).\nfixed_size: An optional tuple (height, width) specifying the fixed dimensions to which the image should be resized.\nReturns:\nA tuple containing:\nThe resized image tensor.\nThe resized target dictionary if it was provided, with resized masks if present.",
    "function_name": "_resize_image_and_masks",
    "ground_truth": "torchvision/models/detection/transform.py",
    "test": "test/test_models_detection_negative_samples.py::TestModelsDetectionNegativeSamples",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Detection",
    "data": "Image"
}