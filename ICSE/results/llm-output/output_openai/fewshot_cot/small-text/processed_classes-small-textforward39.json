{
    "result": "Error",
    "prompt": "```python\nGenerate a Python method `forward` for the `KimCNN` class that performs a forward pass through the convolutional neural network designed for text classification. The method should take as input a tensor of word indices (`x`) representing a batch of padded sequences and return the output logits for each class. The method should include embedding the input sequences, applying convolutional and max-pooling layers, concatenating the resulting feature maps, and passing the final pooled features through a dropout layer and a fully connected layer for classification.\n\nClass structure:\n\n```python\nclass KimCNN(nn.Module):\n    def __init__(self, vocabulary_size, max_seq_length, num_classes=2, out_channels=100,\n                 embed_dim=300, padding_idx=0, kernel_heights=[3, 4, 5], dropout=0.5,\n                 embedding_matrix=None, freeze_embedding_layer=False):\n        super().__init__()\n\n        self.out_channels = out_channels\n        self.in_channels = 1\n        self.num_kernels = len(kernel_heights)\n        self.pool_sizes = [(max_seq_length - k, 1) for k in kernel_heights]\n        self.max_seq_length = max_seq_length\n        self.num_classes = num_classes\n\n        # Assumes vocab size is same as embedding matrix size. Therefore should\n        # contain special tokens e.g. <pad>\n        self.embedding = nn.Embedding(\n            vocabulary_size, embed_dim, padding_idx=padding_idx\n        )\n\n        if embedding_matrix is not None:\n            # Load pre-trained weights. Should be torch FloatTensor\n            self.embedding = self.embedding.from_pretrained(embedding_matrix.float(),\n                                                            padding_idx=padding_idx)\n\n        self.embedding.weight.requires_grad = not freeze_embedding_layer\n\n        self.convs = nn.ModuleList(\n            [\n                nn.Conv2d(\n                    self.in_channels,\n                    self.out_channels,\n                    kernel_size=(k, embed_dim)\n                )\n                for k in kernel_heights\n            ]\n        )\n        self.pools = nn.ModuleList(\n            [\n                nn.MaxPool2d(kernel_size=pool_size)\n                for pool_size in self.pool_sizes\n            ]\n        )\n\n        self.dropout = nn.Dropout(dropout)\n        self.fc = nn.Linear(self.out_channels * self.num_kernels, self.num_classes).\n\n    def forward(self, x):\n        # Embedding the input sequences\n        # Apply convolutional layers followed by max-pooling\n        # Concatenate pooled features from different kernels\n        # Apply dropout and pass through the fully connected layer\n        return logits\n```",
    "function_name": "forward",
    "ground_truth": "small_text/integrations/pytorch/models/kimcnn.py",
    "test": "tests/integration/small_text/integrations/pytorch/classifiers/test_kimcnn_embeddings.py",
    "class": "KimCNN",
    "stage": "Text",
    "task": "Classification",
    "data": "Inference"
}