{
    "result": "To create the `take_static_crop` function, we need to follow these steps:\n\n1. Extract the dimensions of the input image.\n2. Calculate the pixel coordinates for cropping based on the percentage values provided in the crop parameters.\n3. Use these coordinates to slice the image array and obtain the cropped image.\n4. Return the cropped image as a numpy array.\n\nHere's how you can implement this function:\n\n```python\nimport numpy as np\n\ndef take_static_crop(image: np.ndarray, crop_params: dict) -> np.ndarray:\n    \"\"\"\n    Crops an image based on the specified crop parameters.\n\n    Parameters:\n    - image: np.ndarray, the input image to be cropped.\n    - crop_params: dict, a dictionary containing the crop parameters with keys:\n        - 'x_min': float, minimum x percentage (0 to 1) of the image width.\n        - 'y_min': float, minimum y percentage (0 to 1) of the image height.\n        - 'x_max': float, maximum x percentage (0 to 1) of the image width.\n        - 'y_max': float, maximum y percentage (0 to 1) of the image height.\n\n    Returns:\n    - np.ndarray, the cropped image.\n    \"\"\"\n    # Get the dimensions of the image\n    height, width = image.shape[:2]\n\n    # Calculate pixel coordinates for cropping\n    x_min = int(crop_params['x_min'] * width)\n    y_min = int(crop_params['y_min'] * height)\n    x_max = int(crop_params['x_max'] * width)\n    y_max = int(crop_params['y_max'] * height)\n\n    # Ensure the coordinates are within the image bounds\n    x_min = max(0, min(x_min, width))\n    y_min = max(0, min(y_min, height))\n    x_max = max(0, min(x_max, width))\n    y_max = max(0, min(y_max, height))\n\n    # Crop the image using the calculated coordinates\n    cropped_image = image[y_min:y_max, x_min:x_max]\n\n    return cropped_image\n```\n\n### Usage Example\n\n```python\nimport numpy as np\n\n# Example image as a numpy array (e.g., 100x100 pixels with 3 color channels)\nimage = np.random.rand(100, 100, 3)\n\n# Crop parameters as percentages\ncrop_params = {\n    'x_min': 0.1,  # 10% from the left\n    'y_min': 0.1,  # 10% from the top\n    'x_max': 0.9,  # 90% from the left\n    'y_max': 0.9   # 90% from the top\n}\n\n# Get the cropped image\ncropped_image = take_static_crop(image, crop_params)\n\nprint(\"Original image shape:\", image.shape)\nprint(\"Cropped image shape:\", cropped_image.shape)\n```\n\nThis function will take an image and crop it according to the specified percentage-based parameters, returning the cropped portion as a new numpy array.",
    "prompt": "Create a Python function called take_static_crop that takes in an image as a numpy array and crop parameters as a dictionary containing x_min, y_min, x_max, and y_max values as percentages of the image dimensions. The function should return a cropped version of the input image based on the specified crop parameters. The output should be a numpy array representing the cropped image.",
    "function_name": "take_static_crop",
    "ground_truth": "inference/core/utils/preprocess.py",
    "test": "tests/inference/unit_tests/core/utils/test_preprocess.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Segmentation",
    "data": "Image"
}