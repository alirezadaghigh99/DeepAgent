{
    "result": "To create a `train_test_split` function in Python that splits arrays or matrices into random train and test subsets, we need to consider several parameters: `test_size`, `train_size`, `random_state`, `shuffle`, and `stratify`. The function should handle input validation, shuffling, and stratification. Here's a possible implementation:\n\n```python\nimport numpy as np\n\ndef train_test_split(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None):\n    # Input validation\n    if not arrays:\n        raise ValueError(\"At least one array is required as input.\")\n    \n    n_samples = len(arrays[0])\n    for array in arrays:\n        if len(array) != n_samples:\n            raise ValueError(\"All input arrays must have the same number of samples.\")\n    \n    if test_size is None and train_size is None:\n        test_size = 0.25\n    elif test_size is not None and train_size is not None:\n        raise ValueError(\"Specify either test_size or train_size, not both.\")\n    \n    if test_size is not None:\n        if isinstance(test_size, float):\n            test_size = int(n_samples * test_size)\n        elif isinstance(test_size, int):\n            if test_size >= n_samples or test_size <= 0:\n                raise ValueError(\"test_size must be between 0 and the number of samples.\")\n    else:\n        if isinstance(train_size, float):\n            train_size = int(n_samples * train_size)\n        elif isinstance(train_size, int):\n            if train_size >= n_samples or train_size <= 0:\n                raise ValueError(\"train_size must be between 0 and the number of samples.\")\n        test_size = n_samples - train_size\n    \n    if random_state is not None:\n        np.random.seed(random_state)\n    \n    indices = np.arange(n_samples)\n    \n    if shuffle:\n        if stratify is not None:\n            unique_classes, y_indices = np.unique(stratify, return_inverse=True)\n            class_counts = np.bincount(y_indices)\n            test_counts = np.round(class_counts * (test_size / n_samples)).astype(int)\n            \n            test_indices = []\n            train_indices = []\n            \n            for class_index, class_count in enumerate(class_counts):\n                class_indices = np.where(y_indices == class_index)[0]\n                np.random.shuffle(class_indices)\n                test_class_indices = class_indices[:test_counts[class_index]]\n                train_class_indices = class_indices[test_counts[class_index]:]\n                \n                test_indices.extend(test_class_indices)\n                train_indices.extend(train_class_indices)\n            \n            test_indices = np.array(test_indices)\n            train_indices = np.array(train_indices)\n        else:\n            np.random.shuffle(indices)\n            test_indices = indices[:test_size]\n            train_indices = indices[test_size:]\n    else:\n        test_indices = indices[:test_size]\n        train_indices = indices[test_size:]\n    \n    result = []\n    for array in arrays:\n        result.append(array[train_indices])\n        result.append(array[test_indices])\n    \n    return result\n\n# Example usage:\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n```\n\n### Key Points:\n- **Input Validation**: The function checks if at least one array is provided and if all arrays have the same number of samples.\n- **Size Parameters**: Either `test_size` or `train_size` can be specified, but not both. If neither is specified, a default `test_size` of 0.25 is used.\n- **Random State**: If provided, it ensures reproducibility by setting the random seed.\n- **Shuffling and Stratification**: The function supports shuffling and stratification. If `stratify` is provided, it ensures that the train and test sets have the same proportion of classes as the input data.\n\nThis function should cover most common use cases for splitting datasets into training and testing subsets.",
    "prompt": "Generate a Python function called train_test_split that splits arrays or matrices into random train and test subsets. The function takes in multiple arrays, test_size, train_size, random_state, shuffle, and stratify as parameters. It returns a list containing the train-test split of inputs. The function also includes input validation, shuffling, and stratification options.",
    "function_name": "train_test_split",
    "ground_truth": "sklearn/model_selection/_split.py",
    "test": "sklearn/model_selection/tests/test_split.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": ""
}