{
    "result": "To compute the chi-squared statistics between each non-negative feature and the class labels, we can use the `LabelBinarizer` from `sklearn` to handle the class labels and convert them into a binary format. This allows us to compute the observed and expected frequencies for each feature-class combination. We will then use these frequencies to calculate the chi-squared statistic and the corresponding p-value for each feature.\n\nHere's a Python function that implements this:\n\n```python\nimport numpy as np\nfrom scipy.stats import chi2 as chi2_dist\nfrom sklearn.preprocessing import LabelBinarizer\n\ndef chi2(X, y):\n    # Ensure X is a numpy array\n    X = np.asarray(X)\n    \n    # Binarize the class labels\n    lb = LabelBinarizer()\n    Y = lb.fit_transform(y)\n    \n    # If Y is a binary class, it will have shape (n_samples, 1), we need (n_samples, 2)\n    if Y.shape[1] == 1:\n        Y = np.hstack([1 - Y, Y])\n    \n    # Number of samples and features\n    n_samples, n_features = X.shape\n    n_classes = Y.shape[1]\n    \n    # Initialize arrays to store chi2 statistics and p-values\n    chi2_stats = np.zeros(n_features)\n    p_values = np.zeros(n_features)\n    \n    # Calculate observed and expected frequencies\n    observed = np.dot(Y.T, X)  # shape (n_classes, n_features)\n    feature_sums = X.sum(axis=0)  # shape (n_features,)\n    class_sums = Y.sum(axis=0)  # shape (n_classes,)\n    expected = np.outer(class_sums, feature_sums) / n_samples  # shape (n_classes, n_features)\n    \n    # Calculate chi2 statistics and p-values for each feature\n    with np.errstate(divide='ignore', invalid='ignore'):\n        chi2_stats = ((observed - expected) ** 2) / expected\n        chi2_stats = np.nan_to_num(chi2_stats, nan=0.0)  # Replace NaNs with 0\n        chi2_stats = chi2_stats.sum(axis=0)  # Sum over classes for each feature\n    \n    # Calculate p-values\n    p_values = chi2_dist.sf(chi2_stats, df=n_classes - 1)\n    \n    return chi2_stats, p_values\n\n# Example usage:\n# X = np.array([[2, 3, 4], [1, 5, 6], [2, 3, 4], [1, 5, 6]])\n# y = np.array([0, 1, 0, 1])\n# chi2_stats, p_values = chi2(X, y)\n# print(\"Chi2 Statistics:\", chi2_stats)\n# print(\"P-values:\", p_values)\n```\n\n### Explanation:\n- **LabelBinarizer**: Converts the class labels into a binary matrix where each column represents a class.\n- **Observed Frequencies**: Calculated as the dot product of the transposed binary class matrix and the feature matrix.\n- **Expected Frequencies**: Calculated using the outer product of the class sums and feature sums, divided by the total number of samples.\n- **Chi-squared Statistic**: Computed for each feature by summing the squared differences between observed and expected frequencies, normalized by the expected frequencies.\n- **P-values**: Computed using the survival function (`sf`) of the chi-squared distribution with degrees of freedom equal to the number of classes minus one.\n\nThis function efficiently computes the chi-squared statistics and p-values for each feature, adhering to the specified complexity of \\(O(n_{\\text{classes}} \\times n_{\\text{features}})\\).",
    "prompt": "Generate a Python function called chi2 that computes chi-squared statistics between each non-negative feature and class. The function takes two parameters: X, an array-like or sparse matrix of shape (n_samples, n_features) representing sample vectors, and y, an array-like of shape (n_samples,) representing target vector (class labels). The function returns two arrays: chi2, an ndarray of shape (n_features,) containing Chi2 statistics for each feature, and p_values, an ndarray of shape (n_features,) containing p-values for each feature. The complexity of the algorithm is O(n_classes * n_features). The function uses the LabelBinarizer to handle sparse representation for Y and performs calculations to determine observed and expected values before calling the _chisquare function.",
    "function_name": "chi2",
    "ground_truth": "sklearn/feature_selection/_univariate_selection.py",
    "test": "sklearn/feature_selection/tests/test_chi2.py",
    "class": "",
    "stage": "Evaluating&Metrics",
    "task": "Classification",
    "data": "Table"
}