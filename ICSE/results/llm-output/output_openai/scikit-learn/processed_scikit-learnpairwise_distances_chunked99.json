{
    "result": "To create the `pairwise_distances_chunked` function, we will leverage the `pairwise_distances` function from `sklearn.metrics` to compute the distances between two sets of samples. We'll handle the computation in chunks to manage memory usage effectively. If a `reduce_func` is provided, it will be applied to each chunk of the distance matrix. The function will yield results for each chunk, either as raw distances or processed by the `reduce_func`.\n\nHere's the implementation of the `pairwise_distances_chunked` function along with examples of its usage:\n\n```python\nfrom sklearn.metrics import pairwise_distances\nimport numpy as np\nimport math\n\ndef pairwise_distances_chunked(X, Y=None, reduce_func=None, metric='euclidean', n_jobs=1, working_memory=1024, **kwds):\n    \"\"\"\n    Generate a distance matrix chunk by chunk with optional reduction.\n\n    Parameters:\n    - X: array-like of shape (n_samples_X, n_features)\n    - Y: array-like of shape (n_samples_Y, n_features), optional\n    - reduce_func: callable, optional\n        Function to apply to each chunk of the distance matrix.\n    - metric: str or callable, default='euclidean'\n    - n_jobs: int, default=1\n    - working_memory: int, default=1024\n        The maximum amount of memory to use for computation in MB.\n    - **kwds: additional keyword arguments for the distance computation.\n\n    Yields:\n    - A contiguous slice of the distance matrix, optionally processed by reduce_func.\n    \"\"\"\n    if Y is None:\n        Y = X\n\n    n_samples_X = X.shape[0]\n    n_samples_Y = Y.shape[0]\n\n    # Estimate the number of rows we can fit in memory\n    bytes_per_distance = np.dtype('float64').itemsize\n    max_bytes = working_memory * (1024 ** 2)  # Convert MB to bytes\n    max_distances = max_bytes // bytes_per_distance\n    chunk_size = max(1, max_distances // n_samples_Y)\n\n    for start in range(0, n_samples_X, chunk_size):\n        end = min(start + chunk_size, n_samples_X)\n        distances_chunk = pairwise_distances(X[start:end], Y, metric=metric, n_jobs=n_jobs, **kwds)\n        \n        if reduce_func is not None:\n            yield reduce_func(distances_chunk)\n        else:\n            yield distances_chunk\n\n# Example usage without reduce_func\nX = np.random.random((100, 5))\nY = np.random.random((100, 5))\n\n# Compute pairwise distances in chunks\nfor chunk in pairwise_distances_chunked(X, Y, working_memory=1):\n    print(\"Distance chunk shape:\", chunk.shape)\n\n# Example usage with reduce_func to find neighbors within a radius\ndef find_neighbors_within_radius(distances_chunk, radius=0.5):\n    neighbors = [np.where(row < radius)[0] for row in distances_chunk]\n    return neighbors\n\n# Compute neighbors within a radius in chunks\nradius = 0.5\nfor neighbors_chunk in pairwise_distances_chunked(X, Y, reduce_func=lambda chunk: find_neighbors_within_radius(chunk, radius), working_memory=1):\n    print(\"Neighbors within radius chunk:\", neighbors_chunk)\n\n# Example usage with reduce_func to compute average distance\ndef average_distance(distances_chunk):\n    return np.mean(distances_chunk)\n\n# Compute average distance in chunks\nfor avg_distance in pairwise_distances_chunked(X, Y, reduce_func=average_distance, working_memory=1):\n    print(\"Average distance for chunk:\", avg_distance)\n```\n\n### Explanation:\n\n- **Chunking Logic**: The function calculates how many rows of the distance matrix can fit into the specified working memory. It then processes the data in chunks of this size.\n- **Yielding Results**: For each chunk, the function either yields the raw distance matrix or applies a `reduce_func` to process the chunk before yielding.\n- **Examples**:\n  - Without `reduce_func`: The function yields raw distance matrices.\n  - With `reduce_func`: The function can be used to find neighbors within a certain radius or compute the average distance for each chunk.\n\nThis approach allows for efficient computation of large distance matrices without exceeding memory limits.",
    "prompt": "Generate a Python function called pairwise_distances_chunked that generates a distance matrix chunk by chunk with optional reduction. The function takes in parameters X, Y, reduce_func, metric, n_jobs, working_memory, and additional keyword parameters. It calculates pairwise distances in working_memory-sized chunks and applies reduce_func on each chunk if provided. The function yields a contiguous slice of the distance matrix, optionally processed by reduce_func. The function also includes examples of usage without reduce_func and with reduce_func for retrieving neighbors and average distance within a radius.",
    "function_name": "pairwise_distances_chunked",
    "ground_truth": "sklearn/metrics/pairwise.py",
    "test": "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Table"
}