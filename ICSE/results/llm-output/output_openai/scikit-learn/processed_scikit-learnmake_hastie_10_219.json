{
    "result": "To generate data for binary classification as described in Hastie et al. 2009, Example 10.2, we can create a function `make_hastie_10_2`. This function will generate samples with independent standard Gaussian features and classify them based on the sum of their squares. Here's how you can implement this function using NumPy:\n\n```python\nimport numpy as np\n\ndef make_hastie_10_2(n_samples, random_state=None):\n    \"\"\"\n    Generate a binary classification dataset as described in Hastie et al. 2009, Example 10.2.\n    \n    Parameters:\n    - n_samples: int, number of samples to generate.\n    - random_state: int or None, optional, random seed for reproducibility.\n    \n    Returns:\n    - X: ndarray of shape (n_samples, 10), input samples with standard Gaussian features.\n    - y: ndarray of shape (n_samples,), output values where y[i] is 1 if the sum of X[i] squared is greater than 9.34, otherwise -1.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n    \n    # Generate n_samples of 10-dimensional standard Gaussian features\n    X = np.random.randn(n_samples, 10)\n    \n    # Calculate the sum of squares for each sample\n    sum_of_squares = np.sum(X**2, axis=1)\n    \n    # Determine the output values based on the condition\n    y = np.where(sum_of_squares > 9.34, 1, -1)\n    \n    return X, y\n\n# Example usage\nn_samples = 5\nrandom_state = 42\nX, y = make_hastie_10_2(n_samples, random_state)\n\nprint(\"X shape:\", X.shape)\nprint(\"y shape:\", y.shape)\nprint(\"First few X values:\\n\", X[:5])\nprint(\"First few y values:\", y[:5])\n```\n\n### Explanation:\n- **Input Parameters:**\n  - `n_samples`: The number of samples to generate.\n  - `random_state`: An optional parameter to set the random seed for reproducibility.\n\n- **Output:**\n  - `X`: A NumPy array of shape `(n_samples, 10)` containing the generated samples with standard Gaussian features.\n  - `y`: A NumPy array of shape `(n_samples,)` containing the binary classification labels. Each label is determined by whether the sum of squares of the corresponding sample exceeds 9.34.\n\n- **Functionality:**\n  - The function first sets the random seed if provided.\n  - It generates `n_samples` of 10-dimensional data points from a standard normal distribution.\n  - It computes the sum of squares for each sample and assigns a label of 1 if the sum is greater than 9.34, otherwise -1.\n\nThis function is a direct implementation of the data generation process described in the referenced literature, providing a simple yet effective way to create a synthetic dataset for binary classification tasks.",
    "prompt": "Generate a Python function called make_hastie_10_2 that generates data for binary classification as used in Hastie et al. 2009, Example 10.2. The function takes in the number of samples (n_samples) and a random state for reproducibility. It returns two arrays: X, which contains input samples of shape (n_samples, 10) with standard independent Gaussian features, and y, which contains output values of shape (n_samples,) defined by a specific condition. The target y[i] is set to 1 if the sum of X[i] squared is greater than 9.34, otherwise -1. The function utilizes numpy for array operations and includes references to related dataset approaches and literature. An example usage is provided to demonstrate the function's output shapes and initial values.",
    "function_name": "make_hastie_10_2",
    "ground_truth": "sklearn/datasets/_samples_generator.py",
    "test": "sklearn/datasets/tests/test_samples_generator.py",
    "class": "",
    "stage": "Model Construction",
    "task": "Classification",
    "data": "Table"
}