{
    "result": "To create the `get_ignored_labels_mask` function, we need to handle two cases: when `y` is a `csr_matrix` and when `y` is a regular array. We'll use the `scipy.sparse` module to check if `y` is a `csr_matrix` and then process it accordingly. Here's a step-by-step implementation:\n\n```python\nimport numpy as np\nfrom scipy.sparse import csr_matrix, issparse\n\ndef get_ignored_labels_mask(y, ignored_label_value):\n    \"\"\"\n    Create a mask indicating which elements or rows contain the ignored label value.\n\n    Args:\n        y (csr_matrix or array-like): Input data, either a sparse matrix or a dense array.\n        ignored_label_value: The value to be ignored.\n\n    Returns:\n        np.ndarray: A boolean array where True indicates the presence of the ignored label.\n    \"\"\"\n    # 1. Check if y is a sparse matrix\n    if issparse(y):\n        # 2. Initialize a boolean array of the same length as the number of rows in y\n        mask = np.zeros(y.shape[0], dtype=bool)\n        \n        # 3. Iterate over each row in the sparse matrix\n        for i in range(y.shape[0]):\n            # 4. Check if the ignored_label_value is present in the row\n            if ignored_label_value in y[i].data:\n                mask[i] = True\n    else:\n        # 5. If y is not a sparse matrix, create a boolean mask directly\n        mask = (y == ignored_label_value)\n\n    # 6. Return the resulting mask\n    return mask\n```\n\n### Explanation:\n\n1. **Check if `y` is a sparse matrix**: We use `issparse(y)` to determine if `y` is a `csr_matrix` or any other sparse format.\n\n2. **Initialize a boolean array**: If `y` is a sparse matrix, we create a boolean array `mask` with the same number of rows as `y`, initialized to `False`.\n\n3. **Iterate over each row**: For each row in the sparse matrix, we check if `ignored_label_value` is present in the non-zero elements of that row using `y[i].data`.\n\n4. **Set the mask to `True`**: If the ignored label is found in a row, we set the corresponding element in `mask` to `True`.\n\n5. **Handle non-sparse arrays**: If `y` is not a sparse matrix, we directly create a boolean mask by comparing `y` to `ignored_label_value`.\n\n6. **Return the mask**: Finally, we return the boolean mask indicating the presence of the ignored label.",
    "prompt": "Create a Python function called get_ignored_labels_mask that takes in two parameters: y (which can be either a csr_matrix or an array) and ignored_label_value. If y is a csr_matrix, the function will return an array where each element is True if any value in the corresponding row of y is equal to ignored_label_value, and False otherwise. If y is not a csr_matrix, the function will return an array where each element is True if the value in y is equal to ignored_label_value, and False otherwise.",
    "function_name": "get_ignored_labels_mask",
    "ground_truth": "small_text/utils/labels.py",
    "test": "tests/unit/small_text/utils/test_labels.py::LabelUtilsTest",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Classification",
    "data": "Text"
}