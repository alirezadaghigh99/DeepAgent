{
    "result": "To create the `generate_global_features` function as described, we can follow a structured approach similar to the examples provided. Here's a step-by-step implementation:\n\n```python\nimport numpy as np\nfrom rdkit import Chem\nfrom rdkit.Chem import AllChem\nfrom typing import List, Callable, Any\n\n# Assuming GraphConvConstants is defined elsewhere with FEATURE_GENERATORS\n# For demonstration, let's define a mock version\nclass GraphConvConstants:\n    FEATURE_GENERATORS = {\n        'generator1': lambda mol: [1.0, 2.0],  # Example feature generator\n        'generator2': lambda mol: [3.0, 4.0],  # Another example\n    }\n\ndef generate_global_features(mol: Chem.Mol, features_generators: List[str], replace_token: float = 0.0) -> np.ndarray:\n    \"\"\"\n    Generate global features for a given RDKit molecule using specified feature generators.\n\n    Args:\n        mol (Chem.Mol): RDKit molecule object.\n        features_generators (List[str]): List of feature generator names.\n        replace_token (float): Value to replace NaNs in the feature array.\n\n    Returns:\n        np.ndarray: Array of global features.\n    \"\"\"\n    # 1. Initialize an empty list to store global features\n    global_features = []\n\n    # 2. Check if the molecule has heavy atoms; if not, use a dummy molecule (methane)\n    if mol.GetNumHeavyAtoms() == 0:\n        mol = Chem.MolFromSmiles('C')  # Methane as a dummy molecule\n\n    # 3. Loop through each feature generator in the list\n    for generator_name in features_generators:\n        # 4. Check if the generator is available in FEATURE_GENERATORS\n        if generator_name in GraphConvConstants.FEATURE_GENERATORS:\n            # 5. Featurize the molecule using the generator\n            generator = GraphConvConstants.FEATURE_GENERATORS[generator_name]\n            features = generator(mol)\n            # 6. Append the features to the global_features list\n            global_features.extend(features)\n        else:\n            raise ValueError(f\"Feature generator '{generator_name}' is not available.\")\n\n    # 7. Convert the global_features list to a numpy array\n    global_features_array = np.array(global_features, dtype=float)\n\n    # 8. Replace any NaN values with the specified replace_token\n    global_features_array = np.nan_to_num(global_features_array, nan=replace_token)\n\n    # 9. Return the global_features_array\n    return global_features_array\n\n# Example usage:\n# mol = Chem.MolFromSmiles('CCO')  # Ethanol molecule\n# features = generate_global_features(mol, ['generator1', 'generator2'])\n# print(features)\n```\n\n### Explanation:\n\n1. **Initialization**: We start by initializing an empty list `global_features` to store the features.\n\n2. **Dummy Molecule**: If the input molecule has no heavy atoms, we use methane (`'C'`) as a dummy molecule to ensure feature generation.\n\n3. **Feature Generation Loop**: We iterate over the list of feature generator names provided.\n\n4. **Generator Check**: For each generator, we check if it exists in `GraphConvConstants.FEATURE_GENERATORS`.\n\n5. **Feature Extraction**: If the generator is available, we use it to extract features from the molecule and append them to `global_features`.\n\n6. **Conversion to Numpy Array**: After collecting all features, we convert the list to a numpy array.\n\n7. **NaN Replacement**: We replace any NaN values in the array with the specified `replace_token`.\n\n8. **Return**: Finally, we return the numpy array of global features.",
    "prompt": "Generate a Python function called generate_global_features that takes in a RDKit molecule (mol) and a list of feature generators (features_generators) as input. The function returns an array of global features as a numpy array.\n\nThe function loops through the list of feature generators and checks if they are available in the GraphConvConstants.FEATURE_GENERATORS. If a generator is available, it featurizes the molecule using the generator and appends the features to the global_features list. If the molecule has no heavy atoms, it uses a dummy molecule (methane) to determine the length of the features.\n\nThe function then converts the global_features list to a numpy array and replaces any NaN values with a specified replace_token value.\n\nThe output of the function is the global_features_array, which is a numpy array containing the global features of the input molecule.",
    "function_name": "generate_global_features",
    "ground_truth": "deepchem/feat/molecule_featurizers/dmpnn_featurizer.py",
    "test": "deepchem/feat/tests/test_global_feature_generator_dmpnn.py::TestGlobalFeatureGenerator",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": ""
}