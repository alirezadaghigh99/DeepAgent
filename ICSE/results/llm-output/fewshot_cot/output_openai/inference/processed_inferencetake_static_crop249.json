{
    "result": "To create a function called `take_static_crop` that crops an image based on percentage-based crop parameters, you can follow these steps:\n\n1. **Import Necessary Libraries**: Ensure you have `numpy` imported since the image is represented as a numpy array.\n\n2. **Define the Function**: Create the function `take_static_crop` with parameters for the image and crop parameters.\n\n3. **Extract Image Dimensions**: Determine the height and width of the input image.\n\n4. **Calculate Pixel Coordinates**: Convert the percentage-based crop parameters to pixel coordinates.\n\n5. **Perform the Cropping**: Use numpy slicing to crop the image based on the calculated pixel coordinates.\n\n6. **Return the Cropped Image**: Return the cropped portion of the image as a numpy array.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef take_static_crop(image: np.ndarray, crop_params: dict) -> np.ndarray:\n    \"\"\"\n    Crop an image based on percentage-based crop parameters.\n\n    Args:\n        image (np.ndarray): The input image as a numpy array.\n        crop_params (dict): A dictionary containing crop parameters with keys\n                            'x_min', 'y_min', 'x_max', 'y_max' as percentages.\n\n    Returns:\n        np.ndarray: The cropped image as a numpy array.\n    \"\"\"\n    # 1. Extract image dimensions\n    height, width = image.shape[:2]\n\n    # 2. Calculate pixel coordinates from percentage-based crop parameters\n    x_min = int(crop_params['x_min'] * width)\n    y_min = int(crop_params['y_min'] * height)\n    x_max = int(crop_params['x_max'] * width)\n    y_max = int(crop_params['y_max'] * height)\n\n    # 3. Perform the cropping using numpy slicing\n    cropped_image = image[y_min:y_max, x_min:x_max]\n\n    # 4. Return the cropped image\n    return cropped_image\n```\n\n### Usage Example:\n\n```python\n# Example usage\nimage = np.random.rand(100, 200, 3)  # Example image with random values\ncrop_params = {\n    'x_min': 0.1,  # 10% from the left\n    'y_min': 0.2,  # 20% from the top\n    'x_max': 0.9,  # 90% from the left\n    'y_max': 0.8   # 80% from the top\n}\n\ncropped_image = take_static_crop(image, crop_params)\n```\n\nThis function will take an image and crop it according to the specified percentage-based parameters, returning the cropped image as a numpy array.",
    "prompt": "Create a Python function called take_static_crop that takes in an image as a numpy array and crop parameters as a dictionary containing x_min, y_min, x_max, and y_max values as percentages of the image dimensions. The function should return a cropped version of the input image based on the specified crop parameters. The output should be a numpy array representing the cropped image.",
    "function_name": "take_static_crop",
    "ground_truth": "inference/core/utils/preprocess.py",
    "test": "tests/inference/unit_tests/core/utils/test_preprocess.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Segmentation",
    "data": "Image"
}