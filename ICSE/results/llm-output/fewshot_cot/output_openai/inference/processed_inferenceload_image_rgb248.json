{
    "result": "To create the `load_image_rgb` function as described, we can follow a step-by-step approach similar to the examples provided. Here's how you can implement it:\n\n```python\nimport numpy as np\n\ndef load_image(value):\n    \"\"\"\n    Placeholder function to simulate loading an image.\n    This function should be replaced with actual image loading logic.\n    \"\"\"\n    # For demonstration purposes, let's assume it returns a NumPy array\n    # and a boolean indicating if the image is in BGR format.\n    # In practice, this function would load an image from a file or other source.\n    # Here, we simulate a BGR image with random data.\n    image = np.random.randint(0, 256, (100, 100, 3), dtype=np.uint8)\n    is_bgr = True  # Simulate that the image is in BGR format\n    return image, is_bgr\n\ndef load_image_rgb(value, disable_preproc_auto_orient=False):\n    \"\"\"\n    Load an image and convert it to RGB format if necessary.\n\n    Args:\n        value: The input value used to load the image.\n        disable_preproc_auto_orient (bool): If True, disables automatic orientation correction.\n\n    Returns:\n        np.ndarray: The loaded image in RGB format.\n    \"\"\"\n    # 1. Load the image using the load_image function\n    image, is_bgr = load_image(value)\n\n    # 2. Check if the image is in BGR format\n    if is_bgr:\n        # 3. Convert the image from BGR to RGB\n        image = image[..., ::-1]\n\n    # 4. Return the image in RGB format\n    return image\n\n# Example usage\nrgb_image = load_image_rgb(\"path/to/image\")\n```\n\n### Explanation:\n\n1. **Load the Image**: We use a placeholder function `load_image` to simulate loading an image. This function returns a NumPy array representing the image and a boolean indicating if the image is in BGR format. In a real implementation, this function would load an image from a file or other source.\n\n2. **Check BGR Format**: After loading the image, we check if it is in BGR format using the `is_bgr` flag.\n\n3. **Convert to RGB**: If the image is in BGR format, we convert it to RGB by reversing the order of the last dimension using `image[..., ::-1]`.\n\n4. **Return the Image**: Finally, we return the image in RGB format.\n\nThis function assumes that the `load_image` function is responsible for loading the image and determining its format. You would need to replace the placeholder `load_image` function with actual image loading logic, such as using libraries like OpenCV, PIL, or imageio, depending on your specific requirements.",
    "prompt": "Create a Python function called load_image_rgb that takes in a value of any type and a boolean disable_preproc_auto_orient as input. The function returns a NumPy array representing the loaded image in RGB format. The function internally calls another function load_image to load the image and determine if it is in BGR format. If the image is in BGR format, it converts it to RGB. The output of the function is the loaded image in RGB format.",
    "function_name": "load_image_rgb",
    "ground_truth": "inference/core/utils/image_utils.py",
    "test": "tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Classification",
    "data": "image"
}