{
    "result": "To create a function `f_regression` that performs univariate linear regression tests and returns F-statistics and p-values, we can follow a structured approach similar to the examples provided. Here's a step-by-step implementation:\n\n```python\nimport numpy as np\nfrom scipy import stats\nfrom sklearn.utils import check_array\nfrom sklearn.feature_selection import f_classif\n\ndef r_regression(X, y, center=True):\n    \"\"\"\n    Calculate the Pearson correlation coefficient between each feature in X and the target y.\n    \n    Args:\n        X (array-like): Feature matrix of shape (n_samples, n_features).\n        y (array-like): Target vector of shape (n_samples,).\n        center (bool): Whether to center the data before computing correlation.\n    \n    Returns:\n        correlations (ndarray): Pearson correlation coefficients for each feature.\n    \"\"\"\n    # 1. Ensure X and y are numpy arrays and have compatible shapes\n    X = check_array(X, accept_sparse=['csr', 'csc', 'coo'])\n    y = np.asarray(y)\n    \n    # 2. Center the data if requested\n    if center:\n        X = X - np.mean(X, axis=0)\n        y = y - np.mean(y)\n    \n    # 3. Compute the Pearson correlation coefficient for each feature\n    corr = np.dot(X.T, y) / (np.linalg.norm(X, axis=0) * np.linalg.norm(y))\n    \n    return corr\n\ndef f_regression(X, y, center=True, force_finite=True):\n    \"\"\"\n    Perform univariate linear regression tests and return F-statistic and p-values.\n    \n    Args:\n        X (array-like, sparse matrix): Data matrix of shape (n_samples, n_features).\n        y (array-like): Target vector of shape (n_samples,).\n        center (bool, default=True): Whether to center the data before computing correlation.\n        force_finite (bool, default=True): Whether to force F-statistics to be finite.\n    \n    Returns:\n        f_statistic (ndarray): F-statistic for each feature.\n        p_values (ndarray): p-values for each feature.\n    \"\"\"\n    # 1. Calculate the correlation between each feature and the target\n    corr = r_regression(X, y, center=center)\n    \n    # 2. Convert correlation to F-statistic\n    n_samples = X.shape[0]\n    degrees_of_freedom = n_samples - 2\n    f_statistic = (corr ** 2) * (degrees_of_freedom / (1 - corr ** 2))\n    \n    # 3. Convert F-statistic to p-values\n    p_values = stats.f.sf(f_statistic, 1, degrees_of_freedom)\n    \n    # 4. Handle non-finite F-statistics if requested\n    if force_finite:\n        f_statistic = np.nan_to_num(f_statistic, nan=np.inf, posinf=np.inf, neginf=-np.inf)\n        p_values = np.nan_to_num(p_values, nan=1.0, posinf=1.0, neginf=1.0)\n    \n    return f_statistic, p_values\n```\n\n### Explanation:\n\n1. **r_regression Function**: This helper function calculates the Pearson correlation coefficient between each feature in `X` and the target `y`. It optionally centers the data before computation.\n\n2. **f_regression Function**:\n   - **Input Validation**: Ensures `X` and `y` are in the correct format and shape.\n   - **Correlation Calculation**: Uses `r_regression` to compute the correlation coefficients.\n   - **F-statistic Calculation**: Converts the correlation coefficients to F-statistics using the formula for the F-distribution.\n   - **P-value Calculation**: Converts F-statistics to p-values using the survival function of the F-distribution.\n   - **Handling Non-finite Values**: If `force_finite` is `True`, non-finite F-statistics and p-values are replaced with specific values (e.g., `np.inf` for F-statistics and `1.0` for p-values).\n\nThis function provides a straightforward way to perform univariate linear regression tests, ranking features based on their correlation with the target.",
    "prompt": "Generate a Python function called f_regression that performs univariate linear regression tests and returns F-statistic and p-values. The function takes in the data matrix X (array-like, sparse matrix of shape (n_samples, n_features)), the target vector y (array-like of shape (n_samples,)), and optional parameters center (bool, default=True) and force_finite (bool, default=True). \n\nThe function calculates the cross-correlation between each regressor and the target using r_regression, converts it to an F score, and then to a p-value. It ranks features based on their correlation with the target. The function returns f_statistic (ndarray of shape (n_features,)) and p_values (ndarray of shape (n_features,)).\n\nAdditionally, the function handles cases where the F-statistic is not finite by setting it to specific values.",
    "function_name": "f_regression",
    "ground_truth": "sklearn/feature_selection/_univariate_selection.py",
    "test": "sklearn/feature_selection/tests/test_feature_select.py::test_f_regression_corner_case",
    "class": "",
    "stage": "Evaluating&Metrics",
    "task": "Regression",
    "data": "Table"
}