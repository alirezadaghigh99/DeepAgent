{
    "result": "To create a `train_test_split` function that splits arrays or matrices into random train and test subsets, we can follow a step-by-step approach similar to the examples you provided. Here's how you can implement this function:\n\n```python\nimport numpy as np\nfrom sklearn.utils import check_random_state\nfrom sklearn.utils.validation import _num_samples\nfrom sklearn.utils import indexable\nfrom sklearn.utils import safe_indexing\n\ndef train_test_split(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None):\n    \"\"\"\n    Split arrays or matrices into random train and test subsets.\n\n    Parameters:\n    - *arrays: sequence of indexables with the same length / shape[0]\n    - test_size: float, int, or None, optional\n    - train_size: float, int, or None, optional\n    - random_state: int, RandomState instance or None, optional\n    - shuffle: boolean, optional (default=True)\n    - stratify: array-like or None (default=None)\n\n    Returns:\n    - splitting: list, length=2 * len(arrays), with train-test split of inputs.\n    \"\"\"\n    # 1. Validate input arrays and ensure they are indexable\n    arrays = indexable(*arrays)\n    n_samples = _num_samples(arrays[0])\n\n    # 2. Validate test_size and train_size\n    if test_size is None and train_size is None:\n        test_size = 0.25\n    elif test_size is None:\n        test_size = 1.0 - train_size\n    elif train_size is None:\n        train_size = 1.0 - test_size\n\n    if isinstance(test_size, float):\n        n_test = int(np.ceil(test_size * n_samples))\n    elif isinstance(test_size, int):\n        n_test = test_size\n    else:\n        raise ValueError(\"test_size should be a float or int\")\n\n    n_train = n_samples - n_test\n\n    # 3. Check if stratification is required\n    if stratify is not None:\n        stratify = np.asarray(stratify)\n        unique_classes, y_indices = np.unique(stratify, return_inverse=True)\n        n_classes = unique_classes.shape[0]\n        class_counts = np.bincount(y_indices)\n        class_indices = [np.where(y_indices == i)[0] for i in range(n_classes)]\n    else:\n        class_indices = [np.arange(n_samples)]\n\n    # 4. Shuffle and split the data\n    rng = check_random_state(random_state)\n    train_indices = []\n    test_indices = []\n\n    for indices in class_indices:\n        if shuffle:\n            rng.shuffle(indices)\n        train_indices.extend(indices[:n_train])\n        test_indices.extend(indices[n_train:n_train + n_test])\n\n    # 5. Return the split data\n    train_test_data = []\n    for array in arrays:\n        train_test_data.append(safe_indexing(array, train_indices))\n        train_test_data.append(safe_indexing(array, test_indices))\n\n    return train_test_data\n```\n\n### Explanation:\n\n1. **Input Validation**: The function first ensures that all input arrays are indexable and have the same number of samples.\n\n2. **Size Calculation**: It calculates the number of samples for the train and test sets based on `test_size` and `train_size`.\n\n3. **Stratification**: If `stratify` is provided, the function ensures that the train and test sets have the same proportion of classes as the input data.\n\n4. **Shuffling and Splitting**: The function shuffles the indices if `shuffle` is `True` and then splits the data into train and test sets.\n\n5. **Return**: Finally, it returns the train-test split data for each input array.\n\nThis function is designed to be flexible and handle various input configurations, including stratification and shuffling, similar to the `train_test_split` function in scikit-learn.",
    "prompt": "Generate a Python function called train_test_split that splits arrays or matrices into random train and test subsets. The function takes in multiple arrays, test_size, train_size, random_state, shuffle, and stratify as parameters. It returns a list containing the train-test split of inputs. The function also includes input validation, shuffling, and stratification options.",
    "function_name": "train_test_split",
    "ground_truth": "sklearn/model_selection/_split.py",
    "test": "sklearn/model_selection/tests/test_split.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": ""
}