{
    "result": "To create a function called `accuracy_score` that calculates the accuracy classification score, we can follow a step-by-step approach similar to the examples provided. Here's how you can implement this function:\n\n```python\nimport numpy as np\n\ndef accuracy_score(y_true, y_pred, normalize=True, sample_weight=None):\n    \"\"\"\n    Calculate the accuracy classification score.\n\n    Parameters:\n    - y_true: array-like of shape (n_samples,) - Ground truth (correct) labels.\n    - y_pred: array-like of shape (n_samples,) - Predicted labels.\n    - normalize: bool, default=True - If True, return the fraction of correctly classified samples.\n                 Otherwise, return the number of correctly classified samples.\n    - sample_weight: array-like of shape (n_samples,), default=None - Sample weights.\n\n    Returns:\n    - score: float or int - The accuracy score. Best performance is 1 with normalize=True,\n             and the number of samples with normalize=False.\n    \"\"\"\n    # 1. Convert inputs to numpy arrays for consistent handling\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n\n    # 2. Check if sample_weight is provided, otherwise default to equal weights\n    if sample_weight is None:\n        sample_weight = np.ones_like(y_true, dtype=np.float64)\n    else:\n        sample_weight = np.asarray(sample_weight)\n\n    # 3. Calculate the number of correctly classified samples\n    correct = (y_true == y_pred)\n\n    # 4. Compute the weighted sum of correctly classified samples\n    correct_sum = np.sum(sample_weight[correct])\n\n    # 5. Determine the total weight (or number of samples if weights are not used)\n    total_weight = np.sum(sample_weight)\n\n    # 6. Calculate the accuracy score based on the normalize parameter\n    if normalize:\n        score = correct_sum / total_weight\n    else:\n        score = correct_sum\n\n    # 7. Return the calculated accuracy score\n    return score\n\n# Examples of usage:\n# Example 1: Basic usage with normalization\ny_true = [0, 1, 2, 3]\ny_pred = [0, 2, 1, 3]\nprint(accuracy_score(y_true, y_pred))  # Output: 0.5\n\n# Example 2: Without normalization\nprint(accuracy_score(y_true, y_pred, normalize=False))  # Output: 2\n\n# Example 3: With sample weights\nsample_weight = [0.5, 1, 1, 0.5]\nprint(accuracy_score(y_true, y_pred, sample_weight=sample_weight))  # Output: 0.5\n```\n\n### Explanation:\n\n1. **Input Conversion**: Convert `y_true` and `y_pred` to numpy arrays for consistent handling.\n2. **Sample Weights**: If `sample_weight` is not provided, default to equal weights for all samples.\n3. **Correct Classification**: Determine which predictions are correct by comparing `y_true` and `y_pred`.\n4. **Weighted Sum**: Calculate the weighted sum of correctly classified samples.\n5. **Total Weight**: Compute the total weight, which is the sum of all sample weights.\n6. **Accuracy Calculation**: Depending on the `normalize` parameter, return either the fraction of correctly classified samples or the count.\n7. **Examples**: Demonstrate how to use the function with different inputs, including with and without normalization and with sample weights.",
    "prompt": "Generate a Python function called accuracy_score that calculates the accuracy classification score. The function takes in the following parameters:\n\n- y_true: Ground truth (correct) labels\n- y_pred: Predicted labels\n- normalize: Boolean value indicating whether to return the fraction of correctly classified samples or the number of correctly classified samples\n- sample_weight: Sample weights\n\nThe function returns a float or integer value based on the normalize parameter. The best performance is 1 when normalize is True and the number of samples when normalize is False.\n\nThe function also includes examples demonstrating how to use it with different inputs.",
    "function_name": "accuracy_score",
    "ground_truth": "sklearn/metrics/_classification.py",
    "test": "sklearn/metrics/tests/test_classification.py",
    "class": "",
    "stage": "Evaluating&Metrics",
    "task": "Classification",
    "data": ""
}