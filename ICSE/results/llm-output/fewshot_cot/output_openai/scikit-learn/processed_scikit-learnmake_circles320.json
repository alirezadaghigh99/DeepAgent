{
    "result": "To create a function `make_circles` that generates a dataset with a large circle containing a smaller circle in 2D, you can follow these steps. This function will allow you to specify the number of samples, whether to shuffle the data, the amount of noise, a random state for reproducibility, and a scaling factor between the circles. Here's how you can implement it:\n\n```python\nimport numpy as np\nfrom sklearn.utils import check_random_state\n\ndef make_circles(n_samples=100, shuffle=True, noise=None, random_state=None, factor=0.8):\n    \"\"\"\n    Generate a large circle containing a smaller circle in 2D.\n\n    Parameters:\n    - n_samples: int or tuple, total number of points or (n_outer, n_inner).\n    - shuffle: bool, whether to shuffle the samples.\n    - noise: float, standard deviation of Gaussian noise added to the data.\n    - random_state: int, RandomState instance, or None for reproducibility.\n    - factor: float, scale factor between the inner and outer circles.\n\n    Returns:\n    - X: ndarray of shape (n_samples, 2), the generated samples.\n    - y: ndarray of shape (n_samples,), integer labels (0 or 1) for class membership.\n    \"\"\"\n    # 1. Handle the n_samples parameter\n    if isinstance(n_samples, int):\n        n_outer = n_samples // 2\n        n_inner = n_samples - n_outer\n    elif isinstance(n_samples, tuple) and len(n_samples) == 2:\n        n_outer, n_inner = n_samples\n    else:\n        raise ValueError(\"n_samples must be an int or a tuple of two elements.\")\n\n    # 2. Initialize random state\n    rs = check_random_state(random_state)\n\n    # 3. Generate angles for the outer and inner circles\n    outer_circ_x = np.cos(np.linspace(0, 2 * np.pi, n_outer, endpoint=False))\n    outer_circ_y = np.sin(np.linspace(0, 2 * np.pi, n_outer, endpoint=False))\n    inner_circ_x = np.cos(np.linspace(0, 2 * np.pi, n_inner, endpoint=False)) * factor\n    inner_circ_y = np.sin(np.linspace(0, 2 * np.pi, n_inner, endpoint=False)) * factor\n\n    # 4. Stack the coordinates and create labels\n    X_outer = np.vstack((outer_circ_x, outer_circ_y)).T\n    X_inner = np.vstack((inner_circ_x, inner_circ_y)).T\n    X = np.vstack((X_outer, X_inner))\n    y = np.hstack((np.zeros(n_outer, dtype=int), np.ones(n_inner, dtype=int)))\n\n    # 5. Add noise if specified\n    if noise is not None:\n        X += rs.normal(scale=noise, size=X.shape)\n\n    # 6. Shuffle the dataset if required\n    if shuffle:\n        indices = rs.permutation(len(X))\n        X, y = X[indices], y[indices]\n\n    return X, y\n\n# Example usage:\nX, y = make_circles(n_samples=(100, 50), shuffle=True, noise=0.05, random_state=42, factor=0.5)\nprint(\"X shape:\", X.shape)\nprint(\"y shape:\", y.shape)\n```\n\n### Explanation:\n\n1. **Parameter Handling**: The function checks if `n_samples` is an integer or a tuple. If it's an integer, it splits the samples equally between the outer and inner circles. If it's a tuple, it uses the specified number of samples for each circle.\n\n2. **Random State**: Uses `check_random_state` to ensure reproducibility.\n\n3. **Circle Generation**: Uses trigonometric functions to generate points on the circles. The inner circle is scaled by the `factor`.\n\n4. **Noise Addition**: Adds Gaussian noise to the data if specified.\n\n5. **Shuffling**: Shuffles the data if `shuffle` is `True`.\n\n6. **Return**: Returns the generated samples and their labels.",
    "prompt": "Generate a Python function called make_circles that creates a dataset with a large circle containing a smaller circle in 2D. The function takes the following parameters:\n\n- n_samples: an integer or a tuple specifying the number of points in the outer and inner circles.\n- shuffle: a boolean indicating whether to shuffle the samples.\n- noise: a float representing the standard deviation of Gaussian noise added to the data.\n- random_state: an integer, RandomState instance, or None for reproducible random number generation.\n- factor: a float specifying the scale factor between the inner and outer circles.\n\nThe function returns two arrays:\n- X: an ndarray of shape (n_samples, 2) containing the generated samples.\n- y: an ndarray of shape (n_samples,) with integer labels (0 or 1) for the class membership of each sample.\n\nThe function also includes examples of how to use it, including generating the dataset and accessing the shapes of X and y.if len(n_samples) != 2:\n            raise ValueError(\"When a tuple, n_samples must have exactly two elements.\")",
    "function_name": "make_circles",
    "ground_truth": "sklearn/datasets/_samples_generator.py",
    "test": "sklearn/datasets/tests/test_samples_generator.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Classification",
    "data": ""
}