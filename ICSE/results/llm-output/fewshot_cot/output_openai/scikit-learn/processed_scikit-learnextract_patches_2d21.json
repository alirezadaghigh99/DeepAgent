{
    "result": "To create a function called `extract_patches_2d` that reshapes a 2D image into a collection of patches, we can follow a step-by-step approach similar to the examples you provided. Here's how you can implement this function:\n\n```python\nimport numpy as np\nfrom sklearn.utils import check_random_state\n\ndef extract_patches_2d(image, patch_size, max_patches=None, random_state=None):\n    \"\"\"\n    Extracts patches from a 2D image.\n\n    Parameters:\n        image (ndarray): The original image data with shape (height, width, channels).\n        patch_size (tuple): The size of the patches (patch_height, patch_width).\n        max_patches (int, optional): The maximum number of patches to extract. Defaults to None.\n        random_state (int, RandomState instance, or None, optional): Random state for sampling. Defaults to None.\n\n    Returns:\n        patches (ndarray): An array of patches with shape (n_patches, patch_height, patch_width, channels).\n    \"\"\"\n    # 1. Validate the input image dimensions\n    if image.ndim != 3:\n        raise ValueError(\"Image must be a 3D array with shape (height, width, channels).\")\n\n    # 2. Extract image dimensions and patch dimensions\n    img_height, img_width, img_channels = image.shape\n    patch_height, patch_width = patch_size\n\n    # 3. Calculate the number of patches that can be extracted along each dimension\n    n_patches_height = img_height - patch_height + 1\n    n_patches_width = img_width - patch_width + 1\n\n    # 4. Calculate the total number of possible patches\n    total_patches = n_patches_height * n_patches_width\n\n    # 5. Determine the number of patches to extract\n    if max_patches is None:\n        n_patches = total_patches\n    else:\n        n_patches = min(max_patches, total_patches)\n\n    # 6. Initialize random state for reproducibility\n    rs = check_random_state(random_state)\n\n    # 7. Randomly select patch starting positions\n    patch_indices = rs.choice(total_patches, n_patches, replace=False)\n\n    # 8. Extract patches\n    patches = np.empty((n_patches, patch_height, patch_width, img_channels), dtype=image.dtype)\n    for i, idx in enumerate(patch_indices):\n        row = idx // n_patches_width\n        col = idx % n_patches_width\n        patches[i] = image[row:row + patch_height, col:col + patch_width, :]\n\n    # 9. Return the array of patches\n    return patches\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Create a sample image with random values\n    sample_image = np.random.rand(100, 100, 3)  # 100x100 image with 3 channels\n\n    # Define patch size\n    patch_size = (10, 10)\n\n    # Extract patches\n    patches = extract_patches_2d(sample_image, patch_size, max_patches=50, random_state=42)\n\n    # Print the shape of the extracted patches\n    print(\"Extracted patches shape:\", patches.shape)\n```\n\n### Explanation:\n\n1. **Input Validation**: The function first checks if the input image is a 3D array, which is necessary for handling images with multiple channels.\n\n2. **Patch Calculation**: It calculates how many patches can be extracted along the height and width of the image.\n\n3. **Random Sampling**: If a maximum number of patches is specified, it randomly selects that many patches from the possible locations using a random state for reproducibility.\n\n4. **Patch Extraction**: It extracts the patches from the image based on the calculated indices.\n\n5. **Return**: Finally, it returns the extracted patches as a NumPy array.\n\nThis function is designed to be flexible and can handle images with different numbers of channels, making it suitable for both grayscale and color images.",
    "prompt": "Generate a Python function called extract_patches_2d that reshapes a 2D image into a collection of patches. The function takes in parameters including the original image data, patch size, maximum number of patches to extract, and random state for sampling. It returns an array of patches extracted from the image, with the shape of the patches specified by the patch height, patch width, and number of channels in the image. The function also includes examples demonstrating how to use it with sample image data.",
    "function_name": "extract_patches_2d",
    "ground_truth": "sklearn/feature_extraction/image.py",
    "test": "sklearn/feature_extraction/tests/test_image.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}