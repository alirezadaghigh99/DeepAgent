{
    "result": "Certainly! Below is a Python function `make_hastie_10_2` that generates a binary classification dataset as described in Hastie et al. 2009, Example 10.2. The function uses NumPy for array operations and includes an example usage to demonstrate its output.\n\n```python\nimport numpy as np\nfrom sklearn.utils import check_random_state\n\ndef make_hastie_10_2(n_samples=12000, *, random_state=None):\n    \"\"\"\n    Generate a binary classification dataset (Hastie et al., Example 10.2).\n    \n    The data has 10 Gaussian features, and the target is 1 if the sum \n    of squares of features > 9.34, otherwise -1.\n\n    Args:\n        n_samples (int): Number of samples to generate. Default is 12000.\n        random_state (int, RandomState instance, or None): Determines random number generation for dataset creation. Pass an int for reproducible output across multiple function calls. Default is None.\n\n    Returns:\n        X (ndarray): Array of shape (n_samples, 10) with Gaussian features.\n        y (ndarray): Array of shape (n_samples,) with binary target values.\n    \"\"\"\n    # 1. Convert random_state into a RandomState instance\n    rs = check_random_state(random_state)\n    \n    # 2. Define the shape of the dataset: (n_samples, 10 features)\n    shape = (n_samples, 10)\n    \n    # 3. Generate random Gaussian data of the specified shape\n    X = rs.normal(size=shape).reshape(shape)\n    \n    # 4. Compute the sum of squares of each sample's features\n    #    and check if it's greater than 9.34\n    y = ((X ** 2).sum(axis=1) > 9.34).astype(np.float64, copy=False)\n    \n    # 5. Replace all 0.0 labels with -1.0 to create a binary output (-1, 1)\n    y[y == 0.0] = -1.0\n    \n    # 6. Return the generated features X and corresponding labels y\n    return X, y\n\n# Example usage\nif __name__ == \"__main__\":\n    X, y = make_hastie_10_2(n_samples=5, random_state=42)\n    print(\"X shape:\", X.shape)\n    print(\"y shape:\", y.shape)\n    print(\"First few samples of X:\\n\", X[:5])\n    print(\"First few labels of y:\\n\", y[:5])\n```\n\n### Explanation:\n1. **Random State Handling**: The function uses `check_random_state` from `sklearn.utils` to ensure reproducibility when a `random_state` is provided.\n2. **Data Generation**: It generates `n_samples` of 10-dimensional Gaussian data.\n3. **Label Assignment**: The target `y` is determined by checking if the sum of squares of each sample's features is greater than 9.34. If true, the label is 1; otherwise, it's -1.\n4. **Example Usage**: Demonstrates how to call the function and print the shapes and initial values of the generated data.",
    "prompt": "Generate a Python function called make_hastie_10_2 that generates data for binary classification as used in Hastie et al. 2009, Example 10.2. The function takes in the number of samples (n_samples) and a random state for reproducibility. It returns two arrays: X, which contains input samples of shape (n_samples, 10) with standard independent Gaussian features, and y, which contains output values of shape (n_samples,) defined by a specific condition. The target y[i] is set to 1 if the sum of X[i] squared is greater than 9.34, otherwise -1. The function utilizes numpy for array operations and includes references to related dataset approaches and literature. An example usage is provided to demonstrate the function's output shapes and initial values.",
    "function_name": "make_hastie_10_2",
    "ground_truth": "sklearn/datasets/_samples_generator.py",
    "test": "sklearn/datasets/tests/test_samples_generator.py",
    "class": "",
    "stage": "Model Construction",
    "task": "Classification",
    "data": "Table"
}