{
    "result": "To create the `labels_to_array` function, we will follow a step-by-step approach similar to the examples provided. This function will handle various input types and ensure that the output is a 1D NumPy array. Here's how you can implement it:\n\n```python\nimport numpy as np\nimport pandas as pd\nfrom typing import Union\n\nLabelLike = Union[list, np.ndarray, pd.Series, pd.DataFrame]\n\ndef labels_to_array(y: Union[LabelLike, np.generic]) -> np.ndarray:\n    \"\"\"\n    Convert various label types into a 1D NumPy array.\n\n    Args:\n        y: Labels to be converted, which can be a list, numpy array, pandas Series, or pandas DataFrame.\n\n    Returns:\n        A 1D NumPy array of labels.\n\n    Raises:\n        ValueError: If the input is a DataFrame with more than one column or if the conversion fails.\n    \"\"\"\n    # 1. Check if the input is a pandas DataFrame\n    if isinstance(y, pd.DataFrame):\n        # 2. Raise an error if the DataFrame has more than one column\n        if y.shape[1] != 1:\n            raise ValueError(\"DataFrame input must have exactly one column.\")\n        # 3. Convert the single-column DataFrame to a pandas Series\n        y = y.iloc[:, 0]\n\n    # 4. Convert the input to a 1D NumPy array\n    try:\n        y_array = np.asarray(y).flatten()\n    except Exception as e:\n        # 5. Raise a ValueError if conversion fails\n        raise ValueError(\"Input cannot be converted to a 1D NumPy array.\") from e\n\n    # 6. Return the resulting 1D NumPy array\n    return y_array\n```\n\n### Explanation:\n\n1. **Input Type Check**: We first check if the input `y` is a pandas DataFrame. If it is, we ensure it has only one column. If it has more than one column, we raise a `ValueError`.\n\n2. **Conversion to Series**: If the DataFrame has exactly one column, we convert it to a pandas Series for easier handling.\n\n3. **Conversion to NumPy Array**: We attempt to convert the input `y` to a 1D NumPy array using `np.asarray(y).flatten()`. This handles lists, numpy arrays, and pandas Series.\n\n4. **Error Handling**: If the conversion to a 1D NumPy array fails, we catch the exception and raise a `ValueError` with an appropriate message.\n\n5. **Return**: Finally, we return the 1D NumPy array.\n\nThis function should handle the specified input types and raise errors appropriately if the input is not suitable for conversion.",
    "prompt": "Create a Python function `labels_to_array` that converts various label types into a 1D NumPy array. The function should:\n- Accept `y` as input, which can be a list, numpy array, pandas Series, or pandas DataFrame.\n- Convert the input `y` to a 1D NumPy array and return it.\n- Raise a `ValueError` if the input is a DataFrame with more than one column or if the input cannot be converted to a 1D NumPy array.\n\nInput types:\n- `y`: Union[LabelLike, np.generic] - labels to be converted.\n\nOutput:\n- Returns a 1D NumPy array of labels.\n\nErrors:\n- Raise a `ValueError` if the input is a DataFrame with more than one column or if the conversion to a 1D NumPy array fails.",
    "function_name": "labels_to_array",
    "ground_truth": "cleanlab/internal/validation.py",
    "test": "tests/test_validation.py::test_labels_to_array_return_values",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Classification",
    "data": "Table"
}