{
    "result": "To create the `_get_label_quality_per_image` function, we will follow a step-by-step approach similar to the examples provided. This function will compute the label quality score for an image using the \"softmin\" method. Here's how you can implement it:\n\n```python\nimport numpy as np\n\ndef _get_label_quality_per_image(pixel_scores, method='softmin', temperature=0.1):\n    \"\"\"\n    Compute the label quality score for an image based on per-pixel label quality scores.\n\n    Parameters:\n        pixel_scores (np.ndarray): A 1D array of shape (N,) containing per-pixel label quality scores.\n        method (str): The method used to calculate the label quality score. Defaults to \"softmin\".\n        temperature (float): The temperature of the softmin function. Defaults to 0.1.\n\n    Returns:\n        float: The label quality score for the image, ranging from 0 (lowest quality) to 1 (highest quality).\n\n    Raises:\n        Exception: If pixel_scores is None, empty, or if temperature is 0 or None.\n        Exception: If an unsupported method is specified.\n    \"\"\"\n    # 1. Validate input parameters\n    if pixel_scores is None or len(pixel_scores) == 0:\n        raise Exception(\"pixel_scores must be a non-empty array.\")\n    if temperature is None or temperature == 0:\n        raise Exception(\"temperature must be a non-zero value.\")\n    if method != 'softmin':\n        raise Exception(\"Unsupported method. Currently, only 'softmin' is supported.\")\n\n    # 2. Compute the softmin of the pixel scores\n    #    The softmin function is defined as: softmin(x) = exp(-x / temperature) / sum(exp(-x / temperature))\n    exp_scores = np.exp(-pixel_scores / temperature)\n    softmin_scores = exp_scores / np.sum(exp_scores)\n\n    # 3. Calculate the label quality score as the weighted sum of pixel scores\n    label_quality_score = np.sum(softmin_scores * pixel_scores)\n\n    # 4. Return the label quality score\n    return label_quality_score\n```\n\n### Explanation:\n\n1. **Input Validation**: The function first checks if `pixel_scores` is `None` or empty, and if `temperature` is `0` or `None`. It also checks if the `method` is not \"softmin\". If any of these conditions are met, an exception is raised with a descriptive error message.\n\n2. **Softmin Calculation**: The softmin function is computed using the formula:  \n   \\[\n   \\text{softmin}(x) = \\frac{\\exp(-x / \\text{temperature})}{\\sum \\exp(-x / \\text{temperature})}\n   \\]\n   This emphasizes lower scores more heavily, as required.\n\n3. **Label Quality Score Calculation**: The label quality score is calculated as the weighted sum of the pixel scores, where the weights are given by the softmin scores.\n\n4. **Return**: The function returns the computed label quality score, which ranges from 0 to 1.",
    "prompt": "Create a Python function _get_label_quality_per_image that computes the label quality score for an image based on per-pixel label quality scores. The function uses the \"softmin\" method by default, which emphasizes the lowest-quality pixel labels more heavily in the calculation.\n\nParameters:\npixel_scores: A NumPy array containing per-pixel label quality scores, flattened into a 1D array of shape (N,), where N is the number of pixels in the image.\nmethod: A string specifying the method used to calculate the label quality score. Currently, only the \"softmin\" method is supported. This parameter is optional and defaults to \"softmin\".\ntemperature: A float that determines the temperature of the softmin function. This parameter controls how much weight is given to lower-quality pixel labels. Lower values emphasize the lowest scores more, while higher values average the scores more evenly. The default value is 0.1.\nReturns:\nA float representing the label quality score for the image, ranging from 0 (lowest quality) to 1 (highest quality).If pixel_scores is None, empty, or if temperature is 0 or None, the function raises an Exception with a descriptive error message.\nIf an unsupported method is specified, an exception is raised with a message indicating the correct method to use.",
    "function_name": "_get_label_quality_per_image",
    "ground_truth": "cleanlab/segmentation/rank.py#L204",
    "test": "tests/test_segmentation.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "segmentation",
    "data": "Image"
}