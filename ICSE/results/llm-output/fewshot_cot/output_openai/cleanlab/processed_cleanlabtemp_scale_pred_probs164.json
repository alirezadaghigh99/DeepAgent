{
    "result": "To implement the `temp_scale_pred_probs` function, we will follow a step-by-step approach to adjust the predicted probabilities using temperature scaling. Here's how you can implement this function:\n\n```python\nimport numpy as np\n\ndef temp_scale_pred_probs(pred_probs, temp):\n    \"\"\"\n    Adjust predicted probabilities using temperature scaling.\n\n    Args:\n        pred_probs (np.ndarray): 2D array of predicted probabilities.\n        temp (float): Temperature factor for scaling.\n\n    Returns:\n        np.ndarray: Scaled and normalized probabilities.\n    \"\"\"\n    # 1. Clip probabilities to avoid logarithm of zero\n    clipped_probs = np.clip(pred_probs, 1e-15, 1 - 1e-15)\n\n    # 2. Take the logarithm of the clipped probabilities\n    log_probs = np.log(clipped_probs)\n\n    # 3. Apply temperature scaling by dividing the log probabilities by the temperature\n    scaled_log_probs = log_probs / temp\n\n    # 4. Use the softmax function to convert scaled log probabilities back to probabilities\n    exp_scaled_log_probs = np.exp(scaled_log_probs)\n    scaled_probs = exp_scaled_log_probs / np.sum(exp_scaled_log_probs, axis=1, keepdims=True)\n\n    # 5. Return the scaled and normalized probabilities\n    return scaled_probs\n```\n\n### Explanation:\n\n1. **Clipping Probabilities**: We clip the predicted probabilities to a small range (e.g., between `1e-15` and `1 - 1e-15`) to prevent taking the logarithm of zero, which would result in undefined values.\n\n2. **Logarithm of Probabilities**: We take the natural logarithm of the clipped probabilities. This step is necessary because temperature scaling is applied in the log space.\n\n3. **Temperature Scaling**: We divide the log probabilities by the temperature factor. A temperature less than 1 will sharpen the predictions, making them more confident, while a temperature greater than 1 will smoothen them.\n\n4. **Softmax Function**: We apply the softmax function to the scaled log probabilities to convert them back into a valid probability distribution. This involves exponentiating the scaled log probabilities and normalizing them by dividing by the sum of exponentiated values along each row.\n\n5. **Return Scaled Probabilities**: Finally, we return the scaled and normalized probabilities as a 2D NumPy array.",
    "prompt": "You need to implement a function named `temp_scale_pred_probs` that adjusts predicted probabilities using a temperature scaling technique. Temperature factor less than 1 sharpens the predictions, making them more confident, while a temperature greater than 1 smoothens the predictions, making them less confident. The function takes a 2D NumPy array of predicted probabilities (`pred_probs`) and a float (`temp`) representing the temperature factor. The probabilities are first clipped to avoid logarithm of zero and normalized. Then, the temperature scaling is applied using the softmax function after taking the logarithm of the probabilities. The function returns the scaled and normalized probabilities as a 2D NumPy array.",
    "function_name": "temp_scale_pred_probs",
    "ground_truth": "cleanlab/internal/multiannotator_utils.py#L353",
    "test": "tests/test_multiannotator.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Classification",
    "data": "Table"
}