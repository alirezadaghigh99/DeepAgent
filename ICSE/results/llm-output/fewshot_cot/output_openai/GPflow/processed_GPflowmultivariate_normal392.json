{
    "result": "To write the `multivariate_normal` function that computes the log-density of a multivariate normal distribution, we can follow a step-by-step approach similar to the examples provided. Here's how you can implement this function:\n\n```python\nimport tensorflow as tf\nfrom tensorflow_probability import distributions as tfd\nfrom typing import Union\nfrom some_module import check_shapes  # Assuming check_shapes is defined elsewhere\n\n@check_shapes(\n    \"x: [D, broadcast N]\",\n    \"mu: [D, broadcast N]\",\n    \"L: [D, D]\",\n    \"return: [N]\",\n)\ndef multivariate_normal(x: tf.Tensor, mu: tf.Tensor, L: tf.Tensor) -> tf.Tensor:\n    \"\"\"\n    Computes the log-density of a multivariate normal.\n\n    :param x: sample(s) for which we want the density\n    :param mu: mean(s) of the normal distribution\n    :param L: Cholesky decomposition of the covariance matrix\n    :return: log densities\n    \"\"\"\n    # 1. Ensure x and mu have the same shape for broadcasting\n    x = tf.convert_to_tensor(x)\n    mu = tf.convert_to_tensor(mu)\n\n    # 2. Compute the covariance matrix from its Cholesky decomposition\n    cov = tf.matmul(L, L, transpose_b=True)\n\n    # 3. Create a multivariate normal distribution using TensorFlow Probability\n    mvn = tfd.MultivariateNormalTriL(loc=mu, scale_tril=L)\n\n    # 4. Compute the log probability density of x under the distribution\n    log_density = mvn.log_prob(x)\n\n    # 5. Return the computed log densities\n    return log_density\n```\n\n### Explanation of Steps:\n\n1. **Tensor Conversion**: Convert `x` and `mu` to TensorFlow tensors to ensure compatibility with TensorFlow operations.\n\n2. **Covariance Matrix**: The covariance matrix is reconstructed from its Cholesky decomposition `L`. This is done by multiplying `L` with its transpose.\n\n3. **Distribution Creation**: Use TensorFlow Probability's `MultivariateNormalTriL` to create a multivariate normal distribution. This class is specifically designed to work with the Cholesky decomposition of the covariance matrix.\n\n4. **Log Probability Density**: Compute the log probability density of the samples `x` using the `log_prob` method of the distribution object.\n\n5. **Return**: Return the computed log densities.\n\nThis function assumes that the `check_shapes` decorator is defined elsewhere and is used to enforce shape constraints on the inputs and outputs. Adjust the import statement for `check_shapes` as needed based on your project structure.",
    "prompt": "\"Write the multivariate_normal function as follow :\n@check_shapes(\n    \"x: [D, broadcast N]\",\n    \"mu: [D, broadcast N]\",\n    \"L: [D, D]\",\n    \"return: [N]\",\n)\ndef multivariate_normal(x: TensorType, mu: TensorType, L: TensorType) -> tf.Tensor:\n    \"\"\"\n    Computes the log-density of a multivariate normal.\n\n    :param x: sample(s) for which we want the density\n    :param mu: mean(s) of the normal distribution\n    :param L: Cholesky decomposition of the covariance matrix\n    :return: log densities\n    \"\"\"",
    "function_name": "multivariate_normal",
    "ground_truth": "gpflow/logdensities.py",
    "test": "tests/gpflow/test_logdensities.py::test_multivariate_normal",
    "class": "",
    "stage": "Model Construction",
    "task": "Prediction",
    "data": "tabular"
}