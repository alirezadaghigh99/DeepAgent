{
    "result": "To create the `_compute_resized_output_size` function, we need to handle various scenarios based on the input parameters. The function will calculate the new dimensions of an image after resizing, considering constraints like `max_size` and whether `size` can be `None`. Here's a step-by-step implementation:\n\n```python\ndef _compute_resized_output_size(image_size, size=None, max_size=None, allow_size_none=False):\n    \"\"\"\n    Calculate the new size of an image after resizing.\n\n    Args:\n        image_size (Tuple[int, int]): Original image size as (height, width).\n        size (Optional[Union[int, Tuple[int, int]]]): Desired size for the smaller edge or both dimensions.\n        max_size (Optional[int]): Maximum size for the longer edge.\n        allow_size_none (bool): Whether to allow `size` to be `None`.\n\n    Returns:\n        List[int]: New image size as [new_height, new_width].\n\n    Raises:\n        ValueError: If `size` is `None` and `max_size` is not an integer, or if `max_size` is smaller than the requested size.\n    \"\"\"\n    # 1. Handle the case where `size` is None\n    if size is None:\n        if not allow_size_none:\n            raise ValueError(\"`size` cannot be None unless `allow_size_none` is True.\")\n        return list(image_size)\n\n    # 2. Handle the case where `size` is a single integer\n    if isinstance(size, int):\n        # Determine the scale factor based on the smaller edge\n        original_min_edge = min(image_size)\n        scale_factor = size / original_min_edge\n\n        # Calculate new dimensions\n        new_height = int(image_size[0] * scale_factor)\n        new_width = int(image_size[1] * scale_factor)\n\n    # 3. Handle the case where `size` is a tuple of two integers\n    elif isinstance(size, (tuple, list)) and len(size) == 2:\n        new_height, new_width = size\n\n    else:\n        raise ValueError(\"`size` must be an int or a tuple/list of two ints.\")\n\n    # 4. Check if `max_size` is specified and adjust the dimensions accordingly\n    if max_size is not None:\n        if not isinstance(max_size, int):\n            raise ValueError(\"`max_size` must be an integer.\")\n\n        # Determine the longer edge in the new dimensions\n        max_dim = max(new_height, new_width)\n\n        if max_dim > max_size:\n            # Calculate the scale factor to fit within `max_size`\n            scale_factor = max_size / max_dim\n            new_height = int(new_height * scale_factor)\n            new_width = int(new_width * scale_factor)\n\n    # 5. Return the new dimensions as a list\n    return [new_height, new_width]\n```\n\n### Explanation:\n\n1. **Handling `size` as `None`:** If `size` is `None`, the function checks if `allow_size_none` is `True`. If not, it raises a `ValueError`.\n\n2. **Single Integer `size`:** If `size` is a single integer, the function calculates the scale factor based on the smaller edge of the original image and computes the new dimensions.\n\n3. **Tuple/List `size`:** If `size` is a tuple or list of two integers, it directly assigns these values as the new dimensions.\n\n4. **`max_size` Constraint:** If `max_size` is specified, the function checks if the longer edge of the new dimensions exceeds `max_size`. If so, it scales down the dimensions proportionally.\n\n5. **Return New Dimensions:** Finally, the function returns the new dimensions as a list `[new_height, new_width]`.",
    "prompt": "Write a Python function `_compute_resized_output_size` that calculates the new size of an image after resizing, based on the original `image_size` (height and width). The function accepts parameters: `size`, an optional list specifying the desired size of the smaller edge or both dimensions; `max_size`, an optional integer that limits the size of the longer edge; and `allow_size_none`, a boolean that permits `size` to be `None` (only used in version 2). The function should handle different cases where `size` is `None`, a single value, or a pair of values, and return a list with the new height and width. The function should include checks to raise a `ValueError` if `size` is `None` but `max_size` is not an integer, if `max_size` is smaller than the requested size, or if any other invalid configuration is encountered.",
    "function_name": "_compute_resized_output_size",
    "ground_truth": "torchvision/transforms/functional.py#L357",
    "test": "test/test_transforms.py::test_resize",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}