{
    "result": "To create the `_resize_image_and_masks` function, we can follow a step-by-step approach similar to the examples provided. This function will resize an image tensor and its corresponding masks, if provided, to either a fixed size or a size determined by scaling factors. It will also handle special cases for TorchScript and ONNX tracing. Here's how you can implement it:\n\n```python\nimport torch\nimport torchvision.transforms.functional as F\n\ndef _resize_image_and_masks(\n    image: torch.Tensor,\n    self_min_size: int,\n    self_max_size: int,\n    target: Optional[dict] = None,\n    fixed_size: Optional[Tuple[int, int]] = None\n) -> Tuple[torch.Tensor, Optional[dict]]:\n    \"\"\"\n    Resize an image tensor and its corresponding masks, if provided.\n\n    Args:\n        image (Tensor): The image to be resized, with shape (C, H, W).\n        self_min_size (int): Minimum size for the image's smaller dimension.\n        self_max_size (int): Maximum size for the image's larger dimension.\n        target (dict, optional): Additional data, such as masks, to be resized.\n        fixed_size (tuple, optional): Fixed dimensions (height, width) for resizing.\n\n    Returns:\n        Tuple[Tensor, Optional[dict]]: Resized image and target dictionary with resized masks.\n    \"\"\"\n    # 1. Determine the original size of the image\n    original_size = image.shape[-2:]\n\n    # 2. If fixed_size is provided, use it to resize the image\n    if fixed_size is not None:\n        new_size = fixed_size\n    else:\n        # 3. Calculate the scaling factor based on self_min_size and self_max_size\n        min_original_size = float(min(original_size))\n        max_original_size = float(max(original_size))\n        scale_factor = self_min_size / min_original_size\n\n        # 4. Ensure the scaled size does not exceed self_max_size\n        if max_original_size * scale_factor > self_max_size:\n            scale_factor = self_max_size / max_original_size\n\n        # 5. Calculate the new size using the scale factor\n        new_size = tuple(int(dim * scale_factor) for dim in original_size)\n\n    # 6. Resize the image using the calculated new size\n    resized_image = F.resize(image, new_size)\n\n    # 7. If a target dictionary is provided, resize the masks\n    if target is not None and \"masks\" in target:\n        masks = target[\"masks\"]\n        resized_masks = F.resize(masks, new_size, interpolation=F.InterpolationMode.NEAREST)\n        target = target.copy()\n        target[\"masks\"] = resized_masks\n\n    # 8. Return the resized image and the target dictionary\n    return resized_image, target\n```\n\n### Explanation:\n\n1. **Determine Original Size**: We first get the original size of the image to calculate the scaling factor if needed.\n\n2. **Fixed Size Resizing**: If a fixed size is provided, we use it directly to resize the image.\n\n3. **Calculate Scaling Factor**: If no fixed size is provided, we calculate a scaling factor based on the `self_min_size` and `self_max_size` constraints.\n\n4. **Ensure Maximum Size Constraint**: We adjust the scaling factor to ensure the resized image does not exceed the `self_max_size`.\n\n5. **Calculate New Size**: We compute the new size using the scaling factor.\n\n6. **Resize Image**: We use the calculated new size to resize the image.\n\n7. **Resize Masks**: If a target dictionary with masks is provided, we resize the masks using nearest neighbor interpolation to preserve their categorical nature.\n\n8. **Return Resized Image and Target**: Finally, we return the resized image and the target dictionary with resized masks if applicable.",
    "prompt": "Create a Python function _resize_image_and_masks that resizes an image tensor and its corresponding masks, if provided. The function allows resizing to either a fixed size or a size determined by scaling factors, and it handles special cases for TorchScript and ONNX tracing.\n\nParameters:\nimage: A Tensor representing the image to be resized, with shape (C, H, W).\nself_min_size: An integer specifying the minimum size for the image's smaller dimension when resizing.\nself_max_size: An integer specifying the maximum size for the image's larger dimension when resizing.\ntarget: An optional dictionary containing additional data, such as masks, that should be resized alongside the image. The dictionary may contain a key \"masks\" with a tensor of shape (N, H, W).\nfixed_size: An optional tuple (height, width) specifying the fixed dimensions to which the image should be resized.\nReturns:\nA tuple containing:\nThe resized image tensor.\nThe resized target dictionary if it was provided, with resized masks if present.",
    "function_name": "_resize_image_and_masks",
    "ground_truth": "torchvision/models/detection/transform.py",
    "test": "test/test_models_detection_negative_samples.py::TestModelsDetectionNegativeSamples",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Detection",
    "data": "Image"
}