{
    "result": "To generate the `unproject` function for the `PinholeCamera` class, we need to transform 2D pixel coordinates into 3D world coordinates using the camera's intrinsic and extrinsic parameters. The intrinsic matrix is used to convert pixel coordinates to camera coordinates, and the extrinsic matrix is used to transform camera coordinates to world coordinates. Here's a step-by-step implementation:\n\n```python\nimport torch\nfrom torch import Tensor\n\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n\n    def unproject(self, point_2d: Tensor, depth: Tensor) -> Tensor:\n        \"\"\"\n        Transform 2D pixel coordinates to 3D world coordinates.\n\n        Args:\n            point_2d (Tensor): Tensor of shape (*, 2) representing 2D pixel coordinates.\n            depth (Tensor): Tensor of shape (*, 1) representing depth values.\n\n        Returns:\n            Tensor: Tensor of shape (*, 3) representing 3D world coordinates.\n        \"\"\"\n        # 1. Ensure point_2d and depth have compatible shapes\n        assert point_2d.shape[:-1] == depth.shape[:-1], \"point_2d and depth must have compatible shapes\"\n\n        # 2. Add a homogeneous coordinate to the 2D points\n        ones = torch.ones_like(point_2d[..., :1])\n        point_2d_homogeneous = torch.cat((point_2d, ones), dim=-1)  # Shape: (*, 3)\n\n        # 3. Compute the inverse of the intrinsic matrix\n        intrinsics_inv = torch.inverse(self._intrinsics)\n\n        # 4. Transform pixel coordinates to camera coordinates\n        point_camera_homogeneous = torch.matmul(intrinsics_inv, point_2d_homogeneous.unsqueeze(-1)).squeeze(-1)\n\n        # 5. Scale the camera coordinates by the depth\n        point_camera = point_camera_homogeneous * depth\n\n        # 6. Add a homogeneous coordinate to the camera coordinates\n        point_camera_homogeneous = torch.cat((point_camera, ones), dim=-1)  # Shape: (*, 4)\n\n        # 7. Compute the inverse of the extrinsic matrix\n        extrinsics_inv = torch.inverse(self._extrinsics)\n\n        # 8. Transform camera coordinates to world coordinates\n        point_world_homogeneous = torch.matmul(extrinsics_inv, point_camera_homogeneous.unsqueeze(-1)).squeeze(-1)\n\n        # 9. Extract the (x, y, z) world coordinates\n        point_world = point_world_homogeneous[..., :3]\n\n        # 10. Return the 3D world coordinates\n        return point_world\n```\n\n### Explanation:\n\n1. **Input Validation**: Ensure that `point_2d` and `depth` have compatible shapes.\n2. **Homogeneous Coordinates**: Convert 2D pixel coordinates to homogeneous coordinates by appending a 1.\n3. **Intrinsic Matrix Inversion**: Compute the inverse of the intrinsic matrix to transform pixel coordinates to camera coordinates.\n4. **Camera Coordinates**: Use the inverse intrinsic matrix to transform the homogeneous pixel coordinates to camera coordinates.\n5. **Depth Scaling**: Scale the camera coordinates by the depth to get the actual 3D position in the camera frame.\n6. **Extrinsic Matrix Inversion**: Compute the inverse of the extrinsic matrix to transform camera coordinates to world coordinates.\n7. **World Coordinates**: Use the inverse extrinsic matrix to transform the camera coordinates to world coordinates.\n8. **Output**: Return the 3D world coordinates.",
    "prompt": "Generate the `unproject` function for the following class to transform coordinates in the pixel frame to the world frame. The input is `self`, a `point_2d` tensor with shape `(*, 2)`, and a `depth` tensor with shape `(*, 1)`. The output is a tensor of `(x, y, z)` world coordinates with shape `(*, 3)`.\n\n```python\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n```",
    "function_name": "unproject",
    "ground_truth": "kornia/geometry/camera/pinhole.py",
    "test": "tests/geometry/camera/test_pinhole.py",
    "class": "PinholeCamera",
    "stage": "Image",
    "task": "",
    "data": "Inference"
}