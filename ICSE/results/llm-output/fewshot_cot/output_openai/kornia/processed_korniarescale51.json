{
    "result": "To create the `rescale` function that resizes an input `torch.Tensor` with the given factor, we can follow a step-by-step approach similar to the examples provided. Here's how you can implement the function:\n\n```python\nimport torch\nimport torch.nn.functional as F\n\ndef rescale(\n    input: torch.Tensor,\n    factor: Union[float, Tuple[float, float]],\n    interpolation: str = \"bilinear\",\n    align_corners: Optional[bool] = None,\n    antialias: bool = False\n) -> torch.Tensor:\n    \"\"\"\n    Rescales an input tensor by the given factor using the specified interpolation method.\n\n    Args:\n        input (torch.Tensor): The input tensor to be rescaled.\n        factor (float or tuple of floats): The scaling factor. If a single float is provided,\n                                           it is used for both height and width.\n        interpolation (str): The interpolation method to use. Default is \"bilinear\".\n        align_corners (bool, optional): If True, the corner pixels of the input and output tensors\n                                        are aligned. Default is None.\n        antialias (bool): If True, applies an anti-aliasing filter when downsampling. Default is False.\n\n    Returns:\n        torch.Tensor: The rescaled tensor.\n    \"\"\"\n    # 1. Determine the scaling factors for height and width\n    if isinstance(factor, float):\n        scale_factors = (factor, factor)\n    else:\n        scale_factors = factor\n\n    # 2. Calculate the new size based on the scaling factors\n    _, _, original_height, original_width = input.shape\n    new_height = int(original_height * scale_factors[0])\n    new_width = int(original_width * scale_factors[1])\n    new_size = (new_height, new_width)\n\n    # 3. Use torch.nn.functional.interpolate to rescale the input tensor\n    rescaled_tensor = F.interpolate(\n        input,\n        size=new_size,\n        mode=interpolation,\n        align_corners=align_corners,\n        antialias=antialias\n    )\n\n    # 4. Return the rescaled tensor\n    return rescaled_tensor\n\n# Example usage\nimg = torch.rand(1, 3, 4, 4)\nout = rescale(img, (2, 3))\nprint(out.shape)  # Output: torch.Size([1, 3, 8, 12])\n```\n\n### Explanation:\n\n1. **Determine Scaling Factors**: The function first checks if the `factor` is a single float or a tuple. If it's a float, it uses the same factor for both dimensions. If it's a tuple, it uses the provided factors for height and width.\n\n2. **Calculate New Size**: The new size of the tensor is calculated by multiplying the original dimensions by the scaling factors.\n\n3. **Interpolate**: The `torch.nn.functional.interpolate` function is used to resize the tensor. It supports various interpolation methods, and the `align_corners` and `antialias` options allow for additional control over the resizing process.\n\n4. **Return Rescaled Tensor**: Finally, the function returns the rescaled tensor.",
    "prompt": "Create a Python function called rescale that resizes an input torch.Tensor with the given factor. The function takes in the following parameters: input (torch.Tensor), factor (float or tuple of floats), interpolation (string, default=\"bilinear\"), align_corners (optional bool), and antialias (bool, default=False). \n\nThe function rescales the input tensor based on the factor provided, using the specified interpolation method. If a scalar factor is provided, it is used for both the x and y directions. The function returns the rescaled tensor with the shape specified by the new size.\n\nAn example of using the rescale function is shown below:\n```python\nimg = torch.rand(1, 3, 4, 4)\nout = rescale(img, (2, 3))\nprint(out.shape)\n```\nThis example rescales the input image tensor 'img' by a factor of (2, 3) and prints out the shape of the resulting tensor.",
    "function_name": "rescale",
    "ground_truth": "kornia/geometry/transform/affwarp.py",
    "test": "tests/geometry/transform/test_affine.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}