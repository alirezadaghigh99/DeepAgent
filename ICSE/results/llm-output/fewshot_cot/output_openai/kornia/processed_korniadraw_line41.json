{
    "result": "To create a function `draw_line` that draws a line on an image using PyTorch, we need to follow a series of steps similar to the examples you provided. Here's a step-by-step implementation:\n\n```python\nimport torch\nfrom typing import Union, Tuple\n\ndef draw_line(\n    image: torch.Tensor,\n    p1: Union[Tuple[int, int], torch.Tensor],\n    p2: Union[Tuple[int, int], torch.Tensor],\n    color: Union[Tuple[int, int, int], torch.Tensor]\n) -> torch.Tensor:\n    \"\"\"\n    Draws a line on an image from point p1 to point p2 with the specified color.\n\n    Args:\n        image (torch.Tensor): The input image tensor with shape (C, H, W).\n        p1 (Union[Tuple[int, int], torch.Tensor]): The start point of the line.\n        p2 (Union[Tuple[int, int], torch.Tensor]): The end point of the line.\n        color (Union[Tuple[int, int, int], torch.Tensor]): The color of the line.\n\n    Returns:\n        torch.Tensor: The image with the drawn line.\n    \"\"\"\n    # 1. Validate the input image dimensions\n    if image.ndim != 3:\n        raise ValueError(\"Image must have 3 dimensions (C, H, W).\")\n\n    # 2. Validate the color dimensions\n    if isinstance(color, torch.Tensor) and color.shape[0] != image.shape[0]:\n        raise ValueError(\"Color must have the same number of channels as the image.\")\n\n    # 3. Ensure p1 and p2 are tensors\n    p1 = torch.tensor(p1, dtype=torch.int32)\n    p2 = torch.tensor(p2, dtype=torch.int32)\n\n    # 4. Validate the points' dimensions\n    if p1.shape != p2.shape or p1.shape[-1] != 2:\n        raise ValueError(\"Points p1 and p2 must have shape (2,) or (B, 2) and match in size.\")\n\n    # 5. Check if points are within image bounds\n    _, H, W = image.shape\n    if not (0 <= p1[0] < W and 0 <= p1[1] < H and 0 <= p2[0] < W and 0 <= p2[1] < H):\n        raise ValueError(\"Points p1 and p2 must be within the image bounds.\")\n\n    # 6. Draw the line using Bresenham's algorithm\n    def bresenham(x0, y0, x1, y1):\n        \"\"\"Generate points on a line from (x0, y0) to (x1, y1) using Bresenham's algorithm.\"\"\"\n        points = []\n        dx = abs(x1 - x0)\n        dy = abs(y1 - y0)\n        sx = 1 if x0 < x1 else -1\n        sy = 1 if y0 < y1 else -1\n        err = dx - dy\n\n        while True:\n            points.append((x0, y0))\n            if x0 == x1 and y0 == y1:\n                break\n            e2 = 2 * err\n            if e2 > -dy:\n                err -= dy\n                x0 += sx\n            if e2 < dx:\n                err += dx\n                y0 += sy\n        return points\n\n    # 7. Get the line points\n    line_points = bresenham(p1[0].item(), p1[1].item(), p2[0].item(), p2[1].item())\n\n    # 8. Draw the line on the image\n    for x, y in line_points:\n        image[:, y, x] = torch.tensor(color, dtype=image.dtype)\n\n    # 9. Return the modified image\n    return image\n```\n\n### Explanation:\n\n1. **Input Validation**: We first check that the image has three dimensions and that the color has the same number of channels as the image.\n\n2. **Point Conversion and Validation**: We ensure that `p1` and `p2` are tensors and have the correct shape. We also check that the points are within the image bounds.\n\n3. **Line Drawing**: We use Bresenham's algorithm to calculate the points along the line between `p1` and `p2`. This algorithm is efficient for rasterizing lines on a grid.\n\n4. **Image Update**: We iterate over the calculated line points and update the image with the specified color.\n\n5. **Return**: Finally, we return the modified image with the drawn line.",
    "prompt": "Create a Python function called draw_line that draws a single line into an image. The function takes in four parameters: image (a torch.Tensor representing the input image with shape (C,H,W)), p1 (the start point [x y] of the line with shape (2, ) or (B, 2)), p2 (the end point [x y] of the line with shape (2, ) or (B, 2)), and color (the color of the line with shape (C) where C is the number of channels of the image). The function returns the image with the drawn line.\n\nEnsure that the input points p1 and p2 are 2D points with shape (2, ) or (B, 2) and have the same batch sizes. Check that the points are within the bounds of the image. The image must have 3 dimensions (C,H,W) and the color must have the same number of channels as the image.\n\nThe function calculates the coordinates of the line based on the start and end points, and then updates the image with the specified color along the line. The updated image is returned as the output.",
    "function_name": "draw_line",
    "ground_truth": "kornia/utils/draw.py",
    "test": "tests/utils/test_draw.py",
    "class": "",
    "stage": "Inference",
    "task": "",
    "data": "Image"
}