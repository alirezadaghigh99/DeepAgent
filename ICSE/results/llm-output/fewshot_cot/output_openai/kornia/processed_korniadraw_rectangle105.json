{
    "result": "To create the `draw_rectangle` function as described, we need to handle several tasks: validating input shapes, processing the color and fill options, and drawing rectangles on each image in the batch. Here's a step-by-step implementation:\n\n```python\nimport torch\n\ndef draw_rectangle(image, rectangle, color=None, fill=False):\n    \"\"\"\n    Draws rectangles on a batch of image tensors.\n\n    Args:\n        image (torch.Tensor): Tensor of shape (B, C, H, W).\n        rectangle (torch.Tensor): Tensor of shape (B, N, 4).\n        color (Optional[torch.Tensor]): Tensor specifying the color of the rectangles.\n        fill (bool): Whether to fill the rectangles. Defaults to False.\n\n    Returns:\n        torch.Tensor: The modified image tensor with rectangles drawn.\n    \"\"\"\n    # 1. Validate input shapes\n    B, C, H, W = image.shape\n    B_rect, N, num_points = rectangle.shape\n    assert B == B_rect, \"Batch size of image and rectangle tensors must match.\"\n    assert num_points == 4, \"Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).\"\n\n    # 2. Handle color input\n    if color is None:\n        # Default to white color\n        color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)\n    else:\n        # Ensure color is a tensor\n        color = torch.as_tensor(color, dtype=image.dtype, device=image.device)\n\n    # 3. Broadcast color to match the number of rectangles if necessary\n    if color.dim() == 1:\n        color = color.view(1, 1, -1).expand(B, N, -1)\n    elif color.dim() == 2:\n        color = color.view(B, N, -1)\n    elif color.dim() == 3:\n        assert color.shape == (B, N, C), \"Color tensor shape must be (B, N, C) if 3D.\"\n\n    # 4. Iterate over each image in the batch\n    for b in range(B):\n        for n in range(N):\n            x1, y1, x2, y2 = rectangle[b, n].int()\n            rect_color = color[b, n]\n\n            # 5. Draw the rectangle\n            if fill:\n                # Fill the rectangle\n                image[b, :, y1:y2, x1:x2] = rect_color.view(C, 1, 1)\n            else:\n                # Draw the borders\n                image[b, :, y1:y2, x1] = rect_color.view(C, 1)\n                image[b, :, y1:y2, x2-1] = rect_color.view(C, 1)\n                image[b, :, y1, x1:x2] = rect_color.view(C)\n                image[b, :, y2-1, x1:x2] = rect_color.view(C)\n\n    # 6. Return the modified image tensor\n    return image\n```\n\n### Explanation:\n\n1. **Input Validation**: We first check that the batch sizes of the `image` and `rectangle` tensors match and that each rectangle is defined by exactly four coordinates.\n\n2. **Color Handling**: We handle different shapes of the `color` tensor, ensuring it can be broadcasted to match the number of rectangles. If no color is provided, we default to white.\n\n3. **Rectangle Drawing**: We iterate over each image in the batch and each rectangle, drawing either filled rectangles or just the borders based on the `fill` flag.\n\n4. **In-place Modification**: The function modifies the input `image` tensor in place and returns it for convenience.",
    "prompt": "Create a Python function draw_rectangle that draws one or more rectangles on a batch of image tensors. The function accepts the following parameters:\n\nimage: A tensor of shape (B, C, H, W), where B is the batch size, C is the number of channels, H is the height, and W is the width of the images.\nrectangle: A tensor of shape (B, N, 4), where N is the number of rectangles per image, and each rectangle is defined by four coordinates (x1, y1, x2, y2) corresponding to the top-left and bottom-right corners.\ncolor: An optional tensor specifying the color of the rectangles. It can be of various shapes: (1,), (3,), (B, N, 1), or (B, N, 3). If the image has 3 channels and the color tensor has 1 channel, the color will be broadcasted.\nfill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.\nThe function modifies the input image tensor in place, drawing the specified rectangles according to the provided parameters. It also returns the modified image tensor for convenience.\n\nError Handling:\nRaise an AssertionError if the batch size of the image tensor does not match the batch size of the rectangle tensor.\nRaise an AssertionError if the number of points in the rectangle tensor is not 4.",
    "function_name": "draw_rectangle",
    "ground_truth": "kornia/utils/draw.py",
    "test": "tests/utils/test_draw.py::TestDrawRectangle",
    "class": "",
    "stage": "Inference",
    "task": "Detection",
    "data": "Image"
}