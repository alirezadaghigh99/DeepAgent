{
    "result": "To create a function that converts a quaternion to a rotation matrix, we can follow a step-by-step approach similar to the examples provided. Here's how you can implement the `quaternion_to_rotation_matrix` function:\n\n```python\nimport torch\n\ndef quaternion_to_rotation_matrix(quaternion: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Convert a quaternion to a rotation matrix.\n\n    Args:\n        quaternion (Tensor): A tensor of shape (*, 4) representing quaternions in (w, x, y, z) format.\n\n    Returns:\n        Tensor: A tensor of shape (*, 3, 3) representing the rotation matrices.\n    \"\"\"\n    # 1. Normalize the quaternion to ensure it represents a valid rotation\n    quaternion = quaternion / quaternion.norm(dim=-1, keepdim=True)\n\n    # 2. Unpack the normalized quaternion components\n    w, x, y, z = quaternion.unbind(dim=-1)\n\n    # 3. Compute the elements of the rotation matrix using the quaternion components\n    #    The formula for the rotation matrix from a quaternion is:\n    #    [[1 - 2y^2 - 2z^2, 2xy - 2zw, 2xz + 2yw],\n    #     [2xy + 2zw, 1 - 2x^2 - 2z^2, 2yz - 2xw],\n    #     [2xz - 2yw, 2yz + 2xw, 1 - 2x^2 - 2y^2]]\n    rotation_matrix = torch.stack([\n        torch.stack([1 - 2 * (y**2 + z**2), 2 * (x * y - z * w), 2 * (x * z + y * w)], dim=-1),\n        torch.stack([2 * (x * y + z * w), 1 - 2 * (x**2 + z**2), 2 * (y * z - x * w)], dim=-1),\n        torch.stack([2 * (x * z - y * w), 2 * (y * z + x * w), 1 - 2 * (x**2 + y**2)], dim=-1)\n    ], dim=-2)\n\n    # 4. Return the resulting rotation matrix\n    return rotation_matrix\n\n# Example usage\nquaternion = torch.tensor([0., 0., 0., 1.])\nrotation_matrix = quaternion_to_rotation_matrix(quaternion)\nprint(rotation_matrix)\n```\n\n### Explanation:\n\n1. **Normalization**: The quaternion is normalized to ensure it represents a valid rotation. This is done by dividing the quaternion by its norm.\n\n2. **Unpacking**: The components of the quaternion `(w, x, y, z)` are extracted using `unbind`.\n\n3. **Rotation Matrix Calculation**: The elements of the rotation matrix are computed using the standard formula for converting a quaternion to a rotation matrix.\n\n4. **Return**: The computed rotation matrix is returned.\n\nThis function can handle input tensors of shape `(*, 4)`, where `*` represents any number of leading dimensions, allowing for batch processing of multiple quaternions.",
    "prompt": "Generate a Python function called quaternion_to_rotation_matrix that converts a quaternion to a rotation matrix. The input is a tensor called quaternion containing a quaternion in (w, x, y, z) format with shape (*, 4). The output is a rotation matrix of shape (*, 3, 3). The function first normalizes the input quaternion, then unpacks its components to compute the conversion using specific mathematical operations. Finally, it reshapes the output matrix and returns it. An example usage of the function is provided in the code snippet. >>> quaternion = tensor((0., 0., 0., 1.))\n        >>> quaternion_to_rotation_matrix(quaternion)\n        tensor([[-1.,  0.,  0.],\n                [ 0., -1.,  0.],\n                [ 0.,  0.,  1.]])",
    "function_name": "quaternion_to_rotation_matrix",
    "ground_truth": "kornia/geometry/conversions.py",
    "test": "tests/geometry/test_conversions.py::TestQuaternionToRotationMatrix",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Image"
}