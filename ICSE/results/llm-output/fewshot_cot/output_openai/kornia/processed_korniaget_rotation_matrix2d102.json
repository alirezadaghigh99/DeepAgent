{
    "result": "To create a function `get_rotation_matrix2d` that calculates an affine matrix for 2D rotation, we can follow a step-by-step approach similar to the examples provided. Here's how you can implement this function:\n\n```python\nimport torch\n\ndef get_rotation_matrix2d(center: torch.Tensor, angle: torch.Tensor, scale: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Calculate the affine matrix for 2D rotation.\n\n    Args:\n        center (Tensor): Center of rotation in the source image with shape (B, 2).\n        angle (Tensor): Rotation angle in degrees with shape (B).\n        scale (Tensor): Scale factor for x, y scaling with shape (B, 2).\n\n    Returns:\n        Tensor: Affine matrix of 2D rotation with shape (B, 2, 3).\n    \"\"\"\n    # 1. Ensure inputs are of type Tensor and have correct shapes\n    if not (center.ndim == 2 and center.shape[1] == 2):\n        raise ValueError(\"center must have shape (B, 2)\")\n    if not (angle.ndim == 1):\n        raise ValueError(\"angle must have shape (B,)\")\n    if not (scale.ndim == 2 and scale.shape[1] == 2):\n        raise ValueError(\"scale must have shape (B, 2)\")\n\n    # 2. Convert angles from degrees to radians\n    angle_rad = torch.deg2rad(angle)\n\n    # 3. Compute cosine and sine of the angles\n    cos_a = torch.cos(angle_rad)\n    sin_a = torch.sin(angle_rad)\n\n    # 4. Prepare the rotation matrix components\n    #    The rotation matrix is:\n    #    [ cos_a * scale_x, -sin_a * scale_y, tx ]\n    #    [ sin_a * scale_x,  cos_a * scale_y, ty ]\n    scale_x, scale_y = scale[:, 0], scale[:, 1]\n    tx = center[:, 0] - center[:, 0] * cos_a * scale_x + center[:, 1] * sin_a * scale_y\n    ty = center[:, 1] - center[:, 0] * sin_a * scale_x - center[:, 1] * cos_a * scale_y\n\n    # 5. Construct the affine matrix\n    rotation_matrix = torch.stack([\n        cos_a * scale_x, -sin_a * scale_y, tx,\n        sin_a * scale_x,  cos_a * scale_y, ty\n    ], dim=-1).reshape(-1, 2, 3)\n\n    # 6. Return the affine matrix\n    return rotation_matrix\n\n# Example usage\ncenter = torch.tensor([[50.0, 50.0], [30.0, 30.0]])\nangle = torch.tensor([45.0, 90.0])\nscale = torch.tensor([[1.0, 1.0], [0.5, 0.5]])\n\nrotation_matrices = get_rotation_matrix2d(center, angle, scale)\nprint(rotation_matrices)\n```\n\n### Explanation:\n\n1. **Input Validation**: The function first checks that the inputs are tensors with the expected shapes. This ensures that the function can handle the inputs correctly.\n\n2. **Angle Conversion**: The rotation angles are converted from degrees to radians since trigonometric functions in PyTorch use radians.\n\n3. **Trigonometric Calculations**: The cosine and sine of the angles are calculated, which are essential for constructing the rotation matrix.\n\n4. **Matrix Construction**: The affine transformation matrix is constructed using the calculated cosine and sine values, along with the scale factors and translation components to keep the rotation center fixed.\n\n5. **Output**: The function returns the affine transformation matrices for each batch of inputs.\n\nThis function can be used in image processing tasks where you need to apply a rotation transformation to images, often in conjunction with functions like `warp_affine`.",
    "prompt": "Generate a Python function called get_rotation_matrix2d that calculates an affine matrix of 2D rotation. The function takes three inputs: center (center of the rotation in the source image with shape (B, 2)), angle (rotation angle in degrees with shape (B)), and scale (scale factor for x, y scaling with shape (B, 2)). \n\nThe function returns the affine matrix of 2D rotation with shape (B, 2, 3). The rotation matrix is calculated based on the provided center, angle, and scale values. The transformation maps the rotation center to itself, but adjustments can be made if needed.\n\nEnsure that the inputs are of type Tensor and have the correct shapes before performing the calculations. The function also includes an example usage with sample input values. This function is often used in conjunction with the warp_affine function.",
    "function_name": "get_rotation_matrix2d",
    "ground_truth": "kornia/geometry/transform/imgwarp.py",
    "test": "tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Classification",
    "data": "Image"
}