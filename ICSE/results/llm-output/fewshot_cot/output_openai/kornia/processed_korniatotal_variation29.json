{
    "result": "To create a function called `total_variation` that computes the Total Variation of an input image tensor, we can follow a step-by-step approach similar to the examples provided. Here's how you can implement this function:\n\n```python\nimport torch\n\ndef total_variation(image: torch.Tensor, reduction: str = 'sum') -> torch.Tensor:\n    \"\"\"\n    Compute the Total Variation of an input image tensor.\n\n    Args:\n        image (Tensor): Input image tensor with shape (*, H, W).\n        reduction (str): Specifies the reduction method: 'sum' or 'mean'.\n                         Defaults to 'sum'.\n\n    Returns:\n        Tensor: A tensor with shape (*) representing the Total Variation.\n    \"\"\"\n    # 1. Validate the input tensor dimensions\n    if image.dim() < 2:\n        raise ValueError(\"Input image tensor must have at least 2 dimensions (H, W).\")\n\n    # 2. Validate the reduction parameter\n    if reduction not in {'sum', 'mean'}:\n        raise ValueError(\"Reduction must be either 'sum' or 'mean'.\")\n\n    # 3. Compute the absolute differences along the height dimension\n    diff_h = torch.abs(image[..., 1:, :] - image[..., :-1, :])\n\n    # 4. Compute the absolute differences along the width dimension\n    diff_w = torch.abs(image[..., :, 1:] - image[..., :, :-1])\n\n    # 5. Sum the differences to get the total variation\n    total_var = diff_h.sum(dim=(-2, -1)) + diff_w.sum(dim=(-2, -1))\n\n    # 6. Apply the specified reduction method\n    if reduction == 'mean':\n        total_var = total_var / (image.size(-2) * image.size(-1))\n\n    # 7. Return the total variation tensor\n    return total_var\n```\n\n### Explanation:\n\n1. **Input Validation**: The function first checks if the input tensor has at least two dimensions (height and width). It also checks if the `reduction` parameter is either `'sum'` or `'mean'`.\n\n2. **Compute Differences**: The function calculates the absolute differences between neighboring pixels along the height and width dimensions.\n\n3. **Total Variation Calculation**: The total variation is computed by summing these differences.\n\n4. **Reduction**: Depending on the `reduction` parameter, the function either sums or averages the total variation values.\n\n5. **Return**: Finally, the function returns the total variation tensor.\n\nThis function is designed to handle image tensors with arbitrary leading dimensions, allowing it to process batches of images or other higher-dimensional data structures.",
    "prompt": "Generate a Python function called total_variation that computes the Total Variation of an input image tensor. The function takes in an image tensor with shape (*, H, W) and an optional reduction parameter that specifies whether to return the sum or mean of the output. The function returns a tensor with shape (*). The Total Variation is calculated by taking the absolute differences of neighboring pixels in the image tensor along the height and width dimensions. The output is then either summed or averaged based on the reduction parameter. The function includes error checking for input types and reduction options.",
    "function_name": "total_variation",
    "ground_truth": "kornia/losses/total_variation.py",
    "test": "tests/losses/test_total_variation.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Segmentation",
    "data": "Image"
}