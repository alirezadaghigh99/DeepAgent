{
    "result": "To create the `invert` function as described, we can follow a step-by-step approach similar to the examples provided. Here's how you can implement it:\n\n```python\nimport torch\n\ndef invert(image: torch.Tensor, max_value: Optional[torch.Tensor] = None) -> torch.Tensor:\n    \"\"\"\n    Invert the values of an input image tensor by its maximum value.\n\n    Args:\n        image (torch.Tensor): The input image tensor with arbitrary shape.\n        max_value (torch.Tensor, optional): The maximum value tensor. It should have a shape\n                                            that matches the input tensor shape or can work\n                                            with broadcasting. Defaults to None.\n\n    Returns:\n        torch.Tensor: The inverted image tensor with the same shape as the input image tensor.\n\n    Raises:\n        AssertionError: If the input image or maximum value is not a tensor.\n    \"\"\"\n    # 1. Ensure the input image is a tensor\n    assert isinstance(image, torch.Tensor), \"The input image must be a torch.Tensor.\"\n\n    # 2. If max_value is provided, ensure it is a tensor\n    if max_value is not None:\n        assert isinstance(max_value, torch.Tensor), \"The max_value must be a torch.Tensor.\"\n\n    # 3. If max_value is not provided, use the maximum value from the image tensor\n    if max_value is None:\n        max_value = image.max()\n\n    # 4. Invert the image by subtracting it from the max_value\n    inverted_image = max_value - image\n\n    # 5. Return the inverted image tensor\n    return inverted_image\n\n# Example usage:\n# img = torch.rand(1, 2, 4, 4)\n# print(invert(img).shape)  # torch.Size([1, 2, 4, 4])\n\n# img = 255. * torch.rand(1, 2, 3, 4, 4)\n# print(invert(img, torch.as_tensor(255.)).shape)  # torch.Size([1, 2, 3, 4, 4])\n\n# img = torch.rand(1, 3, 4, 4)\n# print(invert(img, torch.as_tensor([[[[1.]]]])).shape)  # torch.Size([1, 3, 4, 4])\n```\n\n### Explanation:\n\n1. **Assertions**: We start by asserting that both `image` and `max_value` (if provided) are instances of `torch.Tensor`. This ensures that the inputs are valid tensors.\n\n2. **Default Maximum Value**: If `max_value` is not provided, we use the maximum value from the `image` tensor itself. This is done using `image.max()`.\n\n3. **Inversion**: The core operation is to subtract the `image` tensor from the `max_value` tensor. This effectively inverts the image values.\n\n4. **Return**: Finally, the function returns the inverted image tensor, which has the same shape as the input image tensor.",
    "prompt": "Generate a Python function called invert that takes in an input image tensor and an optional maximum value tensor, and returns the inverted values of the input image tensor by its maximum value. The input image tensor should have an arbitrary shape, while the maximum value tensor should have a shape that matches the input tensor shape or can work with broadcasting. The function should raise an AssertionError if the input image or maximum value is not a tensor. The output should be a tensor with the same shape as the input image tensor. >>> img = torch.rand(1, 2, 4, 4)\n        >>> invert(img).shape\n        torch.Size([1, 2, 4, 4])\n\n        >>> img = 255. * torch.rand(1, 2, 3, 4, 4)\n        >>> invert(img, torch.as_tensor(255.)).shape\n        torch.Size([1, 2, 3, 4, 4])\n\n        >>> img = torch.rand(1, 3, 4, 4)\n        >>> invert(img, torch.as_tensor([[[[1.]]]])).shape\n        torch.Size([1, 3, 4, 4])",
    "function_name": "invert",
    "ground_truth": "kornia/enhance/adjust.py",
    "test": "tests/geometry/epipolar/test_fundamental.py::TestFindFundamental",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}