{
    "result": "To create the `distort_points_kannala_brandt` function, we need to implement the Kannala-Brandt distortion model. This model is commonly used in computer vision to model lens distortion. The function will take two inputs: `projected_points_in_camera_z1_plane` and `params`, and it will return the distorted points.\n\nHere's a step-by-step implementation of the function:\n\n```python\nimport torch\n\ndef distort_points_kannala_brandt(projected_points_in_camera_z1_plane: torch.Tensor, params: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Distorts points from the canonical z=1 plane into the camera frame using the Kannala-Brandt model.\n\n    Args:\n        projected_points_in_camera_z1_plane (Tensor): Points to distort with shape (..., 2).\n        params (Tensor): Parameters of the Kannala-Brandt distortion model with shape (..., 8).\n\n    Returns:\n        Tensor: Distorted points with shape (..., 2).\n    \"\"\"\n    # 1. Extract the parameters from the params tensor\n    fx, fy, cx, cy, k1, k2, k3, k4 = params\n\n    # 2. Extract the x and y coordinates from the input points\n    x, y = projected_points_in_camera_z1_plane[..., 0], projected_points_in_camera_z1_plane[..., 1]\n\n    # 3. Compute the radial distance from the center\n    r = torch.sqrt(x**2 + y**2)\n\n    # 4. Compute the distortion factor using the Kannala-Brandt model\n    theta = torch.atan(r)\n    theta_d = theta * (1 + k1 * theta**2 + k2 * theta**4 + k3 * theta**6 + k4 * theta**8)\n\n    # 5. Avoid division by zero by using a small epsilon value\n    epsilon = 1e-8\n    scale = torch.where(r > epsilon, theta_d / r, torch.tensor(1.0, dtype=r.dtype))\n\n    # 6. Apply the distortion to the x and y coordinates\n    x_distorted = fx * scale * x + cx\n    y_distorted = fy * scale * y + cy\n\n    # 7. Stack the distorted x and y coordinates to form the output tensor\n    distorted_points = torch.stack((x_distorted, y_distorted), dim=-1)\n\n    return distorted_points\n\n# Example usage\npoints = torch.tensor([319.5, 239.5])  # center of a 640x480 image\nparams = torch.tensor([1000.0, 1000.0, 320.0, 280.0, 0.1, 0.01, 0.001, 0.0001])\ndistorted_points = distort_points_kannala_brandt(points, params)\nprint(distorted_points)\n```\n\n### Explanation:\n\n1. **Parameter Extraction**: The function extracts the intrinsic camera parameters (`fx`, `fy`, `cx`, `cy`) and the distortion coefficients (`k1`, `k2`, `k3`, `k4`) from the `params` tensor.\n\n2. **Radial Distance Calculation**: It calculates the radial distance `r` from the center of the image for each point.\n\n3. **Distortion Factor Calculation**: The distortion factor is computed using the Kannala-Brandt model, which involves calculating the angle `theta` and its distorted version `theta_d`.\n\n4. **Avoiding Division by Zero**: A small epsilon value is used to prevent division by zero when calculating the scale factor.\n\n5. **Distortion Application**: The distortion is applied to the x and y coordinates, and the distorted coordinates are calculated.\n\n6. **Output Construction**: The distorted x and y coordinates are stacked to form the output tensor.\n\nThis function should correctly distort the input points according to the Kannala-Brandt model.",
    "prompt": "Generate a Python function called distort_points_kannala_brandt that distorts one or more points from the canonical z=1 plane into the camera frame using the Kannala-Brandt model. The function takes two inputs: projected_points_in_camera_z1_plane, a Tensor representing the points to distort with shape (..., 2), and params, a Tensor representing the parameters of the Kannala-Brandt distortion model with shape (..., 8). The function returns a Tensor representing the distorted points with shape (..., 2). \n\nFor example:\n```python\npoints = torch.tensor([319.5, 239.5])  # center of a 640x480 image\nparams = torch.tensor([1000.0, 1000.0, 320.0, 280.0, 0.1, 0.01, 0.001, 0.0001])\ndistort_points_kannala_brandt(points, params)\n```\nOutput:\n```\ntensor([1982.6832, 1526.3619])\n```",
    "function_name": "distort_points_kannala_brandt",
    "ground_truth": "kornia/geometry/camera/distortion_kannala_brandt.py",
    "test": "tests/geometry/camera/test_distortion.py::TestDistortionKannalaBrandt",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}