{
    "result": "To create the `tensor_to_image` function, we will follow a step-by-step approach similar to the examples provided. This function will handle the conversion of a PyTorch tensor to a NumPy array, taking into account the specified requirements. Here's how you can implement it:\n\n```python\nimport torch\nimport numpy as np\n\ndef tensor_to_image(tensor: torch.Tensor, keepdim: bool = True, force_contiguous: bool = False) -> np.ndarray:\n    \"\"\"\n    Convert a PyTorch tensor image to a NumPy array image.\n\n    Args:\n        tensor (torch.Tensor): Input tensor of shape (H, W), (C, H, W), or (B, C, H, W).\n        keepdim (bool): Whether to retain the batch dimension. Defaults to True.\n        force_contiguous (bool): Whether to make the tensor contiguous. Defaults to False.\n\n    Returns:\n        np.ndarray: Converted image with shape (H, W), (H, W, C), or (B, H, W, C).\n\n    Raises:\n        TypeError: If the input is not a Tensor.\n        ValueError: If the input tensor's dimensions are not 2, 3, or 4.\n    \"\"\"\n    # 1. Check if the input is a PyTorch tensor\n    if not isinstance(tensor, torch.Tensor):\n        raise TypeError(\"Input must be a PyTorch tensor.\")\n\n    # 2. Check the number of dimensions of the tensor\n    if tensor.dim() not in {2, 3, 4}:\n        raise ValueError(\"Input tensor must have 2, 3, or 4 dimensions.\")\n\n    # 3. Move the tensor to CPU if it's on GPU\n    if tensor.is_cuda:\n        tensor = tensor.cpu()\n\n    # 4. Make the tensor contiguous if required\n    if force_contiguous:\n        tensor = tensor.contiguous()\n\n    # 5. Convert the tensor to a NumPy array\n    np_image = tensor.numpy()\n\n    # 6. Handle the shape transformation based on the number of dimensions\n    if tensor.dim() == 2:\n        # Shape (H, W)\n        return np_image\n    elif tensor.dim() == 3:\n        # Shape (C, H, W) -> (H, W, C)\n        return np_image.transpose(1, 2, 0)\n    elif tensor.dim() == 4:\n        # Shape (B, C, H, W) -> (B, H, W, C)\n        np_image = np_image.transpose(0, 2, 3, 1)\n        if not keepdim:\n            # Optionally squeeze the batch dimension if keepdim is False\n            np_image = np_image.squeeze(axis=0)\n        return np_image\n\n# Example usage:\n# tensor = torch.rand(3, 256, 256)  # Example tensor\n# image = tensor_to_image(tensor, keepdim=False, force_contiguous=True)\n```\n\n### Explanation:\n\n1. **Type Checking**: We first check if the input is a PyTorch tensor. If not, a `TypeError` is raised.\n\n2. **Dimension Checking**: We ensure the tensor has 2, 3, or 4 dimensions. If not, a `ValueError` is raised.\n\n3. **Device Handling**: If the tensor is on a GPU, we move it to the CPU.\n\n4. **Contiguity**: If `force_contiguous` is `True`, we make the tensor contiguous.\n\n5. **Conversion**: We convert the tensor to a NumPy array using `numpy()`.\n\n6. **Shape Transformation**: Depending on the number of dimensions, we adjust the shape of the NumPy array to match the expected output format.\n\nThis function should handle the conversion of PyTorch tensors to NumPy arrays while respecting the specified options for dimension retention and contiguity.",
    "prompt": "Create a Python function `tensor_to_image` that converts a PyTorch tensor image to a NumPy array image. The function should:\n\n- Accept a tensor as input, which can have one of the following shapes: `(H, W)`, `(C, H, W)`, or `(B, C, H, W)`.\n- Convert the tensor to a NumPy array, handling cases where the tensor is in GPU memory by copying it back to CPU.\n- Optionally, squeeze the dimensions if `keepdim` is `False`.\n- Ensure the tensor is contiguous if `force_contiguous` is `True`.\n- Return the converted image with the appropriate shape: `(H, W)`, `(H, W, C)`, or `(B, H, W, C)`.\n\nInput types:\n- `tensor`: A PyTorch tensor of shape `(H, W)`, `(C, H, W)`, or `(B, C, H, W)`.\n- `keepdim`: A boolean indicating whether to retain the batch dimension.\n- `force_contiguous`: A boolean indicating whether to make the tensor contiguous.\n\nOutput:\n- Returns a NumPy array representing the image with the shape `(H, W)`, `(H, W, C)`, or `(B, H, W, C)`.\n\nErrors:\n- Raise a `TypeError` if the input is not a Tensor.\n- Raise a `ValueError` if the input tensor's dimensions are not 2, 3, or 4.",
    "function_name": "tensor_to_image",
    "ground_truth": "kornia/utils/image.py",
    "test": "tests/utils/test_image_utils.py::test_tensor_to_image",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}