{
    "result": "To create a function `rgb_to_rgba` that converts an RGB image to RGBA, we can follow a step-by-step approach similar to the examples provided. Here's how you can implement this function:\n\n```python\nimport torch\n\ndef rgb_to_rgba(image: torch.Tensor, alpha_val: Union[float, torch.Tensor]) -> torch.Tensor:\n    \"\"\"\n    Convert an image from RGB to RGBA.\n\n    Args:\n        image (torch.Tensor): RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.\n        alpha_val (float, torch.Tensor): A float number for the alpha value or a tensor\n          of shape :math:`(*,1,H,W)`.\n\n    Returns:\n        torch.Tensor: RGBA version of the image with shape :math:`(*,4,H,W)`.\n\n    .. note:: The current functionality is NOT supported by Torchscript.\n    \"\"\"\n    # 1. Check that the input image has 3 channels (RGB)\n    if image.shape[-3] != 3:\n        raise ValueError(\"Input image must have 3 channels (RGB).\")\n\n    # 2. Determine the shape of the input image\n    *batch_dims, _, height, width = image.shape\n\n    # 3. If alpha_val is a float, create a tensor with the same batch dimensions and spatial size\n    if isinstance(alpha_val, float):\n        alpha_channel = torch.full((*batch_dims, 1, height, width), alpha_val, dtype=image.dtype, device=image.device)\n    elif isinstance(alpha_val, torch.Tensor):\n        # 4. If alpha_val is a tensor, ensure it has the correct shape\n        if alpha_val.shape != (*batch_dims, 1, height, width):\n            raise ValueError(\"Alpha tensor must have shape (*, 1, H, W) matching the input image.\")\n        alpha_channel = alpha_val\n    else:\n        raise TypeError(\"alpha_val must be a float or a torch.Tensor.\")\n\n    # 5. Concatenate the RGB image with the alpha channel to form an RGBA image\n    rgba_image = torch.cat((image, alpha_channel), dim=-3)\n\n    # 6. Return the RGBA image\n    return rgba_image\n\n# Example usage:\n# input = torch.rand(2, 3, 4, 5)\n# output = rgb_to_rgba(input, 1.0)  # Output shape will be (2, 4, 4, 5)\n```\n\n### Explanation:\n\n1. **Input Validation**: The function first checks if the input image has 3 channels, which is necessary for an RGB image.\n\n2. **Shape Extraction**: It extracts the batch dimensions and spatial dimensions (height and width) from the input image.\n\n3. **Alpha Channel Creation**: If `alpha_val` is a float, it creates a tensor filled with this value, matching the batch and spatial dimensions of the input image. If `alpha_val` is a tensor, it checks that its shape matches the expected shape.\n\n4. **Concatenation**: The function concatenates the RGB image with the alpha channel along the channel dimension to form an RGBA image.\n\n5. **Return**: Finally, it returns the RGBA image.",
    "prompt": "Generate a Python function called rgb_to_rgba that Convert an image from RGB to RGBA.\n\n    Args:\n        image: RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.\n        alpha_val (float, torch.Tensor): A float number for the alpha value or a tensor\n          of shape :math:`(*,1,H,W)`.\n\n    Returns:\n        RGBA version of the image with shape :math:`(*,4,H,W)`.\n\n    .. note:: The current functionality is NOT supported by Torchscript.\n\n    Example:\n        >>> input = torch.rand(2, 3, 4, 5)\n        >>> output = rgb_to_rgba(input, 1.) # 2x4x4x5",
    "function_name": "rgb_to_rgba",
    "ground_truth": "kornia/color/rgb.py",
    "test": "tests/color/test_rgb.py::TestRgbToRgba",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}