{
    "result": "To create the `set_laf_orientation` function, we need to adjust the orientation of the Local Affine Frames (LAFs) based on the given angles. The LAFs are represented as tensors of shape (B, N, 2, 3), where B is the batch size, N is the number of LAFs, and each LAF is a 2x3 matrix. The angles are provided in degrees and need to be converted to radians for trigonometric operations. Here's a step-by-step implementation:\n\n```python\nimport torch\n\ndef set_laf_orientation(LAF: torch.Tensor, angles_degrees: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Adjusts the orientation of Local Affine Frames (LAFs) based on specified angles.\n\n    Args:\n        LAF (torch.Tensor): Tensor of shape (B, N, 2, 3) representing the LAFs.\n        angles_degrees (torch.Tensor): Tensor of shape (B, N, 1) representing the angles in degrees.\n\n    Returns:\n        torch.Tensor: Tensor of shape (B, N, 2, 3) representing the oriented LAFs.\n    \"\"\"\n    # 1. Convert angles from degrees to radians\n    angles_radians = torch.deg2rad(angles_degrees.squeeze(-1))\n\n    # 2. Compute the cosine and sine of the angles\n    cos_angles = torch.cos(angles_radians)\n    sin_angles = torch.sin(angles_radians)\n\n    # 3. Create rotation matrices for each angle\n    rotation_matrices = torch.stack([\n        torch.stack([cos_angles, -sin_angles], dim=-1),\n        torch.stack([sin_angles, cos_angles], dim=-1)\n    ], dim=-2)\n\n    # 4. Apply the rotation to the LAFs\n    #    The rotation is applied to the first two columns of each LAF\n    oriented_LAF = LAF.clone()\n    oriented_LAF[..., :2] = torch.matmul(rotation_matrices, LAF[..., :2])\n\n    # 5. Return the oriented LAFs\n    return oriented_LAF\n```\n\n### Explanation:\n\n1. **Convert Angles to Radians**: Since trigonometric functions in PyTorch use radians, we first convert the angles from degrees to radians using `torch.deg2rad`.\n\n2. **Compute Cosine and Sine**: We calculate the cosine and sine of the angles, which are needed to construct the rotation matrices.\n\n3. **Create Rotation Matrices**: For each angle, we create a 2x2 rotation matrix. The rotation matrix for an angle \u03b8 is:\n   \\[\n   \\begin{bmatrix}\n   \\cos(\\theta) & -\\sin(\\theta) \\\\\n   \\sin(\\theta) & \\cos(\\theta)\n   \\end{bmatrix}\n   \\]\n\n4. **Apply Rotation**: We apply the rotation matrices to the first two columns of each LAF. This is done using matrix multiplication.\n\n5. **Return Oriented LAFs**: Finally, we return the LAFs with the updated orientation.\n\nThis function assumes that the input tensors are correctly shaped and that the angles are provided in degrees. Adjustments may be needed if the input format changes.",
    "prompt": "Generate a Python function called set_laf_orientation that changes the orientation of the Local Affine Frames (LAFs). The function takes in two arguments: LAF, a tensor of shape (B, N, 2, 3) representing the LAFs, and angles_degrees, a tensor of shape (B, N, 1) representing the angles in degrees. The function returns a tensor of shape (B, N, 2, 3) representing the LAFs oriented with the specified angles. T",
    "function_name": "set_laf_orientation",
    "ground_truth": "kornia/feature/laf.py",
    "test": "tests/feature/test_laf.py::TestSetLAFOri",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Detection",
    "data": "Image"
}