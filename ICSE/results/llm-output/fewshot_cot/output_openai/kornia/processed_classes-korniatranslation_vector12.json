{
    "result": "To generate the `translation_vector` function for the `PinholeCamera` class, we need to extract the translation component from the extrinsics matrix. The extrinsics matrix typically has a shape of `(B, 4, 4)` for a batch of `B` cameras, where the translation vector is located in the last column of the matrix, excluding the last row. Here's how you can implement the `translation_vector` function:\n\n```python\nimport torch\nfrom torch import Tensor\n\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n\n    def translation_vector(self) -> Tensor:\n        \"\"\"\n        Extracts the translation vector from the extrinsics matrix.\n\n        Returns:\n            Tensor: A tensor of shape (B, 3, 1) representing the translation vectors.\n        \"\"\"\n        # 1. Extract the translation component from the extrinsics matrix\n        #    The translation vector is the last column of the first three rows.\n        translation = self._extrinsics[:, :3, 3]\n\n        # 2. Reshape the translation vector to have shape (B, 3, 1)\n        translation = translation.unsqueeze(-1)\n\n        # 3. Return the translation vector\n        return translation\n```\n\n### Explanation:\n\n1. **Extract the Translation Component**: The translation vector is located in the last column of the first three rows of the extrinsics matrix. We use slicing to extract this part: `self._extrinsics[:, :3, 3]`.\n\n2. **Reshape the Translation Vector**: The extracted translation vector has a shape of `(B, 3)`. We use `unsqueeze(-1)` to add an additional dimension, resulting in a shape of `(B, 3, 1)`.\n\n3. **Return the Translation Vector**: Finally, we return the reshaped translation vector.",
    "prompt": "Generate the `translation_vector` function for the following class to return the translation vector from the extrinsics matrix. The function should take `self` as input and return a tensor with shape `(B, 3, 1)`.\n\n```python\nclass PinholeCamera:\n    def __init__(self, intrinsics: Tensor, extrinsics: Tensor, height: Tensor, width: Tensor) -> None:\n        self.height: Tensor = height\n        self.width: Tensor = width\n        self._intrinsics: Tensor = intrinsics\n        self._extrinsics: Tensor = extrinsics\n```",
    "function_name": "translation_vector",
    "ground_truth": "kornia/geometry/camera/pinhole.py",
    "test": "tests/geometry/camera/test_pinhole.py",
    "class": "PinholeCamera",
    "stage": "Image",
    "task": "",
    "data": "Inference"
}