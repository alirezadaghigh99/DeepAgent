{
    "result": "To create a Python function called `deg2rad` that converts angles from degrees to radians, you can follow these steps. This function will take a tensor as input and return a tensor of the same shape with the angles converted to radians. Additionally, it will check if the input is a tensor and raise a `TypeError` if it is not.\n\nHere's how you can implement this function:\n\n```python\nimport torch\nfrom torch import Tensor\n\ndef deg2rad(tensor: Tensor) -> Tensor:\n    \"\"\"\n    Convert angles from degrees to radians.\n\n    Args:\n        tensor (Tensor): Tensor of arbitrary shape containing angles in degrees.\n\n    Returns:\n        Tensor: Tensor with the same shape as input, with angles converted to radians.\n    \n    Raises:\n        TypeError: If the input is not a Tensor.\n    \"\"\"\n    # 1. Check if the input is a Tensor\n    if not isinstance(tensor, Tensor):\n        raise TypeError(f\"Input type is not a Tensor. Got {type(tensor)}\")\n\n    # 2. Convert degrees to radians using the formula: radians = degrees * (\u03c0 / 180)\n    radians_tensor = tensor * (torch.pi / 180)\n\n    # 3. Return the resulting tensor with angles in radians\n    return radians_tensor\n```\n\n### Explanation:\n\n1. **Import Statements**: We import `torch` and `Tensor` from the PyTorch library to handle tensor operations.\n\n2. **Function Definition**: The function `deg2rad` is defined to take a `Tensor` as input and return a `Tensor`.\n\n3. **Type Check**: The function checks if the input is an instance of `Tensor`. If not, it raises a `TypeError` with an appropriate message.\n\n4. **Conversion Formula**: The conversion from degrees to radians is done using the formula \\( \\text{radians} = \\text{degrees} \\times \\left(\\frac{\\pi}{180}\\right) \\).\n\n5. **Return Statement**: The function returns the tensor with angles converted to radians, maintaining the same shape as the input tensor.",
    "prompt": "Generate a Python function called deg2rad Function that converts angles from degrees to radians.\n\n    Args:\n        tensor: Tensor of arbitrary shape.\n\n    Returns:\n        tensor with same shape as input.\nif not isinstance(tensor, Tensor):\n        raise TypeError(f\"Input type is not a Tensor. Got {type(tensor)}\")",
    "function_name": "deg2rad",
    "ground_truth": "kornia/geometry/conversions.py#L83",
    "test": "tests/geometry/test_conversions.py::TestRadDegConversions::test_deg2rad_gradcheck",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": ""
}