{
    "result": "To create the `convert_points_from_homogeneous` function, we will follow a step-by-step approach similar to the examples provided. Here's how you can implement this function:\n\n```python\nimport torch\n\ndef convert_points_from_homogeneous(points: torch.Tensor, eps: float = 1e-10) -> torch.Tensor:\n    \"\"\"\n    Convert points from homogeneous to Euclidean space.\n\n    Args:\n        points (torch.Tensor): A tensor of shape (B, N, D) representing points in homogeneous coordinates.\n        eps (float, optional): A small value to avoid division by zero. Defaults to 1e-10.\n\n    Returns:\n        torch.Tensor: A tensor of shape (B, N, D-1) representing the points in Euclidean space.\n\n    Raises:\n        TypeError: If the input is not a tensor.\n        ValueError: If the input tensor has fewer than two dimensions.\n    \"\"\"\n    # 1. Check if the input is a tensor\n    if not isinstance(points, torch.Tensor):\n        raise TypeError(\"Input must be a torch.Tensor\")\n\n    # 2. Check if the input tensor has at least two dimensions\n    if points.dim() < 2:\n        raise ValueError(\"Input tensor must have at least two dimensions\")\n\n    # 3. Extract the last dimension (homogeneous coordinate) for division\n    last_coord = points[..., -1]\n\n    # 4. Avoid division by zero by adding a small epsilon value\n    last_coord = last_coord.clamp(min=eps)\n\n    # 5. Perform the division to convert to Euclidean coordinates\n    euclidean_points = points[..., :-1] / last_coord.unsqueeze(-1)\n\n    # 6. Return the resulting Euclidean points\n    return euclidean_points\n```\n\n### Explanation:\n\n1. **Type Checking**: We first check if the input `points` is a `torch.Tensor`. If not, a `TypeError` is raised.\n\n2. **Dimensionality Check**: We ensure that the input tensor has at least two dimensions. If not, a `ValueError` is raised.\n\n3. **Extract Last Coordinate**: The last coordinate in the homogeneous representation is used for division to convert to Euclidean space.\n\n4. **Avoid Division by Zero**: We use the `clamp` method to ensure that the last coordinate is not zero by adding a small epsilon value.\n\n5. **Convert to Euclidean**: We divide the first `D-1` dimensions by the last coordinate to get the Euclidean coordinates.\n\n6. **Return Result**: The function returns the Euclidean coordinates as a tensor of shape `(B, N, D-1)`.",
    "prompt": "Create a function `convert_points_from_homogeneous` that converts points from homogeneous to Euclidean space. The function takes a tensor `points` with shape `(B, N, D)` and an optional `eps` parameter to avoid division by zero. It returns a tensor of shape `(B, N, D-1)` representing the points in Euclidean space. A `TypeError` is raised if the input is not a tensor, and a `ValueError` is raised if the input tensor has fewer than two dimensions.",
    "function_name": "convert_points_from_homogeneous",
    "ground_truth": "kornia/geometry/conversions.py",
    "test": "tests/geometry/test_conversions.py::TestConvertPointsFromHomogeneous",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Detection",
    "data": "Image"
}