{
    "result": "To create the `unproject_points_orthographic` function, we need to combine the `points_in_camera` and `extension` tensors to form a new tensor with shape `(..., 3)`. This involves concatenating the `extension` tensor as the third dimension to the `points_in_camera` tensor. Here's how you can implement this function:\n\n```python\nimport torch\n\ndef unproject_points_orthographic(points_in_camera: torch.Tensor, extension: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Unprojects points from the canonical z=1 plane into the camera frame.\n\n    Args:\n        points_in_camera (Tensor): A tensor of shape (..., 2) representing the points to unproject.\n        extension (Tensor): A tensor of shape (..., 1) representing the extension of the points.\n\n    Returns:\n        Tensor: A tensor of shape (..., 3) representing the unprojected points.\n    \"\"\"\n    # 1. Concatenate the points_in_camera and extension tensors along the last dimension\n    unprojected_points = torch.cat((points_in_camera, extension), dim=-1)\n    \n    # 2. Return the resulting tensor\n    return unprojected_points\n\n# Example usage\npoints = torch.tensor([1., 2.])\nextension = torch.tensor([3.])\nresult = unproject_points_orthographic(points, extension)\nprint(result)  # Output: tensor([1., 2., 3.])\n```\n\n### Explanation:\n\n1. **Concatenation**: The function uses `torch.cat` to concatenate the `points_in_camera` and `extension` tensors along the last dimension (`dim=-1`). This effectively appends the `extension` value as the third coordinate for each point in `points_in_camera`.\n\n2. **Return**: The function returns the concatenated tensor, which now has the shape `(..., 3)`, representing the unprojected points in the camera frame.\n\nThis implementation assumes that the `points_in_camera` and `extension` tensors are compatible for concatenation, meaning they have the same leading dimensions.",
    "prompt": "Create a Python function called unproject_points_orthographic that unprojects points from the canonical z=1 plane into the camera frame. The function takes in two parameters: points_in_camera, a Tensor representing the points to unproject with shape (..., 2), and extension, a Tensor representing the extension of the points to unproject with shape (..., 1). The function returns a Tensor representing the unprojected points with shape (..., 3). \n\nFor example:\npoints = torch.tensor([1., 2.])\nextension = torch.tensor([3.])\nunproject_points_orthographic(points, extension) should return tensor([1., 2., 3.])",
    "function_name": "unproject_points_orthographic",
    "ground_truth": "kornia/geometry/camera/projection_orthographic.py",
    "test": "tests/geometry/camera/test_projections.py::TestProjectionOrthographic",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": "Image"
}