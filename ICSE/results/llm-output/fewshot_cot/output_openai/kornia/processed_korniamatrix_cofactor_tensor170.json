{
    "result": "To create a Python function `matrix_cofactor_tensor` that computes the cofactor matrix for a given tensor of matrices with shape `(*, 3, 3)`, we can follow a step-by-step approach. Here's how you can implement this function:\n\n```python\nimport torch\n\ndef matrix_cofactor_tensor(matrix: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Computes the cofactor matrix for a given tensor of matrices with shape (*, 3, 3).\n\n    Args:\n        matrix (torch.Tensor): A tensor of shape (*, 3, 3) representing the input matrices.\n\n    Returns:\n        torch.Tensor: A tensor containing the cofactor matrices of the input matrices.\n\n    Raises:\n        Exception: If all input matrices are singular (i.e., their determinants are zero).\n    \"\"\"\n    # 1. Check that the input tensor has the correct shape\n    if matrix.shape[-2:] != (3, 3):\n        raise ValueError(\"Input tensor must have shape (*, 3, 3)\")\n\n    # 2. Compute the determinant of each 3x3 matrix\n    dets = torch.det(matrix)\n\n    # 3. Check if all matrices are singular\n    if torch.all(dets == 0):\n        raise Exception(\"All input matrices are singular (determinants are zero)\")\n\n    # 4. Compute the cofactor matrix for each 3x3 matrix\n    #    The cofactor matrix is the transpose of the matrix of minors\n    cofactor_matrices = torch.empty_like(matrix)\n    for i in range(3):\n        for j in range(3):\n            # Compute the minor matrix by excluding the i-th row and j-th column\n            minor = matrix[..., [k for k in range(3) if k != i], :][:, :, [k for k in range(3) if k != j]]\n            # Compute the determinant of the minor matrix\n            minor_det = torch.det(minor)\n            # Compute the cofactor with the correct sign\n            cofactor_matrices[..., i, j] = ((-1) ** (i + j)) * minor_det\n\n    # 5. Return the cofactor matrices\n    return cofactor_matrices\n```\n\n### Explanation:\n\n1. **Input Validation**: The function first checks if the input tensor has the correct shape `(*, 3, 3)`. If not, it raises a `ValueError`.\n\n2. **Determinant Calculation**: It calculates the determinant of each 3x3 matrix in the tensor using `torch.det`.\n\n3. **Singularity Check**: If all determinants are zero, it raises an `Exception` indicating that all matrices are singular.\n\n4. **Cofactor Calculation**: For each element in the 3x3 matrix, it computes the minor matrix by excluding the current row and column, calculates its determinant, and applies the appropriate sign to get the cofactor.\n\n5. **Return**: Finally, it returns the tensor of cofactor matrices.\n\nThis function efficiently handles a batch of 3x3 matrices and computes their cofactor matrices, raising an exception if all matrices are singular.",
    "prompt": "Create a Python function `matrix_cofactor_tensor` that:\n\n- Computes the cofactor matrix for a given tensor of matrices with shape `(*, 3, 3)`.\n- Accepts a single parameter:\n  - `matrix`: A tensor of shape `(*, 3, 3)` representing the input matrices.\n- Returns a tensor containing the cofactor matrices of the input matrices.\n\nErrors:\n- Raises an `Exception` if all input matrices are singular (i.e., their determinants are zero).",
    "function_name": "matrix_cofactor_tensor",
    "ground_truth": "kornia/geometry/epipolar/numeric.py#L31",
    "test": "tests/geometry/epipolar/test_essential.py::TestDecomposeEssentialMatrixNoSVD",
    "class": "",
    "stage": "Model Construction",
    "task": "",
    "data": ""
}