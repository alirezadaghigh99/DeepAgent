{
    "result": "To create the `shift_rgb` function, we will follow a step-by-step approach similar to the examples provided. This function will shift the RGB channels of an image tensor based on the specified shift values for each channel. Here's how you can implement it:\n\n```python\nimport torch\n\ndef shift_rgb(image: torch.Tensor, r_shift: torch.Tensor, g_shift: torch.Tensor, b_shift: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Shift the RGB channels of an image tensor.\n\n    Args:\n        image (Tensor): Input image tensor of shape (N, C, H, W) where C is 3 (RGB).\n        r_shift (Tensor): Shift values for the red channel, shape (N).\n        g_shift (Tensor): Shift values for the green channel, shape (N).\n        b_shift (Tensor): Shift values for the blue channel, shape (N).\n\n    Returns:\n        Tensor: Modified image tensor with the same shape as input.\n    \"\"\"\n    # 1. Verify that the image is a valid tensor and a color image\n    if not isinstance(image, torch.Tensor):\n        raise TypeError(\"Image must be a torch.Tensor.\")\n    if image.shape[1] != 3:\n        raise ValueError(\"Image must have 3 channels (RGB).\")\n    \n    # 2. Verify that the shift tensors are valid\n    if not (isinstance(r_shift, torch.Tensor) and isinstance(g_shift, torch.Tensor) and isinstance(b_shift, torch.Tensor)):\n        raise TypeError(\"Shift values must be torch.Tensors.\")\n    if not (r_shift.shape[0] == g_shift.shape[0] == b_shift.shape[0] == image.shape[0]):\n        raise ValueError(\"Shift tensors must have the same batch size as the image.\")\n\n    # 3. Apply the shifts to each channel\n    # Note: Broadcasting is used to apply the shift to each pixel in the channel\n    shifted_image = image.clone()  # Clone to avoid modifying the original image\n    shifted_image[:, 0, :, :] += r_shift.view(-1, 1, 1)  # Red channel\n    shifted_image[:, 1, :, :] += g_shift.view(-1, 1, 1)  # Green channel\n    shifted_image[:, 2, :, :] += b_shift.view(-1, 1, 1)  # Blue channel\n\n    # 4. Ensure the output values are clamped between 0 and 1\n    shifted_image = torch.clamp(shifted_image, 0, 1)\n\n    # 5. Return the modified image as a tensor of the same shape\n    return shifted_image\n\n# Example usage\nimage = torch.tensor([[[[0.2000, 0.0000]],\n                       [[0.3000, 0.5000]],\n                       [[0.4000, 0.7000]]],\n                      [[[0.2000, 0.7000]],\n                       [[0.0000, 0.8000]],\n                       [[0.2000, 0.3000]]]])\nr_shift = torch.tensor([0.1000, 0.1000])\ng_shift = torch.tensor([0.3000, 0.3000])\nb_shift = torch.tensor([-0.3000, -0.3000])\n\nshifted_image = shift_rgb(image, r_shift, g_shift, b_shift)\nprint(shifted_image)\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the input image is a tensor and if it has 3 channels (indicating an RGB image). It also checks that the shift tensors are valid and have the correct shape.\n\n2. **Channel Shifting**: The function applies the specified shifts to each channel using broadcasting. This allows the shift values to be applied across all pixels in the respective channel.\n\n3. **Clamping**: After applying the shifts, the function clamps the values to ensure they remain within the valid range [0, 1].\n\n4. **Return**: The modified image tensor is returned with the same shape as the input.",
    "prompt": "Generate a Python function named shift_rgb that shifts the RGB channels of an image. The function takes the following inputs: an image tensor of shape (N, C, H, W), where C is 3 (indicating an RGB image), and three tensors r_shift, g_shift, and b_shift of shape (N) that represent the shift values for the red, green, and blue channels, respectively.\n\nThe function should:\n\nVerify that the image is a valid tensor and a color image.\nApply the shifts to each channel.\nEnsure the output values are clamped between 0 and 1.\nReturn the modified image as a tensor of the same shape.\nThe function should handle errors by checking the tensor types and confirming that the input image is an RGB image.\"\nexample of input : image = tensor([[[[0.2000, 0.0000]],\n\n         [[0.3000, 0.5000]],\n\n         [[0.4000, 0.7000]]],\n\n\n        [[[0.2000, 0.7000]],\n\n         [[0.0000, 0.8000]],\n\n         [[0.2000, 0.3000]]]]), r_shift = tensor([0.1000]), g_shift = tensor([0.3000]), b_shift = tensor([-0.3000])",
    "function_name": "shift_rgb",
    "ground_truth": "kornia/enhance/shift_rgb.py",
    "test": "tests/enhance/test_shift_rgb.py",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Classification",
    "data": "Image"
}