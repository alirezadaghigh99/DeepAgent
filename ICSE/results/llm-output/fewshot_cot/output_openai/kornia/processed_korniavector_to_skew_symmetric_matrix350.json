{
    "result": "To create a Python function called `vector_to_skew_symmetric_matrix` that converts a 3D vector into its corresponding skew-symmetric matrix, we can follow a step-by-step approach similar to the examples provided. Here's how you can implement this function:\n\n```python\nimport torch\n\ndef vector_to_skew_symmetric_matrix(v: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Convert a 3D vector into its corresponding skew-symmetric matrix.\n\n    Args:\n        v (torch.Tensor): A tensor of shape (B, 3) or (3,), representing a batch of 3D vectors or a single 3D vector.\n\n    Returns:\n        torch.Tensor: A tensor of shape (B, 3, 3) or (3, 3) containing the skew-symmetric matrices.\n\n    Raises:\n        ValueError: If the input tensor does not have the correct shape.\n    \"\"\"\n    # 1. Check the shape of the input tensor\n    if v.ndim == 1:\n        if v.shape[0] != 3:\n            raise ValueError(\"Input vector must have shape (3,) for a single 3D vector.\")\n        v = v.unsqueeze(0)  # Convert to shape (1, 3) for consistent processing\n    elif v.ndim == 2:\n        if v.shape[1] != 3:\n            raise ValueError(\"Input tensor must have shape (B, 3) for a batch of 3D vectors.\")\n    else:\n        raise ValueError(\"Input tensor must have shape (B, 3) or (3,).\")\n\n    # 2. Extract components of the vector(s)\n    x, y, z = v[:, 0], v[:, 1], v[:, 2]\n\n    # 3. Create the skew-symmetric matrix for each vector\n    zero = torch.zeros_like(x)\n    skew_matrices = torch.stack([\n        torch.stack([zero, -z, y], dim=-1),\n        torch.stack([z, zero, -x], dim=-1),\n        torch.stack([-y, x, zero], dim=-1)\n    ], dim=-2)\n\n    # 4. If the input was a single vector, return a (3, 3) matrix\n    if skew_matrices.shape[0] == 1:\n        return skew_matrices.squeeze(0)\n\n    # 5. Return the batch of skew-symmetric matrices\n    return skew_matrices\n```\n\n### Explanation:\n\n1. **Input Validation**: The function first checks the shape of the input tensor `v`. It ensures that the input is either a single 3D vector of shape `(3,)` or a batch of 3D vectors of shape `(B, 3)`. If the input does not meet these criteria, a `ValueError` is raised.\n\n2. **Component Extraction**: The components of the vector(s) are extracted for constructing the skew-symmetric matrix. This is done by indexing the tensor `v`.\n\n3. **Matrix Construction**: The skew-symmetric matrix is constructed using the components of the vector. The matrix is defined as:\n   \\[\n   \\begin{bmatrix}\n   0 & -z & y \\\\\n   z & 0 & -x \\\\\n   -y & x & 0\n   \\end{bmatrix}\n   \\]\n\n4. **Output Shape Handling**: If the input was a single vector, the resulting skew-symmetric matrix is squeezed to remove the batch dimension, resulting in a `(3, 3)` matrix. Otherwise, the function returns a batch of skew-symmetric matrices of shape `(B, 3, 3)`.\n\nThis function provides a robust and efficient way to convert 3D vectors into skew-symmetric matrices using PyTorch.",
    "prompt": "Create a Python function called vector_to_skew_symmetric_matrix that converts a 3D vector into its corresponding skew-symmetric matrix. The input should be a PyTorch Tensor of shape (B, 3) or (3,), representing a batch of 3D vectors or a single 3D vector. The function should return a PyTorch Tensor of shape (B, 3, 3) or (3, 3) containing the skew-symmetric matrices. It should include error handling to ensure the input vector has the correct shape and raise a ValueError if it does not",
    "function_name": "vector_to_skew_symmetric_matrix",
    "ground_truth": "kornia/geometry/conversions.py#L1490",
    "test": "tests/geometry/test_conversions.py::test_vector_to_skew_symmetric_matrix",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "",
    "data": "Image"
}