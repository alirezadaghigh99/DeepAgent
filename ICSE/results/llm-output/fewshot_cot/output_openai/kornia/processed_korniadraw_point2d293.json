{
    "result": "To create a function `draw_point2d` that sets specified `[x, y]` coordinates in an image tensor to a given color, we need to handle both grayscale and multi-channel images. The function should ensure that the color tensor matches the number of channels in the image. Here's a step-by-step implementation:\n\n```python\nimport torch\n\ndef draw_point2d(image: torch.Tensor, points: torch.Tensor, color: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Set specified [x, y] coordinates in an image tensor to a given color.\n\n    Args:\n        image (Tensor): Image tensor of shape (H, W) for grayscale or (C, H, W) for multi-channel.\n        points (Tensor): Tensor of shape (N, 2) containing [x, y] coordinates.\n        color (Tensor): Color tensor of shape (C,) for multi-channel or a single value for grayscale.\n\n    Returns:\n        Tensor: Modified image tensor with the points colored.\n    \"\"\"\n    # 1. Determine if the image is grayscale or multi-channel\n    if image.dim() == 2:\n        # Grayscale image\n        is_grayscale = True\n        height, width = image.shape\n    elif image.dim() == 3:\n        # Multi-channel image\n        is_grayscale = False\n        channels, height, width = image.shape\n    else:\n        raise ValueError(\"Image must be either 2D (H, W) or 3D (C, H, W).\")\n\n    # 2. Validate the color tensor\n    if is_grayscale:\n        if color.numel() != 1:\n            raise ValueError(\"Color tensor must have a single value for grayscale images.\")\n    else:\n        if color.numel() != channels:\n            raise ValueError(\"Color tensor must match the number of channels in the image.\")\n\n    # 3. Iterate over each point and set the color\n    for point in points:\n        x, y = point.tolist()\n        if 0 <= x < width and 0 <= y < height:\n            if is_grayscale:\n                image[y, x] = color\n            else:\n                image[:, y, x] = color\n        else:\n            raise ValueError(f\"Point ({x}, {y}) is out of bounds for the image size ({height}, {width}).\")\n\n    # 4. Return the modified image\n    return image\n```\n\n### Explanation:\n\n1. **Determine Image Type**: The function first checks if the image is grayscale or multi-channel by examining the number of dimensions in the tensor.\n\n2. **Validate Color Tensor**: It ensures that the color tensor has the correct number of elements. For grayscale images, the color should be a single value, while for multi-channel images, it should match the number of channels.\n\n3. **Set Points to Color**: The function iterates over each point in the `points` tensor, checks if the point is within the image bounds, and sets the corresponding pixel to the specified color.\n\n4. **Return Modified Image**: Finally, the function returns the modified image tensor with the specified points colored.",
    "prompt": "Write a Python function `draw_point2d` that sets specified `[x, y]` coordinates in an image tensor to a given color. The image can be either grayscale `(H, W)` or multi-channel `(C, H, W)`, and the color tensor must match the image's channels. The function should return the modified image with the points colored.",
    "function_name": "draw_point2d",
    "ground_truth": "kornia/utils/draw.py",
    "test": "tests/utils/test_draw.py::TestDrawPoint",
    "class": "",
    "stage": "Pre-Post processing",
    "task": "Detection",
    "data": "Image"
}