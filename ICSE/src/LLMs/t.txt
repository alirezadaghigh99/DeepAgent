import torch

def get_sobel_kernel_5x5_2nd_order():
    """
    Returns the 5x5 2nd-order Sobel kernel for the second derivative in the x-direction (gxx).
    """
    # Example kernel for second derivative in x-direction
    gxx = torch.tensor([
        [1, 4, 6, 4, 1],
        [2, 8, 12, 8, 2],
        [0, 0, 0, 0, 0],
        [-2, -8, -12, -8, -2],
        [-1, -4, -6, -4, -1]
    ], dtype=torch.float32)
    return gxx

def _get_sobel_kernel_5x5_2nd_order_xy():
    """
    Returns the 5x5 mixed partial derivative Sobel kernel (gxy).
    """
    # Example kernel for mixed partial derivative
    gxy = torch.tensor([
        [1, 2, 0, -2, -1],
        [2, 4, 0, -4, -2],
        [0, 0, 0, 0, 0],
        [-2, -4, 0, 4, 2],
        [-1, -2, 0, 2, 1]
    ], dtype=torch.float32)
    return gxy

def get_sobel_kernel2d_2nd_order(device=None, dtype=None):
    """
    Generates a set of 2nd-order Sobel kernels for edge detection.

    Args:
        device (torch.device, optional): The device where the kernel tensor should be stored.
        dtype (torch.dtype, optional): The data type for the kernel tensor.

    Returns:
        torch.Tensor: A stacked tensor containing the 2nd-order Sobel kernels for the x, xy, and y directions.
    """
    # 1. Obtain the 5x5 2nd-order Sobel kernel for the second derivative in the x-direction (gxx)
    gxx = get_sobel_kernel_5x5_2nd_order()

    # 2. Transpose this kernel to obtain the kernel for the second derivative in the y-direction (gyy)
    gyy = gxx.T

    # 3. Obtain the mixed partial derivative kernel (gxy)
    gxy = _get_sobel_kernel_5x5_2nd_order_xy()

    # 4. Stack the gxx, gxy, and gyy kernels into a single tensor
    kernels = torch.stack([gxx, gxy, gyy], dim=0)

    # 5. Move the tensor to the specified device and dtype if provided
    if device is not None:
        kernels = kernels.to(device)
    if dtype is not None:
        kernels = kernels.to(dtype)

    return kernels

